// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ENTITY_AI_TARGETPREDICATE_HPP
#define NET_MINECRAFT_ENTITY_AI_TARGETPREDICATE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.entity.ai.TargetPredicate
 * Remapped: cef
 */
namespace TargetPredicate {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("cef", "net/minecraft/world/entity/ai/targeting/TargetingConditions", "net/minecraft/class_4051", "net/minecraft/entity/ai/TargetPredicate", "net/minecraft/src/C_780_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.entity.ai.TargetPredicate#DEFAULT
    [[maybe_unused]] static jobject get_field_DEFAULT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "DEFAULT", "field_18092", "DEFAULT", "f_26872_"), "Lcef;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.ai.TargetPredicate#DEFAULT
    [[maybe_unused]] static void set_field_DEFAULT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "DEFAULT", "field_18092", "DEFAULT", "f_26872_"), "Lcef;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.ai.TargetPredicate#MIN_DISTANCE
    [[maybe_unused]] static jdouble get_field_MIN_DISTANCE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "MIN_VISIBILITY_DISTANCE_FOR_INVISIBLE_TARGET", "field_30263", "MIN_DISTANCE", "f_148347_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.TargetPredicate#MIN_DISTANCE
    [[maybe_unused]] static void set_field_MIN_DISTANCE(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "MIN_VISIBILITY_DISTANCE_FOR_INVISIBLE_TARGET", "field_30263", "MIN_DISTANCE", "f_148347_"), "D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.TargetPredicate#attackable
    static jboolean get_field_attackable(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "isCombat", "field_33720", "attackable", "f_148348_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.TargetPredicate#attackable
    static void set_field_attackable(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "isCombat", "field_33720", "attackable", "f_148348_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.TargetPredicate#baseMaxDistance
    static jdouble get_field_baseMaxDistance(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "range", "field_18093", "baseMaxDistance", "f_26873_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.TargetPredicate#baseMaxDistance
    static void set_field_baseMaxDistance(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "range", "field_18093", "baseMaxDistance", "f_26873_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.TargetPredicate#respectsVisibility
    static jboolean get_field_respectsVisibility(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "checkLineOfSight", "field_33721", "respectsVisibility", "f_148349_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.TargetPredicate#respectsVisibility
    static void set_field_respectsVisibility(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "checkLineOfSight", "field_33721", "respectsVisibility", "f_148349_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.TargetPredicate#useDistanceScalingFactor
    static jboolean get_field_useDistanceScalingFactor(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "testInvisible", "field_18098", "useDistanceScalingFactor", "f_26878_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.TargetPredicate#useDistanceScalingFactor
    static void set_field_useDistanceScalingFactor(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "testInvisible", "field_18098", "useDistanceScalingFactor", "f_26878_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.TargetPredicate#predicate
    static jobject get_field_predicate(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "selector", "field_28405", "predicate", "f_26879_"), "Ljava/util/function/Predicate;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.TargetPredicate#predicate
    static void set_field_predicate(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "selector", "field_28405", "predicate", "f_26879_"), "Ljava/util/function/Predicate;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_createAttackable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "forCombat", "method_36625", "createAttackable", "m_148352_"), "()Lcef;");
    }

    static jobject createAttackable() {
       const auto clazz = self();
       const auto methodID = methodID_createAttackable();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_createNonAttackable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "forNonCombat", "method_36626", "createNonAttackable", "m_148353_"), "()Lcef;");
    }

    static jobject createNonAttackable() {
       const auto clazz = self();
       const auto methodID = methodID_createNonAttackable();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_copy() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "copy", "method_33335", "copy", "m_148354_"), "()Lcef;");
    }

    static jobject copy(const jobject& obj) {
                
       const auto methodID = methodID_copy();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_setBaseMaxDistance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "range", "method_18418", "setBaseMaxDistance", "m_26883_"), "(D)Lcef;");
    }

    static jobject setBaseMaxDistance(const jobject& obj, const jdouble& arg0) {
                
       const auto methodID = methodID_setBaseMaxDistance();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_ignoreVisibility() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "ignoreLineOfSight", "method_36627", "ignoreVisibility", "m_148355_"), "()Lcef;");
    }

    static jobject ignoreVisibility(const jobject& obj) {
                
       const auto methodID = methodID_ignoreVisibility();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_ignoreDistanceScalingFactor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "ignoreInvisibilityTesting", "method_18424", "ignoreDistanceScalingFactor", "m_26893_"), "()Lcef;");
    }

    static jobject ignoreDistanceScalingFactor(const jobject& obj) {
                
       const auto methodID = methodID_ignoreDistanceScalingFactor();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_setPredicate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "selector", "method_18420", "setPredicate", "m_26888_"), "(Ljava/util/function/Predicate;)Lcef;");
    }

    static jobject setPredicate(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setPredicate();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_test() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "test", "method_18419", "test", "m_26885_"), "(Lbtn;Lbtn;)Z");
    }

    static jboolean test(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_test();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_ENTITY_AI_TARGETPREDICATE_HPP