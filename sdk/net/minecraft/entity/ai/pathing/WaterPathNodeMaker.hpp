// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ENTITY_AI_PATHING_WATERPATHNODEMAKER_HPP
#define NET_MINECRAFT_ENTITY_AI_PATHING_WATERPATHNODEMAKER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.entity.ai.pathing.WaterPathNodeMaker
 * Remapped: epy
 */
namespace WaterPathNodeMaker {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("epy", "net/minecraft/world/level/pathfinder/SwimNodeEvaluator", "net/minecraft/class_12", "net/minecraft/entity/ai/pathing/WaterPathNodeMaker", "net/minecraft/src/C_2756_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.entity.ai.pathing.WaterPathNodeMaker#canJumpOutOfWater
    static jboolean get_field_canJumpOutOfWater(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "allowBreaching", "field_58", "canJumpOutOfWater", "f_77455_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.pathing.WaterPathNodeMaker#canJumpOutOfWater
    static void set_field_canJumpOutOfWater(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "allowBreaching", "field_58", "canJumpOutOfWater", "f_77455_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.pathing.WaterPathNodeMaker#nodePosToType
    static jobject get_field_nodePosToType(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "pathTypesByPosCache", "field_34767", "nodePosToType", "f_192951_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.pathing.WaterPathNodeMaker#nodePosToType
    static void set_field_nodePosToType(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "pathTypesByPosCache", "field_34767", "nodePosToType", "f_192951_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_init() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "prepare", "method_12", "init", "m_6028_"), "(Lddj;Lbtp;)V");
    }

    static void init(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_init();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_clear() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "done", "method_19", "clear", "m_6802_"), "()V");
    }

    static void clear(const jobject& obj) {
                
       const auto methodID = methodID_clear();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getStart() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getStart", "method_21", "getStart", "m_7171_"), "()Lepq;");
    }

    static jobject getStart(const jobject& obj) {
                
       const auto methodID = methodID_getStart();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getNode() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getTarget", "method_16", "getNode", "m_319819_"), "(DDD)Lepz;");
    }

    static jobject getNode(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID_getNode();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getSuccessors() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getNeighbors", "method_18", "getSuccessors", "m_6065_"), "([Lepq;Lepq;)I");
    }

    static jint getSuccessors(const jobject& obj, const jarray& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_getSuccessors();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_hasNotVisited() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isNodeValid", "method_38487", "hasNotVisited", "m_192961_"), "(Lepq;)Z");
    }

    static jboolean hasNotVisited(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_hasNotVisited();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_hasPenalty() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "hasMalus", "method_57084", "hasPenalty", "m_319460_"), "(Lepq;)Z");
    }

    static jboolean hasPenalty(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_hasPenalty();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getPassableNode() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "findAcceptedNode", "method_47936", "getPassableNode", "m_262844_"), "(III)Lepq;");
    }

    static jobject getPassableNode(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_getPassableNode();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_addPathNodePos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getCachedBlockType", "method_38489", "addPathNodePos", "m_192967_"), "(III)Lepv;");
    }

    static jobject addPathNodePos(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_addPathNodePos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getDefaultNodeType() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getPathType", "method_17", "getDefaultNodeType", "m_320240_"), "(Lepx;III)Lepv;");
    }

    static jobject getDefaultNodeType(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2, const jint& arg3) {
                
       const auto methodID = methodID_getDefaultNodeType();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_getNodeType() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getPathTypeOfMob", "method_25", "getNodeType", "m_319854_"), "(Lepx;IIILbtp;)Lepv;");
    }

    static jobject getNodeType(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2, const jint& arg3, const jobject& arg4) {
                
       const auto methodID = methodID_getNodeType();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
};

#endif // NET_MINECRAFT_ENTITY_AI_PATHING_WATERPATHNODEMAKER_HPP