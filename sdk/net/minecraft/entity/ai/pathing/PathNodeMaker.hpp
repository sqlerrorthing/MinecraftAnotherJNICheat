// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ENTITY_AI_PATHING_PATHNODEMAKER_HPP
#define NET_MINECRAFT_ENTITY_AI_PATHING_PATHNODEMAKER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.entity.ai.pathing.PathNodeMaker
 * Remapped: epr
 */
namespace PathNodeMaker {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("epr", "net/minecraft/world/level/pathfinder/NodeEvaluator", "net/minecraft/class_8", "net/minecraft/entity/ai/pathing/PathNodeMaker", "net/minecraft/src/C_2752_"));
        }
        return cachedClass;
    };

    // getter for protected field net.minecraft.entity.ai.pathing.PathNodeMaker#context
    static jobject get_field_context(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "currentContext", "field_49416", "context", "f_314620_"), "Lepx;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.entity.ai.pathing.PathNodeMaker#context
    static void set_field_context(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "currentContext", "field_49416", "context", "f_314620_"), "Lepx;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.entity.ai.pathing.PathNodeMaker#entity
    static jobject get_field_entity(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "mob", "field_33", "entity", "f_77313_"), "Lbtp;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.entity.ai.pathing.PathNodeMaker#entity
    static void set_field_entity(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "mob", "field_33", "entity", "f_77313_"), "Lbtp;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.entity.ai.pathing.PathNodeMaker#pathNodeCache
    static jobject get_field_pathNodeCache(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "nodes", "field_32", "pathNodeCache", "f_77314_"), "Lit/unimi/dsi/fastutil/ints/Int2ObjectMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.entity.ai.pathing.PathNodeMaker#pathNodeCache
    static void set_field_pathNodeCache(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "nodes", "field_32", "pathNodeCache", "f_77314_"), "Lit/unimi/dsi/fastutil/ints/Int2ObjectMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.entity.ai.pathing.PathNodeMaker#entityBlockXSize
    static jint get_field_entityBlockXSize(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "entityWidth", "field_31", "entityBlockXSize", "f_77315_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.entity.ai.pathing.PathNodeMaker#entityBlockXSize
    static void set_field_entityBlockXSize(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "entityWidth", "field_31", "entityBlockXSize", "f_77315_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.entity.ai.pathing.PathNodeMaker#entityBlockYSize
    static jint get_field_entityBlockYSize(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "entityHeight", "field_30", "entityBlockYSize", "f_77316_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.entity.ai.pathing.PathNodeMaker#entityBlockYSize
    static void set_field_entityBlockYSize(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "entityHeight", "field_30", "entityBlockYSize", "f_77316_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.entity.ai.pathing.PathNodeMaker#entityBlockZSize
    static jint get_field_entityBlockZSize(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "entityDepth", "field_28", "entityBlockZSize", "f_77317_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.entity.ai.pathing.PathNodeMaker#entityBlockZSize
    static void set_field_entityBlockZSize(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "entityDepth", "field_28", "entityBlockZSize", "f_77317_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.entity.ai.pathing.PathNodeMaker#canEnterOpenDoors
    static jboolean get_field_canEnterOpenDoors(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "canPassDoors", "field_29", "canEnterOpenDoors", "f_77318_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.entity.ai.pathing.PathNodeMaker#canEnterOpenDoors
    static void set_field_canEnterOpenDoors(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "canPassDoors", "field_29", "canEnterOpenDoors", "f_77318_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.entity.ai.pathing.PathNodeMaker#canOpenDoors
    static jboolean get_field_canOpenDoors(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "canOpenDoors", "field_27", "canOpenDoors", "f_77319_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.entity.ai.pathing.PathNodeMaker#canOpenDoors
    static void set_field_canOpenDoors(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "canOpenDoors", "field_27", "canOpenDoors", "f_77319_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.entity.ai.pathing.PathNodeMaker#canSwim
    static jboolean get_field_canSwim(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "canFloat", "field_25", "canSwim", "f_77320_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.entity.ai.pathing.PathNodeMaker#canSwim
    static void set_field_canSwim(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "canFloat", "field_25", "canSwim", "f_77320_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.entity.ai.pathing.PathNodeMaker#canWalkOverFences
    static jboolean get_field_canWalkOverFences(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "canWalkOverFences", "field_40927", "canWalkOverFences", "f_254713_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.entity.ai.pathing.PathNodeMaker#canWalkOverFences
    static void set_field_canWalkOverFences(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "canWalkOverFences", "field_40927", "canWalkOverFences", "f_254713_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    static jmethodID methodID_init() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "prepare", "method_12", "init", "m_6028_"), "(Lddj;Lbtp;)V");
    }

    static void init(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_init();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_clear() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "done", "method_19", "clear", "m_6802_"), "()V");
    }

    static void clear(const jobject& obj) {
                
       const auto methodID = methodID_clear();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getNode() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getNode", "method_27137", "getNode", "m_77349_"), "(Ljd;)Lepq;");
    }

    static jobject getNode(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getNode();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__getNode() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getNode", "method_13", "getNode", "m_5676_"), "(III)Lepq;");
    }

    static jobject _getNode(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID__getNode();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getStart() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getStart", "method_21", "getStart", "m_7171_"), "()Lepq;");
    }

    static jobject getStart(const jobject& obj) {
                
       const auto methodID = methodID_getStart();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID___getNode() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getTarget", "method_16", "getNode", "m_319819_"), "(DDD)Lepz;");
    }

    static jobject __getNode(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID___getNode();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_createNode() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getTargetNodeAt", "method_57083", "createNode", "m_322518_"), "(DDD)Lepz;");
    }

    static jobject createNode(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID_createNode();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getSuccessors() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getNeighbors", "method_18", "getSuccessors", "m_6065_"), "([Lepq;Lepq;)I");
    }

    static jint getSuccessors(const jobject& obj, const jarray& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_getSuccessors();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getNodeType() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getPathTypeOfMob", "method_25", "getNodeType", "m_319854_"), "(Lepx;IIILbtp;)Lepv;");
    }

    static jobject getNodeType(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2, const jint& arg3, const jobject& arg4) {
                
       const auto methodID = methodID_getNodeType();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_getDefaultNodeType() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getPathType", "method_17", "getDefaultNodeType", "m_320240_"), "(Lepx;III)Lepv;");
    }

    static jobject getDefaultNodeType(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2, const jint& arg3) {
                
       const auto methodID = methodID_getDefaultNodeType();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID__getDefaultNodeType() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getPathType", "method_57615", "getDefaultNodeType", "m_319718_"), "(Lbtp;Ljd;)Lepv;");
    }

    static jobject _getDefaultNodeType(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID__getDefaultNodeType();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_setCanEnterOpenDoors() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setCanPassDoors", "method_15", "setCanEnterOpenDoors", "m_77351_"), "(Z)V");
    }

    static void setCanEnterOpenDoors(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setCanEnterOpenDoors();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setCanOpenDoors() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setCanOpenDoors", "method_20", "setCanOpenDoors", "m_77355_"), "(Z)V");
    }

    static void setCanOpenDoors(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setCanOpenDoors();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setCanSwim() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "setCanFloat", "method_14", "setCanSwim", "m_77358_"), "(Z)V");
    }

    static void setCanSwim(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setCanSwim();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setCanWalkOverFences() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "setCanWalkOverFences", "method_46737", "setCanWalkOverFences", "m_254850_"), "(Z)V");
    }

    static void setCanWalkOverFences(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setCanWalkOverFences();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__canEnterOpenDoors() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "canPassDoors", "method_23", "canEnterOpenDoors", "m_77357_"), "()Z");
    }

    static jboolean _canEnterOpenDoors(const jobject& obj) {
                
       const auto methodID = methodID__canEnterOpenDoors();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID__canOpenDoors() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "canOpenDoors", "method_24", "canOpenDoors", "m_77360_"), "()Z");
    }

    static jboolean _canOpenDoors(const jobject& obj) {
                
       const auto methodID = methodID__canOpenDoors();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID__canSwim() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "canFloat", "method_22", "canSwim", "m_77361_"), "()Z");
    }

    static jboolean _canSwim(const jobject& obj) {
                
       const auto methodID = methodID__canSwim();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID__canWalkOverFences() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "canWalkOverFences", "method_46738", "canWalkOverFences", "m_255100_"), "()Z");
    }

    static jboolean _canWalkOverFences(const jobject& obj) {
                
       const auto methodID = methodID__canWalkOverFences();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isFireDamaging() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "isBurningBlock", "method_57082", "isFireDamaging", "m_321676_"), "(Ldtc;)Z");
    }

    static jboolean isFireDamaging(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_isFireDamaging();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_ENTITY_AI_PATHING_PATHNODEMAKER_HPP