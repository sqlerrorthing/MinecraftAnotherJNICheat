// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ENTITY_AI_PATHING_BIRDPATHNODEMAKER_HPP
#define NET_MINECRAFT_ENTITY_AI_PATHING_BIRDPATHNODEMAKER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.entity.ai.pathing.BirdPathNodeMaker
 * Remapped: epp
 */
namespace BirdPathNodeMaker {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("epp", "net/minecraft/world/level/pathfinder/FlyNodeEvaluator", "net/minecraft/class_6", "net/minecraft/entity/ai/pathing/BirdPathNodeMaker", "net/minecraft/src/C_2750_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.entity.ai.pathing.BirdPathNodeMaker#pathNodes
    static jobject get_field_pathNodes(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "pathTypeByPosCache", "field_27341", "pathNodes", "f_164687_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.pathing.BirdPathNodeMaker#pathNodes
    static void set_field_pathNodes(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "pathTypeByPosCache", "field_27341", "pathNodes", "f_164687_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.ai.pathing.BirdPathNodeMaker#field_49843
    [[maybe_unused]] static jfloat get_field_field_49843() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "SMALL_MOB_SIZE", "field_49843", "field_49843", "f_317136_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.pathing.BirdPathNodeMaker#field_49843
    [[maybe_unused]] static void set_field_field_49843(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "SMALL_MOB_SIZE", "field_49843", "field_49843", "f_317136_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.ai.pathing.BirdPathNodeMaker#field_41681
    [[maybe_unused]] static jfloat get_field_field_41681() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "SMALL_MOB_INFLATED_START_NODE_BOUNDING_BOX", "field_41681", "field_41681", "f_262722_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.pathing.BirdPathNodeMaker#field_41681
    [[maybe_unused]] static void set_field_field_41681(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "SMALL_MOB_INFLATED_START_NODE_BOUNDING_BOX", "field_41681", "field_41681", "f_262722_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.ai.pathing.BirdPathNodeMaker#field_41682
    [[maybe_unused]] static jint get_field_field_41682() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "MAX_START_NODE_CANDIDATES", "field_41682", "field_41682", "f_262734_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.pathing.BirdPathNodeMaker#field_41682
    [[maybe_unused]] static void set_field_field_41682(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "MAX_START_NODE_CANDIDATES", "field_41682", "field_41682", "f_262734_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    static jmethodID methodID_init() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "prepare", "method_12", "init", "m_6028_"), "(Lddj;Lbtp;)V");
    }

    static void init(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_init();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_clear() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "done", "method_19", "clear", "m_6802_"), "()V");
    }

    static void clear(const jobject& obj) {
                
       const auto methodID = methodID_clear();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getStart() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getStart", "method_21", "getStart", "m_7171_"), "()Lepq;");
    }

    static jobject getStart(const jobject& obj) {
                
       const auto methodID = methodID_getStart();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_canPathThrough() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "canStartAt", "method_47893", "canPathThrough", "m_262494_"), "(Ljd;)Z");
    }

    static jboolean canPathThrough(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_canPathThrough();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getNode() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getTarget", "method_16", "getNode", "m_319819_"), "(DDD)Lepz;");
    }

    static jobject getNode(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID_getNode();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getSuccessors() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getNeighbors", "method_18", "getSuccessors", "m_6065_"), "([Lepq;Lepq;)I");
    }

    static jint getSuccessors(const jobject& obj, const jarray& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_getSuccessors();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_isPassable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "hasMalus", "method_22877", "isPassable", "m_77263_"), "(Lepq;)Z");
    }

    static jboolean isPassable(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isPassable();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_unvisited() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "isOpen", "method_22878", "unvisited", "m_77269_"), "(Lepq;)Z");
    }

    static jboolean unvisited(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_unvisited();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getPassableNode() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "findAcceptedNode", "method_47933", "getPassableNode", "m_262834_"), "(III)Lepq;");
    }

    static jobject getPassableNode(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_getPassableNode();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getNodeType() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getCachedPathType", "method_31932", "getNodeType", "m_321558_"), "(III)Lepv;");
    }

    static jobject getNodeType(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_getNodeType();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getDefaultNodeType() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getPathType", "method_17", "getDefaultNodeType", "m_320240_"), "(Lepx;III)Lepv;");
    }

    static jobject getDefaultNodeType(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2, const jint& arg3) {
                
       const auto methodID = methodID_getDefaultNodeType();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_getPotentialEscapePositions() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "iteratePathfindingStartNodeCandidatePositions", "method_47934", "getPotentialEscapePositions", "m_262869_"), "(Lbtp;)Ljava/lang/Iterable;");
    }

    static jobject getPotentialEscapePositions(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getPotentialEscapePositions();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_ENTITY_AI_PATHING_BIRDPATHNODEMAKER_HPP