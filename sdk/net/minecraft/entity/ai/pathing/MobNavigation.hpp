// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ENTITY_AI_PATHING_MOBNAVIGATION_HPP
#define NET_MINECRAFT_ENTITY_AI_PATHING_MOBNAVIGATION_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.entity.ai.pathing.MobNavigation
 * Remapped: ccz
 */
namespace MobNavigation {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("ccz", "net/minecraft/world/entity/ai/navigation/GroundPathNavigation", "net/minecraft/class_1409", "net/minecraft/entity/ai/pathing/MobNavigation", "net/minecraft/src/C_757_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.entity.ai.pathing.MobNavigation#avoidSunlight
    static jboolean get_field_avoidSunlight(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "avoidSun", "field_6686", "avoidSunlight", "f_26446_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.pathing.MobNavigation#avoidSunlight
    static void set_field_avoidSunlight(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "avoidSun", "field_6686", "avoidSunlight", "f_26446_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    static jmethodID methodID_createPathNodeNavigator() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "createPathFinder", "method_6336", "createPathNodeNavigator", "m_5532_"), "(I)Lepu;");
    }

    static jobject createPathNodeNavigator(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_createPathNodeNavigator();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isAtValidPosition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "canUpdatePath", "method_6358", "isAtValidPosition", "m_7632_"), "()Z");
    }

    static jboolean isAtValidPosition(const jobject& obj) {
                
       const auto methodID = methodID_isAtValidPosition();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getTempMobPos", "method_6347", "getPos", "m_7475_"), "()Lexc;");
    }

    static jobject getPos(const jobject& obj) {
                
       const auto methodID = methodID_getPos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_findPathTo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "createPath", "method_6348", "findPathTo", "m_7864_"), "(Ljd;I)Leps;");
    }

    static jobject findPathTo(const jobject& obj, const jobject& arg0, const jint& arg1) {
                
       const auto methodID = methodID_findPathTo();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__findPathTo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "createPath", "method_6349", "findPathTo", "m_6570_"), "(Lbsr;I)Leps;");
    }

    static jobject _findPathTo(const jobject& obj, const jobject& arg0, const jint& arg1) {
                
       const auto methodID = methodID__findPathTo();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getPathfindingY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("s", "getSurfaceY", "method_6362", "getPathfindingY", "m_26493_"), "()I");
    }

    static jint getPathfindingY(const jobject& obj) {
                
       const auto methodID = methodID_getPathfindingY();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_adjustPath() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("W_", "trimPath", "method_6359", "adjustPath", "m_6804_"), "()V");
    }

    static void adjustPath(const jobject& obj) {
                
       const auto methodID = methodID_adjustPath();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_canWalkOnPath() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "hasValidPathType", "method_26338", "canWalkOnPath", "m_7367_"), "(Lepv;)Z");
    }

    static jboolean canWalkOnPath(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_canWalkOnPath();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setCanPathThroughDoors() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setCanOpenDoors", "method_6363", "setCanPathThroughDoors", "m_26477_"), "(Z)V");
    }

    static void setCanPathThroughDoors(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setCanPathThroughDoors();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_method_35140() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "canPassDoors", "method_35140", "method_35140", "m_148216_"), "()Z");
    }

    static jboolean method_35140(const jobject& obj) {
                
       const auto methodID = methodID_method_35140();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setCanEnterOpenDoors() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "setCanPassDoors", "method_35139", "setCanEnterOpenDoors", "m_148214_"), "(Z)V");
    }

    static void setCanEnterOpenDoors(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setCanEnterOpenDoors();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_canEnterOpenDoors() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "canOpenDoors", "method_6366", "canEnterOpenDoors", "m_26492_"), "()Z");
    }

    static jboolean canEnterOpenDoors(const jobject& obj) {
                
       const auto methodID = methodID_canEnterOpenDoors();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setAvoidSunlight() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "setAvoidSun", "method_6361", "setAvoidSunlight", "m_26490_"), "(Z)V");
    }

    static void setAvoidSunlight(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setAvoidSunlight();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setCanWalkOverFences() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "setCanWalkOverFences", "method_46645", "setCanWalkOverFences", "m_255224_"), "(Z)V");
    }

    static void setCanWalkOverFences(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setCanWalkOverFences();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_ENTITY_AI_PATHING_MOBNAVIGATION_HPP