// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ENTITY_AI_PATHING_SWIMNAVIGATION_HPP
#define NET_MINECRAFT_ENTITY_AI_PATHING_SWIMNAVIGATION_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.entity.ai.pathing.SwimNavigation
 * Remapped: cdc
 */
namespace SwimNavigation {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("cdc", "net/minecraft/world/entity/ai/navigation/WaterBoundPathNavigation", "net/minecraft/class_1412", "net/minecraft/entity/ai/pathing/SwimNavigation", "net/minecraft/src/C_760_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.entity.ai.pathing.SwimNavigation#canJumpOutOfWater
    static jboolean get_field_canJumpOutOfWater(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "allowBreaching", "field_6689", "canJumpOutOfWater", "f_26592_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.pathing.SwimNavigation#canJumpOutOfWater
    static void set_field_canJumpOutOfWater(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "allowBreaching", "field_6689", "canJumpOutOfWater", "f_26592_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    static jmethodID methodID_createPathNodeNavigator() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "createPathFinder", "method_6336", "createPathNodeNavigator", "m_5532_"), "(I)Lepu;");
    }

    static jobject createPathNodeNavigator(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_createPathNodeNavigator();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isAtValidPosition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "canUpdatePath", "method_6358", "isAtValidPosition", "m_7632_"), "()Z");
    }

    static jboolean isAtValidPosition(const jobject& obj) {
                
       const auto methodID = methodID_isAtValidPosition();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getTempMobPos", "method_6347", "getPos", "m_7475_"), "()Lexc;");
    }

    static jobject getPos(const jobject& obj) {
                
       const auto methodID = methodID_getPos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_adjustTargetY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getGroundY", "method_38065", "adjustTargetY", "m_183345_"), "(Lexc;)D");
    }

    static jdouble adjustTargetY(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_adjustTargetY();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_canPathDirectlyThrough() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "canMoveDirectly", "method_6341", "canPathDirectlyThrough", "m_183431_"), "(Lexc;Lexc;)Z");
    }

    static jboolean canPathDirectlyThrough(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_canPathDirectlyThrough();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isValidPosition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isStableDestination", "method_6333", "isValidPosition", "m_6342_"), "(Ljd;)Z");
    }

    static jboolean isValidPosition(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isValidPosition();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setCanSwim() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setCanFloat", "method_6354", "setCanSwim", "m_7008_"), "(Z)V");
    }

    static void setCanSwim(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setCanSwim();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_ENTITY_AI_PATHING_SWIMNAVIGATION_HPP