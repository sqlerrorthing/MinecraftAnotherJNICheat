// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ENTITY_AI_PATHING_LANDPATHNODEMAKER_HPP
#define NET_MINECRAFT_ENTITY_AI_PATHING_LANDPATHNODEMAKER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.entity.ai.pathing.LandPathNodeMaker
 * Remapped: eqa
 */
namespace LandPathNodeMaker {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("eqa", "net/minecraft/world/level/pathfinder/WalkNodeEvaluator", "net/minecraft/class_14", "net/minecraft/entity/ai/pathing/LandPathNodeMaker", "net/minecraft/src/C_2759_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.entity.ai.pathing.LandPathNodeMaker#Y_OFFSET
    [[maybe_unused]] static jdouble get_field_Y_OFFSET() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "SPACE_BETWEEN_WALL_POSTS", "field_31809", "Y_OFFSET", "f_164724_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.ai.pathing.LandPathNodeMaker#Y_OFFSET
    [[maybe_unused]] static void set_field_Y_OFFSET(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "SPACE_BETWEEN_WALL_POSTS", "field_31809", "Y_OFFSET", "f_164724_"), "D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.ai.pathing.LandPathNodeMaker#MIN_STEP_HEIGHT
    [[maybe_unused]] static jdouble get_field_MIN_STEP_HEIGHT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "DEFAULT_MOB_JUMP_HEIGHT", "field_40928", "MIN_STEP_HEIGHT", "f_254631_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.pathing.LandPathNodeMaker#MIN_STEP_HEIGHT
    [[maybe_unused]] static void set_field_MIN_STEP_HEIGHT(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "DEFAULT_MOB_JUMP_HEIGHT", "field_40928", "MIN_STEP_HEIGHT", "f_254631_"), "D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.pathing.LandPathNodeMaker#nodeTypes
    static jobject get_field_nodeTypes(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "pathTypesByPosCacheByMob", "field_49156", "nodeTypes", "f_315292_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.pathing.LandPathNodeMaker#nodeTypes
    static void set_field_nodeTypes(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "pathTypesByPosCacheByMob", "field_49156", "nodeTypes", "f_315292_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.pathing.LandPathNodeMaker#collidedBoxes
    static jobject get_field_collidedBoxes(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "collisionCache", "field_25191", "collidedBoxes", "f_77546_"), "Lit/unimi/dsi/fastutil/objects/Object2BooleanMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.pathing.LandPathNodeMaker#collidedBoxes
    static void set_field_collidedBoxes(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "collisionCache", "field_25191", "collidedBoxes", "f_77546_"), "Lit/unimi/dsi/fastutil/objects/Object2BooleanMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.pathing.LandPathNodeMaker#successors
    static jobject get_field_successors(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "reusableNeighbors", "field_49157", "successors", "f_313986_"), "[Lepq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.pathing.LandPathNodeMaker#successors
    static void set_field_successors(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "reusableNeighbors", "field_49157", "successors", "f_313986_"), "[Lepq;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_init() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "prepare", "method_12", "init", "m_6028_"), "(Lddj;Lbtp;)V");
    }

    static void init(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_init();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_clear() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "done", "method_19", "clear", "m_6802_"), "()V");
    }

    static void clear(const jobject& obj) {
                
       const auto methodID = methodID_clear();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getStart() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getStart", "method_21", "getStart", "m_7171_"), "()Lepq;");
    }

    static jobject getStart(const jobject& obj) {
                
       const auto methodID = methodID_getStart();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__getStart() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getStartNode", "method_43415", "getStart", "m_230631_"), "(Ljd;)Lepq;");
    }

    static jobject _getStart(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__getStart();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_canPathThrough() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "canStartAt", "method_47893", "canPathThrough", "m_262494_"), "(Ljd;)Z");
    }

    static jboolean canPathThrough(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_canPathThrough();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getNode() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getTarget", "method_16", "getNode", "m_319819_"), "(DDD)Lepz;");
    }

    static jobject getNode(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID_getNode();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getSuccessors() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getNeighbors", "method_18", "getSuccessors", "m_6065_"), "([Lepq;Lepq;)I");
    }

    static jint getSuccessors(const jobject& obj, const jarray& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_getSuccessors();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_isValidAdjacentSuccessor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isNeighborValid", "method_20536", "isValidAdjacentSuccessor", "m_77626_"), "(Lepq;Lepq;)Z");
    }

    static jboolean isValidAdjacentSuccessor(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_isValidAdjacentSuccessor();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isValidDiagonalSuccessor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isDiagonalValid", "method_29579", "isValidDiagonalSuccessor", "m_77629_"), "(Lepq;Lepq;Lepq;)Z");
    }

    static jboolean isValidDiagonalSuccessor(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_isValidDiagonalSuccessor();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__isValidDiagonalSuccessor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isDiagonalValid", "method_57089", "isValidDiagonalSuccessor", "m_321731_"), "(Lepq;)Z");
    }

    static jboolean _isValidDiagonalSuccessor(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__isValidDiagonalSuccessor();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isBlocked() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "doesBlockHavePartialCollision", "method_43414", "isBlocked", "m_230625_"), "(Lepv;)Z");
    }

    static jboolean isBlocked(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_isBlocked();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID__isBlocked() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "canReachWithoutCollision", "method_29578", "isBlocked", "m_77624_"), "(Lepq;)Z");
    }

    static jboolean _isBlocked(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__isBlocked();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getFeetY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getFloorLevel", "method_37003", "getFeetY", "m_142213_"), "(Ljd;)D");
    }

    static jdouble getFeetY(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getFeetY();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__getFeetY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getFloorLevel", "method_60", "getFeetY", "m_77611_"), "(Ldcc;Ljd;)D");
    }

    static jdouble _getFeetY(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID__getFeetY();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isAmphibious() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "isAmphibious", "method_37004", "isAmphibious", "m_141974_"), "()Z");
    }

    static jboolean isAmphibious(const jobject& obj) {
                
       const auto methodID = methodID_isAmphibious();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getPathNode() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "findAcceptedNode", "method_62", "getPathNode", "m_164725_"), "(IIIIDLji;Lepv;)Lepq;");
    }

    static jobject getPathNode(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2, const jint& arg3, const jdouble& arg4, const jobject& arg5, const jobject& arg6) {
                
       const auto methodID = methodID_getPathNode();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    };
    
    static jmethodID methodID_getStepHeight() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "getMobJumpHeight", "method_46739", "getStepHeight", "m_255203_"), "()D");
    }

    static jdouble getStepHeight(const jobject& obj) {
                
       const auto methodID = methodID_getStepHeight();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_getNodeWith() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getNodeAndUpdateCostToMax", "method_43569", "getNodeWith", "m_230619_"), "(IIILepv;F)Lepq;");
    }

    static jobject getNodeWith(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2, const jobject& arg3, const jfloat& arg4) {
                
       const auto methodID = methodID_getNodeWith();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_getBlockedNode() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getBlockedNode", "method_43570", "getBlockedNode", "m_230627_"), "(III)Lepq;");
    }

    static jobject getBlockedNode(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_getBlockedNode();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__getNodeWith() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getClosedNode", "method_57088", "getNodeWith", "m_321803_"), "(IIILepv;)Lepq;");
    }

    static jobject _getNodeWith(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2, const jobject& arg3) {
                
       const auto methodID = methodID__getNodeWith();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_getJumpOnTopNode() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "tryJumpOn", "method_57085", "getJumpOnTopNode", "m_324533_"), "(IIIIDLji;Lepv;Ljd$a;)Lepq;");
    }

    static jobject getJumpOnTopNode(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2, const jint& arg3, const jdouble& arg4, const jobject& arg5, const jobject& arg6, const jobject& arg7) {
                
       const auto methodID = methodID_getJumpOnTopNode();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    };
    
    static jmethodID methodID_getNonWaterNodeBelow() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "tryFindFirstNonWaterBelow", "method_57087", "getNonWaterNodeBelow", "m_324617_"), "(IIILepq;)Lepq;");
    }

    static jobject getNonWaterNodeBelow(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_getNonWaterNodeBelow();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_getOpenNode() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "tryFindFirstGroundNodeBelow", "method_57091", "getOpenNode", "m_322432_"), "(III)Lepq;");
    }

    static jobject getOpenNode(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_getOpenNode();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_checkBoxCollision() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "hasCollisions", "method_29304", "checkBoxCollision", "m_77634_"), "(Lewx;)Z");
    }

    static jboolean checkBoxCollision(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_checkBoxCollision();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getNodeType() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getCachedPathType", "method_31932", "getNodeType", "m_321558_"), "(III)Lepv;");
    }

    static jobject getNodeType(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_getNodeType();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__getNodeType() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getPathTypeOfMob", "method_25", "getNodeType", "m_319854_"), "(Lepx;IIILbtp;)Lepv;");
    }

    static jobject _getNodeType(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2, const jint& arg3, const jobject& arg4) {
                
       const auto methodID = methodID__getNodeType();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_getCollidingNodeTypes() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getPathTypeWithinMobBB", "method_57090", "getCollidingNodeTypes", "m_320358_"), "(Lepx;III)Ljava/util/Set;");
    }

    static jobject getCollidingNodeTypes(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2, const jint& arg3) {
                
       const auto methodID = methodID_getCollidingNodeTypes();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_getDefaultNodeType() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getPathType", "method_17", "getDefaultNodeType", "m_320240_"), "(Lepx;III)Lepv;");
    }

    static jobject getDefaultNodeType(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2, const jint& arg3) {
                
       const auto methodID = methodID_getDefaultNodeType();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_getLandNodeType() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "getPathTypeStatic", "method_57625", "getLandNodeType", "m_324593_"), "(Lbtp;Ljd;)Lepv;");
    }

    static jobject getLandNodeType(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_getLandNodeType();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__getLandNodeType() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getPathTypeStatic", "method_23476", "getLandNodeType", "m_324107_"), "(Lepx;Ljd$a;)Lepv;");
    }

    static jobject _getLandNodeType(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID__getLandNodeType();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getNodeTypeFromNeighbors() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "checkNeighbourBlocks", "method_59", "getNodeTypeFromNeighbors", "m_77607_"), "(Lepx;IIILepv;)Lepv;");
    }

    static jobject getNodeTypeFromNeighbors(const jobject& arg0, const jint& arg1, const jint& arg2, const jint& arg3, const jobject& arg4) {
       const auto clazz = self();
       const auto methodID = methodID_getNodeTypeFromNeighbors();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_getCommonNodeType() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "getPathTypeFromState", "method_58", "getCommonNodeType", "m_324497_"), "(Ldcc;Ljd;)Lepv;");
    }

    static jobject getCommonNodeType(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_getCommonNodeType();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_ENTITY_AI_PATHING_LANDPATHNODEMAKER_HPP