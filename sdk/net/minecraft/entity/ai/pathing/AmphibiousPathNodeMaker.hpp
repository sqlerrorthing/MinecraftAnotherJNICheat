// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ENTITY_AI_PATHING_AMPHIBIOUSPATHNODEMAKER_HPP
#define NET_MINECRAFT_ENTITY_AI_PATHING_AMPHIBIOUSPATHNODEMAKER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.entity.ai.pathing.AmphibiousPathNodeMaker
 * Remapped: epn
 */
namespace AmphibiousPathNodeMaker {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("epn", "net/minecraft/world/level/pathfinder/AmphibiousNodeEvaluator", "net/minecraft/class_15", "net/minecraft/entity/ai/pathing/AmphibiousPathNodeMaker", "net/minecraft/src/C_141446_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.entity.ai.pathing.AmphibiousPathNodeMaker#penalizeDeepWater
    static jboolean get_field_penalizeDeepWater(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "prefersShallowSwimming", "field_28358", "penalizeDeepWater", "f_164655_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.pathing.AmphibiousPathNodeMaker#penalizeDeepWater
    static void set_field_penalizeDeepWater(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "prefersShallowSwimming", "field_28358", "penalizeDeepWater", "f_164655_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.pathing.AmphibiousPathNodeMaker#oldWalkablePenalty
    static jfloat get_field_oldWalkablePenalty(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "oldWalkableCost", "field_65", "oldWalkablePenalty", "f_164656_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.pathing.AmphibiousPathNodeMaker#oldWalkablePenalty
    static void set_field_oldWalkablePenalty(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "oldWalkableCost", "field_65", "oldWalkablePenalty", "f_164656_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.pathing.AmphibiousPathNodeMaker#oldWaterBorderPenalty
    static jfloat get_field_oldWaterBorderPenalty(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "oldWaterBorderCost", "field_64", "oldWaterBorderPenalty", "f_164657_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.pathing.AmphibiousPathNodeMaker#oldWaterBorderPenalty
    static void set_field_oldWaterBorderPenalty(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "oldWaterBorderCost", "field_64", "oldWaterBorderPenalty", "f_164657_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    static jmethodID methodID_init() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "prepare", "method_12", "init", "m_6028_"), "(Lddj;Lbtp;)V");
    }

    static void init(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_init();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_clear() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "done", "method_19", "clear", "m_6802_"), "()V");
    }

    static void clear(const jobject& obj) {
                
       const auto methodID = methodID_clear();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getStart() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getStart", "method_21", "getStart", "m_7171_"), "()Lepq;");
    }

    static jobject getStart(const jobject& obj) {
                
       const auto methodID = methodID_getStart();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getNode() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getTarget", "method_16", "getNode", "m_319819_"), "(DDD)Lepz;");
    }

    static jobject getNode(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID_getNode();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getSuccessors() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getNeighbors", "method_18", "getSuccessors", "m_6065_"), "([Lepq;Lepq;)I");
    }

    static jint getSuccessors(const jobject& obj, const jarray& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_getSuccessors();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_isValidAquaticAdjacentSuccessor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "isVerticalNeighborValid", "method_43413", "isValidAquaticAdjacentSuccessor", "m_230610_"), "(Lepq;Lepq;)Z");
    }

    static jboolean isValidAquaticAdjacentSuccessor(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_isValidAquaticAdjacentSuccessor();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isAmphibious() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "isAmphibious", "method_37004", "isAmphibious", "m_141974_"), "()Z");
    }

    static jboolean isAmphibious(const jobject& obj) {
                
       const auto methodID = methodID_isAmphibious();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getDefaultNodeType() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getPathType", "method_17", "getDefaultNodeType", "m_320240_"), "(Lepx;III)Lepv;");
    }

    static jobject getDefaultNodeType(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2, const jint& arg3) {
                
       const auto methodID = methodID_getDefaultNodeType();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
};

#endif // NET_MINECRAFT_ENTITY_AI_PATHING_AMPHIBIOUSPATHNODEMAKER_HPP