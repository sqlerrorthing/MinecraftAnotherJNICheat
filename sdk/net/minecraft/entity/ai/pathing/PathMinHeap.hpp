// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ENTITY_AI_PATHING_PATHMINHEAP_HPP
#define NET_MINECRAFT_ENTITY_AI_PATHING_PATHMINHEAP_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.entity.ai.pathing.PathMinHeap
 * Remapped: epo
 */
namespace PathMinHeap {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("epo", "net/minecraft/world/level/pathfinder/BinaryHeap", "net/minecraft/class_5", "net/minecraft/entity/ai/pathing/PathMinHeap", "net/minecraft/src/C_2747_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.entity.ai.pathing.PathMinHeap#pathNodes
    static jobject get_field_pathNodes(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "heap", "field_1", "pathNodes", "f_77078_"), "[Lepq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.pathing.PathMinHeap#pathNodes
    static void set_field_pathNodes(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "heap", "field_1", "pathNodes", "f_77078_"), "[Lepq;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.pathing.PathMinHeap#count
    static jint get_field_count(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "size", "field_2", "count", "f_77079_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.pathing.PathMinHeap#count
    static void set_field_count(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "size", "field_2", "count", "f_77079_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    static jmethodID methodID_push() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "insert", "method_2", "push", "m_77084_"), "(Lepq;)Lepq;");
    }

    static jobject push(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_push();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_clear() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "clear", "method_5", "clear", "m_77081_"), "()V");
    }

    static void clear(const jobject& obj) {
                
       const auto methodID = methodID_clear();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getStart() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "peek", "method_35490", "getStart", "m_164680_"), "()Lepq;");
    }

    static jobject getStart(const jobject& obj) {
                
       const auto methodID = methodID_getStart();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_pop() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "pop", "method_6", "pop", "m_77091_"), "()Lepq;");
    }

    static jobject pop(const jobject& obj) {
                
       const auto methodID = methodID_pop();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_popNode() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "remove", "method_35491", "popNode", "m_164681_"), "(Lepq;)V");
    }

    static void popNode(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_popNode();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setNodeWeight() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "changeCost", "method_3", "setNodeWeight", "m_77086_"), "(Lepq;F)V");
    }

    static void setNodeWeight(const jobject& obj, const jobject& arg0, const jfloat& arg1) {
                
       const auto methodID = methodID_setNodeWeight();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "size", "method_35492", "getCount", "m_164683_"), "()I");
    }

    static jint getCount(const jobject& obj) {
                
       const auto methodID = methodID_getCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_shiftUp() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "upHeap", "method_4", "shiftUp", "m_77082_"), "(I)V");
    }

    static void shiftUp(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_shiftUp();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_shiftDown() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "downHeap", "method_7", "shiftDown", "m_77089_"), "(I)V");
    }

    static void shiftDown(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_shiftDown();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isEmpty() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "isEmpty", "method_8", "isEmpty", "m_77092_"), "()Z");
    }

    static jboolean isEmpty(const jobject& obj) {
                
       const auto methodID = methodID_isEmpty();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getNodes() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "getHeap", "method_35493", "getNodes", "m_164684_"), "()[Lepq;");
    }

    static jobject getNodes(const jobject& obj) {
                
       const auto methodID = methodID_getNodes();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_ENTITY_AI_PATHING_PATHMINHEAP_HPP