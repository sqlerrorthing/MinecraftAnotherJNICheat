// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ENTITY_AI_CONTROL_LOOKCONTROL_HPP
#define NET_MINECRAFT_ENTITY_AI_CONTROL_LOOKCONTROL_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.entity.ai.control.LookControl
 * Remapped: bzo
 */
namespace LookControl {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("bzo", "net/minecraft/world/entity/ai/control/LookControl", "net/minecraft/class_1333", "net/minecraft/entity/ai/control/LookControl", "net/minecraft/src/C_667_"));
        }
        return cachedClass;
    };

    // getter for protected field net.minecraft.entity.ai.control.LookControl#entity
    static jobject get_field_entity(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "mob", "field_6361", "entity", "f_24937_"), "Lbtp;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.entity.ai.control.LookControl#entity
    static void set_field_entity(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "mob", "field_6361", "entity", "f_24937_"), "Lbtp;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.entity.ai.control.LookControl#maxYawChange
    static jfloat get_field_maxYawChange(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "yMaxRotSpeed", "field_6359", "maxYawChange", "f_24938_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.entity.ai.control.LookControl#maxYawChange
    static void set_field_maxYawChange(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "yMaxRotSpeed", "field_6359", "maxYawChange", "f_24938_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.entity.ai.control.LookControl#maxPitchChange
    static jfloat get_field_maxPitchChange(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "xMaxRotAngle", "field_6358", "maxPitchChange", "f_24939_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.entity.ai.control.LookControl#maxPitchChange
    static void set_field_maxPitchChange(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "xMaxRotAngle", "field_6358", "maxPitchChange", "f_24939_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.entity.ai.control.LookControl#lookAtTimer
    static jint get_field_lookAtTimer(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "lookAtCooldown", "field_35103", "lookAtTimer", "f_186068_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.entity.ai.control.LookControl#lookAtTimer
    static void set_field_lookAtTimer(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "lookAtCooldown", "field_35103", "lookAtTimer", "f_186068_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.entity.ai.control.LookControl#x
    static jdouble get_field_x(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "wantedX", "field_6364", "x", "f_24941_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.entity.ai.control.LookControl#x
    static void set_field_x(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "wantedX", "field_6364", "x", "f_24941_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.entity.ai.control.LookControl#y
    static jdouble get_field_y(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "wantedY", "field_6363", "y", "f_24942_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.entity.ai.control.LookControl#y
    static void set_field_y(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "wantedY", "field_6363", "y", "f_24942_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.entity.ai.control.LookControl#z
    static jdouble get_field_z(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "wantedZ", "field_6362", "z", "f_24943_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.entity.ai.control.LookControl#z
    static void set_field_z(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "wantedZ", "field_6362", "z", "f_24943_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    static jmethodID methodID_lookAt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setLookAt", "method_19615", "lookAt", "m_24964_"), "(Lexc;)V");
    }

    static void lookAt(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_lookAt();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__lookAt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setLookAt", "method_35111", "lookAt", "m_148051_"), "(Lbsr;)V");
    }

    static void _lookAt(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__lookAt();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID___lookAt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setLookAt", "method_6226", "lookAt", "m_24960_"), "(Lbsr;FF)V");
    }

    static void __lookAt(const jobject& obj, const jobject& arg0, const jfloat& arg1, const jfloat& arg2) {
                
       const auto methodID = methodID___lookAt();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID____lookAt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setLookAt", "method_20248", "lookAt", "m_24946_"), "(DDD)V");
    }

    static void ___lookAt(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID____lookAt();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_____lookAt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setLookAt", "method_6230", "lookAt", "m_24950_"), "(DDDFF)V");
    }

    static void ____lookAt(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2, const jfloat& arg3, const jfloat& arg4) {
                
       const auto methodID = methodID_____lookAt();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "tick", "method_6231", "tick", "m_8128_"), "()V");
    }

    static void tick(const jobject& obj) {
                
       const auto methodID = methodID_tick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_clampHeadYaw() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "clampHeadRotationToBody", "method_36980", "clampHeadYaw", "m_142586_"), "()V");
    }

    static void clampHeadYaw(const jobject& obj) {
                
       const auto methodID = methodID_clampHeadYaw();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_shouldStayHorizontal() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "resetXRotOnTick", "method_20433", "shouldStayHorizontal", "m_8106_"), "()Z");
    }

    static jboolean shouldStayHorizontal(const jobject& obj) {
                
       const auto methodID = methodID_shouldStayHorizontal();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isLookingAtSpecificPosition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "isLookingAtTarget", "method_38970", "isLookingAtSpecificPosition", "m_186069_"), "()Z");
    }

    static jboolean isLookingAtSpecificPosition(const jobject& obj) {
                
       const auto methodID = methodID_isLookingAtSpecificPosition();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getLookX() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "getWantedX", "method_6225", "getLookX", "m_24969_"), "()D");
    }

    static jdouble getLookX(const jobject& obj) {
                
       const auto methodID = methodID_getLookX();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_getLookY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "getWantedY", "method_6227", "getLookY", "m_24970_"), "()D");
    }

    static jdouble getLookY(const jobject& obj) {
                
       const auto methodID = methodID_getLookY();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_getLookZ() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "getWantedZ", "method_6228", "getLookZ", "m_24971_"), "()D");
    }

    static jdouble getLookZ(const jobject& obj) {
                
       const auto methodID = methodID_getLookZ();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_getTargetPitch() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "getXRotD", "method_20250", "getTargetPitch", "m_180897_"), "()Ljava/util/Optional;");
    }

    static jobject getTargetPitch(const jobject& obj) {
                
       const auto methodID = methodID_getTargetPitch();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getTargetYaw() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "getYRotD", "method_20251", "getTargetYaw", "m_180896_"), "()Ljava/util/Optional;");
    }

    static jobject getTargetYaw(const jobject& obj) {
                
       const auto methodID = methodID_getTargetYaw();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_changeAngle() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "rotateTowards", "method_6229", "changeAngle", "m_24956_"), "(FFF)F");
    }

    static jfloat changeAngle(const jobject& obj, const jfloat& arg0, const jfloat& arg1, const jfloat& arg2) {
                
       const auto methodID = methodID_changeAngle();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getLookingHeightFor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "getWantedY", "method_20249", "getLookingHeightFor", "m_24966_"), "(Lbsr;)D");
    }

    static jdouble getLookingHeightFor(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getLookingHeightFor();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_ENTITY_AI_CONTROL_LOOKCONTROL_HPP