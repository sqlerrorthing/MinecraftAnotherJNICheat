// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ENTITY_AI_GOAL_MOVETOTARGETPOSGOAL_HPP
#define NET_MINECRAFT_ENTITY_AI_GOAL_MOVETOTARGETPOSGOAL_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.entity.ai.goal.MoveToTargetPosGoal
 * Remapped: caz
 */
namespace MoveToTargetPosGoal {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("caz", "net/minecraft/world/entity/ai/goal/MoveToBlockGoal", "net/minecraft/class_1367", "net/minecraft/entity/ai/goal/MoveToTargetPosGoal", "net/minecraft/src/C_706_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.entity.ai.goal.MoveToTargetPosGoal#MIN_WAITING_TIME
    [[maybe_unused]] static jint get_field_MIN_WAITING_TIME() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "GIVE_UP_TICKS", "field_30221", "MIN_WAITING_TIME", "f_148128_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.goal.MoveToTargetPosGoal#MIN_WAITING_TIME
    [[maybe_unused]] static void set_field_MIN_WAITING_TIME(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "GIVE_UP_TICKS", "field_30221", "MIN_WAITING_TIME", "f_148128_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.ai.goal.MoveToTargetPosGoal#MAX_TRYING_TIME
    [[maybe_unused]] static jint get_field_MAX_TRYING_TIME() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "STAY_TICKS", "field_30222", "MAX_TRYING_TIME", "f_148129_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.goal.MoveToTargetPosGoal#MAX_TRYING_TIME
    [[maybe_unused]] static void set_field_MAX_TRYING_TIME(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "STAY_TICKS", "field_30222", "MAX_TRYING_TIME", "f_148129_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.ai.goal.MoveToTargetPosGoal#MIN_INTERVAL
    [[maybe_unused]] static jint get_field_MIN_INTERVAL() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "INTERVAL_TICKS", "field_30223", "MIN_INTERVAL", "f_148130_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.goal.MoveToTargetPosGoal#MIN_INTERVAL
    [[maybe_unused]] static void set_field_MIN_INTERVAL(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "INTERVAL_TICKS", "field_30223", "MIN_INTERVAL", "f_148130_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for protected field net.minecraft.entity.ai.goal.MoveToTargetPosGoal#mob
    static jobject get_field_mob(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "mob", "field_6516", "mob", "f_25598_"), "Lbtw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.entity.ai.goal.MoveToTargetPosGoal#mob
    static void set_field_mob(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "mob", "field_6516", "mob", "f_25598_"), "Lbtw;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.entity.ai.goal.MoveToTargetPosGoal#speed
    static jdouble get_field_speed(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "speedModifier", "field_6514", "speed", "f_25599_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static public field net.minecraft.entity.ai.goal.MoveToTargetPosGoal#speed
    static void set_field_speed(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "speedModifier", "field_6514", "speed", "f_25599_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.entity.ai.goal.MoveToTargetPosGoal#cooldown
    static jint get_field_cooldown(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "nextStartTick", "field_6518", "cooldown", "f_25600_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.entity.ai.goal.MoveToTargetPosGoal#cooldown
    static void set_field_cooldown(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "nextStartTick", "field_6518", "cooldown", "f_25600_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.entity.ai.goal.MoveToTargetPosGoal#tryingTime
    static jint get_field_tryingTime(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "tryTicks", "field_6517", "tryingTime", "f_25601_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.entity.ai.goal.MoveToTargetPosGoal#tryingTime
    static void set_field_tryingTime(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "tryTicks", "field_6517", "tryingTime", "f_25601_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.goal.MoveToTargetPosGoal#safeWaitingTime
    static jint get_field_safeWaitingTime(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "maxStayTicks", "field_6511", "safeWaitingTime", "f_25604_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.goal.MoveToTargetPosGoal#safeWaitingTime
    static void set_field_safeWaitingTime(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "maxStayTicks", "field_6511", "safeWaitingTime", "f_25604_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.entity.ai.goal.MoveToTargetPosGoal#targetPos
    static jobject get_field_targetPos(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "blockPos", "field_6512", "targetPos", "f_25602_"), "Ljd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.entity.ai.goal.MoveToTargetPosGoal#targetPos
    static void set_field_targetPos(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "blockPos", "field_6512", "targetPos", "f_25602_"), "Ljd;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.goal.MoveToTargetPosGoal#reached
    static jboolean get_field_reached(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "reachedTarget", "field_6513", "reached", "f_25605_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.goal.MoveToTargetPosGoal#reached
    static void set_field_reached(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "reachedTarget", "field_6513", "reached", "f_25605_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.goal.MoveToTargetPosGoal#range
    static jint get_field_range(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "searchRange", "field_6510", "range", "f_25606_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.goal.MoveToTargetPosGoal#range
    static void set_field_range(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "searchRange", "field_6510", "range", "f_25606_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.goal.MoveToTargetPosGoal#maxYDifference
    static jint get_field_maxYDifference(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "verticalSearchRange", "field_6519", "maxYDifference", "f_25607_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.goal.MoveToTargetPosGoal#maxYDifference
    static void set_field_maxYDifference(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "verticalSearchRange", "field_6519", "maxYDifference", "f_25607_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.entity.ai.goal.MoveToTargetPosGoal#lowestY
    static jint get_field_lowestY(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "verticalSearchStart", "field_6515", "lowestY", "f_25603_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.entity.ai.goal.MoveToTargetPosGoal#lowestY
    static void set_field_lowestY(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "verticalSearchStart", "field_6515", "lowestY", "f_25603_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    static jmethodID methodID_canStart() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "canUse", "method_6264", "canStart", "m_8036_"), "()Z");
    }

    static jboolean canStart(const jobject& obj) {
                
       const auto methodID = methodID_canStart();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getInterval() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "nextStartTick", "method_6293", "getInterval", "m_6099_"), "(Lbtw;)I");
    }

    static jint getInterval(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getInterval();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_shouldContinue() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "canContinueToUse", "method_6266", "shouldContinue", "m_8045_"), "()Z");
    }

    static jboolean shouldContinue(const jobject& obj) {
                
       const auto methodID = methodID_shouldContinue();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_start() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "start", "method_6269", "start", "m_8056_"), "()V");
    }

    static void start(const jobject& obj) {
                
       const auto methodID = methodID_start();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_startMovingToTarget() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "moveMobToBlock", "method_6290", "startMovingToTarget", "m_25624_"), "()V");
    }

    static void startMovingToTarget(const jobject& obj) {
                
       const auto methodID = methodID_startMovingToTarget();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getDesiredDistanceToTarget() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "acceptedDistance", "method_6291", "getDesiredDistanceToTarget", "m_8052_"), "()D");
    }

    static jdouble getDesiredDistanceToTarget(const jobject& obj) {
                
       const auto methodID = methodID_getDesiredDistanceToTarget();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_getTargetPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "getMoveToTarget", "method_30953", "getTargetPos", "m_6669_"), "()Ljd;");
    }

    static jobject getTargetPos(const jobject& obj) {
                
       const auto methodID = methodID_getTargetPos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_shouldRunEveryTick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("V_", "requiresUpdateEveryTick", "method_38846", "shouldRunEveryTick", "m_183429_"), "()Z");
    }

    static jboolean shouldRunEveryTick(const jobject& obj) {
                
       const auto methodID = methodID_shouldRunEveryTick();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "tick", "method_6268", "tick", "m_8037_"), "()V");
    }

    static void tick(const jobject& obj) {
                
       const auto methodID = methodID_tick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_shouldResetPath() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "shouldRecalculatePath", "method_6294", "shouldResetPath", "m_8064_"), "()Z");
    }

    static jboolean shouldResetPath(const jobject& obj) {
                
       const auto methodID = methodID_shouldResetPath();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasReached() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("m", "isReachedTarget", "method_6295", "hasReached", "m_25625_"), "()Z");
    }

    static jboolean hasReached(const jobject& obj) {
                
       const auto methodID = methodID_hasReached();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_findTargetPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("n", "findNearestBlock", "method_6292", "findTargetPos", "m_25626_"), "()Z");
    }

    static jboolean findTargetPos(const jobject& obj) {
                
       const auto methodID = methodID_findTargetPos();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isTargetPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isValidTarget", "method_6296", "isTargetPos", "m_6465_"), "(Ldcz;Ljd;)Z");
    }

    static jboolean isTargetPos(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_isTargetPos();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_ENTITY_AI_GOAL_MOVETOTARGETPOSGOAL_HPP