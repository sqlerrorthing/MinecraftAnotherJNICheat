// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ENTITY_AI_BRAIN_BRAIN_HPP
#define NET_MINECRAFT_ENTITY_AI_BRAIN_BRAIN_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.entity.ai.brain.Brain
 * Remapped: buq
 */
namespace Brain {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("buq", "net/minecraft/world/entity/ai/Brain", "net/minecraft/class_4095", "net/minecraft/entity/ai/brain/Brain", "net/minecraft/src/C_548_"));
        }
        return cachedClass;
    };

    // getter for static default field net.minecraft.entity.ai.brain.Brain#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_24656", "LOGGER", "f_21841_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.entity.ai.brain.Brain#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_24656", "LOGGER", "f_21841_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.brain.Brain#codecSupplier
    static jobject get_field_codecSupplier(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "codec", "field_24657", "codecSupplier", "f_21842_"), "Ljava/util/function/Supplier;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.Brain#codecSupplier
    static void set_field_codecSupplier(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "codec", "field_24657", "codecSupplier", "f_21842_"), "Ljava/util/function/Supplier;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.ai.brain.Brain#ACTIVITY_REFRESH_COOLDOWN
    [[maybe_unused]] static jint get_field_ACTIVITY_REFRESH_COOLDOWN() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "SCHEDULE_UPDATE_DELAY", "field_30096", "ACTIVITY_REFRESH_COOLDOWN", "f_147338_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.Brain#ACTIVITY_REFRESH_COOLDOWN
    [[maybe_unused]] static void set_field_ACTIVITY_REFRESH_COOLDOWN(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "SCHEDULE_UPDATE_DELAY", "field_30096", "ACTIVITY_REFRESH_COOLDOWN", "f_147338_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.brain.Brain#memories
    static jobject get_field_memories(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "memories", "field_18322", "memories", "f_21843_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.Brain#memories
    static void set_field_memories(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "memories", "field_18322", "memories", "f_21843_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.brain.Brain#sensors
    static jobject get_field_sensors(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "sensors", "field_18323", "sensors", "f_21844_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.Brain#sensors
    static void set_field_sensors(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "sensors", "field_18323", "sensors", "f_21844_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.brain.Brain#tasks
    static jobject get_field_tasks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "availableBehaviorsByPriority", "field_18324", "tasks", "f_21845_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.Brain#tasks
    static void set_field_tasks(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "availableBehaviorsByPriority", "field_18324", "tasks", "f_21845_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.brain.Brain#schedule
    static jobject get_field_schedule(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "schedule", "field_18325", "schedule", "f_21846_"), "Lcop;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.Brain#schedule
    static void set_field_schedule(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "schedule", "field_18325", "schedule", "f_21846_"), "Lcop;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.brain.Brain#requiredActivityMemories
    static jobject get_field_requiredActivityMemories(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "activityRequirements", "field_18326", "requiredActivityMemories", "f_21847_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.Brain#requiredActivityMemories
    static void set_field_requiredActivityMemories(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "activityRequirements", "field_18326", "requiredActivityMemories", "f_21847_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.brain.Brain#forgettingActivityMemories
    static jobject get_field_forgettingActivityMemories(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "activityMemoriesToEraseWhenStopped", "field_22282", "forgettingActivityMemories", "f_21848_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.Brain#forgettingActivityMemories
    static void set_field_forgettingActivityMemories(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "activityMemoriesToEraseWhenStopped", "field_22282", "forgettingActivityMemories", "f_21848_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.brain.Brain#coreActivities
    static jobject get_field_coreActivities(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "coreActivities", "field_18327", "coreActivities", "f_21849_"), "Ljava/util/Set;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.Brain#coreActivities
    static void set_field_coreActivities(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "coreActivities", "field_18327", "coreActivities", "f_21849_"), "Ljava/util/Set;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.brain.Brain#possibleActivities
    static jobject get_field_possibleActivities(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "activeActivities", "field_18328", "possibleActivities", "f_21850_"), "Ljava/util/Set;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.Brain#possibleActivities
    static void set_field_possibleActivities(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "activeActivities", "field_18328", "possibleActivities", "f_21850_"), "Ljava/util/Set;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.brain.Brain#defaultActivity
    static jobject get_field_defaultActivity(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "defaultActivity", "field_18329", "defaultActivity", "f_21851_"), "Lcom;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.Brain#defaultActivity
    static void set_field_defaultActivity(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "defaultActivity", "field_18329", "defaultActivity", "f_21851_"), "Lcom;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.brain.Brain#activityStartTime
    static jlong get_field_activityStartTime(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "lastScheduleUpdate", "field_18853", "activityStartTime", "f_21852_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.Brain#activityStartTime
    static void set_field_activityStartTime(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "lastScheduleUpdate", "field_18853", "activityStartTime", "f_21852_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    static jmethodID methodID_createProfile() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "provider", "method_28311", "createProfile", "m_21923_"), "(Ljava/util/Collection;Ljava/util/Collection;)Lbuq$b;");
    }

    static jobject createProfile(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_createProfile();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_createBrainCodec() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "codec", "method_28313", "createBrainCodec", "m_21946_"), "(Ljava/util/Collection;Ljava/util/Collection;)Lcom/mojang/serialization/Codec;");
    }

    static jobject createBrainCodec(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_createBrainCodec();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_encode() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "serializeStart", "method_28310", "encode", "m_21914_"), "(Lcom/mojang/serialization/DynamicOps;)Lcom/mojang/serialization/DataResult;");
    }

    static jobject encode(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_encode();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_streamMemories() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "memories", "method_28315", "streamMemories", "m_21975_"), "()Ljava/util/stream/Stream;");
    }

    static jobject streamMemories(const jobject& obj) {
                
       const auto methodID = methodID_streamMemories();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasMemoryModule() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "hasMemoryValue", "method_18896", "hasMemoryModule", "m_21874_"), "(Lccs;)Z");
    }

    static jboolean hasMemoryModule(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_hasMemoryModule();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_forgetAll() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "clearMemories", "method_49709", "forgetAll", "m_276084_"), "()V");
    }

    static void forgetAll(const jobject& obj) {
                
       const auto methodID = methodID_forgetAll();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_forget() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "eraseMemory", "method_18875", "forget", "m_21936_"), "(Lccs;)V");
    }

    static void forget(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_forget();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_remember() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setMemory", "method_18878", "remember", "m_21879_"), "(Lccs;Ljava/lang/Object;)V");
    }

    static void remember(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_remember();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__remember() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setMemoryWithExpiry", "method_24525", "remember", "m_21882_"), "(Lccs;Ljava/lang/Object;J)V");
    }

    static void _remember(const jobject& obj, const jobject& arg0, const jobject& arg1, const jlong& arg2) {
                
       const auto methodID = methodID__remember();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID___remember() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setMemory", "method_18879", "remember", "m_21886_"), "(Lccs;Ljava/util/Optional;)V");
    }

    static void __remember(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID___remember();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_setMemory() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setMemoryInternal", "method_24535", "setMemory", "m_21941_"), "(Lccs;Ljava/util/Optional;)V");
    }

    static void setMemory(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_setMemory();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getOptionalRegisteredMemory() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getMemory", "method_18904", "getOptionalRegisteredMemory", "m_21952_"), "(Lccs;)Ljava/util/Optional;");
    }

    static jobject getOptionalRegisteredMemory(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getOptionalRegisteredMemory();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getOptionalMemory() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getMemoryInternal", "method_46873", "getOptionalMemory", "m_257414_"), "(Lccs;)Ljava/util/Optional;");
    }

    static jobject getOptionalMemory(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getOptionalMemory();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getMemoryExpiry() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "getTimeUntilExpiry", "method_36978", "getMemoryExpiry", "m_147341_"), "(Lccs;)J");
    }

    static jlong getMemoryExpiry(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getMemoryExpiry();
       return MinecraftSDK::env->CallLongMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getMemories() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getMemories", "method_35058", "getMemories", "m_147339_"), "()Ljava/util/Map;");
    }

    static jobject getMemories(const jobject& obj) {
                
       const auto methodID = methodID_getMemories();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasMemoryModuleWithValue() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "isMemoryValue", "method_29519", "hasMemoryModuleWithValue", "m_21938_"), "(Lccs;Ljava/lang/Object;)Z");
    }

    static jboolean hasMemoryModuleWithValue(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_hasMemoryModuleWithValue();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isMemoryInState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "checkMemory", "method_18876", "isMemoryInState", "m_21876_"), "(Lccs;Lcct;)Z");
    }

    static jboolean isMemoryInState(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_isMemoryInState();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getSchedule() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getSchedule", "method_18894", "getSchedule", "m_21932_"), "()Lcop;");
    }

    static jobject getSchedule(const jobject& obj) {
                
       const auto methodID = methodID_getSchedule();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_setSchedule() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setSchedule", "method_18884", "setSchedule", "m_21912_"), "(Lcop;)V");
    }

    static void setSchedule(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setSchedule();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setCoreActivities() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setCoreActivities", "method_18890", "setCoreActivities", "m_21930_"), "(Ljava/util/Set;)V");
    }

    static void setCoreActivities(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setCoreActivities();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getPossibleActivities() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getActiveActivities", "method_35059", "getPossibleActivities", "m_147340_"), "()Ljava/util/Set;");
    }

    static jobject getPossibleActivities(const jobject& obj) {
                
       const auto methodID = methodID_getPossibleActivities();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getRunningTasks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "getRunningBehaviors", "method_27074", "getRunningTasks", "m_21956_"), "()Ljava/util/List;");
    }

    static jobject getRunningTasks(const jobject& obj) {
                
       const auto methodID = methodID_getRunningTasks();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_resetPossibleActivities() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "useDefaultActivity", "method_24536", "resetPossibleActivities", "m_21962_"), "()V");
    }

    static void resetPossibleActivities(const jobject& obj) {
                
       const auto methodID = methodID_resetPossibleActivities();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getFirstPossibleNonCoreActivity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "getActiveNonCoreActivity", "method_24538", "getFirstPossibleNonCoreActivity", "m_21968_"), "()Ljava/util/Optional;");
    }

    static jobject getFirstPossibleNonCoreActivity(const jobject& obj) {
                
       const auto methodID = methodID_getFirstPossibleNonCoreActivity();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_doExclusively() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setActiveActivityIfPossible", "method_24526", "doExclusively", "m_21889_"), "(Lcom;)V");
    }

    static void doExclusively(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_doExclusively();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__resetPossibleActivities() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "setActiveActivity", "method_18880", "resetPossibleActivities", "m_21960_"), "(Lcom;)V");
    }

    static void _resetPossibleActivities(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__resetPossibleActivities();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_forgetIrrelevantMemories() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "eraseMemoriesForOtherActivitesThan", "method_24537", "forgetIrrelevantMemories", "m_21966_"), "(Lcom;)V");
    }

    static void forgetIrrelevantMemories(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_forgetIrrelevantMemories();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_refreshActivities() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateActivityFromSchedule", "method_18871", "refreshActivities", "m_21862_"), "(JJ)V");
    }

    static void refreshActivities(const jobject& obj, const jlong& arg0, const jlong& arg1) {
                
       const auto methodID = methodID_refreshActivities();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID___resetPossibleActivities() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setActiveActivityToFirstValid", "method_24531", "resetPossibleActivities", "m_21926_"), "(Ljava/util/List;)V");
    }

    static void __resetPossibleActivities(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID___resetPossibleActivities();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setDefaultActivity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setDefaultActivity", "method_18897", "setDefaultActivity", "m_21944_"), "(Lcom;)V");
    }

    static void setDefaultActivity(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setDefaultActivity();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setTaskList() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addActivity", "method_18882", "setTaskList", "m_21891_"), "(Lcom;ILcom/google/common/collect/ImmutableList;)V");
    }

    static void setTaskList(const jobject& obj, const jobject& arg0, const jint& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_setTaskList();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__setTaskList() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addActivityAndRemoveMemoryWhenStopped", "method_24527", "setTaskList", "m_21895_"), "(Lcom;ILcom/google/common/collect/ImmutableList;Lccs;)V");
    }

    static void _setTaskList(const jobject& obj, const jobject& arg0, const jint& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID__setTaskList();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID___setTaskList() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addActivity", "method_18881", "setTaskList", "m_21900_"), "(Lcom;Lcom/google/common/collect/ImmutableList;)V");
    }

    static void __setTaskList(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID___setTaskList();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID____setTaskList() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addActivityWithConditions", "method_24529", "setTaskList", "m_21903_"), "(Lcom;Lcom/google/common/collect/ImmutableList;Ljava/util/Set;)V");
    }

    static void ___setTaskList(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID____setTaskList();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_____setTaskList() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addActivityAndRemoveMemoriesWhenStopped", "method_24530", "setTaskList", "m_21907_"), "(Lcom;Lcom/google/common/collect/ImmutableList;Ljava/util/Set;Ljava/util/Set;)V");
    }

    static void ____setTaskList(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_____setTaskList();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_clear() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "removeAllBehaviors", "method_35060", "clear", "m_147343_"), "()V");
    }

    static void clear(const jobject& obj) {
                
       const auto methodID = methodID_clear();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasActivity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "isActive", "method_18906", "hasActivity", "m_21954_"), "(Lcom;)Z");
    }

    static jboolean hasActivity(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_hasActivity();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_copy() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "copyWithoutBehaviors", "method_18911", "copy", "m_21973_"), "()Lbuq;");
    }

    static jobject copy(const jobject& obj) {
                
       const auto methodID = methodID_copy();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "tick", "method_19542", "tick", "m_21865_"), "(Laqu;Lbtn;)V");
    }

    static void tick(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_tick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_tickSensors() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "tickSensors", "method_27073", "tickSensors", "m_21949_"), "(Laqu;Lbtn;)V");
    }

    static void tickSensors(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_tickSensors();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_tickMemories() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "forgetOutdatedMemories", "method_27075", "tickMemories", "m_21976_"), "()V");
    }

    static void tickMemories(const jobject& obj) {
                
       const auto methodID = methodID_tickMemories();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_stopAllTasks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "stopAll", "method_18900", "stopAllTasks", "m_21933_"), "(Laqu;Lbtn;)V");
    }

    static void stopAllTasks(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_stopAllTasks();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_startTasks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "startEachNonRunningBehavior", "method_18891", "startTasks", "m_21957_"), "(Laqu;Lbtn;)V");
    }

    static void startTasks(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_startTasks();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_updateTasks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "tickEachRunningBehavior", "method_19545", "updateTasks", "m_21963_"), "(Laqu;Lbtn;)V");
    }

    static void updateTasks(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_updateTasks();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_canDoActivity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "activityRequirementsAreMet", "method_18874", "canDoActivity", "m_21969_"), "(Lcom;)Z");
    }

    static jboolean canDoActivity(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_canDoActivity();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isEmptyCollection() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isEmptyCollection", "method_19948", "isEmptyCollection", "m_21918_"), "(Ljava/lang/Object;)Z");
    }

    static jboolean isEmptyCollection(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isEmptyCollection();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_indexTaskList() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "createPriorityPairs", "method_24524", "indexTaskList", "m_21859_"), "(ILcom/google/common/collect/ImmutableList;)Lcom/google/common/collect/ImmutableList;");
    }

    static jobject indexTaskList(const jobject& obj, const jint& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_indexTaskList();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_ENTITY_AI_BRAIN_BRAIN_HPP