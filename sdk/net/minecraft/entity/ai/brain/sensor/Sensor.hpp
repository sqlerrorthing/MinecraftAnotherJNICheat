// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ENTITY_AI_BRAIN_SENSOR_SENSOR_HPP
#define NET_MINECRAFT_ENTITY_AI_BRAIN_SENSOR_SENSOR_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.entity.ai.brain.sensor.Sensor
 * Remapped: cdy
 */
namespace Sensor {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("cdy", "net/minecraft/world/entity/ai/sensing/Sensor", "net/minecraft/class_4148", "net/minecraft/entity/ai/brain/sensor/Sensor", "net/minecraft/src/C_776_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.entity.ai.brain.sensor.Sensor#RANDOM
    [[maybe_unused]] static jobject get_field_RANDOM() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "RANDOM", "field_19294", "RANDOM", "f_26792_"), "Layw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.sensor.Sensor#RANDOM
    [[maybe_unused]] static void set_field_RANDOM(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "RANDOM", "field_19294", "RANDOM", "f_26792_"), "Layw;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.ai.brain.sensor.Sensor#DEFAULT_RUN_TIME
    [[maybe_unused]] static jint get_field_DEFAULT_RUN_TIME() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "DEFAULT_SCAN_RATE", "field_30259", "DEFAULT_RUN_TIME", "f_148309_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.sensor.Sensor#DEFAULT_RUN_TIME
    [[maybe_unused]] static void set_field_DEFAULT_RUN_TIME(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "DEFAULT_SCAN_RATE", "field_30259", "DEFAULT_RUN_TIME", "f_148309_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static protected field net.minecraft.entity.ai.brain.sensor.Sensor#BASE_MAX_DISTANCE
    [[maybe_unused]] static jint get_field_BASE_MAX_DISTANCE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "TARGETING_RANGE", "field_30258", "BASE_MAX_DISTANCE", "f_148308_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static protected field net.minecraft.entity.ai.brain.sensor.Sensor#BASE_MAX_DISTANCE
    [[maybe_unused]] static void set_field_BASE_MAX_DISTANCE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "TARGETING_RANGE", "field_30258", "BASE_MAX_DISTANCE", "f_148308_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.ai.brain.sensor.Sensor#TARGET_PREDICATE
    [[maybe_unused]] static jobject get_field_TARGET_PREDICATE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "TARGET_CONDITIONS", "field_26630", "TARGET_PREDICATE", "f_26793_"), "Lcef;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.sensor.Sensor#TARGET_PREDICATE
    [[maybe_unused]] static void set_field_TARGET_PREDICATE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "TARGET_CONDITIONS", "field_26630", "TARGET_PREDICATE", "f_26793_"), "Lcef;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.ai.brain.sensor.Sensor#TARGET_PREDICATE_IGNORE_DISTANCE_SCALING
    [[maybe_unused]] static jobject get_field_TARGET_PREDICATE_IGNORE_DISTANCE_SCALING() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "TARGET_CONDITIONS_IGNORE_INVISIBILITY_TESTING", "field_26631", "TARGET_PREDICATE_IGNORE_DISTANCE_SCALING", "f_26794_"), "Lcef;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.sensor.Sensor#TARGET_PREDICATE_IGNORE_DISTANCE_SCALING
    [[maybe_unused]] static void set_field_TARGET_PREDICATE_IGNORE_DISTANCE_SCALING(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "TARGET_CONDITIONS_IGNORE_INVISIBILITY_TESTING", "field_26631", "TARGET_PREDICATE_IGNORE_DISTANCE_SCALING", "f_26794_"), "Lcef;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.ai.brain.sensor.Sensor#ATTACKABLE_TARGET_PREDICATE
    [[maybe_unused]] static jobject get_field_ATTACKABLE_TARGET_PREDICATE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "ATTACK_TARGET_CONDITIONS", "field_33762", "ATTACKABLE_TARGET_PREDICATE", "f_148310_"), "Lcef;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.sensor.Sensor#ATTACKABLE_TARGET_PREDICATE
    [[maybe_unused]] static void set_field_ATTACKABLE_TARGET_PREDICATE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "ATTACK_TARGET_CONDITIONS", "field_33762", "ATTACKABLE_TARGET_PREDICATE", "f_148310_"), "Lcef;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.ai.brain.sensor.Sensor#ATTACKABLE_TARGET_PREDICATE_IGNORE_DISTANCE_SCALING
    [[maybe_unused]] static jobject get_field_ATTACKABLE_TARGET_PREDICATE_IGNORE_DISTANCE_SCALING() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "ATTACK_TARGET_CONDITIONS_IGNORE_INVISIBILITY_TESTING", "field_33763", "ATTACKABLE_TARGET_PREDICATE_IGNORE_DISTANCE_SCALING", "f_148311_"), "Lcef;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.sensor.Sensor#ATTACKABLE_TARGET_PREDICATE_IGNORE_DISTANCE_SCALING
    [[maybe_unused]] static void set_field_ATTACKABLE_TARGET_PREDICATE_IGNORE_DISTANCE_SCALING(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "ATTACK_TARGET_CONDITIONS_IGNORE_INVISIBILITY_TESTING", "field_33763", "ATTACKABLE_TARGET_PREDICATE_IGNORE_DISTANCE_SCALING", "f_148311_"), "Lcef;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.ai.brain.sensor.Sensor#ATTACKABLE_TARGET_PREDICATE_IGNORE_VISIBILITY
    [[maybe_unused]] static jobject get_field_ATTACKABLE_TARGET_PREDICATE_IGNORE_VISIBILITY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "ATTACK_TARGET_CONDITIONS_IGNORE_LINE_OF_SIGHT", "field_34050", "ATTACKABLE_TARGET_PREDICATE_IGNORE_VISIBILITY", "f_182375_"), "Lcef;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.sensor.Sensor#ATTACKABLE_TARGET_PREDICATE_IGNORE_VISIBILITY
    [[maybe_unused]] static void set_field_ATTACKABLE_TARGET_PREDICATE_IGNORE_VISIBILITY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "ATTACK_TARGET_CONDITIONS_IGNORE_LINE_OF_SIGHT", "field_34050", "ATTACKABLE_TARGET_PREDICATE_IGNORE_VISIBILITY", "f_182375_"), "Lcef;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.ai.brain.sensor.Sensor#ATTACKABLE_TARGET_PREDICATE_IGNORE_VISIBILITY_OR_DISTANCE_SCALING
    [[maybe_unused]] static jobject get_field_ATTACKABLE_TARGET_PREDICATE_IGNORE_VISIBILITY_OR_DISTANCE_SCALING() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "ATTACK_TARGET_CONDITIONS_IGNORE_INVISIBILITY_AND_LINE_OF_SIGHT", "field_34051", "ATTACKABLE_TARGET_PREDICATE_IGNORE_VISIBILITY_OR_DISTANCE_SCALING", "f_182376_"), "Lcef;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.sensor.Sensor#ATTACKABLE_TARGET_PREDICATE_IGNORE_VISIBILITY_OR_DISTANCE_SCALING
    [[maybe_unused]] static void set_field_ATTACKABLE_TARGET_PREDICATE_IGNORE_VISIBILITY_OR_DISTANCE_SCALING(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "ATTACK_TARGET_CONDITIONS_IGNORE_INVISIBILITY_AND_LINE_OF_SIGHT", "field_34051", "ATTACKABLE_TARGET_PREDICATE_IGNORE_VISIBILITY_OR_DISTANCE_SCALING", "f_182376_"), "Lcef;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.brain.sensor.Sensor#senseInterval
    static jint get_field_senseInterval(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "scanRate", "field_18464", "senseInterval", "f_26795_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.sensor.Sensor#senseInterval
    static void set_field_senseInterval(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "scanRate", "field_18464", "senseInterval", "f_26795_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.brain.sensor.Sensor#lastSenseTime
    static jlong get_field_lastSenseTime(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "timeToTick", "field_18463", "lastSenseTime", "f_26796_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.sensor.Sensor#lastSenseTime
    static void set_field_lastSenseTime(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "timeToTick", "field_18463", "lastSenseTime", "f_26796_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    static jmethodID methodID_tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "tick", "method_19100", "tick", "m_26806_"), "(Laqu;Lbtn;)V");
    }

    static void tick(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_tick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_sense() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "doTick", "method_19101", "sense", "m_5578_"), "(Laqu;Lbtn;)V");
    }

    static void sense(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_sense();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getOutputMemoryModules() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "requires", "method_19099", "getOutputMemoryModules", "m_7163_"), "()Ljava/util/Set;");
    }

    static jobject getOutputMemoryModules(const jobject& obj) {
                
       const auto methodID = methodID_getOutputMemoryModules();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_testTargetPredicate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "isEntityTargetable", "method_30954", "testTargetPredicate", "m_26803_"), "(Lbtn;Lbtn;)Z");
    }

    static jboolean testTargetPredicate(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_testTargetPredicate();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_testAttackableTargetPredicate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "isEntityAttackable", "method_36982", "testAttackableTargetPredicate", "m_148312_"), "(Lbtn;Lbtn;)Z");
    }

    static jboolean testAttackableTargetPredicate(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_testAttackableTargetPredicate();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_testAttackableTargetPredicateIgnoreVisibility() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("d", "isEntityAttackableIgnoringLineOfSight", "method_37456", "testAttackableTargetPredicateIgnoreVisibility", "m_182377_"), "(Lbtn;Lbtn;)Z");
    }

    static jboolean testAttackableTargetPredicateIgnoreVisibility(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_testAttackableTargetPredicateIgnoreVisibility();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_ENTITY_AI_BRAIN_SENSOR_SENSOR_HPP