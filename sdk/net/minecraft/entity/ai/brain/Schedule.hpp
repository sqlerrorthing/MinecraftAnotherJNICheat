// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ENTITY_AI_BRAIN_SCHEDULE_HPP
#define NET_MINECRAFT_ENTITY_AI_BRAIN_SCHEDULE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.entity.ai.brain.Schedule
 * Remapped: cop
 */
namespace Schedule {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("cop", "net/minecraft/world/entity/schedule/Schedule", "net/minecraft/class_4170", "net/minecraft/entity/ai/brain/Schedule", "net/minecraft/src/C_1197_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.entity.ai.brain.Schedule#WORK_TIME
    [[maybe_unused]] static jint get_field_WORK_TIME() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "WORK_START_TIME", "field_30692", "WORK_TIME", "f_150241_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.ai.brain.Schedule#WORK_TIME
    [[maybe_unused]] static void set_field_WORK_TIME(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "WORK_START_TIME", "field_30692", "WORK_TIME", "f_150241_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.entity.ai.brain.Schedule#field_30693
    [[maybe_unused]] static jint get_field_field_30693() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "TOTAL_WORK_TIME", "field_30693", "field_30693", "f_150242_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.ai.brain.Schedule#field_30693
    [[maybe_unused]] static void set_field_field_30693(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "TOTAL_WORK_TIME", "field_30693", "field_30693", "f_150242_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.entity.ai.brain.Schedule#EMPTY
    [[maybe_unused]] static jobject get_field_EMPTY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "EMPTY", "field_18603", "EMPTY", "f_38012_"), "Lcop;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.ai.brain.Schedule#EMPTY
    [[maybe_unused]] static void set_field_EMPTY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "EMPTY", "field_18603", "EMPTY", "f_38012_"), "Lcop;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.entity.ai.brain.Schedule#SIMPLE
    [[maybe_unused]] static jobject get_field_SIMPLE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "SIMPLE", "field_18604", "SIMPLE", "f_38013_"), "Lcop;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.ai.brain.Schedule#SIMPLE
    [[maybe_unused]] static void set_field_SIMPLE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "SIMPLE", "field_18604", "SIMPLE", "f_38013_"), "Lcop;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.entity.ai.brain.Schedule#VILLAGER_BABY
    [[maybe_unused]] static jobject get_field_VILLAGER_BABY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "VILLAGER_BABY", "field_18605", "VILLAGER_BABY", "f_38014_"), "Lcop;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.ai.brain.Schedule#VILLAGER_BABY
    [[maybe_unused]] static void set_field_VILLAGER_BABY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "VILLAGER_BABY", "field_18605", "VILLAGER_BABY", "f_38014_"), "Lcop;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.entity.ai.brain.Schedule#VILLAGER_DEFAULT
    [[maybe_unused]] static jobject get_field_VILLAGER_DEFAULT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "VILLAGER_DEFAULT", "field_18606", "VILLAGER_DEFAULT", "f_38015_"), "Lcop;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.ai.brain.Schedule#VILLAGER_DEFAULT
    [[maybe_unused]] static void set_field_VILLAGER_DEFAULT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "VILLAGER_DEFAULT", "field_18606", "VILLAGER_DEFAULT", "f_38015_"), "Lcop;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.brain.Schedule#scheduleRules
    static jobject get_field_scheduleRules(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "timelines", "field_18607", "scheduleRules", "f_38016_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.Schedule#scheduleRules
    static void set_field_scheduleRules(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "timelines", "field_18607", "scheduleRules", "f_38016_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_register() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "register", "method_19217", "register", "m_38029_"), "(Ljava/lang/String;)Lcoq;");
    }

    static jobject register(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_register();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_addActivity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "ensureTimelineExistsFor", "method_19215", "addActivity", "m_38024_"), "(Lcom;)V");
    }

    static void addActivity(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addActivity();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getRule() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getTimelineFor", "method_19218", "getRule", "m_38031_"), "(Lcom;)Lcor;");
    }

    static jobject getRule(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getRule();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getOtherRules() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getAllTimelinesExceptFor", "method_19219", "getOtherRules", "m_38033_"), "(Lcom;)Ljava/util/List;");
    }

    static jobject getOtherRules(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getOtherRules();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getActivityForTime() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getActivityAt", "method_19213", "getActivityForTime", "m_38019_"), "(I)Lcom;");
    }

    static jobject getActivityForTime(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_getActivityForTime();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_ENTITY_AI_BRAIN_SCHEDULE_HPP