// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ENTITY_AI_BRAIN_TASK_GIVEINVENTORYTOLOOKTARGETTASK_HPP
#define NET_MINECRAFT_ENTITY_AI_BRAIN_TASK_GIVEINVENTORYTOLOOKTARGETTASK_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.entity.ai.brain.task.GiveInventoryToLookTargetTask
 * Remapped: bvx
 */
namespace GiveInventoryToLookTargetTask {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("bvx", "net/minecraft/world/entity/ai/behavior/GoAndGiveItemsToTarget", "net/minecraft/class_7296", "net/minecraft/entity/ai/brain/task/GiveInventoryToLookTargetTask", "net/minecraft/src/C_213012_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.entity.ai.brain.task.GiveInventoryToLookTargetTask#COMPLETION_RANGE
    [[maybe_unused]] static jint get_field_COMPLETION_RANGE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "CLOSE_ENOUGH_DISTANCE_TO_TARGET", "field_38387", "COMPLETION_RANGE", "f_217188_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.task.GiveInventoryToLookTargetTask#COMPLETION_RANGE
    [[maybe_unused]] static void set_field_COMPLETION_RANGE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "CLOSE_ENOUGH_DISTANCE_TO_TARGET", "field_38387", "COMPLETION_RANGE", "f_217188_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.ai.brain.task.GiveInventoryToLookTargetTask#ITEM_PICKUP_COOLDOWN_TICKS
    [[maybe_unused]] static jint get_field_ITEM_PICKUP_COOLDOWN_TICKS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "ITEM_PICKUP_COOLDOWN_AFTER_THROWING", "field_38388", "ITEM_PICKUP_COOLDOWN_TICKS", "f_217189_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.task.GiveInventoryToLookTargetTask#ITEM_PICKUP_COOLDOWN_TICKS
    [[maybe_unused]] static void set_field_ITEM_PICKUP_COOLDOWN_TICKS(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "ITEM_PICKUP_COOLDOWN_AFTER_THROWING", "field_38388", "ITEM_PICKUP_COOLDOWN_TICKS", "f_217189_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.brain.task.GiveInventoryToLookTargetTask#lookTargetFunction
    static jobject get_field_lookTargetFunction(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "targetPositionGetter", "field_38389", "lookTargetFunction", "f_217190_"), "Ljava/util/function/Function;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.task.GiveInventoryToLookTargetTask#lookTargetFunction
    static void set_field_lookTargetFunction(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "targetPositionGetter", "field_38389", "lookTargetFunction", "f_217190_"), "Ljava/util/function/Function;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.brain.task.GiveInventoryToLookTargetTask#speed
    static jfloat get_field_speed(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "speedModifier", "field_38390", "speed", "f_217191_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.task.GiveInventoryToLookTargetTask#speed
    static void set_field_speed(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "speedModifier", "field_38390", "speed", "f_217191_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    static jmethodID methodID_shouldRun() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "checkExtraStartConditions", "method_18919", "shouldRun", "m_6114_"), "(Laqu;Lbtn;)Z");
    }

    static jboolean shouldRun(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_shouldRun();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_shouldKeepRunning() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "canStillUse", "method_18927", "shouldKeepRunning", "m_6737_"), "(Laqu;Lbtn;J)Z");
    }

    static jboolean shouldKeepRunning(const jobject& obj, const jobject& arg0, const jobject& arg1, const jlong& arg2) {
                
       const auto methodID = methodID_shouldKeepRunning();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_run() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "start", "method_18920", "run", "m_6735_"), "(Laqu;Lbtn;J)V");
    }

    static void run(const jobject& obj, const jobject& arg0, const jobject& arg1, const jlong& arg2) {
                
       const auto methodID = methodID_run();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_keepRunning() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "tick", "method_18924", "keepRunning", "m_6725_"), "(Laqu;Lbtn;J)V");
    }

    static void keepRunning(const jobject& obj, const jobject& arg0, const jobject& arg1, const jlong& arg2) {
                
       const auto methodID = methodID_keepRunning();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_triggerCriterion() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "triggerDropItemOnBlock", "method_43079", "triggerCriterion", "m_217213_"), "(Lbwv;Lcuq;Laqv;)V");
    }

    static void triggerCriterion(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_triggerCriterion();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_hasItemAndTarget() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "canThrowItemToTarget", "method_42649", "hasItemAndTarget", "m_217202_"), "(Lbtn;)Z");
    }

    static jboolean hasItemAndTarget(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_hasItemAndTarget();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_offsetTarget() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getThrowPosition", "method_42651", "offsetTarget", "m_217211_"), "(Lbwv;)Lexc;");
    }

    static jobject offsetTarget(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_offsetTarget();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_playThrowSound() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "throwItem", "method_43393", "playThrowSound", "m_217207_"), "(Lbtn;Lcuq;Lexc;)V");
    }

    static void playThrowSound(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_playThrowSound();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
};

#endif // NET_MINECRAFT_ENTITY_AI_BRAIN_TASK_GIVEINVENTORYTOLOOKTARGETTASK_HPP