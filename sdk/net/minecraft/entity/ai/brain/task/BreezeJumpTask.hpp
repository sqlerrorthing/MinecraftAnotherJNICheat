// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ENTITY_AI_BRAIN_TASK_BREEZEJUMPTASK_HPP
#define NET_MINECRAFT_ENTITY_AI_BRAIN_TASK_BREEZEJUMPTASK_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.entity.ai.brain.task.BreezeJumpTask
 * Remapped: clc
 */
namespace BreezeJumpTask {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("clc", "net/minecraft/world/entity/monster/breeze/LongJump", "net/minecraft/class_8952", "net/minecraft/entity/ai/brain/task/BreezeJumpTask", "net/minecraft/src/C_301980_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.entity.ai.brain.task.BreezeJumpTask#REQUIRED_SPACE_ABOVE
    [[maybe_unused]] static jint get_field_REQUIRED_SPACE_ABOVE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "REQUIRED_AIR_BLOCKS_ABOVE", "field_47289", "REQUIRED_SPACE_ABOVE", "f_302520_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.task.BreezeJumpTask#REQUIRED_SPACE_ABOVE
    [[maybe_unused]] static void set_field_REQUIRED_SPACE_ABOVE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "REQUIRED_AIR_BLOCKS_ABOVE", "field_47289", "REQUIRED_SPACE_ABOVE", "f_302520_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.ai.brain.task.BreezeJumpTask#JUMP_COOLDOWN_EXPIRY
    [[maybe_unused]] static jint get_field_JUMP_COOLDOWN_EXPIRY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "JUMP_COOLDOWN_TICKS", "field_47291", "JUMP_COOLDOWN_EXPIRY", "f_302830_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.task.BreezeJumpTask#JUMP_COOLDOWN_EXPIRY
    [[maybe_unused]] static void set_field_JUMP_COOLDOWN_EXPIRY(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "JUMP_COOLDOWN_TICKS", "field_47291", "JUMP_COOLDOWN_EXPIRY", "f_302830_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.ai.brain.task.BreezeJumpTask#JUMP_COOLDOWN_EXPIRY_WHEN_HURT
    [[maybe_unused]] static jint get_field_JUMP_COOLDOWN_EXPIRY_WHEN_HURT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "JUMP_COOLDOWN_WHEN_HURT_TICKS", "field_47292", "JUMP_COOLDOWN_EXPIRY_WHEN_HURT", "f_303106_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.task.BreezeJumpTask#JUMP_COOLDOWN_EXPIRY_WHEN_HURT
    [[maybe_unused]] static void set_field_JUMP_COOLDOWN_EXPIRY_WHEN_HURT(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "JUMP_COOLDOWN_WHEN_HURT_TICKS", "field_47292", "JUMP_COOLDOWN_EXPIRY_WHEN_HURT", "f_303106_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.ai.brain.task.BreezeJumpTask#JUMP_INHALING_EXPIRY
    [[maybe_unused]] static jint get_field_JUMP_INHALING_EXPIRY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "INHALING_DURATION_TICKS", "field_47293", "JUMP_INHALING_EXPIRY", "f_302385_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.task.BreezeJumpTask#JUMP_INHALING_EXPIRY
    [[maybe_unused]] static void set_field_JUMP_INHALING_EXPIRY(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "INHALING_DURATION_TICKS", "field_47293", "JUMP_INHALING_EXPIRY", "f_302385_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.ai.brain.task.BreezeJumpTask#MAX_JUMP_VELOCITY
    [[maybe_unused]] static jfloat get_field_MAX_JUMP_VELOCITY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "MAX_JUMP_VELOCITY", "field_47294", "MAX_JUMP_VELOCITY", "f_303309_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.task.BreezeJumpTask#MAX_JUMP_VELOCITY
    [[maybe_unused]] static void set_field_MAX_JUMP_VELOCITY(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "MAX_JUMP_VELOCITY", "field_47294", "MAX_JUMP_VELOCITY", "f_303309_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.ai.brain.task.BreezeJumpTask#POSSIBLE_JUMP_ANGLES
    [[maybe_unused]] static jobject get_field_POSSIBLE_JUMP_ANGLES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "ALLOWED_ANGLES", "field_47295", "POSSIBLE_JUMP_ANGLES", "f_303569_"), "Lit/unimi/dsi/fastutil/objects/ObjectArrayList;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.task.BreezeJumpTask#POSSIBLE_JUMP_ANGLES
    [[maybe_unused]] static void set_field_POSSIBLE_JUMP_ANGLES(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "ALLOWED_ANGLES", "field_47295", "POSSIBLE_JUMP_ANGLES", "f_303569_"), "Lit/unimi/dsi/fastutil/objects/ObjectArrayList;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_shouldJump() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "canRun", "method_58644", "shouldJump", "m_322743_"), "(Laqu;Lckz;)Z");
    }

    static jboolean shouldJump(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_shouldJump();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_shouldRun() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "checkExtraStartConditions", "method_55020", "shouldRun", "m_6114_"), "(Laqu;Lckz;)Z");
    }

    static jboolean shouldRun(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_shouldRun();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_shouldKeepRunning() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "canStillUse", "method_55021", "shouldKeepRunning", "m_6737_"), "(Laqu;Lckz;J)Z");
    }

    static jboolean shouldKeepRunning(const jobject& obj, const jobject& arg0, const jobject& arg1, const jlong& arg2) {
                
       const auto methodID = methodID_shouldKeepRunning();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_run() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "start", "method_55030", "run", "m_6735_"), "(Laqu;Lckz;J)V");
    }

    static void run(const jobject& obj, const jobject& arg0, const jobject& arg1, const jlong& arg2) {
                
       const auto methodID = methodID_run();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_keepRunning() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "tick", "method_55034", "keepRunning", "m_6725_"), "(Laqu;Lckz;J)V");
    }

    static void keepRunning(const jobject& obj, const jobject& arg0, const jobject& arg1, const jlong& arg2) {
                
       const auto methodID = methodID_keepRunning();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_finishRunning() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "stop", "method_55035", "finishRunning", "m_6732_"), "(Laqu;Lckz;J)V");
    }

    static void finishRunning(const jobject& obj, const jobject& arg0, const jobject& arg1, const jlong& arg2) {
                
       const auto methodID = methodID_finishRunning();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_shouldStopInhalingPose() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "isFinishedInhaling", "method_55024", "shouldStopInhalingPose", "m_322162_"), "(Lckz;)Z");
    }

    static jboolean shouldStopInhalingPose(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_shouldStopInhalingPose();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_shouldStopLongJumpingPose() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "isFinishedJumping", "method_55031", "shouldStopLongJumpingPose", "m_321687_"), "(Lckz;)Z");
    }

    static jboolean shouldStopLongJumpingPose(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_shouldStopLongJumpingPose();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getPosToJumpTo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "snapToSurface", "method_55023", "getPosToJumpTo", "m_307423_"), "(Lbtn;Lexc;)Ljd;");
    }

    static jobject getPosToJumpTo(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_getPosToJumpTo();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isTargetOutOfRange() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "outOfAggroRange", "method_55026", "isTargetOutOfRange", "m_305810_"), "(Lckz;Lbtn;)Z");
    }

    static jboolean isTargetOutOfRange(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_isTargetOutOfRange();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isTargetTooClose() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "tooCloseForJump", "method_55032", "isTargetTooClose", "m_305854_"), "(Lckz;Lbtn;)Z");
    }

    static jboolean isTargetTooClose(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_isTargetTooClose();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_hasRoomToJump() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "canJumpFromCurrentPosition", "method_55029", "hasRoomToJump", "m_306406_"), "(Laqu;Lckz;)Z");
    }

    static jboolean hasRoomToJump(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_hasRoomToJump();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getJumpingVelocity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "calculateOptimalJumpVector", "method_55025", "getJumpingVelocity", "m_307982_"), "(Lckz;Layw;Lexc;)Ljava/util/Optional;");
    }

    static jobject getJumpingVelocity(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_getJumpingVelocity();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
};

#endif // NET_MINECRAFT_ENTITY_AI_BRAIN_TASK_BREEZEJUMPTASK_HPP