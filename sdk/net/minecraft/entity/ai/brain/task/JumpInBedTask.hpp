// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ENTITY_AI_BRAIN_TASK_JUMPINBEDTASK_HPP
#define NET_MINECRAFT_ENTITY_AI_BRAIN_TASK_JUMPINBEDTASK_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.entity.ai.brain.task.JumpInBedTask
 * Remapped: bwg
 */
namespace JumpInBedTask {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("bwg", "net/minecraft/world/entity/ai/behavior/JumpOnBed", "net/minecraft/class_4245", "net/minecraft/entity/ai/brain/task/JumpInBedTask", "net/minecraft/src/C_599_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.entity.ai.brain.task.JumpInBedTask#MAX_TICKS_OUT_OF_BED
    [[maybe_unused]] static jint get_field_MAX_TICKS_OUT_OF_BED() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "MAX_TIME_TO_REACH_BED", "field_30128", "MAX_TICKS_OUT_OF_BED", "f_147588_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.task.JumpInBedTask#MAX_TICKS_OUT_OF_BED
    [[maybe_unused]] static void set_field_MAX_TICKS_OUT_OF_BED(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "MAX_TIME_TO_REACH_BED", "field_30128", "MAX_TICKS_OUT_OF_BED", "f_147588_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.ai.brain.task.JumpInBedTask#MIN_JUMP_TICKS
    [[maybe_unused]] static jint get_field_MIN_JUMP_TICKS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "MIN_JUMPS", "field_30129", "MIN_JUMP_TICKS", "f_147589_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.task.JumpInBedTask#MIN_JUMP_TICKS
    [[maybe_unused]] static void set_field_MIN_JUMP_TICKS(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "MIN_JUMPS", "field_30129", "MIN_JUMP_TICKS", "f_147589_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.ai.brain.task.JumpInBedTask#JUMP_TIME_VARIANCE
    [[maybe_unused]] static jint get_field_JUMP_TIME_VARIANCE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "MAX_JUMPS", "field_30130", "JUMP_TIME_VARIANCE", "f_147590_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.task.JumpInBedTask#JUMP_TIME_VARIANCE
    [[maybe_unused]] static void set_field_JUMP_TIME_VARIANCE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "MAX_JUMPS", "field_30130", "JUMP_TIME_VARIANCE", "f_147590_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.ai.brain.task.JumpInBedTask#TICKS_TO_NEXT_JUMP
    [[maybe_unused]] static jint get_field_TICKS_TO_NEXT_JUMP() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "COOLDOWN_BETWEEN_JUMPS", "field_30131", "TICKS_TO_NEXT_JUMP", "f_147591_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.task.JumpInBedTask#TICKS_TO_NEXT_JUMP
    [[maybe_unused]] static void set_field_TICKS_TO_NEXT_JUMP(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "COOLDOWN_BETWEEN_JUMPS", "field_30131", "TICKS_TO_NEXT_JUMP", "f_147591_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.brain.task.JumpInBedTask#walkSpeed
    static jfloat get_field_walkSpeed(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "speedModifier", "field_18988", "walkSpeed", "f_23329_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.task.JumpInBedTask#walkSpeed
    static void set_field_walkSpeed(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "speedModifier", "field_18988", "walkSpeed", "f_23329_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.brain.task.JumpInBedTask#bedPos
    static jobject get_field_bedPos(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "targetBed", "field_18989", "bedPos", "f_23330_"), "Ljd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.task.JumpInBedTask#bedPos
    static void set_field_bedPos(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "targetBed", "field_18989", "bedPos", "f_23330_"), "Ljd;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.brain.task.JumpInBedTask#ticksOutOfBedUntilStopped
    static jint get_field_ticksOutOfBedUntilStopped(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "remainingTimeToReachBed", "field_18990", "ticksOutOfBedUntilStopped", "f_23331_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.task.JumpInBedTask#ticksOutOfBedUntilStopped
    static void set_field_ticksOutOfBedUntilStopped(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "remainingTimeToReachBed", "field_18990", "ticksOutOfBedUntilStopped", "f_23331_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.brain.task.JumpInBedTask#jumpsRemaining
    static jint get_field_jumpsRemaining(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "remainingJumps", "field_18991", "jumpsRemaining", "f_23332_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.task.JumpInBedTask#jumpsRemaining
    static void set_field_jumpsRemaining(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "remainingJumps", "field_18991", "jumpsRemaining", "f_23332_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.brain.task.JumpInBedTask#ticksToNextJump
    static jint get_field_ticksToNextJump(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "remainingCooldownUntilNextJump", "field_18992", "ticksToNextJump", "f_23333_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.task.JumpInBedTask#ticksToNextJump
    static void set_field_ticksToNextJump(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "remainingCooldownUntilNextJump", "field_18992", "ticksToNextJump", "f_23333_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    static jmethodID methodID_shouldRun() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "checkExtraStartConditions", "method_19971", "shouldRun", "m_6114_"), "(Laqu;Lbtp;)Z");
    }

    static jboolean shouldRun(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_shouldRun();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_run() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "start", "method_19972", "run", "m_6735_"), "(Laqu;Lbtp;J)V");
    }

    static void run(const jobject& obj, const jobject& arg0, const jobject& arg1, const jlong& arg2) {
                
       const auto methodID = methodID_run();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_finishRunning() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "stop", "method_19976", "finishRunning", "m_6732_"), "(Laqu;Lbtp;J)V");
    }

    static void finishRunning(const jobject& obj, const jobject& arg0, const jobject& arg1, const jlong& arg2) {
                
       const auto methodID = methodID_finishRunning();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_shouldKeepRunning() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "canStillUse", "method_19978", "shouldKeepRunning", "m_6737_"), "(Laqu;Lbtp;J)Z");
    }

    static jboolean shouldKeepRunning(const jobject& obj, const jobject& arg0, const jobject& arg1, const jlong& arg2) {
                
       const auto methodID = methodID_shouldKeepRunning();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_isTimeLimitExceeded() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "timedOut", "method_18915", "isTimeLimitExceeded", "m_7773_"), "(J)Z");
    }

    static jboolean isTimeLimitExceeded(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_isTimeLimitExceeded();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_keepRunning() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "tick", "method_19980", "keepRunning", "m_6725_"), "(Laqu;Lbtp;J)V");
    }

    static void keepRunning(const jobject& obj, const jobject& arg0, const jobject& arg1, const jlong& arg2) {
                
       const auto methodID = methodID_keepRunning();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_setWalkTarget() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "startWalkingTowardsBed", "method_19970", "setWalkTarget", "m_23361_"), "(Lbtp;Ljd;)V");
    }

    static void setWalkTarget(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_setWalkTarget();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_shouldStartJumping() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "nearBed", "method_19975", "shouldStartJumping", "m_23368_"), "(Laqu;Lbtp;)Z");
    }

    static jboolean shouldStartJumping(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_shouldStartJumping();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isAboveBed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "onOrOverBed", "method_19977", "isAboveBed", "m_23379_"), "(Laqu;Lbtp;)Z");
    }

    static jboolean isAboveBed(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_isAboveBed();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isOnBed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "onBedSurface", "method_19979", "isOnBed", "m_23390_"), "(Laqu;Lbtp;)Z");
    }

    static jboolean isOnBed(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_isOnBed();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isBedAt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isBed", "method_19974", "isBedAt", "m_23356_"), "(Laqu;Ljd;)Z");
    }

    static jboolean isBedAt(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_isBedAt();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getNearestBed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getNearestBed", "method_19969", "getNearestBed", "m_23359_"), "(Lbtp;)Ljava/util/Optional;");
    }

    static jobject getNearestBed(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getNearestBed();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isBedGoneTooLong() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "tiredOfWalking", "method_19981", "isBedGoneTooLong", "m_23397_"), "(Laqu;Lbtp;)Z");
    }

    static jboolean isBedGoneTooLong(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_isBedGoneTooLong();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isDoneJumping() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "tiredOfJumping", "method_19982", "isDoneJumping", "m_23400_"), "(Laqu;Lbtp;)Z");
    }

    static jboolean isDoneJumping(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_isDoneJumping();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_ENTITY_AI_BRAIN_TASK_JUMPINBEDTASK_HPP