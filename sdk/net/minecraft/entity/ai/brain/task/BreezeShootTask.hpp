// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ENTITY_AI_BRAIN_TASK_BREEZESHOOTTASK_HPP
#define NET_MINECRAFT_ENTITY_AI_BRAIN_TASK_BREEZESHOOTTASK_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.entity.ai.brain.task.BreezeShootTask
 * Remapped: cld
 */
namespace BreezeShootTask {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("cld", "net/minecraft/world/entity/monster/breeze/Shoot", "net/minecraft/class_8953", "net/minecraft/entity/ai/brain/task/BreezeShootTask", "net/minecraft/src/C_301978_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.entity.ai.brain.task.BreezeShootTask#MIN_SQUARED_RANGE
    [[maybe_unused]] static jint get_field_MIN_SQUARED_RANGE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "ATTACK_RANGE_MIN_SQRT", "field_47296", "MIN_SQUARED_RANGE", "f_303746_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.task.BreezeShootTask#MIN_SQUARED_RANGE
    [[maybe_unused]] static void set_field_MIN_SQUARED_RANGE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "ATTACK_RANGE_MIN_SQRT", "field_47296", "MIN_SQUARED_RANGE", "f_303746_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.ai.brain.task.BreezeShootTask#MAX_SQUARED_RANGE
    [[maybe_unused]] static jint get_field_MAX_SQUARED_RANGE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "ATTACK_RANGE_MAX_SQRT", "field_47297", "MAX_SQUARED_RANGE", "f_303718_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.task.BreezeShootTask#MAX_SQUARED_RANGE
    [[maybe_unused]] static void set_field_MAX_SQUARED_RANGE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "ATTACK_RANGE_MAX_SQRT", "field_47297", "MAX_SQUARED_RANGE", "f_303718_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.ai.brain.task.BreezeShootTask#BASE_PROJECTILE_DIVERGENCY
    [[maybe_unused]] static jint get_field_BASE_PROJECTILE_DIVERGENCY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "UNCERTAINTY_BASE", "field_47298", "BASE_PROJECTILE_DIVERGENCY", "f_303776_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.task.BreezeShootTask#BASE_PROJECTILE_DIVERGENCY
    [[maybe_unused]] static void set_field_BASE_PROJECTILE_DIVERGENCY(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "UNCERTAINTY_BASE", "field_47298", "BASE_PROJECTILE_DIVERGENCY", "f_303776_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.ai.brain.task.BreezeShootTask#PROJECTILE_DIVERGENCY_DIFFICULTY_MODIFIER
    [[maybe_unused]] static jint get_field_PROJECTILE_DIVERGENCY_DIFFICULTY_MODIFIER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "UNCERTAINTY_MULTIPLIER", "field_47299", "PROJECTILE_DIVERGENCY_DIFFICULTY_MODIFIER", "f_302963_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.task.BreezeShootTask#PROJECTILE_DIVERGENCY_DIFFICULTY_MODIFIER
    [[maybe_unused]] static void set_field_PROJECTILE_DIVERGENCY_DIFFICULTY_MODIFIER(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "UNCERTAINTY_MULTIPLIER", "field_47299", "PROJECTILE_DIVERGENCY_DIFFICULTY_MODIFIER", "f_302963_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.ai.brain.task.BreezeShootTask#PROJECTILE_SPEED
    [[maybe_unused]] static jfloat get_field_PROJECTILE_SPEED() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "PROJECTILE_MOVEMENT_SCALE", "field_47300", "PROJECTILE_SPEED", "f_303632_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.task.BreezeShootTask#PROJECTILE_SPEED
    [[maybe_unused]] static void set_field_PROJECTILE_SPEED(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "PROJECTILE_MOVEMENT_SCALE", "field_47300", "PROJECTILE_SPEED", "f_303632_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.ai.brain.task.BreezeShootTask#SHOOT_CHARGING_EXPIRY
    [[maybe_unused]] static jint get_field_SHOOT_CHARGING_EXPIRY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "SHOOT_INITIAL_DELAY_TICKS", "field_47301", "SHOOT_CHARGING_EXPIRY", "f_303310_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.task.BreezeShootTask#SHOOT_CHARGING_EXPIRY
    [[maybe_unused]] static void set_field_SHOOT_CHARGING_EXPIRY(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "SHOOT_INITIAL_DELAY_TICKS", "field_47301", "SHOOT_CHARGING_EXPIRY", "f_303310_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.ai.brain.task.BreezeShootTask#RECOVER_EXPIRY
    [[maybe_unused]] static jint get_field_RECOVER_EXPIRY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "SHOOT_RECOVER_DELAY_TICKS", "field_47302", "RECOVER_EXPIRY", "f_302476_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.task.BreezeShootTask#RECOVER_EXPIRY
    [[maybe_unused]] static void set_field_RECOVER_EXPIRY(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "SHOOT_RECOVER_DELAY_TICKS", "field_47302", "RECOVER_EXPIRY", "f_302476_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.ai.brain.task.BreezeShootTask#SHOOT_COOLDOWN_EXPIRY
    [[maybe_unused]] static jint get_field_SHOOT_COOLDOWN_EXPIRY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "SHOOT_COOLDOWN_TICKS", "field_47303", "SHOOT_COOLDOWN_EXPIRY", "f_302675_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.task.BreezeShootTask#SHOOT_COOLDOWN_EXPIRY
    [[maybe_unused]] static void set_field_SHOOT_COOLDOWN_EXPIRY(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "SHOOT_COOLDOWN_TICKS", "field_47303", "SHOOT_COOLDOWN_EXPIRY", "f_302675_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    static jmethodID methodID_shouldRun() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "checkExtraStartConditions", "method_55036", "shouldRun", "m_6114_"), "(Laqu;Lckz;)Z");
    }

    static jboolean shouldRun(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_shouldRun();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_shouldKeepRunning() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "canStillUse", "method_55037", "shouldKeepRunning", "m_6737_"), "(Laqu;Lckz;J)Z");
    }

    static jboolean shouldKeepRunning(const jobject& obj, const jobject& arg0, const jobject& arg1, const jlong& arg2) {
                
       const auto methodID = methodID_shouldKeepRunning();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_run() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "start", "method_55040", "run", "m_6735_"), "(Laqu;Lckz;J)V");
    }

    static void run(const jobject& obj, const jobject& arg0, const jobject& arg1, const jlong& arg2) {
                
       const auto methodID = methodID_run();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_finishRunning() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "stop", "method_55042", "finishRunning", "m_6732_"), "(Laqu;Lckz;J)V");
    }

    static void finishRunning(const jobject& obj, const jobject& arg0, const jobject& arg1, const jlong& arg2) {
                
       const auto methodID = methodID_finishRunning();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_keepRunning() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "tick", "method_55044", "keepRunning", "m_6725_"), "(Laqu;Lckz;J)V");
    }

    static void keepRunning(const jobject& obj, const jobject& arg0, const jobject& arg1, const jlong& arg2) {
                
       const auto methodID = methodID_keepRunning();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_isFacingTarget() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "isFacingTarget", "method_55038", "isFacingTarget", "m_307853_"), "(Lckz;Lbtn;)Z");
    }

    static jboolean isFacingTarget(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_isFacingTarget();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isTargetWithinRange() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "isTargetWithinRange", "method_55041", "isTargetWithinRange", "m_305404_"), "(Lckz;Lbtn;)Z");
    }

    static jboolean isTargetWithinRange(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_isTargetWithinRange();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_ENTITY_AI_BRAIN_TASK_BREEZESHOOTTASK_HPP