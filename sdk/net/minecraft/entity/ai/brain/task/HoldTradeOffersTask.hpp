// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ENTITY_AI_BRAIN_TASK_HOLDTRADEOFFERSTASK_HPP
#define NET_MINECRAFT_ENTITY_AI_BRAIN_TASK_HOLDTRADEOFFERSTASK_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.entity.ai.brain.task.HoldTradeOffersTask
 * Remapped: bxp
 */
namespace HoldTradeOffersTask {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("bxp", "net/minecraft/world/entity/ai/behavior/ShowTradesToPlayer", "net/minecraft/class_4130", "net/minecraft/entity/ai/brain/task/HoldTradeOffersTask", "net/minecraft/src/C_630_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.entity.ai.brain.task.HoldTradeOffersTask#RUN_INTERVAL
    [[maybe_unused]] static jint get_field_RUN_INTERVAL() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "MAX_LOOK_TIME", "field_30167", "RUN_INTERVAL", "f_147915_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.task.HoldTradeOffersTask#RUN_INTERVAL
    [[maybe_unused]] static void set_field_RUN_INTERVAL(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "MAX_LOOK_TIME", "field_30167", "RUN_INTERVAL", "f_147915_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.ai.brain.task.HoldTradeOffersTask#OFFER_SHOWING_INTERVAL
    [[maybe_unused]] static jint get_field_OFFER_SHOWING_INTERVAL() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "STARTING_LOOK_TIME", "field_30168", "OFFER_SHOWING_INTERVAL", "f_147916_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.task.HoldTradeOffersTask#OFFER_SHOWING_INTERVAL
    [[maybe_unused]] static void set_field_OFFER_SHOWING_INTERVAL(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "STARTING_LOOK_TIME", "field_30168", "OFFER_SHOWING_INTERVAL", "f_147916_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.brain.task.HoldTradeOffersTask#customerHeldStack
    static jobject get_field_customerHeldStack(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "playerItemStack", "field_18392", "customerHeldStack", "f_24090_"), "Lcuq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.task.HoldTradeOffersTask#customerHeldStack
    static void set_field_customerHeldStack(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "playerItemStack", "field_18392", "customerHeldStack", "f_24090_"), "Lcuq;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.brain.task.HoldTradeOffersTask#offers
    static jobject get_field_offers(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "displayItems", "field_18393", "offers", "f_24091_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.task.HoldTradeOffersTask#offers
    static void set_field_offers(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "displayItems", "field_18393", "offers", "f_24091_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.brain.task.HoldTradeOffersTask#offerShownTicks
    static jint get_field_offerShownTicks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "cycleCounter", "field_18394", "offerShownTicks", "f_24092_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.task.HoldTradeOffersTask#offerShownTicks
    static void set_field_offerShownTicks(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "cycleCounter", "field_18394", "offerShownTicks", "f_24092_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.brain.task.HoldTradeOffersTask#offerIndex
    static jint get_field_offerIndex(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "displayIndex", "field_18395", "offerIndex", "f_24093_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.task.HoldTradeOffersTask#offerIndex
    static void set_field_offerIndex(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "displayIndex", "field_18395", "offerIndex", "f_24093_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ai.brain.task.HoldTradeOffersTask#ticksLeft
    static jint get_field_ticksLeft(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "lookTime", "field_18396", "ticksLeft", "f_24094_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ai.brain.task.HoldTradeOffersTask#ticksLeft
    static void set_field_ticksLeft(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "lookTime", "field_18396", "ticksLeft", "f_24094_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    static jmethodID methodID_shouldRun() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "checkExtraStartConditions", "method_19599", "shouldRun", "m_6114_"), "(Laqu;Lcmk;)Z");
    }

    static jboolean shouldRun(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_shouldRun();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_shouldKeepRunning() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "canStillUse", "method_19600", "shouldKeepRunning", "m_6737_"), "(Laqu;Lcmk;J)Z");
    }

    static jboolean shouldKeepRunning(const jobject& obj, const jobject& arg0, const jobject& arg1, const jlong& arg2) {
                
       const auto methodID = methodID_shouldKeepRunning();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_run() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "start", "method_19602", "run", "m_6735_"), "(Laqu;Lcmk;J)V");
    }

    static void run(const jobject& obj, const jobject& arg0, const jobject& arg1, const jlong& arg2) {
                
       const auto methodID = methodID_run();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_keepRunning() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "tick", "method_19604", "keepRunning", "m_6725_"), "(Laqu;Lcmk;J)V");
    }

    static void keepRunning(const jobject& obj, const jobject& arg0, const jobject& arg1, const jlong& arg2) {
                
       const auto methodID = methodID_keepRunning();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_finishRunning() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "stop", "method_19605", "finishRunning", "m_6732_"), "(Laqu;Lcmk;J)V");
    }

    static void finishRunning(const jobject& obj, const jobject& arg0, const jobject& arg1, const jlong& arg2) {
                
       const auto methodID = methodID_finishRunning();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_setupOffers() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "findItemsToDisplay", "method_19027", "setupOffers", "m_24112_"), "(Lbtn;Lcmk;)V");
    }

    static void setupOffers(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_setupOffers();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_holdOffer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "displayFirstItem", "method_19598", "holdOffer", "m_24115_"), "(Lcmk;)V");
    }

    static void holdOffer(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_holdOffer();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_loadPossibleOffers() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "updateDisplayItems", "method_19601", "loadPossibleOffers", "m_24127_"), "(Lcmk;)V");
    }

    static void loadPossibleOffers(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_loadPossibleOffers();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isPossible() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "playerItemStackMatchesCostOfOffer", "method_19028", "isPossible", "m_24117_"), "(Ldbu;)Z");
    }

    static jboolean isPossible(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isPossible();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_holdNothing() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "clearHeldItem", "method_37448", "holdNothing", "m_182373_"), "(Lcmk;)V");
    }

    static void holdNothing(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_holdNothing();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID__holdOffer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "displayAsHeldItem", "method_37447", "holdOffer", "m_182370_"), "(Lcmk;Lcuq;)V");
    }

    static void _holdOffer(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID__holdOffer();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_findPotentialCustomer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "lookAtTarget", "method_19603", "findPotentialCustomer", "m_24137_"), "(Lcmk;)Lbtn;");
    }

    static jobject findPotentialCustomer(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_findPotentialCustomer();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_refreshShownOffer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "displayCyclingItems", "method_19026", "refreshShownOffer", "m_24147_"), "(Lcmk;)V");
    }

    static void refreshShownOffer(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_refreshShownOffer();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_ENTITY_AI_BRAIN_TASK_HOLDTRADEOFFERSTASK_HPP