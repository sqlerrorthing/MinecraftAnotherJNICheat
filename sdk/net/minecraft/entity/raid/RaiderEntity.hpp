// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ENTITY_RAID_RAIDERENTITY_HPP
#define NET_MINECRAFT_ENTITY_RAID_RAIDERENTITY_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.entity.raid.RaiderEntity
 * Remapped: coj
 */
namespace RaiderEntity {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("coj", "net/minecraft/world/entity/raid/Raider", "net/minecraft/class_3763", "net/minecraft/entity/raid/RaiderEntity", "net/minecraft/src/C_1189_"));
        }
        return cachedClass;
    };

    // getter for static protected field net.minecraft.entity.raid.RaiderEntity#CELEBRATING
    [[maybe_unused]] static jobject get_field_CELEBRATING() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "IS_CELEBRATING", "field_19032", "CELEBRATING", "f_37835_"), "Lajw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static protected field net.minecraft.entity.raid.RaiderEntity#CELEBRATING
    [[maybe_unused]] static void set_field_CELEBRATING(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "IS_CELEBRATING", "field_19032", "CELEBRATING", "f_37835_"), "Lajw;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.entity.raid.RaiderEntity#OBTAINABLE_OMINOUS_BANNER_PREDICATE
    [[maybe_unused]] static jobject get_field_OBTAINABLE_OMINOUS_BANNER_PREDICATE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ALLOWED_ITEMS", "field_16600", "OBTAINABLE_OMINOUS_BANNER_PREDICATE", "f_37831_"), "Ljava/util/function/Predicate;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.entity.raid.RaiderEntity#OBTAINABLE_OMINOUS_BANNER_PREDICATE
    [[maybe_unused]] static void set_field_OBTAINABLE_OMINOUS_BANNER_PREDICATE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ALLOWED_ITEMS", "field_16600", "OBTAINABLE_OMINOUS_BANNER_PREDICATE", "f_37831_"), "Ljava/util/function/Predicate;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for protected field net.minecraft.entity.raid.RaiderEntity#raid
    static jobject get_field_raid(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "raid", "field_16599", "raid", "f_37836_"), "Lcoi;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.entity.raid.RaiderEntity#raid
    static void set_field_raid(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "raid", "field_16599", "raid", "f_37836_"), "Lcoi;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.raid.RaiderEntity#wave
    static jint get_field_wave(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "wave", "field_16601", "wave", "f_37832_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.raid.RaiderEntity#wave
    static void set_field_wave(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "wave", "field_16601", "wave", "f_37832_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.raid.RaiderEntity#ableToJoinRaid
    static jboolean get_field_ableToJoinRaid(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cc", "canJoinRaid", "field_16602", "ableToJoinRaid", "f_37833_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.raid.RaiderEntity#ableToJoinRaid
    static void set_field_ableToJoinRaid(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cc", "canJoinRaid", "field_16602", "ableToJoinRaid", "f_37833_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.raid.RaiderEntity#outOfRaidCounter
    static jint get_field_outOfRaidCounter(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cd", "ticksOutsideRaid", "field_16997", "outOfRaidCounter", "f_37834_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.raid.RaiderEntity#outOfRaidCounter
    static void set_field_outOfRaidCounter(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cd", "ticksOutsideRaid", "field_16997", "outOfRaidCounter", "f_37834_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    static jmethodID methodID_initGoals() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("B", "registerGoals", "method_5959", "initGoals", "m_8099_"), "()V");
    }

    static void initGoals(const jobject& obj) {
                
       const auto methodID = methodID_initGoals();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_initDataTracker() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "defineSynchedData", "method_5693", "initDataTracker", "m_8097_"), "(Laka$a;)V");
    }

    static void initDataTracker(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_initDataTracker();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_addBonusForWave() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "applyRaidBuffs", "method_16484", "addBonusForWave", "m_7895_"), "(Laqu;IZ)V");
    }

    static void addBonusForWave(const jobject& obj, const jobject& arg0, const jint& arg1, const jboolean& arg2) {
                
       const auto methodID = methodID_addBonusForWave();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_canJoinRaid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("gx", "canJoinRaid", "method_16481", "canJoinRaid", "m_37882_"), "()Z");
    }

    static jboolean canJoinRaid(const jobject& obj) {
                
       const auto methodID = methodID_canJoinRaid();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setAbleToJoinRaid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("A", "setCanJoinRaid", "method_16480", "setAbleToJoinRaid", "m_37897_"), "(Z)V");
    }

    static void setAbleToJoinRaid(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setAbleToJoinRaid();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_tickMovement() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("m_", "aiStep", "method_6007", "tickMovement", "m_8107_"), "()V");
    }

    static void tickMovement(const jobject& obj) {
                
       const auto methodID = methodID_tickMovement();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_updateDespawnCounter() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("gp", "updateNoActionTime", "method_16827", "updateDespawnCounter", "m_7562_"), "()V");
    }

    static void updateDespawnCounter(const jobject& obj) {
                
       const auto methodID = methodID_updateDespawnCounter();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_onDeath() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "die", "method_6078", "onDeath", "m_6667_"), "(Lbrk;)V");
    }

    static void onDeath(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onDeath();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_hasNoRaid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("gr", "canJoinPatrol", "method_16472", "hasNoRaid", "m_7492_"), "()Z");
    }

    static jboolean hasNoRaid(const jobject& obj) {
                
       const auto methodID = methodID_hasNoRaid();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setRaid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setCurrentRaid", "method_16476", "setRaid", "m_37851_"), "(Lcoi;)V");
    }

    static void setRaid(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setRaid();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getRaid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("gy", "getCurrentRaid", "method_16478", "getRaid", "m_37885_"), "()Lcoi;");
    }

    static jobject getRaid(const jobject& obj) {
                
       const auto methodID = methodID_getRaid();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_isCaptain() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("gz", "isCaptain", "method_58646", "isCaptain", "m_324198_"), "()Z");
    }

    static jboolean isCaptain(const jobject& obj) {
                
       const auto methodID = methodID_isCaptain();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasRaid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("gA", "hasRaid", "method_58647", "hasRaid", "m_320449_"), "()Z");
    }

    static jboolean hasRaid(const jobject& obj) {
                
       const auto methodID = methodID_hasRaid();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasActiveRaid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("gB", "hasActiveRaid", "method_16482", "hasActiveRaid", "m_37886_"), "()Z");
    }

    static jboolean hasActiveRaid(const jobject& obj) {
                
       const auto methodID = methodID_hasActiveRaid();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setWave() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setWave", "method_16477", "setWave", "m_37842_"), "(I)V");
    }

    static void setWave(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_setWave();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getWave() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("gC", "getWave", "method_16486", "getWave", "m_37887_"), "()I");
    }

    static jint getWave(const jobject& obj) {
                
       const auto methodID = methodID_getWave();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_isCelebrating() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("gD", "isCelebrating", "method_20034", "isCelebrating", "m_37888_"), "()Z");
    }

    static jboolean isCelebrating(const jobject& obj) {
                
       const auto methodID = methodID_isCelebrating();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setCelebrating() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("B", "setCelebrating", "method_20036", "setCelebrating", "m_37899_"), "(Z)V");
    }

    static void setCelebrating(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setCelebrating();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_writeCustomDataToNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "addAdditionalSaveData", "method_5652", "writeCustomDataToNbt", "m_7380_"), "(Lub;)V");
    }

    static void writeCustomDataToNbt(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_writeCustomDataToNbt();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_readCustomDataFromNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "readAdditionalSaveData", "method_5749", "readCustomDataFromNbt", "m_7378_"), "(Lub;)V");
    }

    static void readCustomDataFromNbt(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_readCustomDataFromNbt();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_loot() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "pickUpItem", "method_5949", "loot", "m_7581_"), "(Lcjh;)V");
    }

    static void loot(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_loot();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_canImmediatelyDespawn() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "removeWhenFarAway", "method_5974", "canImmediatelyDespawn", "m_6785_"), "(D)Z");
    }

    static jboolean canImmediatelyDespawn(const jobject& obj, const jdouble& arg0) {
                
       const auto methodID = methodID_canImmediatelyDespawn();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_cannotDespawn() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("Y", "requiresCustomPersistence", "method_17326", "cannotDespawn", "m_8023_"), "()Z");
    }

    static jboolean cannotDespawn(const jobject& obj) {
                
       const auto methodID = methodID_cannotDespawn();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getOutOfRaidCounter() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("gE", "getTicksOutsideRaid", "method_16836", "getOutOfRaidCounter", "m_37889_"), "()I");
    }

    static jint getOutOfRaidCounter(const jobject& obj) {
                
       const auto methodID = methodID_getOutOfRaidCounter();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_setOutOfRaidCounter() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "setTicksOutsideRaid", "method_16835", "setOutOfRaidCounter", "m_37863_"), "(I)V");
    }

    static void setOutOfRaidCounter(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_setOutOfRaidCounter();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_damage() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "hurt", "method_5643", "damage", "m_6469_"), "(Lbrk;F)Z");
    }

    static jboolean damage(const jobject& obj, const jobject& arg0, const jfloat& arg1) {
                
       const auto methodID = methodID_damage();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_initialize() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "finalizeSpawn", "method_5943", "initialize", "m_6518_"), "(Lddl;Lbqp;Lbtr;Lbuh;)Lbuh;");
    }

    static jobject initialize(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_initialize();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_getCelebratingSound() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("ai_", "getCelebrateSound", "method_20033", "getCelebratingSound", "m_7930_"), "()Lavo;");
    }

    static jobject getCelebratingSound(const jobject& obj) {
                
       const auto methodID = methodID_getCelebratingSound();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_ENTITY_RAID_RAIDERENTITY_HPP