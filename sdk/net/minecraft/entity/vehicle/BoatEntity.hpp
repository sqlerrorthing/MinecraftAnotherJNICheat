// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ENTITY_VEHICLE_BOATENTITY_HPP
#define NET_MINECRAFT_ENTITY_VEHICLE_BOATENTITY_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.entity.vehicle.BoatEntity
 * Remapped: cov
 */
namespace BoatEntity {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("cov", "net/minecraft/world/entity/vehicle/Boat", "net/minecraft/class_1690", "net/minecraft/entity/vehicle/BoatEntity", "net/minecraft/src/C_1205_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.entity.vehicle.BoatEntity#BOAT_TYPE
    [[maybe_unused]] static jobject get_field_BOAT_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "DATA_ID_TYPE", "field_7698", "BOAT_TYPE", "f_38285_"), "Lajw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.vehicle.BoatEntity#BOAT_TYPE
    [[maybe_unused]] static void set_field_BOAT_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "DATA_ID_TYPE", "field_7698", "BOAT_TYPE", "f_38285_"), "Lajw;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.vehicle.BoatEntity#LEFT_PADDLE_MOVING
    [[maybe_unused]] static jobject get_field_LEFT_PADDLE_MOVING() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "DATA_ID_PADDLE_LEFT", "field_7687", "LEFT_PADDLE_MOVING", "f_38286_"), "Lajw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.vehicle.BoatEntity#LEFT_PADDLE_MOVING
    [[maybe_unused]] static void set_field_LEFT_PADDLE_MOVING(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "DATA_ID_PADDLE_LEFT", "field_7687", "LEFT_PADDLE_MOVING", "f_38286_"), "Lajw;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.vehicle.BoatEntity#RIGHT_PADDLE_MOVING
    [[maybe_unused]] static jobject get_field_RIGHT_PADDLE_MOVING() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "DATA_ID_PADDLE_RIGHT", "field_7713", "RIGHT_PADDLE_MOVING", "f_38287_"), "Lajw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.vehicle.BoatEntity#RIGHT_PADDLE_MOVING
    [[maybe_unused]] static void set_field_RIGHT_PADDLE_MOVING(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "DATA_ID_PADDLE_RIGHT", "field_7713", "RIGHT_PADDLE_MOVING", "f_38287_"), "Lajw;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.vehicle.BoatEntity#BUBBLE_WOBBLE_TICKS
    [[maybe_unused]] static jobject get_field_BUBBLE_WOBBLE_TICKS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "DATA_ID_BUBBLE_TIME", "field_7691", "BUBBLE_WOBBLE_TICKS", "f_38262_"), "Lajw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.vehicle.BoatEntity#BUBBLE_WOBBLE_TICKS
    [[maybe_unused]] static void set_field_BUBBLE_WOBBLE_TICKS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "DATA_ID_BUBBLE_TIME", "field_7691", "BUBBLE_WOBBLE_TICKS", "f_38262_"), "Lajw;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.entity.vehicle.BoatEntity#field_30697
    [[maybe_unused]] static jint get_field_field_30697() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "PADDLE_LEFT", "field_30697", "field_30697", "f_150268_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.vehicle.BoatEntity#field_30697
    [[maybe_unused]] static void set_field_field_30697(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "PADDLE_LEFT", "field_30697", "field_30697", "f_150268_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.entity.vehicle.BoatEntity#field_30698
    [[maybe_unused]] static jint get_field_field_30698() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "PADDLE_RIGHT", "field_30698", "field_30698", "f_150269_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.vehicle.BoatEntity#field_30698
    [[maybe_unused]] static void set_field_field_30698(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "PADDLE_RIGHT", "field_30698", "field_30698", "f_150269_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.vehicle.BoatEntity#field_30695
    [[maybe_unused]] static jint get_field_field_30695() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "TIME_TO_EJECT", "field_30695", "field_30695", "f_150266_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.vehicle.BoatEntity#field_30695
    [[maybe_unused]] static void set_field_field_30695(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "TIME_TO_EJECT", "field_30695", "field_30695", "f_150266_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.vehicle.BoatEntity#NEXT_PADDLE_PHASE
    [[maybe_unused]] static jfloat get_field_NEXT_PADDLE_PHASE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "PADDLE_SPEED", "field_30696", "NEXT_PADDLE_PHASE", "f_150267_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.vehicle.BoatEntity#NEXT_PADDLE_PHASE
    [[maybe_unused]] static void set_field_NEXT_PADDLE_PHASE(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "PADDLE_SPEED", "field_30696", "NEXT_PADDLE_PHASE", "f_150267_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.entity.vehicle.BoatEntity#EMIT_SOUND_EVENT_PADDLE_ROTATION
    [[maybe_unused]] static jdouble get_field_EMIT_SOUND_EVENT_PADDLE_ROTATION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "PADDLE_SOUND_TIME", "field_30699", "EMIT_SOUND_EVENT_PADDLE_ROTATION", "f_150270_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.vehicle.BoatEntity#EMIT_SOUND_EVENT_PADDLE_ROTATION
    [[maybe_unused]] static void set_field_EMIT_SOUND_EVENT_PADDLE_ROTATION(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "PADDLE_SOUND_TIME", "field_30699", "EMIT_SOUND_EVENT_PADDLE_ROTATION", "f_150270_"), "D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.entity.vehicle.BoatEntity#field_30700
    [[maybe_unused]] static jint get_field_field_30700() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "BUBBLE_TIME", "field_30700", "field_30700", "f_150271_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.vehicle.BoatEntity#field_30700
    [[maybe_unused]] static void set_field_field_30700(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "BUBBLE_TIME", "field_30700", "field_30700", "f_150271_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.entity.vehicle.BoatEntity#paddlePhases
    static jfloat get_field_paddlePhases(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "paddlePositions", "field_7704", "paddlePhases", "f_38263_"), "[F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.vehicle.BoatEntity#paddlePhases
    static void set_field_paddlePhases(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "paddlePositions", "field_7704", "paddlePhases", "f_38263_"), "[F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.vehicle.BoatEntity#velocityDecay
    static jfloat get_field_velocityDecay(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "invFriction", "field_7692", "velocityDecay", "f_38264_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.vehicle.BoatEntity#velocityDecay
    static void set_field_velocityDecay(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "invFriction", "field_7692", "velocityDecay", "f_38264_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.vehicle.BoatEntity#ticksUnderwater
    static jfloat get_field_ticksUnderwater(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "outOfControlTicks", "field_7706", "ticksUnderwater", "f_38265_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.vehicle.BoatEntity#ticksUnderwater
    static void set_field_ticksUnderwater(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "outOfControlTicks", "field_7706", "ticksUnderwater", "f_38265_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.vehicle.BoatEntity#yawVelocity
    static jfloat get_field_yawVelocity(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "deltaRotation", "field_7690", "yawVelocity", "f_38266_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.vehicle.BoatEntity#yawVelocity
    static void set_field_yawVelocity(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "deltaRotation", "field_7690", "yawVelocity", "f_38266_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.vehicle.BoatEntity#lerpTicks
    static jint get_field_lerpTicks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "lerpSteps", "field_7708", "lerpTicks", "f_38267_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.vehicle.BoatEntity#lerpTicks
    static void set_field_lerpTicks(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "lerpSteps", "field_7708", "lerpTicks", "f_38267_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.vehicle.BoatEntity#x
    static jdouble get_field_x(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "lerpX", "field_7686", "x", "f_38268_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.vehicle.BoatEntity#x
    static void set_field_x(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "lerpX", "field_7686", "x", "f_38268_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.vehicle.BoatEntity#y
    static jdouble get_field_y(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "lerpY", "field_7700", "y", "f_38269_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.vehicle.BoatEntity#y
    static void set_field_y(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "lerpY", "field_7700", "y", "f_38269_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.vehicle.BoatEntity#z
    static jdouble get_field_z(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "lerpZ", "field_7685", "z", "f_38270_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.vehicle.BoatEntity#z
    static void set_field_z(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "lerpZ", "field_7685", "z", "f_38270_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.vehicle.BoatEntity#boatYaw
    static jdouble get_field_boatYaw(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aD", "lerpYRot", "field_7699", "boatYaw", "f_38271_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.vehicle.BoatEntity#boatYaw
    static void set_field_boatYaw(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aD", "lerpYRot", "field_7699", "boatYaw", "f_38271_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.vehicle.BoatEntity#boatPitch
    static jdouble get_field_boatPitch(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aE", "lerpXRot", "field_7684", "boatPitch", "f_38272_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.vehicle.BoatEntity#boatPitch
    static void set_field_boatPitch(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aE", "lerpXRot", "field_7684", "boatPitch", "f_38272_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.vehicle.BoatEntity#pressingLeft
    static jboolean get_field_pressingLeft(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aF", "inputLeft", "field_7710", "pressingLeft", "f_38273_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.vehicle.BoatEntity#pressingLeft
    static void set_field_pressingLeft(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aF", "inputLeft", "field_7710", "pressingLeft", "f_38273_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.vehicle.BoatEntity#pressingRight
    static jboolean get_field_pressingRight(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aG", "inputRight", "field_7695", "pressingRight", "f_38274_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.vehicle.BoatEntity#pressingRight
    static void set_field_pressingRight(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aG", "inputRight", "field_7695", "pressingRight", "f_38274_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.vehicle.BoatEntity#pressingForward
    static jboolean get_field_pressingForward(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aH", "inputUp", "field_7709", "pressingForward", "f_38275_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.vehicle.BoatEntity#pressingForward
    static void set_field_pressingForward(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aH", "inputUp", "field_7709", "pressingForward", "f_38275_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.vehicle.BoatEntity#pressingBack
    static jboolean get_field_pressingBack(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aI", "inputDown", "field_7693", "pressingBack", "f_38276_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.vehicle.BoatEntity#pressingBack
    static void set_field_pressingBack(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aI", "inputDown", "field_7693", "pressingBack", "f_38276_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.vehicle.BoatEntity#waterLevel
    static jdouble get_field_waterLevel(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aJ", "waterLevel", "field_7697", "waterLevel", "f_38277_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.vehicle.BoatEntity#waterLevel
    static void set_field_waterLevel(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aJ", "waterLevel", "field_7697", "waterLevel", "f_38277_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.vehicle.BoatEntity#nearbySlipperiness
    static jfloat get_field_nearbySlipperiness(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aK", "landFriction", "field_7714", "nearbySlipperiness", "f_38278_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.vehicle.BoatEntity#nearbySlipperiness
    static void set_field_nearbySlipperiness(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aK", "landFriction", "field_7714", "nearbySlipperiness", "f_38278_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.vehicle.BoatEntity#location
    static jobject get_field_location(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aL", "status", "field_7702", "location", "f_38279_"), "Lcov$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.vehicle.BoatEntity#location
    static void set_field_location(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aL", "status", "field_7702", "location", "f_38279_"), "Lcov$a;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.vehicle.BoatEntity#lastLocation
    static jobject get_field_lastLocation(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aM", "oldStatus", "field_7701", "lastLocation", "f_38280_"), "Lcov$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.vehicle.BoatEntity#lastLocation
    static void set_field_lastLocation(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aM", "oldStatus", "field_7701", "lastLocation", "f_38280_"), "Lcov$a;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.vehicle.BoatEntity#fallVelocity
    static jdouble get_field_fallVelocity(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aN", "lastYd", "field_7696", "fallVelocity", "f_38281_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.vehicle.BoatEntity#fallVelocity
    static void set_field_fallVelocity(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aN", "lastYd", "field_7696", "fallVelocity", "f_38281_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.vehicle.BoatEntity#onBubbleColumnSurface
    static jboolean get_field_onBubbleColumnSurface(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aO", "isAboveBubbleColumn", "field_7689", "onBubbleColumnSurface", "f_38257_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.vehicle.BoatEntity#onBubbleColumnSurface
    static void set_field_onBubbleColumnSurface(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aO", "isAboveBubbleColumn", "field_7689", "onBubbleColumnSurface", "f_38257_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.vehicle.BoatEntity#bubbleColumnIsDrag
    static jboolean get_field_bubbleColumnIsDrag(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aP", "bubbleColumnDirectionIsDown", "field_7703", "bubbleColumnIsDrag", "f_38258_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.vehicle.BoatEntity#bubbleColumnIsDrag
    static void set_field_bubbleColumnIsDrag(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aP", "bubbleColumnDirectionIsDown", "field_7703", "bubbleColumnIsDrag", "f_38258_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.vehicle.BoatEntity#bubbleWobbleStrength
    static jfloat get_field_bubbleWobbleStrength(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aQ", "bubbleMultiplier", "field_7712", "bubbleWobbleStrength", "f_38259_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.vehicle.BoatEntity#bubbleWobbleStrength
    static void set_field_bubbleWobbleStrength(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aQ", "bubbleMultiplier", "field_7712", "bubbleWobbleStrength", "f_38259_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.vehicle.BoatEntity#bubbleWobble
    static jfloat get_field_bubbleWobble(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aR", "bubbleAngle", "field_7694", "bubbleWobble", "f_38260_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.vehicle.BoatEntity#bubbleWobble
    static void set_field_bubbleWobble(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aR", "bubbleAngle", "field_7694", "bubbleWobble", "f_38260_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.vehicle.BoatEntity#lastBubbleWobble
    static jfloat get_field_lastBubbleWobble(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aS", "bubbleAngleO", "field_7711", "lastBubbleWobble", "f_38261_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.vehicle.BoatEntity#lastBubbleWobble
    static void set_field_lastBubbleWobble(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aS", "bubbleAngleO", "field_7711", "lastBubbleWobble", "f_38261_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.vehicle.BoatEntity#leashData
    static jobject get_field_leashData(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aT", "leashData", "field_52225", "leashData", "f_336799_"), "Lbtk$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.vehicle.BoatEntity#leashData
    static void set_field_leashData(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aT", "leashData", "field_52225", "leashData", "f_336799_"), "Lbtk$a;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_getMoveEffect() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bc", "getMovementEmission", "method_33570", "getMoveEffect", "m_142319_"), "()Lbsr$b;");
    }

    static jobject getMoveEffect(const jobject& obj) {
                
       const auto methodID = methodID_getMoveEffect();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_initDataTracker() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "defineSynchedData", "method_5693", "initDataTracker", "m_8097_"), "(Laka$a;)V");
    }

    static void initDataTracker(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_initDataTracker();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_collidesWith() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "canCollideWith", "method_30949", "collidesWith", "m_7337_"), "(Lbsr;)Z");
    }

    static jboolean collidesWith(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_collidesWith();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_canCollide() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "canVehicleCollide", "method_30959", "canCollide", "m_38323_"), "(Lbsr;Lbsr;)Z");
    }

    static jboolean canCollide(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_canCollide();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isCollidable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bG", "canBeCollidedWith", "method_30948", "isCollidable", "m_5829_"), "()Z");
    }

    static jboolean isCollidable(const jobject& obj) {
                
       const auto methodID = methodID_isCollidable();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isPushable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bB", "isPushable", "method_5810", "isPushable", "m_6094_"), "()Z");
    }

    static jboolean isPushable(const jobject& obj) {
                
       const auto methodID = methodID_isPushable();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_positionInPortal() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getRelativePortalPosition", "method_30633", "positionInPortal", "m_7643_"), "(Lji$a;Ll$a;)Lexc;");
    }

    static jobject positionInPortal(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_positionInPortal();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getPassengerAttachmentPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getPassengerAttachmentPoint", "method_52533", "getPassengerAttachmentPos", "m_293035_"), "(Lbsr;Lbsu;F)Lexc;");
    }

    static jobject getPassengerAttachmentPos(const jobject& obj, const jobject& arg0, const jobject& arg1, const jfloat& arg2) {
                
       const auto methodID = methodID_getPassengerAttachmentPos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_onBubbleColumnSurfaceCollision() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "onAboveBubbleCol", "method_5700", "onBubbleColumnSurfaceCollision", "m_6845_"), "(Z)V");
    }

    static void onBubbleColumnSurfaceCollision(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_onBubbleColumnSurfaceCollision();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_pushAwayFrom() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "push", "method_5697", "pushAwayFrom", "m_7334_"), "(Lbsr;)V");
    }

    static void pushAwayFrom(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_pushAwayFrom();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_asItem() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("ak_", "getDropItem", "method_7557", "asItem", "m_38369_"), "()Lcul;");
    }

    static jobject asItem(const jobject& obj) {
                
       const auto methodID = methodID_asItem();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_animateDamage() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("n", "animateHurt", "method_5879", "animateDamage", "m_6053_"), "(F)V");
    }

    static void animateDamage(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_animateDamage();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_canHit() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bA", "isPickable", "method_5863", "canHit", "m_6087_"), "()Z");
    }

    static jboolean canHit(const jobject& obj) {
                
       const auto methodID = methodID_canHit();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_updateTrackedPositionAndAngles() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "lerpTo", "method_5759", "updateTrackedPositionAndAngles", "m_6453_"), "(DDDFFI)V");
    }

    static void updateTrackedPositionAndAngles(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2, const jfloat& arg3, const jfloat& arg4, const jint& arg5) {
                
       const auto methodID = methodID_updateTrackedPositionAndAngles();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
    static jmethodID methodID_getLerpTargetX() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c_", "lerpTargetX", "method_53830", "getLerpTargetX", "m_293268_"), "()D");
    }

    static jdouble getLerpTargetX(const jobject& obj) {
                
       const auto methodID = methodID_getLerpTargetX();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_getLerpTargetY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d_", "lerpTargetY", "method_53827", "getLerpTargetY", "m_293950_"), "()D");
    }

    static jdouble getLerpTargetY(const jobject& obj) {
                
       const auto methodID = methodID_getLerpTargetY();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_getLerpTargetZ() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("P_", "lerpTargetZ", "method_53828", "getLerpTargetZ", "m_292720_"), "()D");
    }

    static jdouble getLerpTargetZ(const jobject& obj) {
                
       const auto methodID = methodID_getLerpTargetZ();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_getLerpTargetPitch() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("Q_", "lerpTargetXRot", "method_53829", "getLerpTargetPitch", "m_293123_"), "()F");
    }

    static jfloat getLerpTargetPitch(const jobject& obj) {
                
       const auto methodID = methodID_getLerpTargetPitch();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_getLerpTargetYaw() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e_", "lerpTargetYRot", "method_53831", "getLerpTargetYaw", "m_293582_"), "()F");
    }

    static jfloat getLerpTargetYaw(const jobject& obj) {
                
       const auto methodID = methodID_getLerpTargetYaw();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_getMovementDirection() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cI", "getMotionDirection", "method_5755", "getMovementDirection", "m_6374_"), "()Lji;");
    }

    static jobject getMovementDirection(const jobject& obj) {
                
       const auto methodID = methodID_getMovementDirection();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "tick", "method_5773", "tick", "m_8119_"), "()V");
    }

    static void tick(const jobject& obj) {
                
       const auto methodID = methodID_tick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_handleBubbleColumn() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("B", "tickBubbleColumn", "method_7550", "handleBubbleColumn", "m_38388_"), "()V");
    }

    static void handleBubbleColumn(const jobject& obj) {
                
       const auto methodID = methodID_handleBubbleColumn();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getPaddleSoundEvent() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("s", "getPaddleSound", "method_7537", "getPaddleSoundEvent", "m_38370_"), "()Lavo;");
    }

    static jobject getPaddleSoundEvent(const jobject& obj) {
                
       const auto methodID = methodID_getPaddleSoundEvent();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_updatePositionAndRotation() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("C", "tickLerp", "method_7555", "updatePositionAndRotation", "m_38391_"), "()V");
    }

    static void updatePositionAndRotation(const jobject& obj) {
                
       const auto methodID = methodID_updatePositionAndRotation();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_setPaddleMovings() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setPaddleState", "method_7538", "setPaddleMovings", "m_38339_"), "(ZZ)V");
    }

    static void setPaddleMovings(const jobject& obj, const jboolean& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_setPaddleMovings();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_interpolatePaddlePhase() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getRowingTime", "method_7551", "interpolatePaddlePhase", "m_38315_"), "(IF)F");
    }

    static jfloat interpolatePaddlePhase(const jobject& obj, const jint& arg0, const jfloat& arg1) {
                
       const auto methodID = methodID_interpolatePaddlePhase();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getLeashData() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("X_", "getLeashData", "method_60955", "getLeashData", "m_338492_"), "()Lbtk$a;");
    }

    static jobject getLeashData(const jobject& obj) {
                
       const auto methodID = methodID_getLeashData();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_setLeashData() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setLeashData", "method_60960", "setLeashData", "m_338401_"), "(Lbtk$a;)V");
    }

    static void setLeashData(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setLeashData();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getLeashOffset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cM", "getLeashOffset", "method_29919", "getLeashOffset", "m_7939_"), "()Lexc;");
    }

    static jobject getLeashOffset(const jobject& obj) {
                
       const auto methodID = methodID_getLeashOffset();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_applyLeashElasticity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "elasticRangeLeashBehaviour", "method_61162", "applyLeashElasticity", "m_338435_"), "(Lbsr;F)V");
    }

    static void applyLeashElasticity(const jobject& obj, const jobject& arg0, const jfloat& arg1) {
                
       const auto methodID = methodID_applyLeashElasticity();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_checkLocation() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("D", "getStatus", "method_7552", "checkLocation", "m_38392_"), "()Lcov$a;");
    }

    static jobject checkLocation(const jobject& obj) {
                
       const auto methodID = methodID_checkLocation();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getWaterHeightBelow() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("t", "getWaterLevelAbove", "method_7544", "getWaterHeightBelow", "m_38371_"), "()F");
    }

    static jfloat getWaterHeightBelow(const jobject& obj) {
                
       const auto methodID = methodID_getWaterHeightBelow();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_getNearbySlipperiness() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("v", "getGroundFriction", "method_7548", "getNearbySlipperiness", "m_38377_"), "()F");
    }

    static jfloat getNearbySlipperiness(const jobject& obj) {
                
       const auto methodID = methodID_getNearbySlipperiness();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_checkBoatInWater() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("E", "checkInWater", "method_7545", "checkBoatInWater", "m_38393_"), "()Z");
    }

    static jboolean checkBoatInWater(const jobject& obj) {
                
       const auto methodID = methodID_checkBoatInWater();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getUnderWaterLocation() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("H", "isUnderwater", "method_7532", "getUnderWaterLocation", "m_38394_"), "()Lcov$a;");
    }

    static jobject getUnderWaterLocation(const jobject& obj) {
                
       const auto methodID = methodID_getUnderWaterLocation();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getGravity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aZ", "getDefaultGravity", "method_7490", "getGravity", "m_319564_"), "()D");
    }

    static jdouble getGravity(const jobject& obj) {
                
       const auto methodID = methodID_getGravity();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_updateVelocity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("I", "floatBoat", "method_7534", "updateVelocity", "m_38395_"), "()V");
    }

    static void updateVelocity(const jobject& obj) {
                
       const auto methodID = methodID_updateVelocity();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_updatePaddles() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("J", "controlBoat", "method_7549", "updatePaddles", "m_38396_"), "()V");
    }

    static void updatePaddles(const jobject& obj) {
                
       const auto methodID = methodID_updatePaddles();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getPassengerHorizontalOffset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("w", "getSinglePassengerXOffset", "method_42280", "getPassengerHorizontalOffset", "m_213802_"), "()F");
    }

    static jfloat getPassengerHorizontalOffset(const jobject& obj) {
                
       const auto methodID = methodID_getPassengerHorizontalOffset();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_isSmallerThanBoat() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "hasEnoughSpaceFor", "method_49182", "isSmallerThanBoat", "m_271938_"), "(Lbsr;)Z");
    }

    static jboolean isSmallerThanBoat(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isSmallerThanBoat();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_updatePassengerPosition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "positionRider", "method_5865", "updatePassengerPosition", "m_19956_"), "(Lbsr;Lbsr$a;)V");
    }

    static void updatePassengerPosition(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_updatePassengerPosition();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_updatePassengerForDismount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getDismountLocationForPassenger", "method_24829", "updatePassengerForDismount", "m_7688_"), "(Lbtn;)Lexc;");
    }

    static jobject updatePassengerForDismount(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_updatePassengerForDismount();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_clampPassengerYaw() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "clampRotation", "method_7546", "clampPassengerYaw", "m_38321_"), "(Lbsr;)V");
    }

    static void clampPassengerYaw(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_clampPassengerYaw();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onPassengerLookAround() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "onPassengerTurned", "method_5644", "onPassengerLookAround", "m_7340_"), "(Lbsr;)V");
    }

    static void onPassengerLookAround(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onPassengerLookAround();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_writeCustomDataToNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "addAdditionalSaveData", "method_5652", "writeCustomDataToNbt", "m_7380_"), "(Lub;)V");
    }

    static void writeCustomDataToNbt(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_writeCustomDataToNbt();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_readCustomDataFromNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "readAdditionalSaveData", "method_5749", "readCustomDataFromNbt", "m_7378_"), "(Lub;)V");
    }

    static void readCustomDataFromNbt(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_readCustomDataFromNbt();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_interact() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "interact", "method_5688", "interact", "m_6096_"), "(Lcmx;Lbqq;)Lbqr;");
    }

    static jobject interact(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_interact();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_remove() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "remove", "method_5650", "remove", "m_142687_"), "(Lbsr$c;)V");
    }

    static void remove(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_remove();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_fall() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "checkFallDamage", "method_5623", "fall", "m_7840_"), "(DZLdtc;Ljd;)V");
    }

    static void fall(const jobject& obj, const jdouble& arg0, const jboolean& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_fall();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_isPaddleMoving() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getPaddleState", "method_7556", "isPaddleMoving", "m_38313_"), "(I)Z");
    }

    static jboolean isPaddleMoving(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_isPaddleMoving();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setBubbleWobbleTicks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setBubbleTime", "method_7531", "setBubbleWobbleTicks", "m_38366_"), "(I)V");
    }

    static void setBubbleWobbleTicks(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_setBubbleWobbleTicks();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getBubbleWobbleTicks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("K", "getBubbleTime", "method_7539", "getBubbleWobbleTicks", "m_38397_"), "()I");
    }

    static jint getBubbleWobbleTicks(const jobject& obj) {
                
       const auto methodID = methodID_getBubbleWobbleTicks();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_interpolateBubbleWobble() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getBubbleAngle", "method_7547", "interpolateBubbleWobble", "m_38352_"), "(F)F");
    }

    static jfloat interpolateBubbleWobble(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_interpolateBubbleWobble();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setVariant() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setVariant", "method_47884", "setVariant", "m_28464_"), "(Lcov$b;)V");
    }

    static void setVariant(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setVariant();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getVariant() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("x", "getVariant", "method_47885", "getVariant", "m_28554_"), "()Lcov$b;");
    }

    static jobject getVariant(const jobject& obj) {
                
       const auto methodID = methodID_getVariant();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_canAddPassenger() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("r", "canAddPassenger", "method_5818", "canAddPassenger", "m_7310_"), "(Lbsr;)Z");
    }

    static jboolean canAddPassenger(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_canAddPassenger();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getMaxPassengers() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("F", "getMaxPassengers", "method_42281", "getMaxPassengers", "m_213801_"), "()I");
    }

    static jint getMaxPassengers(const jobject& obj) {
                
       const auto methodID = methodID_getMaxPassengers();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getControllingPassenger() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cQ", "getControllingPassenger", "method_5642", "getControllingPassenger", "m_6688_"), "()Lbtn;");
    }

    static jobject getControllingPassenger(const jobject& obj) {
                
       const auto methodID = methodID_getControllingPassenger();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_setInputs() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setInput", "method_7535", "setInputs", "m_38342_"), "(ZZZZ)V");
    }

    static void setInputs(const jobject& obj, const jboolean& arg0, const jboolean& arg1, const jboolean& arg2, const jboolean& arg3) {
                
       const auto methodID = methodID_setInputs();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_getDefaultName() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cs", "getTypeName", "method_23315", "getDefaultName", "m_5677_"), "()Lwz;");
    }

    static jobject getDefaultName(const jobject& obj) {
                
       const auto methodID = methodID_getDefaultName();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_isSubmergedInWater() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bk", "isUnderWater", "method_5869", "isSubmergedInWater", "m_5842_"), "()Z");
    }

    static jboolean isSubmergedInWater(const jobject& obj) {
                
       const auto methodID = methodID_isSubmergedInWater();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getPickBlockStack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dB", "getPickResult", "method_31480", "getPickBlockStack", "m_142340_"), "()Lcuq;");
    }

    static jobject getPickBlockStack(const jobject& obj) {
                
       const auto methodID = methodID_getPickBlockStack();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_ENTITY_VEHICLE_BOATENTITY_HPP