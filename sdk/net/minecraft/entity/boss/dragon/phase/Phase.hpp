// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ENTITY_BOSS_DRAGON_PHASE_PHASE_HPP
#define NET_MINECRAFT_ENTITY_BOSS_DRAGON_PHASE_PHASE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.entity.boss.dragon.phase.Phase
 * Remapped: cik
 */
namespace Phase {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("cik", "net/minecraft/world/entity/boss/enderdragon/phases/DragonPhaseInstance", "net/minecraft/class_1521", "net/minecraft/entity/boss/dragon/phase/Phase", "net/minecraft/src/C_956_"));
        }
        return cachedClass;
    };

    static jmethodID methodID_isSittingOrHovering() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isSitting", "method_6848", "isSittingOrHovering", "m_7080_"), "()Z");
    }

    static jboolean isSittingOrHovering(const jobject& obj) {
                
       const auto methodID = methodID_isSittingOrHovering();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_clientTick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "doClientTick", "method_6853", "clientTick", "m_6991_"), "()V");
    }

    static void clientTick(const jobject& obj) {
                
       const auto methodID = methodID_clientTick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_serverTick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "doServerTick", "method_6855", "serverTick", "m_6989_"), "()V");
    }

    static void serverTick(const jobject& obj) {
                
       const auto methodID = methodID_serverTick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_crystalDestroyed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onCrystalDestroyed", "method_6850", "crystalDestroyed", "m_8059_"), "(Lchz;Ljd;Lbrk;Lcmx;)V");
    }

    static void crystalDestroyed(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_crystalDestroyed();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_beginPhase() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "begin", "method_6856", "beginPhase", "m_7083_"), "()V");
    }

    static void beginPhase(const jobject& obj) {
                
       const auto methodID = methodID_beginPhase();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_endPhase() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "end", "method_6854", "endPhase", "m_7081_"), "()V");
    }

    static void endPhase(const jobject& obj) {
                
       const auto methodID = methodID_endPhase();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getMaxYAcceleration() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "getFlySpeed", "method_6846", "getMaxYAcceleration", "m_7072_"), "()F");
    }

    static jfloat getMaxYAcceleration(const jobject& obj) {
                
       const auto methodID = methodID_getMaxYAcceleration();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_getYawAcceleration() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "getTurnSpeed", "method_6847", "getYawAcceleration", "m_7089_"), "()F");
    }

    static jfloat getYawAcceleration(const jobject& obj) {
                
       const auto methodID = methodID_getYawAcceleration();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_getType() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "getPhase", "method_6849", "getType", "m_7309_"), "()Lciq;");
    }

    static jobject getType(const jobject& obj) {
                
       const auto methodID = methodID_getType();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getPathTarget() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "getFlyTargetLocation", "method_6851", "getPathTarget", "m_5535_"), "()Lexc;");
    }

    static jobject getPathTarget(const jobject& obj) {
                
       const auto methodID = methodID_getPathTarget();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_modifyDamageTaken() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onHurt", "method_6852", "modifyDamageTaken", "m_7584_"), "(Lbrk;F)F");
    }

    static jfloat modifyDamageTaken(const jobject& obj, const jobject& arg0, const jfloat& arg1) {
                
       const auto methodID = methodID_modifyDamageTaken();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_ENTITY_BOSS_DRAGON_PHASE_PHASE_HPP