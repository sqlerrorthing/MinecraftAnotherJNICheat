// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ENTITY_EXPERIENCEORBENTITY_HPP
#define NET_MINECRAFT_ENTITY_EXPERIENCEORBENTITY_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.entity.ExperienceOrbEntity
 * Remapped: btc
 */
namespace ExperienceOrbEntity {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("btc", "net/minecraft/world/entity/ExperienceOrb", "net/minecraft/class_1303", "net/minecraft/entity/ExperienceOrbEntity", "net/minecraft/src/C_518_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.entity.ExperienceOrbEntity#DESPAWN_AGE
    [[maybe_unused]] static jint get_field_DESPAWN_AGE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "LIFETIME", "field_30055", "DESPAWN_AGE", "f_147073_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ExperienceOrbEntity#DESPAWN_AGE
    [[maybe_unused]] static void set_field_DESPAWN_AGE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "LIFETIME", "field_30055", "DESPAWN_AGE", "f_147073_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.ExperienceOrbEntity#EXPENSIVE_UPDATE_INTERVAL
    [[maybe_unused]] static jint get_field_EXPENSIVE_UPDATE_INTERVAL() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "ENTITY_SCAN_PERIOD", "field_30056", "EXPENSIVE_UPDATE_INTERVAL", "f_147074_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ExperienceOrbEntity#EXPENSIVE_UPDATE_INTERVAL
    [[maybe_unused]] static void set_field_EXPENSIVE_UPDATE_INTERVAL(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "ENTITY_SCAN_PERIOD", "field_30056", "EXPENSIVE_UPDATE_INTERVAL", "f_147074_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.ExperienceOrbEntity#field_30057
    [[maybe_unused]] static jint get_field_field_30057() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "MAX_FOLLOW_DIST", "field_30057", "field_30057", "f_147075_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ExperienceOrbEntity#field_30057
    [[maybe_unused]] static void set_field_field_30057(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "MAX_FOLLOW_DIST", "field_30057", "field_30057", "f_147075_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.ExperienceOrbEntity#MERGING_CHANCE_FRACTION
    [[maybe_unused]] static jint get_field_MERGING_CHANCE_FRACTION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "ORB_GROUPS_PER_AREA", "field_30058", "MERGING_CHANCE_FRACTION", "f_147076_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ExperienceOrbEntity#MERGING_CHANCE_FRACTION
    [[maybe_unused]] static void set_field_MERGING_CHANCE_FRACTION(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "ORB_GROUPS_PER_AREA", "field_30058", "MERGING_CHANCE_FRACTION", "f_147076_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.ExperienceOrbEntity#field_30059
    [[maybe_unused]] static jdouble get_field_field_30059() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "ORB_MERGE_DISTANCE", "field_30059", "field_30059", "f_147077_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.ExperienceOrbEntity#field_30059
    [[maybe_unused]] static void set_field_field_30059(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "ORB_MERGE_DISTANCE", "field_30059", "field_30059", "f_147077_"), "D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ExperienceOrbEntity#orbAge
    static jint get_field_orbAge(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "age", "field_6164", "orbAge", "f_20767_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ExperienceOrbEntity#orbAge
    static void set_field_orbAge(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "age", "field_6164", "orbAge", "f_20767_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ExperienceOrbEntity#health
    static jint get_field_health(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "health", "field_6161", "health", "f_20769_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ExperienceOrbEntity#health
    static void set_field_health(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "health", "field_6161", "health", "f_20769_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ExperienceOrbEntity#amount
    static jint get_field_amount(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "value", "field_6159", "amount", "f_20770_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ExperienceOrbEntity#amount
    static void set_field_amount(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "value", "field_6159", "amount", "f_20770_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ExperienceOrbEntity#pickingCount
    static jint get_field_pickingCount(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "count", "field_27009", "pickingCount", "f_147072_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ExperienceOrbEntity#pickingCount
    static void set_field_pickingCount(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "count", "field_27009", "pickingCount", "f_147072_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.ExperienceOrbEntity#target
    static jobject get_field_target(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "followingPlayer", "field_6162", "target", "f_20771_"), "Lcmx;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.ExperienceOrbEntity#target
    static void set_field_target(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "followingPlayer", "field_6162", "target", "f_20771_"), "Lcmx;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_getMoveEffect() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bc", "getMovementEmission", "method_33570", "getMoveEffect", "m_142319_"), "()Lbsr$b;");
    }

    static jobject getMoveEffect(const jobject& obj) {
                
       const auto methodID = methodID_getMoveEffect();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_initDataTracker() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "defineSynchedData", "method_5693", "initDataTracker", "m_8097_"), "(Laka$a;)V");
    }

    static void initDataTracker(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_initDataTracker();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getGravity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aZ", "getDefaultGravity", "method_7490", "getGravity", "m_319564_"), "()D");
    }

    static jdouble getGravity(const jobject& obj) {
                
       const auto methodID = methodID_getGravity();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "tick", "method_5773", "tick", "m_8119_"), "()V");
    }

    static void tick(const jobject& obj) {
                
       const auto methodID = methodID_tick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getVelocityAffectingPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aL", "getBlockPosBelowThatAffectsMyMovement", "method_23314", "getVelocityAffectingPos", "m_20099_"), "()Ljd;");
    }

    static jobject getVelocityAffectingPos(const jobject& obj) {
                
       const auto methodID = methodID_getVelocityAffectingPos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_expensiveUpdate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("t", "scanForEntities", "method_31498", "expensiveUpdate", "m_147103_"), "()V");
    }

    static void expensiveUpdate(const jobject& obj) {
                
       const auto methodID = methodID_expensiveUpdate();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_spawn() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "award", "method_31493", "spawn", "m_147082_"), "(Laqu;Lexc;I)V");
    }

    static void spawn(const jobject& arg0, const jobject& arg1, const jint& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_spawn();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_wasMergedIntoExistingOrb() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "tryMergeToExisting", "method_31496", "wasMergedIntoExistingOrb", "m_147096_"), "(Laqu;Lexc;I)Z");
    }

    static jboolean wasMergedIntoExistingOrb(const jobject& arg0, const jobject& arg1, const jint& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_wasMergedIntoExistingOrb();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_isMergeable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "canMerge", "method_31494", "isMergeable", "m_147086_"), "(Lbtc;)Z");
    }

    static jboolean isMergeable(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isMergeable();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__isMergeable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "canMerge", "method_31495", "isMergeable", "m_147088_"), "(Lbtc;II)Z");
    }

    static jboolean _isMergeable(const jobject& arg0, const jint& arg1, const jint& arg2) {
       const auto clazz = self();
       const auto methodID = methodID__isMergeable();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_merge() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "merge", "method_31497", "merge", "m_147100_"), "(Lbtc;)V");
    }

    static void merge(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_merge();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_applyWaterMovement() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("v", "setUnderwaterMovement", "method_5921", "applyWaterMovement", "m_20803_"), "()V");
    }

    static void applyWaterMovement(const jobject& obj) {
                
       const auto methodID = methodID_applyWaterMovement();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_onSwimmingStart() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bo", "doWaterSplashEffect", "method_5746", "onSwimmingStart", "m_5841_"), "()V");
    }

    static void onSwimmingStart(const jobject& obj) {
                
       const auto methodID = methodID_onSwimmingStart();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_damage() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "hurt", "method_5643", "damage", "m_6469_"), "(Lbrk;F)Z");
    }

    static jboolean damage(const jobject& obj, const jobject& arg0, const jfloat& arg1) {
                
       const auto methodID = methodID_damage();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_writeCustomDataToNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "addAdditionalSaveData", "method_5652", "writeCustomDataToNbt", "m_7380_"), "(Lub;)V");
    }

    static void writeCustomDataToNbt(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_writeCustomDataToNbt();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_readCustomDataFromNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "readAdditionalSaveData", "method_5749", "readCustomDataFromNbt", "m_7378_"), "(Lub;)V");
    }

    static void readCustomDataFromNbt(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_readCustomDataFromNbt();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onPlayerCollision() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b_", "playerTouch", "method_5694", "onPlayerCollision", "m_6123_"), "(Lcmx;)V");
    }

    static void onPlayerCollision(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onPlayerCollision();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_repairPlayerGears() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "repairPlayerItems", "method_35051", "repairPlayerGears", "m_147092_"), "(Laqv;I)I");
    }

    static jint repairPlayerGears(const jobject& obj, const jobject& arg0, const jint& arg1) {
                
       const auto methodID = methodID_repairPlayerGears();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getExperienceAmount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("p", "getValue", "method_5919", "getExperienceAmount", "m_20801_"), "()I");
    }

    static jint getExperienceAmount(const jobject& obj) {
                
       const auto methodID = methodID_getExperienceAmount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getOrbSize() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("s", "getIcon", "method_5920", "getOrbSize", "m_20802_"), "()I");
    }

    static jint getOrbSize(const jobject& obj) {
                
       const auto methodID = methodID_getOrbSize();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_roundToOrbSize() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "getExperienceValue", "method_5918", "roundToOrbSize", "m_20782_"), "(I)I");
    }

    static jint roundToOrbSize(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_roundToOrbSize();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_isAttackable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cu", "isAttackable", "method_5732", "isAttackable", "m_6097_"), "()Z");
    }

    static jboolean isAttackable(const jobject& obj) {
                
       const auto methodID = methodID_isAttackable();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_createSpawnPacket() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getAddEntityPacket", "method_18002", "createSpawnPacket", "m_5654_"), "(Laqt;)Lzg;");
    }

    static jobject createSpawnPacket(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_createSpawnPacket();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getSoundCategory() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("de", "getSoundSource", "method_5634", "getSoundCategory", "m_5720_"), "()Lavq;");
    }

    static jobject getSoundCategory(const jobject& obj) {
                
       const auto methodID = methodID_getSoundCategory();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_ENTITY_EXPERIENCEORBENTITY_HPP