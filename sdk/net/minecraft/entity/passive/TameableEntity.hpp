// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ENTITY_PASSIVE_TAMEABLEENTITY_HPP
#define NET_MINECRAFT_ENTITY_PASSIVE_TAMEABLEENTITY_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.entity.passive.TameableEntity
 * Remapped: bul
 */
namespace TameableEntity {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("bul", "net/minecraft/world/entity/TamableAnimal", "net/minecraft/class_1321", "net/minecraft/entity/passive/TameableEntity", "net/minecraft/src/C_547_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.entity.passive.TameableEntity#field_52002
    [[maybe_unused]] static jint get_field_field_52002() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cc", "TELEPORT_WHEN_DISTANCE_IS_SQ", "field_52002", "field_52002", "f_337429_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.passive.TameableEntity#field_52002
    [[maybe_unused]] static void set_field_field_52002(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cc", "TELEPORT_WHEN_DISTANCE_IS_SQ", "field_52002", "field_52002", "f_337429_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.passive.TameableEntity#field_52003
    [[maybe_unused]] static jint get_field_field_52003() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cg", "MIN_HORIZONTAL_DISTANCE_FROM_TARGET_AFTER_TELEPORTING", "field_52003", "field_52003", "f_337470_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.passive.TameableEntity#field_52003
    [[maybe_unused]] static void set_field_field_52003(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cg", "MIN_HORIZONTAL_DISTANCE_FROM_TARGET_AFTER_TELEPORTING", "field_52003", "field_52003", "f_337470_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.passive.TameableEntity#field_52004
    [[maybe_unused]] static jint get_field_field_52004() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ch", "MAX_HORIZONTAL_DISTANCE_FROM_TARGET_AFTER_TELEPORTING", "field_52004", "field_52004", "f_336822_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.passive.TameableEntity#field_52004
    [[maybe_unused]] static void set_field_field_52004(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ch", "MAX_HORIZONTAL_DISTANCE_FROM_TARGET_AFTER_TELEPORTING", "field_52004", "field_52004", "f_336822_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.passive.TameableEntity#field_52005
    [[maybe_unused]] static jint get_field_field_52005() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ci", "MAX_VERTICAL_DISTANCE_FROM_TARGET_AFTER_TELEPORTING", "field_52005", "field_52005", "f_336861_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.passive.TameableEntity#field_52005
    [[maybe_unused]] static void set_field_field_52005(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ci", "MAX_VERTICAL_DISTANCE_FROM_TARGET_AFTER_TELEPORTING", "field_52005", "field_52005", "f_336861_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static protected field net.minecraft.entity.passive.TameableEntity#TAMEABLE_FLAGS
    [[maybe_unused]] static jobject get_field_TAMEABLE_FLAGS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cd", "DATA_FLAGS_ID", "field_6322", "TAMEABLE_FLAGS", "f_21798_"), "Lajw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static protected field net.minecraft.entity.passive.TameableEntity#TAMEABLE_FLAGS
    [[maybe_unused]] static void set_field_TAMEABLE_FLAGS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cd", "DATA_FLAGS_ID", "field_6322", "TAMEABLE_FLAGS", "f_21798_"), "Lajw;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static protected field net.minecraft.entity.passive.TameableEntity#OWNER_UUID
    [[maybe_unused]] static jobject get_field_OWNER_UUID() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ce", "DATA_OWNERUUID_ID", "field_6320", "OWNER_UUID", "f_21799_"), "Lajw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static protected field net.minecraft.entity.passive.TameableEntity#OWNER_UUID
    [[maybe_unused]] static void set_field_OWNER_UUID(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ce", "DATA_OWNERUUID_ID", "field_6320", "OWNER_UUID", "f_21799_"), "Lajw;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.entity.passive.TameableEntity#sitting
    static jboolean get_field_sitting(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cj", "orderedToSit", "field_21974", "sitting", "f_21800_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.passive.TameableEntity#sitting
    static void set_field_sitting(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cj", "orderedToSit", "field_21974", "sitting", "f_21800_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    static jmethodID methodID_initDataTracker() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "defineSynchedData", "method_5693", "initDataTracker", "m_8097_"), "(Laka$a;)V");
    }

    static void initDataTracker(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_initDataTracker();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_writeCustomDataToNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "addAdditionalSaveData", "method_5652", "writeCustomDataToNbt", "m_7380_"), "(Lub;)V");
    }

    static void writeCustomDataToNbt(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_writeCustomDataToNbt();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_readCustomDataFromNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "readAdditionalSaveData", "method_5749", "readCustomDataFromNbt", "m_7378_"), "(Lub;)V");
    }

    static void readCustomDataFromNbt(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_readCustomDataFromNbt();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_canBeLeashed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("y", "canBeLeashed", "method_5931", "canBeLeashed", "m_6573_"), "()Z");
    }

    static jboolean canBeLeashed(const jobject& obj) {
                
       const auto methodID = methodID_canBeLeashed();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_shouldTickLeash() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleLeashAtDistance", "method_60956", "shouldTickLeash", "m_338665_"), "(Lbsr;F)Z");
    }

    static jboolean shouldTickLeash(const jobject& obj, const jobject& arg0, const jfloat& arg1) {
                
       const auto methodID = methodID_shouldTickLeash();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_showEmoteParticle() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("x", "spawnTamingParticles", "method_6180", "showEmoteParticle", "m_21834_"), "(Z)V");
    }

    static void showEmoteParticle(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_showEmoteParticle();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_handleStatus() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "handleEntityEvent", "method_5711", "handleStatus", "m_7822_"), "(B)V");
    }

    static void handleStatus(const jobject& obj, const jbyte& arg0) {
                
       const auto methodID = methodID_handleStatus();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isTamed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("s", "isTame", "method_6181", "isTamed", "m_21824_"), "()Z");
    }

    static jboolean isTamed(const jobject& obj) {
                
       const auto methodID = methodID_isTamed();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setTamed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setTame", "method_6173", "setTamed", "m_7105_"), "(ZZ)V");
    }

    static void setTamed(const jobject& obj, const jboolean& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_setTamed();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_updateAttributesForTamed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("t", "applyTamingSideEffects", "method_56996", "updateAttributesForTamed", "m_5849_"), "()V");
    }

    static void updateAttributesForTamed(const jobject& obj) {
                
       const auto methodID = methodID_updateAttributesForTamed();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_isInSittingPose() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("x", "isInSittingPose", "method_6172", "isInSittingPose", "m_21825_"), "()Z");
    }

    static jboolean isInSittingPose(const jobject& obj) {
                
       const auto methodID = methodID_isInSittingPose();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setInSittingPose() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("y", "setInSittingPose", "method_6179", "setInSittingPose", "m_21837_"), "(Z)V");
    }

    static void setInSittingPose(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setInSittingPose();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getOwnerUuid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aa_", "getOwnerUUID", "method_6139", "getOwnerUuid", "m_21805_"), "()Ljava/util/UUID;");
    }

    static jobject getOwnerUuid(const jobject& obj) {
                
       const auto methodID = methodID_getOwnerUuid();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_setOwnerUuid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setOwnerUUID", "method_6174", "setOwnerUuid", "m_21816_"), "(Ljava/util/UUID;)V");
    }

    static void setOwnerUuid(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setOwnerUuid();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setOwner() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "tame", "method_6170", "setOwner", "m_21828_"), "(Lcmx;)V");
    }

    static void setOwner(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setOwner();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_canTarget() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "canAttack", "method_18395", "canTarget", "m_6779_"), "(Lbtn;)Z");
    }

    static jboolean canTarget(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_canTarget();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isOwner() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "isOwnedBy", "method_6171", "isOwner", "m_21830_"), "(Lbtn;)Z");
    }

    static jboolean isOwner(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isOwner();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_canAttackWithOwner() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "wantsToAttack", "method_6178", "canAttackWithOwner", "m_7757_"), "(Lbtn;Lbtn;)Z");
    }

    static jboolean canAttackWithOwner(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_canAttackWithOwner();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getScoreboardTeam() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("ck", "getTeam", "method_5781", "getScoreboardTeam", "m_5647_"), "()Leyb;");
    }

    static jobject getScoreboardTeam(const jobject& obj) {
                
       const auto methodID = methodID_getScoreboardTeam();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_isTeammate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("s", "isAlliedTo", "method_5722", "isTeammate", "m_7307_"), "(Lbsr;)Z");
    }

    static jboolean isTeammate(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isTeammate();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onDeath() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "die", "method_6078", "onDeath", "m_6667_"), "(Lbrk;)V");
    }

    static void onDeath(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onDeath();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isSitting() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("gk", "isOrderedToSit", "method_24345", "isSitting", "m_21827_"), "()Z");
    }

    static jboolean isSitting(const jobject& obj) {
                
       const auto methodID = methodID_isSitting();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setSitting() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("z", "setOrderedToSit", "method_24346", "setSitting", "m_21839_"), "(Z)V");
    }

    static void setSitting(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setSitting();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_tryTeleportToOwner() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("gl", "tryToTeleportToOwner", "method_60713", "tryTeleportToOwner", "m_339874_"), "()V");
    }

    static void tryTeleportToOwner(const jobject& obj) {
                
       const auto methodID = methodID_tryTeleportToOwner();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_shouldTryTeleportToOwner() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("gm", "shouldTryTeleportToOwner", "method_60714", "shouldTryTeleportToOwner", "m_339471_"), "()Z");
    }

    static jboolean shouldTryTeleportToOwner(const jobject& obj) {
                
       const auto methodID = methodID_shouldTryTeleportToOwner();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_tryTeleportNear() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "teleportToAroundBlockPos", "method_60712", "tryTeleportNear", "m_339461_"), "(Ljd;)V");
    }

    static void tryTeleportNear(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_tryTeleportNear();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_tryTeleportTo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "maybeTeleportTo", "method_60711", "tryTeleportTo", "m_339821_"), "(III)Z");
    }

    static jboolean tryTeleportTo(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_tryTeleportTo();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_canTeleportTo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "canTeleportTo", "method_60717", "canTeleportTo", "m_339782_"), "(Ljd;)Z");
    }

    static jboolean canTeleportTo(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_canTeleportTo();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_cannotFollowOwner() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("gn", "unableToMoveToOwner", "method_60715", "cannotFollowOwner", "m_338522_"), "()Z");
    }

    static jboolean cannotFollowOwner(const jobject& obj) {
                
       const auto methodID = methodID_cannotFollowOwner();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_canTeleportOntoLeaves() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("go", "canFlyToOwner", "method_60716", "canTeleportOntoLeaves", "m_339401_"), "()Z");
    }

    static jboolean canTeleportOntoLeaves(const jobject& obj) {
                
       const auto methodID = methodID_canTeleportOntoLeaves();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_ENTITY_PASSIVE_TAMEABLEENTITY_HPP