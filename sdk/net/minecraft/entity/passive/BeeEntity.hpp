// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ENTITY_PASSIVE_BEEENTITY_HPP
#define NET_MINECRAFT_ENTITY_PASSIVE_BEEENTITY_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.entity.passive.BeeEntity
 * Remapped: cff
 */
namespace BeeEntity {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("cff", "net/minecraft/world/entity/animal/Bee", "net/minecraft/class_4466", "net/minecraft/entity/passive/BeeEntity", "net/minecraft/src/C_805_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.entity.passive.BeeEntity#field_30271
    [[maybe_unused]] static jfloat get_field_field_30271() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cc", "FLAP_DEGREES_PER_TICK", "field_30271", "field_30271", "f_148718_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.passive.BeeEntity#field_30271
    [[maybe_unused]] static void set_field_field_30271(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cc", "FLAP_DEGREES_PER_TICK", "field_30271", "field_30271", "f_148718_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.entity.passive.BeeEntity#field_28638
    [[maybe_unused]] static jint get_field_field_28638() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cd", "TICKS_PER_FLAP", "field_28638", "field_28638", "f_148719_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.passive.BeeEntity#field_28638
    [[maybe_unused]] static void set_field_field_28638(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cd", "TICKS_PER_FLAP", "field_28638", "field_28638", "f_148719_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.passive.BeeEntity#BEE_FLAGS
    [[maybe_unused]] static jobject get_field_BEE_FLAGS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cm", "DATA_FLAGS_ID", "field_20353", "BEE_FLAGS", "f_27703_"), "Lajw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.passive.BeeEntity#BEE_FLAGS
    [[maybe_unused]] static void set_field_BEE_FLAGS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cm", "DATA_FLAGS_ID", "field_20353", "BEE_FLAGS", "f_27703_"), "Lajw;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.passive.BeeEntity#ANGER
    [[maybe_unused]] static jobject get_field_ANGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cn", "DATA_REMAINING_ANGER_TIME", "field_20354", "ANGER", "f_27704_"), "Lajw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.passive.BeeEntity#ANGER
    [[maybe_unused]] static void set_field_ANGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cn", "DATA_REMAINING_ANGER_TIME", "field_20354", "ANGER", "f_27704_"), "Lajw;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.passive.BeeEntity#NEAR_TARGET_FLAG
    [[maybe_unused]] static jint get_field_NEAR_TARGET_FLAG() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("co", "FLAG_ROLL", "field_30281", "NEAR_TARGET_FLAG", "f_148729_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.passive.BeeEntity#NEAR_TARGET_FLAG
    [[maybe_unused]] static void set_field_NEAR_TARGET_FLAG(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("co", "FLAG_ROLL", "field_30281", "NEAR_TARGET_FLAG", "f_148729_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.passive.BeeEntity#HAS_STUNG_FLAG
    [[maybe_unused]] static jint get_field_HAS_STUNG_FLAG() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cp", "FLAG_HAS_STUNG", "field_30282", "HAS_STUNG_FLAG", "f_148730_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.passive.BeeEntity#HAS_STUNG_FLAG
    [[maybe_unused]] static void set_field_HAS_STUNG_FLAG(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cp", "FLAG_HAS_STUNG", "field_30282", "HAS_STUNG_FLAG", "f_148730_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.passive.BeeEntity#HAS_NECTAR_FLAG
    [[maybe_unused]] static jint get_field_HAS_NECTAR_FLAG() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cq", "FLAG_HAS_NECTAR", "field_30283", "HAS_NECTAR_FLAG", "f_148731_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.passive.BeeEntity#HAS_NECTAR_FLAG
    [[maybe_unused]] static void set_field_HAS_NECTAR_FLAG(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cq", "FLAG_HAS_NECTAR", "field_30283", "HAS_NECTAR_FLAG", "f_148731_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.passive.BeeEntity#MAX_LIFETIME_AFTER_STINGING
    [[maybe_unused]] static jint get_field_MAX_LIFETIME_AFTER_STINGING() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cr", "STING_DEATH_COUNTDOWN", "field_30284", "MAX_LIFETIME_AFTER_STINGING", "f_148732_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.passive.BeeEntity#MAX_LIFETIME_AFTER_STINGING
    [[maybe_unused]] static void set_field_MAX_LIFETIME_AFTER_STINGING(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cr", "STING_DEATH_COUNTDOWN", "field_30284", "MAX_LIFETIME_AFTER_STINGING", "f_148732_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.passive.BeeEntity#FLOWER_NAVIGATION_START_TICKS
    [[maybe_unused]] static jint get_field_FLOWER_NAVIGATION_START_TICKS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cs", "TICKS_BEFORE_GOING_TO_KNOWN_FLOWER", "field_30285", "FLOWER_NAVIGATION_START_TICKS", "f_148733_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.passive.BeeEntity#FLOWER_NAVIGATION_START_TICKS
    [[maybe_unused]] static void set_field_FLOWER_NAVIGATION_START_TICKS(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cs", "TICKS_BEFORE_GOING_TO_KNOWN_FLOWER", "field_30285", "FLOWER_NAVIGATION_START_TICKS", "f_148733_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.passive.BeeEntity#POLLINATION_FAIL_TICKS
    [[maybe_unused]] static jint get_field_POLLINATION_FAIL_TICKS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ct", "TICKS_WITHOUT_NECTAR_BEFORE_GOING_HOME", "field_30286", "POLLINATION_FAIL_TICKS", "f_148734_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.passive.BeeEntity#POLLINATION_FAIL_TICKS
    [[maybe_unused]] static void set_field_POLLINATION_FAIL_TICKS(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ct", "TICKS_WITHOUT_NECTAR_BEFORE_GOING_HOME", "field_30286", "POLLINATION_FAIL_TICKS", "f_148734_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.passive.BeeEntity#field_30287
    [[maybe_unused]] static jint get_field_field_30287() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cu", "MIN_ATTACK_DIST", "field_30287", "field_30287", "f_148735_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.passive.BeeEntity#field_30287
    [[maybe_unused]] static void set_field_field_30287(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cu", "MIN_ATTACK_DIST", "field_30287", "field_30287", "f_148735_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.passive.BeeEntity#MAX_POLLINATED_CROPS
    [[maybe_unused]] static jint get_field_MAX_POLLINATED_CROPS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cv", "MAX_CROPS_GROWABLE", "field_30288", "MAX_POLLINATED_CROPS", "f_148736_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.passive.BeeEntity#MAX_POLLINATED_CROPS
    [[maybe_unused]] static void set_field_MAX_POLLINATED_CROPS(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cv", "MAX_CROPS_GROWABLE", "field_30288", "MAX_POLLINATED_CROPS", "f_148736_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.passive.BeeEntity#NORMAL_DIFFICULTY_STING_POISON_DURATION
    [[maybe_unused]] static jint get_field_NORMAL_DIFFICULTY_STING_POISON_DURATION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cw", "POISON_SECONDS_NORMAL", "field_30289", "NORMAL_DIFFICULTY_STING_POISON_DURATION", "f_148737_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.passive.BeeEntity#NORMAL_DIFFICULTY_STING_POISON_DURATION
    [[maybe_unused]] static void set_field_NORMAL_DIFFICULTY_STING_POISON_DURATION(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cw", "POISON_SECONDS_NORMAL", "field_30289", "NORMAL_DIFFICULTY_STING_POISON_DURATION", "f_148737_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.passive.BeeEntity#HARD_DIFFICULTY_STING_POISON_DURATION
    [[maybe_unused]] static jint get_field_HARD_DIFFICULTY_STING_POISON_DURATION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cx", "POISON_SECONDS_HARD", "field_30290", "HARD_DIFFICULTY_STING_POISON_DURATION", "f_148738_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.passive.BeeEntity#HARD_DIFFICULTY_STING_POISON_DURATION
    [[maybe_unused]] static void set_field_HARD_DIFFICULTY_STING_POISON_DURATION(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cx", "POISON_SECONDS_HARD", "field_30290", "HARD_DIFFICULTY_STING_POISON_DURATION", "f_148738_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.passive.BeeEntity#TOO_FAR_DISTANCE
    [[maybe_unused]] static jint get_field_TOO_FAR_DISTANCE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cy", "TOO_FAR_DISTANCE", "field_30291", "TOO_FAR_DISTANCE", "f_148739_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.passive.BeeEntity#TOO_FAR_DISTANCE
    [[maybe_unused]] static void set_field_TOO_FAR_DISTANCE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cy", "TOO_FAR_DISTANCE", "field_30291", "TOO_FAR_DISTANCE", "f_148739_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.passive.BeeEntity#field_30292
    [[maybe_unused]] static jint get_field_field_30292() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cz", "HIVE_CLOSE_ENOUGH_DISTANCE", "field_30292", "field_30292", "f_148740_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.passive.BeeEntity#field_30292
    [[maybe_unused]] static void set_field_field_30292(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cz", "HIVE_CLOSE_ENOUGH_DISTANCE", "field_30292", "field_30292", "f_148740_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.passive.BeeEntity#MIN_HIVE_RETURN_DISTANCE
    [[maybe_unused]] static jint get_field_MIN_HIVE_RETURN_DISTANCE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cA", "PATHFIND_TO_HIVE_WHEN_CLOSER_THAN", "field_30293", "MIN_HIVE_RETURN_DISTANCE", "f_148741_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.passive.BeeEntity#MIN_HIVE_RETURN_DISTANCE
    [[maybe_unused]] static void set_field_MIN_HIVE_RETURN_DISTANCE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cA", "PATHFIND_TO_HIVE_WHEN_CLOSER_THAN", "field_30293", "MIN_HIVE_RETURN_DISTANCE", "f_148741_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.passive.BeeEntity#field_30294
    [[maybe_unused]] static jint get_field_field_30294() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cB", "HIVE_SEARCH_DISTANCE", "field_30294", "field_30294", "f_148742_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.passive.BeeEntity#field_30294
    [[maybe_unused]] static void set_field_field_30294(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cB", "HIVE_SEARCH_DISTANCE", "field_30294", "field_30294", "f_148742_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.entity.passive.BeeEntity#CROPS_GROWN_SINCE_POLLINATION_KEY
    [[maybe_unused]] static jobject get_field_CROPS_GROWN_SINCE_POLLINATION_KEY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ce", "TAG_CROPS_GROWN_SINCE_POLLINATION", "field_30272", "CROPS_GROWN_SINCE_POLLINATION_KEY", "f_148720_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.passive.BeeEntity#CROPS_GROWN_SINCE_POLLINATION_KEY
    [[maybe_unused]] static void set_field_CROPS_GROWN_SINCE_POLLINATION_KEY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ce", "TAG_CROPS_GROWN_SINCE_POLLINATION", "field_30272", "CROPS_GROWN_SINCE_POLLINATION_KEY", "f_148720_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.entity.passive.BeeEntity#CANNOT_ENTER_HIVE_TICKS_KEY
    [[maybe_unused]] static jobject get_field_CANNOT_ENTER_HIVE_TICKS_KEY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cg", "TAG_CANNOT_ENTER_HIVE_TICKS", "field_30273", "CANNOT_ENTER_HIVE_TICKS_KEY", "f_148721_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.passive.BeeEntity#CANNOT_ENTER_HIVE_TICKS_KEY
    [[maybe_unused]] static void set_field_CANNOT_ENTER_HIVE_TICKS_KEY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cg", "TAG_CANNOT_ENTER_HIVE_TICKS", "field_30273", "CANNOT_ENTER_HIVE_TICKS_KEY", "f_148721_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.entity.passive.BeeEntity#TICKS_SINCE_POLLINATION_KEY
    [[maybe_unused]] static jobject get_field_TICKS_SINCE_POLLINATION_KEY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ch", "TAG_TICKS_SINCE_POLLINATION", "field_30276", "TICKS_SINCE_POLLINATION_KEY", "f_148722_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.passive.BeeEntity#TICKS_SINCE_POLLINATION_KEY
    [[maybe_unused]] static void set_field_TICKS_SINCE_POLLINATION_KEY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ch", "TAG_TICKS_SINCE_POLLINATION", "field_30276", "TICKS_SINCE_POLLINATION_KEY", "f_148722_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.entity.passive.BeeEntity#HAS_STUNG_KEY
    [[maybe_unused]] static jobject get_field_HAS_STUNG_KEY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ci", "TAG_HAS_STUNG", "field_30277", "HAS_STUNG_KEY", "f_148723_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.passive.BeeEntity#HAS_STUNG_KEY
    [[maybe_unused]] static void set_field_HAS_STUNG_KEY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ci", "TAG_HAS_STUNG", "field_30277", "HAS_STUNG_KEY", "f_148723_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.entity.passive.BeeEntity#HAS_NECTAR_KEY
    [[maybe_unused]] static jobject get_field_HAS_NECTAR_KEY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cj", "TAG_HAS_NECTAR", "field_30278", "HAS_NECTAR_KEY", "f_148724_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.passive.BeeEntity#HAS_NECTAR_KEY
    [[maybe_unused]] static void set_field_HAS_NECTAR_KEY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cj", "TAG_HAS_NECTAR", "field_30278", "HAS_NECTAR_KEY", "f_148724_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.entity.passive.BeeEntity#FLOWER_POS_KEY
    [[maybe_unused]] static jobject get_field_FLOWER_POS_KEY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ck", "TAG_FLOWER_POS", "field_30279", "FLOWER_POS_KEY", "f_148727_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.passive.BeeEntity#FLOWER_POS_KEY
    [[maybe_unused]] static void set_field_FLOWER_POS_KEY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ck", "TAG_FLOWER_POS", "field_30279", "FLOWER_POS_KEY", "f_148727_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.entity.passive.BeeEntity#HIVE_POS_KEY
    [[maybe_unused]] static jobject get_field_HIVE_POS_KEY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cl", "TAG_HIVE_POS", "field_30280", "HIVE_POS_KEY", "f_148728_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.passive.BeeEntity#HIVE_POS_KEY
    [[maybe_unused]] static void set_field_HIVE_POS_KEY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cl", "TAG_HIVE_POS", "field_30280", "HIVE_POS_KEY", "f_148728_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.passive.BeeEntity#ANGER_TIME_RANGE
    [[maybe_unused]] static jobject get_field_ANGER_TIME_RANGE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cD", "PERSISTENT_ANGER_TIME", "field_25363", "ANGER_TIME_RANGE", "f_27705_"), "Lbqc;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.passive.BeeEntity#ANGER_TIME_RANGE
    [[maybe_unused]] static void set_field_ANGER_TIME_RANGE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cD", "PERSISTENT_ANGER_TIME", "field_25363", "ANGER_TIME_RANGE", "f_27705_"), "Lbqc;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.entity.passive.BeeEntity#angryAt
    static jobject get_field_angryAt(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cE", "persistentAngerTarget", "field_25364", "angryAt", "f_27706_"), "Ljava/util/UUID;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.passive.BeeEntity#angryAt
    static void set_field_angryAt(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cE", "persistentAngerTarget", "field_25364", "angryAt", "f_27706_"), "Ljava/util/UUID;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.passive.BeeEntity#currentPitch
    static jfloat get_field_currentPitch(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cF", "rollAmount", "field_20356", "currentPitch", "f_27707_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.passive.BeeEntity#currentPitch
    static void set_field_currentPitch(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cF", "rollAmount", "field_20356", "currentPitch", "f_27707_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.passive.BeeEntity#lastPitch
    static jfloat get_field_lastPitch(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cG", "rollAmountO", "field_20357", "lastPitch", "f_27708_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.passive.BeeEntity#lastPitch
    static void set_field_lastPitch(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cG", "rollAmountO", "field_20357", "lastPitch", "f_27708_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.passive.BeeEntity#ticksSinceSting
    static jint get_field_ticksSinceSting(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cH", "timeSinceSting", "field_20358", "ticksSinceSting", "f_27709_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.passive.BeeEntity#ticksSinceSting
    static void set_field_ticksSinceSting(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cH", "timeSinceSting", "field_20358", "ticksSinceSting", "f_27709_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.entity.passive.BeeEntity#ticksSincePollination
    static jint get_field_ticksSincePollination(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cI", "ticksWithoutNectarSinceExitingHive", "field_20359", "ticksSincePollination", "f_27710_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static default field net.minecraft.entity.passive.BeeEntity#ticksSincePollination
    static void set_field_ticksSincePollination(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cI", "ticksWithoutNectarSinceExitingHive", "field_20359", "ticksSincePollination", "f_27710_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.passive.BeeEntity#cannotEnterHiveTicks
    static jint get_field_cannotEnterHiveTicks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cJ", "stayOutOfHiveCountdown", "field_20360", "cannotEnterHiveTicks", "f_27711_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.passive.BeeEntity#cannotEnterHiveTicks
    static void set_field_cannotEnterHiveTicks(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cJ", "stayOutOfHiveCountdown", "field_20360", "cannotEnterHiveTicks", "f_27711_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.passive.BeeEntity#cropsGrownSincePollination
    static jint get_field_cropsGrownSincePollination(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cK", "numCropsGrownSincePollination", "field_20361", "cropsGrownSincePollination", "f_27712_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.passive.BeeEntity#cropsGrownSincePollination
    static void set_field_cropsGrownSincePollination(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cK", "numCropsGrownSincePollination", "field_20361", "cropsGrownSincePollination", "f_27712_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.passive.BeeEntity#field_30274
    [[maybe_unused]] static jint get_field_field_30274() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cL", "COOLDOWN_BEFORE_LOCATING_NEW_HIVE", "field_30274", "field_30274", "f_148725_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.passive.BeeEntity#field_30274
    [[maybe_unused]] static void set_field_field_30274(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cL", "COOLDOWN_BEFORE_LOCATING_NEW_HIVE", "field_30274", "field_30274", "f_148725_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for default field net.minecraft.entity.passive.BeeEntity#ticksLeftToFindHive
    static jint get_field_ticksLeftToFindHive(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cM", "remainingCooldownBeforeLocatingNewHive", "field_21643", "ticksLeftToFindHive", "f_27713_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static default field net.minecraft.entity.passive.BeeEntity#ticksLeftToFindHive
    static void set_field_ticksLeftToFindHive(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cM", "remainingCooldownBeforeLocatingNewHive", "field_21643", "ticksLeftToFindHive", "f_27713_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.passive.BeeEntity#field_30275
    [[maybe_unused]] static jint get_field_field_30275() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cN", "COOLDOWN_BEFORE_LOCATING_NEW_FLOWER", "field_30275", "field_30275", "f_148726_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.passive.BeeEntity#field_30275
    [[maybe_unused]] static void set_field_field_30275(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cN", "COOLDOWN_BEFORE_LOCATING_NEW_FLOWER", "field_30275", "field_30275", "f_148726_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for default field net.minecraft.entity.passive.BeeEntity#ticksUntilCanPollinate
    static jint get_field_ticksUntilCanPollinate(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cO", "remainingCooldownBeforeLocatingNewFlower", "field_21644", "ticksUntilCanPollinate", "f_27714_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static default field net.minecraft.entity.passive.BeeEntity#ticksUntilCanPollinate
    static void set_field_ticksUntilCanPollinate(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cO", "remainingCooldownBeforeLocatingNewFlower", "field_21644", "ticksUntilCanPollinate", "f_27714_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.entity.passive.BeeEntity#flowerPos
    static jobject get_field_flowerPos(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cP", "savedFlowerPos", "field_20362", "flowerPos", "f_27697_"), "Ljd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.entity.passive.BeeEntity#flowerPos
    static void set_field_flowerPos(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cP", "savedFlowerPos", "field_20362", "flowerPos", "f_27697_"), "Ljd;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.entity.passive.BeeEntity#hivePos
    static jobject get_field_hivePos(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cQ", "hivePos", "field_20363", "hivePos", "f_27698_"), "Ljd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.entity.passive.BeeEntity#hivePos
    static void set_field_hivePos(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cQ", "hivePos", "field_20363", "hivePos", "f_27698_"), "Ljd;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.entity.passive.BeeEntity#pollinateGoal
    static jobject get_field_pollinateGoal(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cR", "beePollinateGoal", "field_21079", "pollinateGoal", "f_27699_"), "Lcff$k;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.entity.passive.BeeEntity#pollinateGoal
    static void set_field_pollinateGoal(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cR", "beePollinateGoal", "field_21079", "pollinateGoal", "f_27699_"), "Lcff$k;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.entity.passive.BeeEntity#moveToHiveGoal
    static jobject get_field_moveToHiveGoal(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cS", "goToHiveGoal", "field_21645", "moveToHiveGoal", "f_27700_"), "Lcff$e;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.entity.passive.BeeEntity#moveToHiveGoal
    static void set_field_moveToHiveGoal(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cS", "goToHiveGoal", "field_21645", "moveToHiveGoal", "f_27700_"), "Lcff$e;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.passive.BeeEntity#moveToFlowerGoal
    static jobject get_field_moveToFlowerGoal(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cT", "goToKnownFlowerGoal", "field_21646", "moveToFlowerGoal", "f_27701_"), "Lcff$f;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.passive.BeeEntity#moveToFlowerGoal
    static void set_field_moveToFlowerGoal(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cT", "goToKnownFlowerGoal", "field_21646", "moveToFlowerGoal", "f_27701_"), "Lcff$f;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.passive.BeeEntity#ticksInsideWater
    static jint get_field_ticksInsideWater(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cU", "underWaterTicks", "field_21509", "ticksInsideWater", "f_27702_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.passive.BeeEntity#ticksInsideWater
    static void set_field_ticksInsideWater(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cU", "underWaterTicks", "field_21509", "ticksInsideWater", "f_27702_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    static jmethodID methodID_initDataTracker() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "defineSynchedData", "method_5693", "initDataTracker", "m_8097_"), "(Laka$a;)V");
    }

    static void initDataTracker(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_initDataTracker();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getPathfindingFavor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getWalkTargetValue", "method_6144", "getPathfindingFavor", "m_5610_"), "(Ljd;Ldcz;)F");
    }

    static jfloat getPathfindingFavor(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_getPathfindingFavor();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_initGoals() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("B", "registerGoals", "method_5959", "initGoals", "m_8099_"), "()V");
    }

    static void initGoals(const jobject& obj) {
                
       const auto methodID = methodID_initGoals();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_writeCustomDataToNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "addAdditionalSaveData", "method_5652", "writeCustomDataToNbt", "m_7380_"), "(Lub;)V");
    }

    static void writeCustomDataToNbt(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_writeCustomDataToNbt();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_readCustomDataFromNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "readAdditionalSaveData", "method_5749", "readCustomDataFromNbt", "m_7378_"), "(Lub;)V");
    }

    static void readCustomDataFromNbt(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_readCustomDataFromNbt();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_tryAttack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("D", "doHurtTarget", "method_6121", "tryAttack", "m_7327_"), "(Lbsr;)Z");
    }

    static jboolean tryAttack(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_tryAttack();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "tick", "method_5773", "tick", "m_8119_"), "()V");
    }

    static void tick(const jobject& obj) {
                
       const auto methodID = methodID_tick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_addParticle() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "spawnFluidParticle", "method_21769", "addParticle", "m_27779_"), "(Ldcw;DDDDDLlk;)V");
    }

    static void addParticle(const jobject& obj, const jobject& arg0, const jdouble& arg1, const jdouble& arg2, const jdouble& arg3, const jdouble& arg4, const jdouble& arg5, const jobject& arg6) {
                
       const auto methodID = methodID_addParticle();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    };
    
    static jmethodID methodID_startMovingTo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "pathfindRandomlyTowards", "method_23987", "startMovingTo", "m_27880_"), "(Ljd;)V");
    }

    static void startMovingTo(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_startMovingTo();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getFlowerPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("s", "getSavedFlowerPos", "method_21778", "getFlowerPos", "m_27851_"), "()Ljd;");
    }

    static jobject getFlowerPos(const jobject& obj) {
                
       const auto methodID = methodID_getFlowerPos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasFlower() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("t", "hasSavedFlowerPos", "method_21779", "hasFlower", "m_27852_"), "()Z");
    }

    static jboolean hasFlower(const jobject& obj) {
                
       const auto methodID = methodID_hasFlower();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setFlowerPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "setSavedFlowerPos", "method_21797", "setFlowerPos", "m_27876_"), "(Ljd;)V");
    }

    static void setFlowerPos(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setFlowerPos();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getMoveGoalTicks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("x", "getTravellingTicks", "method_35161", "getMoveGoalTicks", "m_148774_"), "()I");
    }

    static jint getMoveGoalTicks(const jobject& obj) {
                
       const auto methodID = methodID_getMoveGoalTicks();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getPossibleHives() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("gk", "getBlacklistedHives", "method_35162", "getPossibleHives", "m_148775_"), "()Ljava/util/List;");
    }

    static jobject getPossibleHives(const jobject& obj) {
                
       const auto methodID = methodID_getPossibleHives();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_failedPollinatingTooLong() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("gz", "isTiredOfLookingForNectar", "method_23983", "failedPollinatingTooLong", "m_27865_"), "()Z");
    }

    static jboolean failedPollinatingTooLong(const jobject& obj) {
                
       const auto methodID = methodID_failedPollinatingTooLong();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_canEnterHive() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("gA", "wantsToEnterHive", "method_21789", "canEnterHive", "m_27866_"), "()Z");
    }

    static jboolean canEnterHive(const jobject& obj) {
                
       const auto methodID = methodID_canEnterHive();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setCannotEnterHiveTicks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("t", "setStayOutOfHiveCountdown", "method_21807", "setCannotEnterHiveTicks", "m_27915_"), "(I)V");
    }

    static void setCannotEnterHiveTicks(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_setCannotEnterHiveTicks();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getBodyPitch() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("H", "getRollAmount", "method_21811", "getBodyPitch", "m_27935_"), "(F)F");
    }

    static jfloat getBodyPitch(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_getBodyPitch();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_updateBodyPitch() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("gB", "updateRollAmount", "method_21790", "updateBodyPitch", "m_27867_"), "()V");
    }

    static void updateBodyPitch(const jobject& obj) {
                
       const auto methodID = methodID_updateBodyPitch();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_mobTick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("ab", "customServerAiStep", "method_5958", "mobTick", "m_8024_"), "()V");
    }

    static void mobTick(const jobject& obj) {
                
       const auto methodID = methodID_mobTick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_resetPollinationTicks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("gl", "resetTicksWithoutNectarSinceExitingHive", "method_21780", "resetPollinationTicks", "m_27853_"), "()V");
    }

    static void resetPollinationTicks(const jobject& obj) {
                
       const auto methodID = methodID_resetPollinationTicks();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_isHiveNearFire() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("gC", "isHiveNearFire", "method_23984", "isHiveNearFire", "m_27868_"), "()Z");
    }

    static jboolean isHiveNearFire(const jobject& obj) {
                
       const auto methodID = methodID_isHiveNearFire();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getAngerTime() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getRemainingPersistentAngerTime", "method_29507", "getAngerTime", "m_6784_"), "()I");
    }

    static jint getAngerTime(const jobject& obj) {
                
       const auto methodID = methodID_getAngerTime();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_setAngerTime() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setRemainingPersistentAngerTime", "method_29514", "setAngerTime", "m_7870_"), "(I)V");
    }

    static void setAngerTime(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_setAngerTime();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getAngryAt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getPersistentAngerTarget", "method_29508", "getAngryAt", "m_6120_"), "()Ljava/util/UUID;");
    }

    static jobject getAngryAt(const jobject& obj) {
                
       const auto methodID = methodID_getAngryAt();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_setAngryAt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setPersistentAngerTarget", "method_29513", "setAngryAt", "m_6925_"), "(Ljava/util/UUID;)V");
    }

    static void setAngryAt(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setAngryAt();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_chooseRandomAngerTime() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "startPersistentAngerTimer", "method_29509", "chooseRandomAngerTime", "m_6825_"), "()V");
    }

    static void chooseRandomAngerTime(const jobject& obj) {
                
       const auto methodID = methodID_chooseRandomAngerTime();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_doesHiveHaveSpace() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "doesHiveHaveSpace", "method_23988", "doesHiveHaveSpace", "m_27884_"), "(Ljd;)Z");
    }

    static jboolean doesHiveHaveSpace(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_doesHiveHaveSpace();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_hasHive() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("gm", "hasHive", "method_21791", "hasHive", "m_27854_"), "()Z");
    }

    static jboolean hasHive(const jobject& obj) {
                
       const auto methodID = methodID_hasHive();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getHivePos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("gn", "getHivePos", "method_23884", "getHivePos", "m_27855_"), "()Ljd;");
    }

    static jobject getHivePos(const jobject& obj) {
                
       const auto methodID = methodID_getHivePos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getGoalSelector() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("go", "getGoalSelector", "method_35163", "getGoalSelector", "m_148772_"), "()Lcan;");
    }

    static jobject getGoalSelector(const jobject& obj) {
                
       const auto methodID = methodID_getGoalSelector();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_sendAiDebugData() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aa", "sendDebugPackets", "method_18409", "sendAiDebugData", "m_8025_"), "()V");
    }

    static void sendAiDebugData(const jobject& obj) {
                
       const auto methodID = methodID_sendAiDebugData();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getCropsGrownSincePollination() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("gD", "getCropsGrownSincePollination", "method_21792", "getCropsGrownSincePollination", "m_27869_"), "()I");
    }

    static jint getCropsGrownSincePollination(const jobject& obj) {
                
       const auto methodID = methodID_getCropsGrownSincePollination();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_resetCropCounter() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("gE", "resetNumCropsGrownSincePollination", "method_21783", "resetCropCounter", "m_27870_"), "()V");
    }

    static void resetCropCounter(const jobject& obj) {
                
       const auto methodID = methodID_resetCropCounter();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_addCropCounter() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("gF", "incrementNumCropsGrownSincePollination", "method_21793", "addCropCounter", "m_27871_"), "()V");
    }

    static void addCropCounter(const jobject& obj) {
                
       const auto methodID = methodID_addCropCounter();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_tickMovement() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("m_", "aiStep", "method_6007", "tickMovement", "m_8107_"), "()V");
    }

    static void tickMovement(const jobject& obj) {
                
       const auto methodID = methodID_tickMovement();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_isHiveValid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("gG", "isHiveValid", "method_21794", "isHiveValid", "m_27872_"), "()Z");
    }

    static jboolean isHiveValid(const jobject& obj) {
                
       const auto methodID = methodID_isHiveValid();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasNectar() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("gu", "hasNectar", "method_21784", "hasNectar", "m_27856_"), "()Z");
    }

    static jboolean hasNectar(const jobject& obj) {
                
       const auto methodID = methodID_hasNectar();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setHasNectar() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("x", "setHasNectar", "method_21805", "setHasNectar", "m_27919_"), "(Z)V");
    }

    static void setHasNectar(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setHasNectar();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_hasStung() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("gv", "hasStung", "method_21785", "hasStung", "m_27857_"), "()Z");
    }

    static jboolean hasStung(const jobject& obj) {
                
       const auto methodID = methodID_hasStung();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setHasStung() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("y", "setHasStung", "method_21806", "setHasStung", "m_27925_"), "(Z)V");
    }

    static void setHasStung(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setHasStung();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isNearTarget() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("gH", "isRolling", "method_21786", "isNearTarget", "m_27873_"), "()Z");
    }

    static jboolean isNearTarget(const jobject& obj) {
                
       const auto methodID = methodID_isNearTarget();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setNearTarget() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("z", "setRolling", "method_21808", "setNearTarget", "m_27929_"), "(Z)V");
    }

    static void setNearTarget(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setNearTarget();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isTooFar() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "isTooFarAway", "method_23990", "isTooFar", "m_27889_"), "(Ljd;)Z");
    }

    static jboolean isTooFar(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isTooFar();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setBeeFlag() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "setFlag", "method_21775", "setBeeFlag", "m_27832_"), "(IZ)V");
    }

    static void setBeeFlag(const jobject& obj, const jint& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_setBeeFlag();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getBeeFlag() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("u", "getFlag", "method_21812", "getBeeFlag", "m_27921_"), "(I)Z");
    }

    static jboolean getBeeFlag(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_getBeeFlag();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_createBeeAttributes() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("gw", "createAttributes", "method_26880", "createBeeAttributes", "m_27858_"), "()Lbuv$a;");
    }

    static jobject createBeeAttributes() {
       const auto clazz = self();
       const auto methodID = methodID_createBeeAttributes();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_createNavigation() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "createNavigation", "method_5965", "createNavigation", "m_6037_"), "(Ldcw;)Lcda;");
    }

    static jobject createNavigation(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_createNavigation();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isBreedingItem() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("o", "isFood", "method_6481", "isBreedingItem", "m_6898_"), "(Lcuq;)Z");
    }

    static jboolean isBreedingItem(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isBreedingItem();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isFlowers() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("m", "isFlowerValid", "method_23992", "isFlowers", "m_27896_"), "(Ljd;)Z");
    }

    static jboolean isFlowers(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isFlowers();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_playStepSound() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "playStepSound", "method_5712", "playStepSound", "m_7355_"), "(Ljd;Ldtc;)V");
    }

    static void playStepSound(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_playStepSound();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getAmbientSound() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("v", "getAmbientSound", "method_5994", "getAmbientSound", "m_7515_"), "()Lavo;");
    }

    static jobject getAmbientSound(const jobject& obj) {
                
       const auto methodID = methodID_getAmbientSound();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getHurtSound() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getHurtSound", "method_6011", "getHurtSound", "m_7975_"), "(Lbrk;)Lavo;");
    }

    static jobject getHurtSound(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getHurtSound();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getDeathSound() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("n_", "getDeathSound", "method_6002", "getDeathSound", "m_5592_"), "()Lavo;");
    }

    static jobject getDeathSound(const jobject& obj) {
                
       const auto methodID = methodID_getDeathSound();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getSoundVolume() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("fa", "getSoundVolume", "method_6107", "getSoundVolume", "m_6121_"), "()F");
    }

    static jfloat getSoundVolume(const jobject& obj) {
                
       const auto methodID = methodID_getSoundVolume();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_createChild() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getBreedOffspring", "method_21771", "createChild", "m_142606_"), "(Laqu;Lbsl;)Lcff;");
    }

    static jobject createChild(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_createChild();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_fall() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "checkFallDamage", "method_5623", "fall", "m_7840_"), "(DZLdtc;Ljd;)V");
    }

    static void fall(const jobject& obj, const jdouble& arg0, const jboolean& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_fall();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_isFlappingWings() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aW", "isFlapping", "method_5776", "isFlappingWings", "m_142039_"), "()Z");
    }

    static jboolean isFlappingWings(const jobject& obj) {
                
       const auto methodID = methodID_isFlappingWings();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isInAir() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("gx", "isFlying", "method_6581", "isInAir", "m_29443_"), "()Z");
    }

    static jboolean isInAir(const jobject& obj) {
                
       const auto methodID = methodID_isInAir();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_onHoneyDelivered() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("gy", "dropOffNectar", "method_21788", "onHoneyDelivered", "m_27864_"), "()V");
    }

    static void onHoneyDelivered(const jobject& obj) {
                
       const auto methodID = methodID_onHoneyDelivered();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_damage() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "hurt", "method_5643", "damage", "m_6469_"), "(Lbrk;F)Z");
    }

    static jboolean damage(const jobject& obj, const jobject& arg0, const jfloat& arg1) {
                
       const auto methodID = methodID_damage();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_swimUpward() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "jumpInLiquid", "method_6010", "swimUpward", "m_203347_"), "(Lawu;)V");
    }

    static void swimUpward(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_swimUpward();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getLeashOffset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cM", "getLeashOffset", "method_29919", "getLeashOffset", "m_7939_"), "()Lexc;");
    }

    static jobject getLeashOffset(const jobject& obj) {
                
       const auto methodID = methodID_getLeashOffset();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_isWithinDistance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "closerThan", "method_23979", "isWithinDistance", "m_27816_"), "(Ljd;I)Z");
    }

    static jboolean isWithinDistance(const jobject& obj, const jobject& arg0, const jint& arg1) {
                
       const auto methodID = methodID_isWithinDistance();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_setHivePos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "setHivePos", "method_57301", "setHivePos", "m_320152_"), "(Ljd;)V");
    }

    static void setHivePos(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setHivePos();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_ENTITY_PASSIVE_BEEENTITY_HPP