// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ENTITY_ANIMATIONSTATE_HPP
#define NET_MINECRAFT_ENTITY_ANIMATIONSTATE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.entity.AnimationState
 * Remapped: bsm
 */
namespace AnimationState {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("bsm", "net/minecraft/world/entity/AnimationState", "net/minecraft/class_7094", "net/minecraft/entity/AnimationState", "net/minecraft/src/C_213008_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.entity.AnimationState#STOPPED
    [[maybe_unused]] static jlong get_field_STOPPED() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "STOPPED", "field_37417", "STOPPED", "f_216969_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticLongField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.AnimationState#STOPPED
    [[maybe_unused]] static void set_field_STOPPED(const jlong &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "STOPPED", "field_37417", "STOPPED", "f_216969_"), "J");
        return MinecraftSDK::env->SetStaticLongField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.entity.AnimationState#updatedAt
    static jlong get_field_updatedAt(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "lastTime", "field_37418", "updatedAt", "f_216970_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.AnimationState#updatedAt
    static void set_field_updatedAt(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "lastTime", "field_37418", "updatedAt", "f_216970_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.AnimationState#timeRunning
    static jlong get_field_timeRunning(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "accumulatedTime", "field_39112", "timeRunning", "f_216971_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.AnimationState#timeRunning
    static void set_field_timeRunning(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "accumulatedTime", "field_39112", "timeRunning", "f_216971_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    static jmethodID methodID_start() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "start", "method_41322", "start", "m_216977_"), "(I)V");
    }

    static void start(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_start();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_startIfNotRunning() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "startIfStopped", "method_41324", "startIfNotRunning", "m_216982_"), "(I)V");
    }

    static void startIfNotRunning(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_startIfNotRunning();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setRunning() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "animateWhen", "method_45317", "setRunning", "m_246184_"), "(ZI)V");
    }

    static void setRunning(const jobject& obj, const jboolean& arg0, const jint& arg1) {
                
       const auto methodID = methodID_setRunning();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_stop() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "stop", "method_41325", "stop", "m_216973_"), "()V");
    }

    static void stop(const jobject& obj) {
                
       const auto methodID = methodID_stop();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_run() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "ifStarted", "method_41323", "run", "m_216979_"), "(Ljava/util/function/Consumer;)V");
    }

    static void run(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_run();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_update() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateTime", "method_43686", "update", "m_216974_"), "(FF)V");
    }

    static void update(const jobject& obj, const jfloat& arg0, const jfloat& arg1) {
                
       const auto methodID = methodID_update();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_skip() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "fastForward", "method_56988", "skip", "m_320921_"), "(IF)V");
    }

    static void skip(const jobject& obj, const jint& arg0, const jfloat& arg1) {
                
       const auto methodID = methodID_skip();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getTimeRunning() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getAccumulatedTime", "method_43687", "getTimeRunning", "m_216981_"), "()J");
    }

    static jlong getTimeRunning(const jobject& obj) {
                
       const auto methodID = methodID_getTimeRunning();
       return MinecraftSDK::env->CallLongMethod(obj, methodID);
    };
    
    static jmethodID methodID_isRunning() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "isStarted", "method_41327", "isRunning", "m_216984_"), "()Z");
    }

    static jboolean isRunning(const jobject& obj) {
                
       const auto methodID = methodID_isRunning();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_ENTITY_ANIMATIONSTATE_HPP