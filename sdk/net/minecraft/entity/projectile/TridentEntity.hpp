// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ENTITY_PROJECTILE_TRIDENTENTITY_HPP
#define NET_MINECRAFT_ENTITY_PROJECTILE_TRIDENTENTITY_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.entity.projectile.TridentEntity
 * Remapped: coc
 */
namespace TridentEntity {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("coc", "net/minecraft/world/entity/projectile/ThrownTrident", "net/minecraft/class_1685", "net/minecraft/entity/projectile/TridentEntity", "net/minecraft/src/C_1179_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.entity.projectile.TridentEntity#LOYALTY
    [[maybe_unused]] static jobject get_field_LOYALTY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "ID_LOYALTY", "field_7647", "LOYALTY", "f_37558_"), "Lajw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.projectile.TridentEntity#LOYALTY
    [[maybe_unused]] static void set_field_LOYALTY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "ID_LOYALTY", "field_7647", "LOYALTY", "f_37558_"), "Lajw;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.projectile.TridentEntity#ENCHANTED
    [[maybe_unused]] static jobject get_field_ENCHANTED() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "ID_FOIL", "field_21514", "ENCHANTED", "f_37554_"), "Lajw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.projectile.TridentEntity#ENCHANTED
    [[maybe_unused]] static void set_field_ENCHANTED(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "ID_FOIL", "field_21514", "ENCHANTED", "f_37554_"), "Lajw;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.entity.projectile.TridentEntity#dealtDamage
    static jboolean get_field_dealtDamage(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "dealtDamage", "field_7648", "dealtDamage", "f_37556_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.projectile.TridentEntity#dealtDamage
    static void set_field_dealtDamage(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "dealtDamage", "field_7648", "dealtDamage", "f_37556_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.entity.projectile.TridentEntity#returnTimer
    static jint get_field_returnTimer(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "clientSideReturnTridentTickCount", "field_7649", "returnTimer", "f_37557_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static public field net.minecraft.entity.projectile.TridentEntity#returnTimer
    static void set_field_returnTimer(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "clientSideReturnTridentTickCount", "field_7649", "returnTimer", "f_37557_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    static jmethodID methodID_initDataTracker() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "defineSynchedData", "method_5693", "initDataTracker", "m_8097_"), "(Laka$a;)V");
    }

    static void initDataTracker(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_initDataTracker();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "tick", "method_5773", "tick", "m_8119_"), "()V");
    }

    static void tick(const jobject& obj) {
                
       const auto methodID = methodID_tick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_isOwnerAlive() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("J", "isAcceptibleReturnOwner", "method_7493", "isOwnerAlive", "m_37594_"), "()Z");
    }

    static jboolean isOwnerAlive(const jobject& obj) {
                
       const auto methodID = methodID_isOwnerAlive();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isEnchanted() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("F", "isFoil", "method_23751", "isEnchanted", "m_37593_"), "()Z");
    }

    static jboolean isEnchanted(const jobject& obj) {
                
       const auto methodID = methodID_isEnchanted();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getEntityCollision() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "findHitEntity", "method_7434", "getEntityCollision", "m_6351_"), "(Lexc;Lexc;)Lewz;");
    }

    static jobject getEntityCollision(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_getEntityCollision();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_onEntityHit() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onHitEntity", "method_7454", "onEntityHit", "m_5790_"), "(Lewz;)V");
    }

    static void onEntityHit(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onEntityHit();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onBlockHitEnchantmentEffects() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "hitBlockEnchantmentEffects", "method_59956", "onBlockHitEnchantmentEffects", "m_339443_"), "(Laqu;Lewy;Lcuq;)V");
    }

    static void onBlockHitEnchantmentEffects(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_onBlockHitEnchantmentEffects();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getWeaponStack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dS", "getWeaponItem", "method_59958", "getWeaponStack", "m_338776_"), "()Lcuq;");
    }

    static jobject getWeaponStack(const jobject& obj) {
                
       const auto methodID = methodID_getWeaponStack();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_tryPickup() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "tryPickup", "method_34713", "tryPickup", "m_142470_"), "(Lcmx;)Z");
    }

    static jboolean tryPickup(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_tryPickup();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getDefaultItemStack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("x", "getDefaultPickupItem", "method_57314", "getDefaultItemStack", "m_321416_"), "()Lcuq;");
    }

    static jobject getDefaultItemStack(const jobject& obj) {
                
       const auto methodID = methodID_getDefaultItemStack();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getHitSound() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("t", "getDefaultHitGroundSoundEvent", "method_7440", "getHitSound", "m_7239_"), "()Lavo;");
    }

    static jobject getHitSound(const jobject& obj) {
                
       const auto methodID = methodID_getHitSound();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_onPlayerCollision() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b_", "playerTouch", "method_5694", "onPlayerCollision", "m_6123_"), "(Lcmx;)V");
    }

    static void onPlayerCollision(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onPlayerCollision();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_readCustomDataFromNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "readAdditionalSaveData", "method_5749", "readCustomDataFromNbt", "m_7378_"), "(Lub;)V");
    }

    static void readCustomDataFromNbt(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_readCustomDataFromNbt();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_writeCustomDataToNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "addAdditionalSaveData", "method_5652", "writeCustomDataToNbt", "m_7380_"), "(Lub;)V");
    }

    static void writeCustomDataToNbt(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_writeCustomDataToNbt();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getLoyalty() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getLoyaltyFromItem", "method_59960", "getLoyalty", "m_340499_"), "(Lcuq;)B");
    }

    static jbyte getLoyalty(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getLoyalty();
       return MinecraftSDK::env->CallByteMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_age() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("p", "tickDespawn", "method_7446", "age", "m_6901_"), "()V");
    }

    static void age(const jobject& obj) {
                
       const auto methodID = methodID_age();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getDragInWater() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("D", "getWaterInertia", "method_7436", "getDragInWater", "m_6882_"), "()F");
    }

    static jfloat getDragInWater(const jobject& obj) {
                
       const auto methodID = methodID_getDragInWater();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_shouldRender() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "shouldRender", "method_5727", "shouldRender", "m_6000_"), "(DDD)Z");
    }

    static jboolean shouldRender(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID_shouldRender();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
};

#endif // NET_MINECRAFT_ENTITY_PROJECTILE_TRIDENTENTITY_HPP