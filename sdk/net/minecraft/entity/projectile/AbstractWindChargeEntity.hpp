// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ENTITY_PROJECTILE_ABSTRACTWINDCHARGEENTITY_HPP
#define NET_MINECRAFT_ENTITY_PROJECTILE_ABSTRACTWINDCHARGEENTITY_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.entity.projectile.AbstractWindChargeEntity
 * Remapped: cof
 */
namespace AbstractWindChargeEntity {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("cof", "net/minecraft/world/entity/projectile/windcharge/AbstractWindCharge", "net/minecraft/class_9236", "net/minecraft/entity/projectile/AbstractWindChargeEntity", "net/minecraft/src/C_313527_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.entity.projectile.AbstractWindChargeEntity#EXPLOSION_BEHAVIOR
    [[maybe_unused]] static jobject get_field_EXPLOSION_BEHAVIOR() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "EXPLOSION_DAMAGE_CALCULATOR", "field_50137", "EXPLOSION_BEHAVIOR", "f_316764_"), "Ldcp;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.projectile.AbstractWindChargeEntity#EXPLOSION_BEHAVIOR
    [[maybe_unused]] static void set_field_EXPLOSION_BEHAVIOR(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "EXPLOSION_DAMAGE_CALCULATOR", "field_50137", "EXPLOSION_BEHAVIOR", "f_316764_"), "Ldcp;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.entity.projectile.AbstractWindChargeEntity#field_52224
    [[maybe_unused]] static jdouble get_field_field_52224() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "JUMP_SCALE", "field_52224", "field_52224", "f_337467_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.projectile.AbstractWindChargeEntity#field_52224
    [[maybe_unused]] static void set_field_field_52224(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "JUMP_SCALE", "field_52224", "field_52224", "f_337467_"), "D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    static jmethodID methodID_calculateBoundingBox() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("au", "makeBoundingBox", "method_33332", "calculateBoundingBox", "m_142242_"), "()Lewx;");
    }

    static jobject calculateBoundingBox(const jobject& obj) {
                
       const auto methodID = methodID_calculateBoundingBox();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_collidesWith() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "canCollideWith", "method_30949", "collidesWith", "m_7337_"), "(Lbsr;)Z");
    }

    static jboolean collidesWith(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_collidesWith();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_canHit() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "canHitEntity", "method_26958", "canHit", "m_5603_"), "(Lbsr;)Z");
    }

    static jboolean canHit(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_canHit();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onEntityHit() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onHitEntity", "method_7454", "onEntityHit", "m_5790_"), "(Lewz;)V");
    }

    static void onEntityHit(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onEntityHit();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_addVelocity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "push", "method_5762", "addVelocity", "m_5997_"), "(DDD)V");
    }

    static void addVelocity(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID_addVelocity();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_createExplosion() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "explode", "method_55055", "createExplosion", "m_320462_"), "(Lexc;)V");
    }

    static void createExplosion(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_createExplosion();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onBlockHit() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onHitBlock", "method_24920", "onBlockHit", "m_8060_"), "(Lewy;)V");
    }

    static void onBlockHit(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onBlockHit();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onCollision() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onHit", "method_7488", "onCollision", "m_6532_"), "(Lexa;)V");
    }

    static void onCollision(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onCollision();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isBurning() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("t", "shouldBurn", "method_7468", "isBurning", "m_5931_"), "()Z");
    }

    static jboolean isBurning(const jobject& obj) {
                
       const auto methodID = methodID_isBurning();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getStack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("p", "getItem", "method_7495", "getStack", "m_7846_"), "()Lcuq;");
    }

    static jobject getStack(const jobject& obj) {
                
       const auto methodID = methodID_getStack();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getDrag() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("w", "getInertia", "method_7466", "getDrag", "m_6884_"), "()F");
    }

    static jfloat getDrag(const jobject& obj) {
                
       const auto methodID = methodID_getDrag();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_getDragInWater() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("x", "getLiquidInertia", "method_55583", "getDragInWater", "m_307145_"), "()F");
    }

    static jfloat getDragInWater(const jobject& obj) {
                
       const auto methodID = methodID_getDragInWater();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_getParticleType() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("v", "getTrailParticle", "method_7467", "getParticleType", "m_5967_"), "()Llk;");
    }

    static jobject getParticleType(const jobject& obj) {
                
       const auto methodID = methodID_getParticleType();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "tick", "method_5773", "tick", "m_8119_"), "()V");
    }

    static void tick(const jobject& obj) {
                
       const auto methodID = methodID_tick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_damage() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "hurt", "method_5643", "damage", "m_6469_"), "(Lbrk;F)Z");
    }

    static jboolean damage(const jobject& obj, const jobject& arg0, const jfloat& arg1) {
                
       const auto methodID = methodID_damage();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_ENTITY_PROJECTILE_ABSTRACTWINDCHARGEENTITY_HPP