// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ENTITY_PROJECTILE_PERSISTENTPROJECTILEENTITY$PICKUPPERMISSION_HPP
#define NET_MINECRAFT_ENTITY_PROJECTILE_PERSISTENTPROJECTILEENTITY$PICKUPPERMISSION_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.entity.projectile.PersistentProjectileEntity$PickupPermission
 * Remapped: cnd$a
 */
namespace PersistentProjectileEntity$PickupPermission {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("cnd$a", "net/minecraft/world/entity/projectile/AbstractArrow$Pickup", "net/minecraft/class_1665$class_1666", "net/minecraft/entity/projectile/PersistentProjectileEntity$PickupPermission", "net/minecraft/src/C_1151_$C_1152_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.entity.projectile.PersistentProjectileEntity$PickupPermission#DISALLOWED
    [[maybe_unused]] static jobject get_field_DISALLOWED() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "DISALLOWED", "field_7592", "DISALLOWED", "DISALLOWED"), "Lcnd$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.projectile.PersistentProjectileEntity$PickupPermission#DISALLOWED
    [[maybe_unused]] static void set_field_DISALLOWED(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "DISALLOWED", "field_7592", "DISALLOWED", "DISALLOWED"), "Lcnd$a;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.entity.projectile.PersistentProjectileEntity$PickupPermission#ALLOWED
    [[maybe_unused]] static jobject get_field_ALLOWED() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ALLOWED", "field_7593", "ALLOWED", "ALLOWED"), "Lcnd$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.projectile.PersistentProjectileEntity$PickupPermission#ALLOWED
    [[maybe_unused]] static void set_field_ALLOWED(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ALLOWED", "field_7593", "ALLOWED", "ALLOWED"), "Lcnd$a;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.entity.projectile.PersistentProjectileEntity$PickupPermission#CREATIVE_ONLY
    [[maybe_unused]] static jobject get_field_CREATIVE_ONLY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "CREATIVE_ONLY", "field_7594", "CREATIVE_ONLY", "CREATIVE_ONLY"), "Lcnd$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.projectile.PersistentProjectileEntity$PickupPermission#CREATIVE_ONLY
    [[maybe_unused]] static void set_field_CREATIVE_ONLY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "CREATIVE_ONLY", "field_7594", "CREATIVE_ONLY", "CREATIVE_ONLY"), "Lcnd$a;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_values() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("values", "values", "values", "values", "values"), "()[Lcnd$a;");
    }

    static jobject values() {
       const auto clazz = self();
       const auto methodID = methodID_values();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_valueOf() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("valueOf", "valueOf", "valueOf", "valueOf", "valueOf"), "(Ljava/lang/String;)Lcnd$a;");
    }

    static jobject valueOf(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_valueOf();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_fromOrdinal() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "byOrdinal", "method_7458", "fromOrdinal", "m_36808_"), "(I)Lcnd$a;");
    }

    static jobject fromOrdinal(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_fromOrdinal();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_ENTITY_PROJECTILE_PERSISTENTPROJECTILEENTITY$PICKUPPERMISSION_HPP