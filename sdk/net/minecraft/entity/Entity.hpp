// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ENTITY_ENTITY_HPP
#define NET_MINECRAFT_ENTITY_ENTITY_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.entity.Entity
 * Remapped: bsr
 */
namespace Entity {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("bsr", "net/minecraft/world/entity/Entity", "net/minecraft/class_1297", "net/minecraft/entity/Entity", "net/minecraft/src/C_507_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.entity.Entity#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "LOGGER", "field_5955", "LOGGER", "f_19849_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "LOGGER", "field_5955", "LOGGER", "f_19849_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.entity.Entity#ID_KEY
    [[maybe_unused]] static jobject get_field_ID_KEY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("w", "ID_TAG", "field_29985", "ID_KEY", "f_146815_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#ID_KEY
    [[maybe_unused]] static void set_field_ID_KEY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("w", "ID_TAG", "field_29985", "ID_KEY", "f_146815_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.entity.Entity#PASSENGERS_KEY
    [[maybe_unused]] static jobject get_field_PASSENGERS_KEY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("x", "PASSENGERS_TAG", "field_29986", "PASSENGERS_KEY", "f_146816_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#PASSENGERS_KEY
    [[maybe_unused]] static void set_field_PASSENGERS_KEY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("x", "PASSENGERS_TAG", "field_29986", "PASSENGERS_KEY", "f_146816_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.Entity#CURRENT_ID
    [[maybe_unused]] static jobject get_field_CURRENT_ID() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "ENTITY_COUNTER", "field_5978", "CURRENT_ID", "f_19843_"), "Ljava/util/concurrent/atomic/AtomicInteger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#CURRENT_ID
    [[maybe_unused]] static void set_field_CURRENT_ID(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "ENTITY_COUNTER", "field_5978", "CURRENT_ID", "f_19843_"), "Ljava/util/concurrent/atomic/AtomicInteger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.entity.Entity#field_49791
    [[maybe_unused]] static jint get_field_field_49791() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("y", "CONTENTS_SLOT_INDEX", "field_49791", "field_49791", "f_315146_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#field_49791
    [[maybe_unused]] static void set_field_field_49791(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("y", "CONTENTS_SLOT_INDEX", "field_49791", "field_49791", "f_315146_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.entity.Entity#MAX_RIDING_COOLDOWN
    [[maybe_unused]] static jint get_field_MAX_RIDING_COOLDOWN() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("z", "BOARDING_COOLDOWN", "field_29987", "MAX_RIDING_COOLDOWN", "f_146817_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#MAX_RIDING_COOLDOWN
    [[maybe_unused]] static void set_field_MAX_RIDING_COOLDOWN(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("z", "BOARDING_COOLDOWN", "field_29987", "MAX_RIDING_COOLDOWN", "f_146817_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.entity.Entity#DEFAULT_PORTAL_COOLDOWN
    [[maybe_unused]] static jint get_field_DEFAULT_PORTAL_COOLDOWN() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("A", "TOTAL_AIR_SUPPLY", "field_29988", "DEFAULT_PORTAL_COOLDOWN", "f_146818_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#DEFAULT_PORTAL_COOLDOWN
    [[maybe_unused]] static void set_field_DEFAULT_PORTAL_COOLDOWN(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("A", "TOTAL_AIR_SUPPLY", "field_29988", "DEFAULT_PORTAL_COOLDOWN", "f_146818_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.entity.Entity#MAX_COMMAND_TAGS
    [[maybe_unused]] static jint get_field_MAX_COMMAND_TAGS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("B", "MAX_ENTITY_TAG_COUNT", "field_29989", "MAX_COMMAND_TAGS", "f_146819_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#MAX_COMMAND_TAGS
    [[maybe_unused]] static void set_field_MAX_COMMAND_TAGS(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("B", "MAX_ENTITY_TAG_COUNT", "field_29989", "MAX_COMMAND_TAGS", "f_146819_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.entity.Entity#field_44870
    [[maybe_unused]] static jfloat get_field_field_44870() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("C", "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2", "field_44870", "field_44870", "f_286980_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#field_44870
    [[maybe_unused]] static void set_field_field_44870(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("C", "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_2", "field_44870", "field_44870", "f_286980_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.entity.Entity#field_44871
    [[maybe_unused]] static jdouble get_field_field_44871() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("D", "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5", "field_44871", "field_44871", "f_286994_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#field_44871
    [[maybe_unused]] static void set_field_field_44871(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("D", "DELTA_AFFECTED_BY_BLOCKS_BELOW_0_5", "field_44871", "field_44871", "f_286994_"), "D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.entity.Entity#field_44872
    [[maybe_unused]] static jdouble get_field_field_44872() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("E", "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0", "field_44872", "field_44872", "f_287009_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#field_44872
    [[maybe_unused]] static void set_field_field_44872(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("E", "DELTA_AFFECTED_BY_BLOCKS_BELOW_1_0", "field_44872", "field_44872", "f_287009_"), "D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.entity.Entity#DEFAULT_MIN_FREEZE_DAMAGE_TICKS
    [[maybe_unused]] static jint get_field_DEFAULT_MIN_FREEZE_DAMAGE_TICKS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("F", "BASE_TICKS_REQUIRED_TO_FREEZE", "field_29992", "DEFAULT_MIN_FREEZE_DAMAGE_TICKS", "f_146822_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#DEFAULT_MIN_FREEZE_DAMAGE_TICKS
    [[maybe_unused]] static void set_field_DEFAULT_MIN_FREEZE_DAMAGE_TICKS(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("F", "BASE_TICKS_REQUIRED_TO_FREEZE", "field_29992", "DEFAULT_MIN_FREEZE_DAMAGE_TICKS", "f_146822_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.entity.Entity#FREEZING_DAMAGE_INTERVAL
    [[maybe_unused]] static jint get_field_FREEZING_DAMAGE_INTERVAL() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("G", "FREEZE_HURT_FREQUENCY", "field_29993", "FREEZING_DAMAGE_INTERVAL", "f_146823_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#FREEZING_DAMAGE_INTERVAL
    [[maybe_unused]] static void set_field_FREEZING_DAMAGE_INTERVAL(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("G", "FREEZE_HURT_FREQUENCY", "field_29993", "FREEZING_DAMAGE_INTERVAL", "f_146823_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.entity.Entity#field_49073
    [[maybe_unused]] static jint get_field_field_49073() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("H", "BASE_SAFE_FALL_DISTANCE", "field_49073", "field_49073", "f_315266_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#field_49073
    [[maybe_unused]] static void set_field_field_49073(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("H", "BASE_SAFE_FALL_DISTANCE", "field_49073", "field_49073", "f_315266_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.Entity#NULL_BOX
    [[maybe_unused]] static jobject get_field_NULL_BOX() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "INITIAL_AABB", "field_6025", "NULL_BOX", "f_19845_"), "Lewx;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#NULL_BOX
    [[maybe_unused]] static void set_field_NULL_BOX(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "INITIAL_AABB", "field_6025", "NULL_BOX", "f_19845_"), "Lewx;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.Entity#SPEED_IN_WATER
    [[maybe_unused]] static jdouble get_field_SPEED_IN_WATER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "WATER_FLOW_SCALE", "field_29984", "SPEED_IN_WATER", "f_146814_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#SPEED_IN_WATER
    [[maybe_unused]] static void set_field_SPEED_IN_WATER(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "WATER_FLOW_SCALE", "field_29984", "SPEED_IN_WATER", "f_146814_"), "D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.Entity#SPEED_IN_LAVA_IN_NETHER
    [[maybe_unused]] static jdouble get_field_SPEED_IN_LAVA_IN_NETHER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "LAVA_FAST_FLOW_SCALE", "field_29982", "SPEED_IN_LAVA_IN_NETHER", "f_146811_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#SPEED_IN_LAVA_IN_NETHER
    [[maybe_unused]] static void set_field_SPEED_IN_LAVA_IN_NETHER(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "LAVA_FAST_FLOW_SCALE", "field_29982", "SPEED_IN_LAVA_IN_NETHER", "f_146811_"), "D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.Entity#SPEED_IN_LAVA
    [[maybe_unused]] static jdouble get_field_SPEED_IN_LAVA() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "LAVA_SLOW_FLOW_SCALE", "field_29983", "SPEED_IN_LAVA", "f_146812_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#SPEED_IN_LAVA
    [[maybe_unused]] static void set_field_SPEED_IN_LAVA(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "LAVA_SLOW_FLOW_SCALE", "field_29983", "SPEED_IN_LAVA", "f_146812_"), "D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.entity.Entity#UUID_KEY
    [[maybe_unused]] static jobject get_field_UUID_KEY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("I", "UUID_TAG", "field_29994", "UUID_KEY", "f_146824_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#UUID_KEY
    [[maybe_unused]] static void set_field_UUID_KEY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("I", "UUID_TAG", "field_29994", "UUID_KEY", "f_146824_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.Entity#renderDistanceMultiplier
    [[maybe_unused]] static jdouble get_field_renderDistanceMultiplier() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "viewScale", "field_5999", "renderDistanceMultiplier", "f_19846_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#renderDistanceMultiplier
    [[maybe_unused]] static void set_field_renderDistanceMultiplier(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "viewScale", "field_5999", "renderDistanceMultiplier", "f_19846_"), "D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.entity.Entity#type
    static jobject get_field_type(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "type", "field_5961", "type", "f_19847_"), "Lbsx;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#type
    static void set_field_type(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "type", "field_5961", "type", "f_19847_"), "Lbsx;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.Entity#id
    static jint get_field_id(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "id", "field_5986", "id", "f_19848_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#id
    static void set_field_id(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "id", "field_5986", "id", "f_19848_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.entity.Entity#intersectionChecked
    static jboolean get_field_intersectionChecked(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("J", "blocksBuilding", "field_23807", "intersectionChecked", "f_19850_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#intersectionChecked
    static void set_field_intersectionChecked(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("J", "blocksBuilding", "field_23807", "intersectionChecked", "f_19850_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.Entity#passengerList
    static jobject get_field_passengerList(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "passengers", "field_5979", "passengerList", "f_19823_"), "Lcom/google/common/collect/ImmutableList;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#passengerList
    static void set_field_passengerList(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "passengers", "field_5979", "passengerList", "f_19823_"), "Lcom/google/common/collect/ImmutableList;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.entity.Entity#ridingCooldown
    static jint get_field_ridingCooldown(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("K", "boardingCooldown", "field_5951", "ridingCooldown", "f_19851_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.entity.Entity#ridingCooldown
    static void set_field_ridingCooldown(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("K", "boardingCooldown", "field_5951", "ridingCooldown", "f_19851_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.Entity#vehicle
    static jobject get_field_vehicle(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "vehicle", "field_6034", "vehicle", "f_19824_"), "Lbsr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#vehicle
    static void set_field_vehicle(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "vehicle", "field_6034", "vehicle", "f_19824_"), "Lbsr;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.Entity#world
    static jobject get_field_world(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "level", "field_6002", "world", "f_19853_"), "Ldcw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#world
    static void set_field_world(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "level", "field_6002", "world", "f_19853_"), "Ldcw;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.entity.Entity#prevX
    static jdouble get_field_prevX(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("L", "xo", "field_6014", "prevX", "f_19854_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#prevX
    static void set_field_prevX(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("L", "xo", "field_6014", "prevX", "f_19854_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.entity.Entity#prevY
    static jdouble get_field_prevY(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("M", "yo", "field_6036", "prevY", "f_19855_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#prevY
    static void set_field_prevY(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("M", "yo", "field_6036", "prevY", "f_19855_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.entity.Entity#prevZ
    static jdouble get_field_prevZ(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("N", "zo", "field_5969", "prevZ", "f_19856_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#prevZ
    static void set_field_prevZ(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("N", "zo", "field_5969", "prevZ", "f_19856_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.Entity#pos
    static jobject get_field_pos(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "position", "field_22467", "pos", "f_19825_"), "Lexc;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#pos
    static void set_field_pos(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "position", "field_22467", "pos", "f_19825_"), "Lexc;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.Entity#blockPos
    static jobject get_field_blockPos(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "blockPosition", "field_22468", "blockPos", "f_19826_"), "Ljd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#blockPos
    static void set_field_blockPos(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "blockPosition", "field_22468", "blockPos", "f_19826_"), "Ljd;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.Entity#chunkPos
    static jobject get_field_chunkPos(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "chunkPosition", "field_35101", "chunkPos", "f_185933_"), "Ldcd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#chunkPos
    static void set_field_chunkPos(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "chunkPosition", "field_35101", "chunkPos", "f_185933_"), "Ldcd;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.Entity#velocity
    static jobject get_field_velocity(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "deltaMovement", "field_18276", "velocity", "f_19827_"), "Lexc;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#velocity
    static void set_field_velocity(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "deltaMovement", "field_18276", "velocity", "f_19827_"), "Lexc;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.Entity#yaw
    static jfloat get_field_yaw(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aD", "yRot", "field_6031", "yaw", "f_19857_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#yaw
    static void set_field_yaw(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aD", "yRot", "field_6031", "yaw", "f_19857_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.Entity#pitch
    static jfloat get_field_pitch(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aE", "xRot", "field_5965", "pitch", "f_19858_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#pitch
    static void set_field_pitch(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aE", "xRot", "field_5965", "pitch", "f_19858_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.entity.Entity#prevYaw
    static jfloat get_field_prevYaw(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("O", "yRotO", "field_5982", "prevYaw", "f_19859_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#prevYaw
    static void set_field_prevYaw(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("O", "yRotO", "field_5982", "prevYaw", "f_19859_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.entity.Entity#prevPitch
    static jfloat get_field_prevPitch(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("P", "xRotO", "field_6004", "prevPitch", "f_19860_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#prevPitch
    static void set_field_prevPitch(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("P", "xRotO", "field_6004", "prevPitch", "f_19860_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.Entity#boundingBox
    static jobject get_field_boundingBox(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aF", "bb", "field_6005", "boundingBox", "f_19828_"), "Lewx;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#boundingBox
    static void set_field_boundingBox(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aF", "bb", "field_6005", "boundingBox", "f_19828_"), "Lewx;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.Entity#onGround
    static jboolean get_field_onGround(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aG", "onGround", "field_5952", "onGround", "f_19861_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#onGround
    static void set_field_onGround(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aG", "onGround", "field_5952", "onGround", "f_19861_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.entity.Entity#horizontalCollision
    static jboolean get_field_horizontalCollision(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("Q", "horizontalCollision", "field_5976", "horizontalCollision", "f_19862_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#horizontalCollision
    static void set_field_horizontalCollision(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("Q", "horizontalCollision", "field_5976", "horizontalCollision", "f_19862_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.entity.Entity#verticalCollision
    static jboolean get_field_verticalCollision(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("R", "verticalCollision", "field_5992", "verticalCollision", "f_19863_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#verticalCollision
    static void set_field_verticalCollision(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("R", "verticalCollision", "field_5992", "verticalCollision", "f_19863_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.entity.Entity#groundCollision
    static jboolean get_field_groundCollision(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("S", "verticalCollisionBelow", "field_36331", "groundCollision", "f_201939_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#groundCollision
    static void set_field_groundCollision(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("S", "verticalCollisionBelow", "field_36331", "groundCollision", "f_201939_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.entity.Entity#collidedSoftly
    static jboolean get_field_collidedSoftly(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("T", "minorHorizontalCollision", "field_34927", "collidedSoftly", "f_185931_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#collidedSoftly
    static void set_field_collidedSoftly(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("T", "minorHorizontalCollision", "field_34927", "collidedSoftly", "f_185931_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.entity.Entity#velocityModified
    static jboolean get_field_velocityModified(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("U", "hurtMarked", "field_6037", "velocityModified", "f_19864_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#velocityModified
    static void set_field_velocityModified(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("U", "hurtMarked", "field_6037", "velocityModified", "f_19864_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.entity.Entity#movementMultiplier
    static jobject get_field_movementMultiplier(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("V", "stuckSpeedMultiplier", "field_17046", "movementMultiplier", "f_19865_"), "Lexc;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.entity.Entity#movementMultiplier
    static void set_field_movementMultiplier(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("V", "stuckSpeedMultiplier", "field_17046", "movementMultiplier", "f_19865_"), "Lexc;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.Entity#removalReason
    static jobject get_field_removalReason(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aH", "removalReason", "field_26995", "removalReason", "f_146795_"), "Lbsr$c;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#removalReason
    static void set_field_removalReason(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aH", "removalReason", "field_26995", "removalReason", "f_146795_"), "Lbsr$c;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for static public field net.minecraft.entity.Entity#DEFAULT_FRICTION
    [[maybe_unused]] static jfloat get_field_DEFAULT_FRICTION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("W", "DEFAULT_BB_WIDTH", "field_29973", "DEFAULT_FRICTION", "f_146792_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#DEFAULT_FRICTION
    [[maybe_unused]] static void set_field_DEFAULT_FRICTION(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("W", "DEFAULT_BB_WIDTH", "field_29973", "DEFAULT_FRICTION", "f_146792_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.entity.Entity#MIN_RISING_BUBBLE_COLUMN_SPEED
    [[maybe_unused]] static jfloat get_field_MIN_RISING_BUBBLE_COLUMN_SPEED() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("X", "DEFAULT_BB_HEIGHT", "field_29974", "MIN_RISING_BUBBLE_COLUMN_SPEED", "f_146793_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#MIN_RISING_BUBBLE_COLUMN_SPEED
    [[maybe_unused]] static void set_field_MIN_RISING_BUBBLE_COLUMN_SPEED(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("X", "DEFAULT_BB_HEIGHT", "field_29974", "MIN_RISING_BUBBLE_COLUMN_SPEED", "f_146793_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for public field net.minecraft.entity.Entity#prevHorizontalSpeed
    static jfloat get_field_prevHorizontalSpeed(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("Y", "walkDistO", "field_6039", "prevHorizontalSpeed", "f_19867_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#prevHorizontalSpeed
    static void set_field_prevHorizontalSpeed(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("Y", "walkDistO", "field_6039", "prevHorizontalSpeed", "f_19867_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.entity.Entity#horizontalSpeed
    static jfloat get_field_horizontalSpeed(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("Z", "walkDist", "field_5973", "horizontalSpeed", "f_19787_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#horizontalSpeed
    static void set_field_horizontalSpeed(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("Z", "walkDist", "field_5973", "horizontalSpeed", "f_19787_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.entity.Entity#distanceTraveled
    static jfloat get_field_distanceTraveled(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aa", "moveDist", "field_5994", "distanceTraveled", "f_19788_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#distanceTraveled
    static void set_field_distanceTraveled(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aa", "moveDist", "field_5994", "distanceTraveled", "f_19788_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.entity.Entity#speed
    static jfloat get_field_speed(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("ab", "flyDist", "field_28627", "speed", "f_146794_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#speed
    static void set_field_speed(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("ab", "flyDist", "field_28627", "speed", "f_146794_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.entity.Entity#fallDistance
    static jfloat get_field_fallDistance(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("ac", "fallDistance", "field_6017", "fallDistance", "f_19789_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#fallDistance
    static void set_field_fallDistance(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("ac", "fallDistance", "field_6017", "fallDistance", "f_19789_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.Entity#nextStepSoundDistance
    static jfloat get_field_nextStepSoundDistance(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aI", "nextStep", "field_6003", "nextStepSoundDistance", "f_19829_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#nextStepSoundDistance
    static void set_field_nextStepSoundDistance(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aI", "nextStep", "field_6003", "nextStepSoundDistance", "f_19829_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.entity.Entity#lastRenderX
    static jdouble get_field_lastRenderX(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("ad", "xOld", "field_6038", "lastRenderX", "f_19790_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#lastRenderX
    static void set_field_lastRenderX(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("ad", "xOld", "field_6038", "lastRenderX", "f_19790_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.entity.Entity#lastRenderY
    static jdouble get_field_lastRenderY(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("ae", "yOld", "field_5971", "lastRenderY", "f_19791_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#lastRenderY
    static void set_field_lastRenderY(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("ae", "yOld", "field_5971", "lastRenderY", "f_19791_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.entity.Entity#lastRenderZ
    static jdouble get_field_lastRenderZ(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("af", "zOld", "field_5989", "lastRenderZ", "f_19792_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#lastRenderZ
    static void set_field_lastRenderZ(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("af", "zOld", "field_5989", "lastRenderZ", "f_19792_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.entity.Entity#noClip
    static jboolean get_field_noClip(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("ag", "noPhysics", "field_5960", "noClip", "f_19794_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#noClip
    static void set_field_noClip(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("ag", "noPhysics", "field_5960", "noClip", "f_19794_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.entity.Entity#random
    static jobject get_field_random(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("ah", "random", "field_5974", "random", "f_19796_"), "Layw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.entity.Entity#random
    static void set_field_random(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("ah", "random", "field_5974", "random", "f_19796_"), "Layw;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.entity.Entity#age
    static jint get_field_age(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("ai", "tickCount", "field_6012", "age", "f_19797_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#age
    static void set_field_age(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("ai", "tickCount", "field_6012", "age", "f_19797_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.Entity#fireTicks
    static jint get_field_fireTicks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aJ", "remainingFireTicks", "field_5956", "fireTicks", "f_19831_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#fireTicks
    static void set_field_fireTicks(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aJ", "remainingFireTicks", "field_5956", "fireTicks", "f_19831_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.entity.Entity#touchingWater
    static jboolean get_field_touchingWater(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aj", "wasTouchingWater", "field_5957", "touchingWater", "f_19798_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.entity.Entity#touchingWater
    static void set_field_touchingWater(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aj", "wasTouchingWater", "field_5957", "touchingWater", "f_19798_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.entity.Entity#fluidHeight
    static jobject get_field_fluidHeight(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("ak", "fluidHeight", "field_5964", "fluidHeight", "f_19799_"), "Lit/unimi/dsi/fastutil/objects/Object2DoubleMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.entity.Entity#fluidHeight
    static void set_field_fluidHeight(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("ak", "fluidHeight", "field_5964", "fluidHeight", "f_19799_"), "Lit/unimi/dsi/fastutil/objects/Object2DoubleMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.entity.Entity#submergedInWater
    static jboolean get_field_submergedInWater(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("al", "wasEyeInWater", "field_6000", "submergedInWater", "f_19800_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.entity.Entity#submergedInWater
    static void set_field_submergedInWater(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("al", "wasEyeInWater", "field_6000", "submergedInWater", "f_19800_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.Entity#submergedFluidTag
    static jobject get_field_submergedFluidTag(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aK", "fluidOnEyes", "field_25599", "submergedFluidTag", "f_19801_"), "Ljava/util/Set;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#submergedFluidTag
    static void set_field_submergedFluidTag(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aK", "fluidOnEyes", "field_25599", "submergedFluidTag", "f_19801_"), "Ljava/util/Set;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.entity.Entity#timeUntilRegen
    static jint get_field_timeUntilRegen(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("am", "invulnerableTime", "field_6008", "timeUntilRegen", "f_19802_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#timeUntilRegen
    static void set_field_timeUntilRegen(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("am", "invulnerableTime", "field_6008", "timeUntilRegen", "f_19802_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.entity.Entity#firstUpdate
    static jboolean get_field_firstUpdate(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("an", "firstTick", "field_5953", "firstUpdate", "f_19803_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.entity.Entity#firstUpdate
    static void set_field_firstUpdate(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("an", "firstTick", "field_5953", "firstUpdate", "f_19803_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.entity.Entity#dataTracker
    static jobject get_field_dataTracker(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("ao", "entityData", "field_6011", "dataTracker", "f_19804_"), "Laka;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.entity.Entity#dataTracker
    static void set_field_dataTracker(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("ao", "entityData", "field_6011", "dataTracker", "f_19804_"), "Laka;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for static protected field net.minecraft.entity.Entity#FLAGS
    [[maybe_unused]] static jobject get_field_FLAGS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ap", "DATA_SHARED_FLAGS_ID", "field_5990", "FLAGS", "f_19805_"), "Lajw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static protected field net.minecraft.entity.Entity#FLAGS
    [[maybe_unused]] static void set_field_FLAGS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ap", "DATA_SHARED_FLAGS_ID", "field_5990", "FLAGS", "f_19805_"), "Lajw;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static protected field net.minecraft.entity.Entity#ON_FIRE_FLAG_INDEX
    [[maybe_unused]] static jint get_field_ON_FIRE_FLAG_INDEX() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aq", "FLAG_ONFIRE", "field_29979", "ON_FIRE_FLAG_INDEX", "f_146805_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static protected field net.minecraft.entity.Entity#ON_FIRE_FLAG_INDEX
    [[maybe_unused]] static void set_field_ON_FIRE_FLAG_INDEX(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aq", "FLAG_ONFIRE", "field_29979", "ON_FIRE_FLAG_INDEX", "f_146805_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.Entity#SNEAKING_FLAG_INDEX
    [[maybe_unused]] static jint get_field_SNEAKING_FLAG_INDEX() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aL", "FLAG_SHIFT_KEY_DOWN", "field_29975", "SNEAKING_FLAG_INDEX", "f_146796_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#SNEAKING_FLAG_INDEX
    [[maybe_unused]] static void set_field_SNEAKING_FLAG_INDEX(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aL", "FLAG_SHIFT_KEY_DOWN", "field_29975", "SNEAKING_FLAG_INDEX", "f_146796_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.Entity#SPRINTING_FLAG_INDEX
    [[maybe_unused]] static jint get_field_SPRINTING_FLAG_INDEX() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aM", "FLAG_SPRINTING", "field_29976", "SPRINTING_FLAG_INDEX", "f_146797_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#SPRINTING_FLAG_INDEX
    [[maybe_unused]] static void set_field_SPRINTING_FLAG_INDEX(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aM", "FLAG_SPRINTING", "field_29976", "SPRINTING_FLAG_INDEX", "f_146797_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.Entity#SWIMMING_FLAG_INDEX
    [[maybe_unused]] static jint get_field_SWIMMING_FLAG_INDEX() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aN", "FLAG_SWIMMING", "field_29977", "SWIMMING_FLAG_INDEX", "f_146798_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#SWIMMING_FLAG_INDEX
    [[maybe_unused]] static void set_field_SWIMMING_FLAG_INDEX(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aN", "FLAG_SWIMMING", "field_29977", "SWIMMING_FLAG_INDEX", "f_146798_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.Entity#INVISIBLE_FLAG_INDEX
    [[maybe_unused]] static jint get_field_INVISIBLE_FLAG_INDEX() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aO", "FLAG_INVISIBLE", "field_29978", "INVISIBLE_FLAG_INDEX", "f_146799_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#INVISIBLE_FLAG_INDEX
    [[maybe_unused]] static void set_field_INVISIBLE_FLAG_INDEX(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aO", "FLAG_INVISIBLE", "field_29978", "INVISIBLE_FLAG_INDEX", "f_146799_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static protected field net.minecraft.entity.Entity#GLOWING_FLAG_INDEX
    [[maybe_unused]] static jint get_field_GLOWING_FLAG_INDEX() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ar", "FLAG_GLOWING", "field_29980", "GLOWING_FLAG_INDEX", "f_146806_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static protected field net.minecraft.entity.Entity#GLOWING_FLAG_INDEX
    [[maybe_unused]] static void set_field_GLOWING_FLAG_INDEX(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ar", "FLAG_GLOWING", "field_29980", "GLOWING_FLAG_INDEX", "f_146806_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static protected field net.minecraft.entity.Entity#FALL_FLYING_FLAG_INDEX
    [[maybe_unused]] static jint get_field_FALL_FLYING_FLAG_INDEX() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("as", "FLAG_FALL_FLYING", "field_29981", "FALL_FLYING_FLAG_INDEX", "f_146807_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static protected field net.minecraft.entity.Entity#FALL_FLYING_FLAG_INDEX
    [[maybe_unused]] static void set_field_FALL_FLYING_FLAG_INDEX(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("as", "FLAG_FALL_FLYING", "field_29981", "FALL_FLYING_FLAG_INDEX", "f_146807_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.Entity#AIR
    [[maybe_unused]] static jobject get_field_AIR() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aP", "DATA_AIR_SUPPLY_ID", "field_6032", "AIR", "f_19832_"), "Lajw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#AIR
    [[maybe_unused]] static void set_field_AIR(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aP", "DATA_AIR_SUPPLY_ID", "field_6032", "AIR", "f_19832_"), "Lajw;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.Entity#CUSTOM_NAME
    [[maybe_unused]] static jobject get_field_CUSTOM_NAME() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aQ", "DATA_CUSTOM_NAME", "field_6027", "CUSTOM_NAME", "f_19833_"), "Lajw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#CUSTOM_NAME
    [[maybe_unused]] static void set_field_CUSTOM_NAME(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aQ", "DATA_CUSTOM_NAME", "field_6027", "CUSTOM_NAME", "f_19833_"), "Lajw;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.Entity#NAME_VISIBLE
    [[maybe_unused]] static jobject get_field_NAME_VISIBLE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aR", "DATA_CUSTOM_NAME_VISIBLE", "field_5975", "NAME_VISIBLE", "f_19834_"), "Lajw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#NAME_VISIBLE
    [[maybe_unused]] static void set_field_NAME_VISIBLE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aR", "DATA_CUSTOM_NAME_VISIBLE", "field_5975", "NAME_VISIBLE", "f_19834_"), "Lajw;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.Entity#SILENT
    [[maybe_unused]] static jobject get_field_SILENT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aS", "DATA_SILENT", "field_5962", "SILENT", "f_19835_"), "Lajw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#SILENT
    [[maybe_unused]] static void set_field_SILENT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aS", "DATA_SILENT", "field_5962", "SILENT", "f_19835_"), "Lajw;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.Entity#NO_GRAVITY
    [[maybe_unused]] static jobject get_field_NO_GRAVITY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aT", "DATA_NO_GRAVITY", "field_5995", "NO_GRAVITY", "f_19836_"), "Lajw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#NO_GRAVITY
    [[maybe_unused]] static void set_field_NO_GRAVITY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aT", "DATA_NO_GRAVITY", "field_5995", "NO_GRAVITY", "f_19836_"), "Lajw;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static protected field net.minecraft.entity.Entity#POSE
    [[maybe_unused]] static jobject get_field_POSE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("at", "DATA_POSE", "field_18064", "POSE", "f_19806_"), "Lajw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static protected field net.minecraft.entity.Entity#POSE
    [[maybe_unused]] static void set_field_POSE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("at", "DATA_POSE", "field_18064", "POSE", "f_19806_"), "Lajw;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.entity.Entity#FROZEN_TICKS
    [[maybe_unused]] static jobject get_field_FROZEN_TICKS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aU", "DATA_TICKS_FROZEN", "field_27858", "FROZEN_TICKS", "f_146800_"), "Lajw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#FROZEN_TICKS
    [[maybe_unused]] static void set_field_FROZEN_TICKS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aU", "DATA_TICKS_FROZEN", "field_27858", "FROZEN_TICKS", "f_146800_"), "Lajw;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.entity.Entity#changeListener
    static jobject get_field_changeListener(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aV", "levelCallback", "field_26996", "changeListener", "f_146801_"), "Ldxh;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#changeListener
    static void set_field_changeListener(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aV", "levelCallback", "field_26996", "changeListener", "f_146801_"), "Ldxh;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.Entity#trackedPosition
    static jobject get_field_trackedPosition(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aW", "packetPositionCodec", "field_38931", "trackedPosition", "f_216985_"), "Laig;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#trackedPosition
    static void set_field_trackedPosition(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aW", "packetPositionCodec", "field_38931", "trackedPosition", "f_216985_"), "Laig;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.entity.Entity#ignoreCameraFrustum
    static jboolean get_field_ignoreCameraFrustum(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("au", "noCulling", "field_5985", "ignoreCameraFrustum", "f_19811_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#ignoreCameraFrustum
    static void set_field_ignoreCameraFrustum(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("au", "noCulling", "field_5985", "ignoreCameraFrustum", "f_19811_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.entity.Entity#velocityDirty
    static jboolean get_field_velocityDirty(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("av", "hasImpulse", "field_6007", "velocityDirty", "f_19812_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#velocityDirty
    static void set_field_velocityDirty(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("av", "hasImpulse", "field_6007", "velocityDirty", "f_19812_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.entity.Entity#portalManager
    static jobject get_field_portalManager(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aw", "portalProcess", "field_51994", "portalManager", "f_336952_"), "Lbtz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#portalManager
    static void set_field_portalManager(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aw", "portalProcess", "field_51994", "portalManager", "f_336952_"), "Lbtz;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.Entity#portalCooldown
    static jint get_field_portalCooldown(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aX", "portalCooldown", "field_6018", "portalCooldown", "f_19839_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#portalCooldown
    static void set_field_portalCooldown(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aX", "portalCooldown", "field_6018", "portalCooldown", "f_19839_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.Entity#invulnerable
    static jboolean get_field_invulnerable(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aY", "invulnerable", "field_6009", "invulnerable", "f_19840_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#invulnerable
    static void set_field_invulnerable(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aY", "invulnerable", "field_6009", "invulnerable", "f_19840_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.entity.Entity#uuid
    static jobject get_field_uuid(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("ax", "uuid", "field_6021", "uuid", "f_19820_"), "Ljava/util/UUID;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.entity.Entity#uuid
    static void set_field_uuid(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("ax", "uuid", "field_6021", "uuid", "f_19820_"), "Ljava/util/UUID;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.entity.Entity#uuidString
    static jobject get_field_uuidString(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("ay", "stringUUID", "field_5981", "uuidString", "f_19821_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.entity.Entity#uuidString
    static void set_field_uuidString(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("ay", "stringUUID", "field_5981", "uuidString", "f_19821_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.Entity#glowing
    static jboolean get_field_glowing(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aZ", "hasGlowingTag", "field_5958", "glowing", "f_146802_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#glowing
    static void set_field_glowing(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aZ", "hasGlowingTag", "field_5958", "glowing", "f_146802_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.Entity#commandTags
    static jobject get_field_commandTags(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("ba", "tags", "field_6029", "commandTags", "f_19841_"), "Ljava/util/Set;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#commandTags
    static void set_field_commandTags(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("ba", "tags", "field_6029", "commandTags", "f_19841_"), "Ljava/util/Set;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.Entity#pistonMovementDelta
    static jdouble get_field_pistonMovementDelta(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("bb", "pistonDeltas", "field_5993", "pistonMovementDelta", "f_19813_"), "[D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#pistonMovementDelta
    static void set_field_pistonMovementDelta(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("bb", "pistonDeltas", "field_5993", "pistonMovementDelta", "f_19813_"), "[D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.Entity#pistonMovementTick
    static jlong get_field_pistonMovementTick(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("bc", "pistonDeltasGameTime", "field_5996", "pistonMovementTick", "f_19814_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#pistonMovementTick
    static void set_field_pistonMovementTick(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("bc", "pistonDeltasGameTime", "field_5996", "pistonMovementTick", "f_19814_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.Entity#dimensions
    static jobject get_field_dimensions(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("bd", "dimensions", "field_18065", "dimensions", "f_19815_"), "Lbsu;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#dimensions
    static void set_field_dimensions(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("bd", "dimensions", "field_18065", "dimensions", "f_19815_"), "Lbsu;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.Entity#standingEyeHeight
    static jfloat get_field_standingEyeHeight(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("be", "eyeHeight", "field_18066", "standingEyeHeight", "f_19816_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#standingEyeHeight
    static void set_field_standingEyeHeight(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("be", "eyeHeight", "field_18066", "standingEyeHeight", "f_19816_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.entity.Entity#inPowderSnow
    static jboolean get_field_inPowderSnow(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("az", "isInPowderSnow", "field_27857", "inPowderSnow", "f_146808_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#inPowderSnow
    static void set_field_inPowderSnow(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("az", "isInPowderSnow", "field_27857", "inPowderSnow", "f_146808_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.entity.Entity#wasInPowderSnow
    static jboolean get_field_wasInPowderSnow(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aA", "wasInPowderSnow", "field_28628", "wasInPowderSnow", "f_146809_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#wasInPowderSnow
    static void set_field_wasInPowderSnow(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aA", "wasInPowderSnow", "field_28628", "wasInPowderSnow", "f_146809_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.entity.Entity#wasOnFire
    static jboolean get_field_wasOnFire(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aB", "wasOnFire", "field_28629", "wasOnFire", "f_146810_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#wasOnFire
    static void set_field_wasOnFire(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aB", "wasOnFire", "field_28629", "wasOnFire", "f_146810_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.entity.Entity#supportingBlockPos
    static jobject get_field_supportingBlockPos(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aC", "mainSupportingBlockPos", "field_44784", "supportingBlockPos", "f_285638_"), "Ljava/util/Optional;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static public field net.minecraft.entity.Entity#supportingBlockPos
    static void set_field_supportingBlockPos(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aC", "mainSupportingBlockPos", "field_44784", "supportingBlockPos", "f_285638_"), "Ljava/util/Optional;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.Entity#forceUpdateSupportingBlockPos
    static jboolean get_field_forceUpdateSupportingBlockPos(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("bf", "onGroundNoBlocks", "field_44873", "forceUpdateSupportingBlockPos", "f_286942_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#forceUpdateSupportingBlockPos
    static void set_field_forceUpdateSupportingBlockPos(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("bf", "onGroundNoBlocks", "field_44873", "forceUpdateSupportingBlockPos", "f_286942_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.Entity#lastChimeIntensity
    static jfloat get_field_lastChimeIntensity(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("bg", "crystalSoundIntensity", "field_26997", "lastChimeIntensity", "f_146803_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#lastChimeIntensity
    static void set_field_lastChimeIntensity(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("bg", "crystalSoundIntensity", "field_26997", "lastChimeIntensity", "f_146803_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.Entity#lastChimeAge
    static jint get_field_lastChimeAge(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("bh", "lastCrystalSoundPlayTick", "field_26994", "lastChimeAge", "f_146804_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#lastChimeAge
    static void set_field_lastChimeAge(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("bh", "lastCrystalSoundPlayTick", "field_26994", "lastChimeAge", "f_146804_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.Entity#hasVisualFire
    static jboolean get_field_hasVisualFire(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("bi", "hasVisualFire", "field_33758", "hasVisualFire", "f_146813_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#hasVisualFire
    static void set_field_hasVisualFire(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("bi", "hasVisualFire", "field_33758", "hasVisualFire", "f_146813_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.entity.Entity#stateAtPos
    static jobject get_field_stateAtPos(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("bj", "inBlockState", "field_47742", "stateAtPos", "f_314943_"), "Ldtc;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.entity.Entity#stateAtPos
    static void set_field_stateAtPos(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("bj", "inBlockState", "field_47742", "stateAtPos", "f_314943_"), "Ldtc;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_collidesWithStateAtPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isColliding", "method_30632", "collidesWithStateAtPos", "m_20039_"), "(Ljd;Ldtc;)Z");
    }

    static jboolean collidesWithStateAtPos(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_collidesWithStateAtPos();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getTeamColorValue() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("q_", "getTeamColor", "method_22861", "getTeamColorValue", "m_19876_"), "()I");
    }

    static jint getTeamColorValue(const jobject& obj) {
                
       const auto methodID = methodID_getTeamColorValue();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_isSpectator() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("R_", "isSpectator", "method_7325", "isSpectator", "m_5833_"), "()Z");
    }

    static jboolean isSpectator(const jobject& obj) {
                
       const auto methodID = methodID_isSpectator();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_detach() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("ak", "unRide", "method_18375", "detach", "m_19877_"), "()V");
    }

    static void detach(const jobject& obj) {
                
       const auto methodID = methodID_detach();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_updateTrackedPosition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "syncPacketPositionCodec", "method_43391", "updateTrackedPosition", "m_217006_"), "(DDD)V");
    }

    static void updateTrackedPosition(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID_updateTrackedPosition();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getTrackedPosition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("al", "getPositionCodec", "method_43389", "getTrackedPosition", "m_217001_"), "()Laig;");
    }

    static jobject getTrackedPosition(const jobject& obj) {
                
       const auto methodID = methodID_getTrackedPosition();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getType() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("am", "getType", "method_5864", "getType", "m_6095_"), "()Lbsx;");
    }

    static jobject getType(const jobject& obj) {
                
       const auto methodID = methodID_getType();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getId() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("an", "getId", "method_5628", "getId", "m_19879_"), "()I");
    }

    static jint getId(const jobject& obj) {
                
       const auto methodID = methodID_getId();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_setId() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "setId", "method_5838", "setId", "m_20234_"), "(I)V");
    }

    static void setId(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_setId();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getCommandTags() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("ao", "getTags", "method_5752", "getCommandTags", "m_19880_"), "()Ljava/util/Set;");
    }

    static jobject getCommandTags(const jobject& obj) {
                
       const auto methodID = methodID_getCommandTags();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_addCommandTag() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addTag", "method_5780", "addCommandTag", "m_20049_"), "(Ljava/lang/String;)Z");
    }

    static jboolean addCommandTag(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addCommandTag();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_removeCommandTag() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "removeTag", "method_5738", "removeCommandTag", "m_20137_"), "(Ljava/lang/String;)Z");
    }

    static jboolean removeCommandTag(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_removeCommandTag();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_kill() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("ap", "kill", "method_5768", "kill", "m_6074_"), "()V");
    }

    static void kill(const jobject& obj) {
                
       const auto methodID = methodID_kill();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_discard() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aq", "discard", "method_31472", "discard", "m_146870_"), "()V");
    }

    static void discard(const jobject& obj) {
                
       const auto methodID = methodID_discard();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_initDataTracker() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "defineSynchedData", "method_5693", "initDataTracker", "m_8097_"), "(Laka$a;)V");
    }

    static void initDataTracker(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_initDataTracker();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getDataTracker() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("ar", "getEntityData", "method_5841", "getDataTracker", "m_20088_"), "()Laka;");
    }

    static jobject getDataTracker(const jobject& obj) {
                
       const auto methodID = methodID_getDataTracker();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_remove() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "remove", "method_5650", "remove", "m_142687_"), "(Lbsr$c;)V");
    }

    static void remove(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_remove();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onRemoved() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("as", "onClientRemoval", "method_36209", "onRemoved", "m_142036_"), "()V");
    }

    static void onRemoved(const jobject& obj) {
                
       const auto methodID = methodID_onRemoved();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_setPose() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setPose", "method_18380", "setPose", "m_20124_"), "(Lbua;)V");
    }

    static void setPose(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setPose();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getPose() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("at", "getPose", "method_18376", "getPose", "m_20089_"), "()Lbua;");
    }

    static jobject getPose(const jobject& obj) {
                
       const auto methodID = methodID_getPose();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_isInPose() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "hasPose", "method_41328", "isInPose", "m_217003_"), "(Lbua;)Z");
    }

    static jboolean isInPose(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isInPose();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isInRange() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "closerThan", "method_24516", "isInRange", "m_19950_"), "(Lbsr;D)Z");
    }

    static jboolean isInRange(const jobject& obj, const jobject& arg0, const jdouble& arg1) {
                
       const auto methodID = methodID_isInRange();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__isInRange() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "closerThan", "method_43259", "isInRange", "m_216992_"), "(Lbsr;DD)Z");
    }

    static jboolean _isInRange(const jobject& obj, const jobject& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID__isInRange();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_setRotation() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setRot", "method_5710", "setRotation", "m_19915_"), "(FF)V");
    }

    static void setRotation(const jobject& obj, const jfloat& arg0, const jfloat& arg1) {
                
       const auto methodID = methodID_setRotation();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_setPosition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "setPos", "method_33574", "setPosition", "m_146884_"), "(Lexc;)V");
    }

    static void setPosition(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setPosition();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__setPosition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a_", "setPos", "method_5814", "setPosition", "m_6034_"), "(DDD)V");
    }

    static void _setPosition(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID__setPosition();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_calculateBoundingBox() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("au", "makeBoundingBox", "method_33332", "calculateBoundingBox", "m_142242_"), "()Lewx;");
    }

    static jobject calculateBoundingBox(const jobject& obj) {
                
       const auto methodID = methodID_calculateBoundingBox();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_refreshPosition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("av", "reapplyPosition", "method_23311", "refreshPosition", "m_20090_"), "()V");
    }

    static void refreshPosition(const jobject& obj) {
                
       const auto methodID = methodID_refreshPosition();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_changeLookDirection() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "turn", "method_5872", "changeLookDirection", "m_19884_"), "(DD)V");
    }

    static void changeLookDirection(const jobject& obj, const jdouble& arg0, const jdouble& arg1) {
                
       const auto methodID = methodID_changeLookDirection();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "tick", "method_5773", "tick", "m_8119_"), "()V");
    }

    static void tick(const jobject& obj) {
                
       const auto methodID = methodID_tick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_baseTick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aw", "baseTick", "method_5670", "baseTick", "m_6075_"), "()V");
    }

    static void baseTick(const jobject& obj) {
                
       const auto methodID = methodID_baseTick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_setOnFire() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "setSharedFlagOnFire", "method_33572", "setOnFire", "m_146868_"), "(Z)V");
    }

    static void setOnFire(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setOnFire();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_attemptTickInVoid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("ax", "checkBelowWorld", "method_31473", "attemptTickInVoid", "m_146871_"), "()V");
    }

    static void attemptTickInVoid(const jobject& obj) {
                
       const auto methodID = methodID_attemptTickInVoid();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_resetPortalCooldown() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("ay", "setPortalCooldown", "method_30229", "resetPortalCooldown", "m_20091_"), "()V");
    }

    static void resetPortalCooldown(const jobject& obj) {
                
       const auto methodID = methodID_resetPortalCooldown();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_setPortalCooldown() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "setPortalCooldown", "method_51850", "setPortalCooldown", "m_287199_"), "(I)V");
    }

    static void setPortalCooldown(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_setPortalCooldown();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getPortalCooldown() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("az", "getPortalCooldown", "method_51848", "getPortalCooldown", "m_287157_"), "()I");
    }

    static jint getPortalCooldown(const jobject& obj) {
                
       const auto methodID = methodID_getPortalCooldown();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasPortalCooldown() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aA", "isOnPortalCooldown", "method_30230", "hasPortalCooldown", "m_20092_"), "()Z");
    }

    static jboolean hasPortalCooldown(const jobject& obj) {
                
       const auto methodID = methodID_hasPortalCooldown();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_tickPortalCooldown() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("M", "processPortalCooldown", "method_5760", "tickPortalCooldown", "m_8021_"), "()V");
    }

    static void tickPortalCooldown(const jobject& obj) {
                
       const auto methodID = methodID_tickPortalCooldown();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_setOnFireFromLava() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aB", "lavaHurt", "method_5730", "setOnFireFromLava", "m_20093_"), "()V");
    }

    static void setOnFireFromLava(const jobject& obj) {
                
       const auto methodID = methodID_setOnFireFromLava();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_setOnFireFor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "igniteForSeconds", "method_5639", "setOnFireFor", "m_322706_"), "(F)V");
    }

    static void setOnFireFor(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_setOnFireFor();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setOnFireForTicks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "igniteForTicks", "method_56073", "setOnFireForTicks", "m_319006_"), "(I)V");
    }

    static void setOnFireForTicks(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_setOnFireForTicks();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setFireTicks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "setRemainingFireTicks", "method_20803", "setFireTicks", "m_7311_"), "(I)V");
    }

    static void setFireTicks(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_setFireTicks();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getFireTicks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aC", "getRemainingFireTicks", "method_20802", "getFireTicks", "m_20094_"), "()I");
    }

    static jint getFireTicks(const jobject& obj) {
                
       const auto methodID = methodID_getFireTicks();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_extinguish() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aD", "clearFire", "method_5646", "extinguish", "m_20095_"), "()V");
    }

    static void extinguish(const jobject& obj) {
                
       const auto methodID = methodID_extinguish();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_tickInVoid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aE", "onBelowWorld", "method_5825", "tickInVoid", "m_6088_"), "()V");
    }

    static void tickInVoid(const jobject& obj) {
                
       const auto methodID = methodID_tickInVoid();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_doesNotCollide() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "isFree", "method_5654", "doesNotCollide", "m_20229_"), "(DDD)Z");
    }

    static jboolean doesNotCollide(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID_doesNotCollide();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__doesNotCollide() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "isFree", "method_5629", "doesNotCollide", "m_20131_"), "(Lewx;)Z");
    }

    static jboolean _doesNotCollide(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__doesNotCollide();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setOnGround() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "setOnGround", "method_24830", "setOnGround", "m_6853_"), "(Z)V");
    }

    static void setOnGround(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setOnGround();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__setOnGround() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setOnGroundWithMovement", "method_60607", "setOnGround", "m_289603_"), "(ZLexc;)V");
    }

    static void _setOnGround(const jobject& obj, const jboolean& arg0, const jobject& arg1) {
                
       const auto methodID = methodID__setOnGround();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isSupportedBy() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "isSupportedBy", "method_51849", "isSupportedBy", "m_287201_"), "(Ljd;)Z");
    }

    static jboolean isSupportedBy(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isSupportedBy();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_updateSupportingBlockPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "checkSupportingBlock", "method_51703", "updateSupportingBlockPos", "m_289600_"), "(ZLexc;)V");
    }

    static void updateSupportingBlockPos(const jobject& obj, const jboolean& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_updateSupportingBlockPos();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isOnGround() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aF", "onGround", "method_24828", "isOnGround", "m_20096_"), "()Z");
    }

    static jboolean isOnGround(const jobject& obj) {
                
       const auto methodID = methodID_isOnGround();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_move() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "move", "method_5784", "move", "m_6478_"), "(Lbts;Lexc;)V");
    }

    static void move(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_move();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_canClimb() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "isStateClimbable", "method_51702", "canClimb", "m_285776_"), "(Ldtc;)Z");
    }

    static jboolean canClimb(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_canClimb();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_stepOnBlock() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "vibrationAndSoundEffectsFromBlock", "method_51701", "stepOnBlock", "m_286065_"), "(Ljd;Ldtc;ZZLexc;)Z");
    }

    static jboolean stepOnBlock(const jobject& obj, const jobject& arg0, const jobject& arg1, const jboolean& arg2, const jboolean& arg3, const jobject& arg4) {
                
       const auto methodID = methodID_stepOnBlock();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_hasCollidedSoftly() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "isHorizontalCollisionMinor", "method_39759", "hasCollidedSoftly", "m_196406_"), "(Lexc;)Z");
    }

    static jboolean hasCollidedSoftly(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_hasCollidedSoftly();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_tryCheckBlockCollision() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aG", "tryCheckInsideBlocks", "method_36974", "tryCheckBlockCollision", "m_146872_"), "()V");
    }

    static void tryCheckBlockCollision(const jobject& obj) {
                
       const auto methodID = methodID_tryCheckBlockCollision();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_playExtinguishSound() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aH", "playEntityOnFireExtinguishedSound", "method_36975", "playExtinguishSound", "m_146873_"), "()V");
    }

    static void playExtinguishSound(const jobject& obj) {
                
       const auto methodID = methodID_playExtinguishSound();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_extinguishWithSound() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aI", "extinguishFire", "method_46395", "extinguishWithSound", "m_252836_"), "()V");
    }

    static void extinguishWithSound(const jobject& obj) {
                
       const auto methodID = methodID_extinguishWithSound();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_addAirTravelEffects() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aJ", "processFlappingMovement", "method_33573", "addAirTravelEffects", "m_146874_"), "()V");
    }

    static void addAirTravelEffects(const jobject& obj) {
                
       const auto methodID = methodID_addAirTravelEffects();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getLandingPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aK", "getOnPosLegacy", "method_43260", "getLandingPos", "m_216999_"), "()Ljd;");
    }

    static jobject getLandingPos(const jobject& obj) {
                
       const auto methodID = methodID_getLandingPos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getVelocityAffectingPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aL", "getBlockPosBelowThatAffectsMyMovement", "method_23314", "getVelocityAffectingPos", "m_20099_"), "()Ljd;");
    }

    static jobject getVelocityAffectingPos(const jobject& obj) {
                
       const auto methodID = methodID_getVelocityAffectingPos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getSteppingPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aM", "getOnPos", "method_23312", "getSteppingPos", "m_20097_"), "()Ljd;");
    }

    static jobject getSteppingPos(const jobject& obj) {
                
       const auto methodID = methodID_getSteppingPos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getPosWithYOffset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "getOnPos", "method_43258", "getPosWithYOffset", "m_216986_"), "(F)Ljd;");
    }

    static jobject getPosWithYOffset(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_getPosWithYOffset();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getJumpVelocityMultiplier() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aN", "getBlockJumpFactor", "method_23313", "getJumpVelocityMultiplier", "m_20098_"), "()F");
    }

    static jfloat getJumpVelocityMultiplier(const jobject& obj) {
                
       const auto methodID = methodID_getJumpVelocityMultiplier();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_getVelocityMultiplier() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aO", "getBlockSpeedFactor", "method_23326", "getVelocityMultiplier", "m_6041_"), "()F");
    }

    static jfloat getVelocityMultiplier(const jobject& obj) {
                
       const auto methodID = methodID_getVelocityMultiplier();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_adjustMovementForSneaking() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "maybeBackOffFromEdge", "method_18796", "adjustMovementForSneaking", "m_5763_"), "(Lexc;Lbts;)Lexc;");
    }

    static jobject adjustMovementForSneaking(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_adjustMovementForSneaking();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_adjustMovementForPiston() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "limitPistonMovement", "method_18794", "adjustMovementForPiston", "m_20133_"), "(Lexc;)Lexc;");
    }

    static jobject adjustMovementForPiston(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_adjustMovementForPiston();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_calculatePistonMovementFactor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "applyPistonMovementRestriction", "method_18797", "calculatePistonMovementFactor", "m_20042_"), "(Lji$a;D)D");
    }

    static jdouble calculatePistonMovementFactor(const jobject& obj, const jobject& arg0, const jdouble& arg1) {
                
       const auto methodID = methodID_calculatePistonMovementFactor();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_adjustMovementForCollisions() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "collide", "method_17835", "adjustMovementForCollisions", "m_20272_"), "(Lexc;)Lexc;");
    }

    static jobject adjustMovementForCollisions(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_adjustMovementForCollisions();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_collectStepHeights() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "collectCandidateStepUpHeights", "method_59921", "collectStepHeights", "m_340466_"), "(Lewx;Ljava/util/List;FF)[F");
    }

    static jfloat collectStepHeights(const jobject& arg0, const jobject& arg1, const jfloat& arg2, const jfloat& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_collectStepHeights();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID__adjustMovementForCollisions() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "collideBoundingBox", "method_20736", "adjustMovementForCollisions", "m_198894_"), "(Lbsr;Lexc;Lewx;Ldcw;Ljava/util/List;)Lexc;");
    }

    static jobject _adjustMovementForCollisions(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4) {
       const auto clazz = self();
       const auto methodID = methodID__adjustMovementForCollisions();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_findCollisionsForMovement() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "collectColliders", "method_59920", "findCollisionsForMovement", "m_339770_"), "(Lbsr;Ldcw;Ljava/util/List;Lewx;)Ljava/util/List;");
    }

    static jobject findCollisionsForMovement(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_findCollisionsForMovement();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID___adjustMovementForCollisions() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "collideWithShapes", "method_20737", "adjustMovementForCollisions", "m_198900_"), "(Lexc;Lewx;Ljava/util/List;)Lexc;");
    }

    static jobject __adjustMovementForCollisions(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID___adjustMovementForCollisions();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_calculateNextStepSoundDistance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aP", "nextStep", "method_5867", "calculateNextStepSoundDistance", "m_6059_"), "()F");
    }

    static jfloat calculateNextStepSoundDistance(const jobject& obj) {
                
       const auto methodID = methodID_calculateNextStepSoundDistance();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_getSwimSound() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aQ", "getSwimSound", "method_5737", "getSwimSound", "m_5501_"), "()Lavo;");
    }

    static jobject getSwimSound(const jobject& obj) {
                
       const auto methodID = methodID_getSwimSound();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getSplashSound() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aR", "getSwimSplashSound", "method_5625", "getSplashSound", "m_5509_"), "()Lavo;");
    }

    static jobject getSplashSound(const jobject& obj) {
                
       const auto methodID = methodID_getSplashSound();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getHighSpeedSplashSound() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aS", "getSwimHighSpeedSplashSound", "method_5672", "getHighSpeedSplashSound", "m_5508_"), "()Lavo;");
    }

    static jobject getHighSpeedSplashSound(const jobject& obj) {
                
       const auto methodID = methodID_getHighSpeedSplashSound();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_checkBlockCollision() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aT", "checkInsideBlocks", "method_5852", "checkBlockCollision", "m_20101_"), "()V");
    }

    static void checkBlockCollision(const jobject& obj) {
                
       const auto methodID = methodID_checkBlockCollision();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_onBlockCollision() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onInsideBlock", "method_5622", "onBlockCollision", "m_6763_"), "(Ldtc;)V");
    }

    static void onBlockCollision(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onBlockCollision();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getWorldSpawnPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "adjustSpawnLocation", "method_14245", "getWorldSpawnPos", "m_338926_"), "(Laqu;Ljd;)Ljd;");
    }

    static jobject getWorldSpawnPos(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_getWorldSpawnPos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_emitGameEvent() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "gameEvent", "method_32875", "emitGameEvent", "m_146852_"), "(Ljm;Lbsr;)V");
    }

    static void emitGameEvent(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_emitGameEvent();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__emitGameEvent() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "gameEvent", "method_32876", "emitGameEvent", "m_146850_"), "(Ljm;)V");
    }

    static void _emitGameEvent(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__emitGameEvent();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_playStepSounds() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "walkingStepSound", "method_51297", "playStepSounds", "m_280440_"), "(Ljd;Ldtc;)V");
    }

    static void playStepSounds(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_playStepSounds();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_playSwimSound() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aU", "waterSwimSound", "method_51295", "playSwimSound", "m_280447_"), "()V");
    }

    static void playSwimSound(const jobject& obj) {
                
       const auto methodID = methodID_playSwimSound();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getStepSoundPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "getPrimaryStepSoundBlockPos", "method_49788", "getStepSoundPos", "m_276951_"), "(Ljd;)Ljd;");
    }

    static jobject getStepSoundPos(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getStepSoundPos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_playCombinationStepSounds() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "playCombinationStepSounds", "method_49787", "playCombinationStepSounds", "m_276961_"), "(Ldtc;Ldtc;)V");
    }

    static void playCombinationStepSounds(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_playCombinationStepSounds();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_playSecondaryStepSound() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "playMuffledStepSound", "method_51296", "playSecondaryStepSound", "m_280568_"), "(Ldtc;)V");
    }

    static void playSecondaryStepSound(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_playSecondaryStepSound();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_playStepSound() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "playStepSound", "method_5712", "playStepSound", "m_7355_"), "(Ljd;Ldtc;)V");
    }

    static void playStepSound(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_playStepSound();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_shouldPlayAmethystChimeSound() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "shouldPlayAmethystStepSound", "method_49790", "shouldPlayAmethystChimeSound", "m_277063_"), "(Ldtc;)Z");
    }

    static jboolean shouldPlayAmethystChimeSound(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_shouldPlayAmethystChimeSound();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_playAmethystChimeSound() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("v", "playAmethystStepSound", "method_37215", "playAmethystChimeSound", "m_277116_"), "()V");
    }

    static void playAmethystChimeSound(const jobject& obj) {
                
       const auto methodID = methodID_playAmethystChimeSound();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID__playSwimSound() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "playSwimSound", "method_5734", "playSwimSound", "m_5625_"), "(F)V");
    }

    static void _playSwimSound(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID__playSwimSound();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_addFlapEffects() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aV", "onFlap", "method_5801", "addFlapEffects", "m_142043_"), "()V");
    }

    static void addFlapEffects(const jobject& obj) {
                
       const auto methodID = methodID_addFlapEffects();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_isFlappingWings() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aW", "isFlapping", "method_5776", "isFlappingWings", "m_142039_"), "()Z");
    }

    static jboolean isFlappingWings(const jobject& obj) {
                
       const auto methodID = methodID_isFlappingWings();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_playSound() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "playSound", "method_5783", "playSound", "m_5496_"), "(Lavo;FF)V");
    }

    static void playSound(const jobject& obj, const jobject& arg0, const jfloat& arg1, const jfloat& arg2) {
                
       const auto methodID = methodID_playSound();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_playSoundIfNotSilent() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "playSound", "method_43077", "playSoundIfNotSilent", "m_216990_"), "(Lavo;)V");
    }

    static void playSoundIfNotSilent(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_playSoundIfNotSilent();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isSilent() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aX", "isSilent", "method_5701", "isSilent", "m_20067_"), "()Z");
    }

    static jboolean isSilent(const jobject& obj) {
                
       const auto methodID = methodID_isSilent();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setSilent() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "setSilent", "method_5803", "setSilent", "m_20225_"), "(Z)V");
    }

    static void setSilent(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setSilent();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_hasNoGravity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aY", "isNoGravity", "method_5740", "hasNoGravity", "m_20068_"), "()Z");
    }

    static jboolean hasNoGravity(const jobject& obj) {
                
       const auto methodID = methodID_hasNoGravity();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setNoGravity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "setNoGravity", "method_5875", "setNoGravity", "m_20242_"), "(Z)V");
    }

    static void setNoGravity(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setNoGravity();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getGravity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aZ", "getDefaultGravity", "method_7490", "getGravity", "m_319564_"), "()D");
    }

    static jdouble getGravity(const jobject& obj) {
                
       const auto methodID = methodID_getGravity();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_getFinalGravity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("ba", "getGravity", "method_56989", "getFinalGravity", "m_319574_"), "()D");
    }

    static jdouble getFinalGravity(const jobject& obj) {
                
       const auto methodID = methodID_getFinalGravity();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_applyGravity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bb", "applyGravity", "method_56990", "applyGravity", "m_320756_"), "()V");
    }

    static void applyGravity(const jobject& obj) {
                
       const auto methodID = methodID_applyGravity();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getMoveEffect() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bc", "getMovementEmission", "method_33570", "getMoveEffect", "m_142319_"), "()Lbsr$b;");
    }

    static jobject getMoveEffect(const jobject& obj) {
                
       const auto methodID = methodID_getMoveEffect();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_occludeVibrationSignals() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bd", "dampensVibrations", "method_33189", "occludeVibrationSignals", "m_213854_"), "()Z");
    }

    static jboolean occludeVibrationSignals(const jobject& obj) {
                
       const auto methodID = methodID_occludeVibrationSignals();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_fall() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "checkFallDamage", "method_5623", "fall", "m_7840_"), "(DZLdtc;Ljd;)V");
    }

    static void fall(const jobject& obj, const jdouble& arg0, const jboolean& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_fall();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_isFireImmune() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("be", "fireImmune", "method_5753", "isFireImmune", "m_5825_"), "()Z");
    }

    static jboolean isFireImmune(const jobject& obj) {
                
       const auto methodID = methodID_isFireImmune();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_handleFallDamage() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "causeFallDamage", "method_5747", "handleFallDamage", "m_142535_"), "(FFLbrk;)Z");
    }

    static jboolean handleFallDamage(const jobject& obj, const jfloat& arg0, const jfloat& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_handleFallDamage();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_isTouchingWater() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bf", "isInWater", "method_5799", "isTouchingWater", "m_20069_"), "()Z");
    }

    static jboolean isTouchingWater(const jobject& obj) {
                
       const auto methodID = methodID_isTouchingWater();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isBeingRainedOn() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("w", "isInRain", "method_5778", "isBeingRainedOn", "m_20285_"), "()Z");
    }

    static jboolean isBeingRainedOn(const jobject& obj) {
                
       const auto methodID = methodID_isBeingRainedOn();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isInsideBubbleColumn() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("F", "isInBubbleColumn", "method_5798", "isInsideBubbleColumn", "m_20305_"), "()Z");
    }

    static jboolean isInsideBubbleColumn(const jobject& obj) {
                
       const auto methodID = methodID_isInsideBubbleColumn();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isTouchingWaterOrRain() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bg", "isInWaterOrRain", "method_5721", "isTouchingWaterOrRain", "m_20070_"), "()Z");
    }

    static jboolean isTouchingWaterOrRain(const jobject& obj) {
                
       const auto methodID = methodID_isTouchingWaterOrRain();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isWet() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bh", "isInWaterRainOrBubble", "method_5637", "isWet", "m_20071_"), "()Z");
    }

    static jboolean isWet(const jobject& obj) {
                
       const auto methodID = methodID_isWet();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isInsideWaterOrBubbleColumn() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bi", "isInWaterOrBubble", "method_5816", "isInsideWaterOrBubbleColumn", "m_20072_"), "()Z");
    }

    static jboolean isInsideWaterOrBubbleColumn(const jobject& obj) {
                
       const auto methodID = methodID_isInsideWaterOrBubbleColumn();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isInFluid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bj", "isInLiquid", "method_52535", "isInFluid", "m_295459_"), "()Z");
    }

    static jboolean isInFluid(const jobject& obj) {
                
       const auto methodID = methodID_isInFluid();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isSubmergedInWater() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bk", "isUnderWater", "method_5869", "isSubmergedInWater", "m_5842_"), "()Z");
    }

    static jboolean isSubmergedInWater(const jobject& obj) {
                
       const auto methodID = methodID_isSubmergedInWater();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_updateSwimming() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bl", "updateSwimming", "method_5790", "updateSwimming", "m_5844_"), "()V");
    }

    static void updateSwimming(const jobject& obj) {
                
       const auto methodID = methodID_updateSwimming();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_updateWaterState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bm", "updateInWaterStateAndDoFluidPushing", "method_5876", "updateWaterState", "m_20073_"), "()Z");
    }

    static jboolean updateWaterState(const jobject& obj) {
                
       const auto methodID = methodID_updateWaterState();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_checkWaterState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bn", "updateInWaterStateAndDoWaterCurrentPushing", "method_5713", "checkWaterState", "m_20074_"), "()V");
    }

    static void checkWaterState(const jobject& obj) {
                
       const auto methodID = methodID_checkWaterState();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_updateSubmergedInWaterState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("H", "updateFluidOnEyes", "method_5630", "updateSubmergedInWaterState", "m_20323_"), "()V");
    }

    static void updateSubmergedInWaterState(const jobject& obj) {
                
       const auto methodID = methodID_updateSubmergedInWaterState();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_onSwimmingStart() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bo", "doWaterSplashEffect", "method_5746", "onSwimmingStart", "m_5841_"), "()V");
    }

    static void onSwimmingStart(const jobject& obj) {
                
       const auto methodID = methodID_onSwimmingStart();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getLandingBlockState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bp", "getBlockStateOnLegacy", "method_43261", "getLandingBlockState", "m_217002_"), "()Ldtc;");
    }

    static jobject getLandingBlockState(const jobject& obj) {
                
       const auto methodID = methodID_getLandingBlockState();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getSteppingBlockState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bq", "getBlockStateOn", "method_25936", "getSteppingBlockState", "m_20075_"), "()Ldtc;");
    }

    static jobject getSteppingBlockState(const jobject& obj) {
                
       const auto methodID = methodID_getSteppingBlockState();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_shouldSpawnSprintingParticles() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("br", "canSpawnSprintParticle", "method_27298", "shouldSpawnSprintingParticles", "m_5843_"), "()Z");
    }

    static jboolean shouldSpawnSprintingParticles(const jobject& obj) {
                
       const auto methodID = methodID_shouldSpawnSprintingParticles();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_spawnSprintingParticles() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bs", "spawnSprintParticle", "method_5839", "spawnSprintingParticles", "m_20076_"), "()V");
    }

    static void spawnSprintingParticles(const jobject& obj) {
                
       const auto methodID = methodID_spawnSprintingParticles();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_isSubmergedIn() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isEyeInFluid", "method_5777", "isSubmergedIn", "m_204029_"), "(Lawu;)Z");
    }

    static jboolean isSubmergedIn(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isSubmergedIn();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isInLava() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bt", "isInLava", "method_5771", "isInLava", "m_20077_"), "()Z");
    }

    static jboolean isInLava(const jobject& obj) {
                
       const auto methodID = methodID_isInLava();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_updateVelocity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "moveRelative", "method_5724", "updateVelocity", "m_19920_"), "(FLexc;)V");
    }

    static void updateVelocity(const jobject& obj, const jfloat& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_updateVelocity();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_movementInputToVelocity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "getInputVector", "method_18795", "movementInputToVelocity", "m_20015_"), "(Lexc;FF)Lexc;");
    }

    static jobject movementInputToVelocity(const jobject& arg0, const jfloat& arg1, const jfloat& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_movementInputToVelocity();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getBrightnessAtEyes() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bu", "getLightLevelDependentMagicValue", "method_5718", "getBrightnessAtEyes", "m_213856_"), "()F");
    }

    static jfloat getBrightnessAtEyes(const jobject& obj) {
                
       const auto methodID = methodID_getBrightnessAtEyes();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_updatePositionAndAngles() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "absMoveTo", "method_5641", "updatePositionAndAngles", "m_19890_"), "(DDDFF)V");
    }

    static void updatePositionAndAngles(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2, const jfloat& arg3, const jfloat& arg4) {
                
       const auto methodID = methodID_updatePositionAndAngles();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_setAngles() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "absRotateTo", "method_60608", "setAngles", "m_340484_"), "(FF)V");
    }

    static void setAngles(const jobject& obj, const jfloat& arg0, const jfloat& arg1) {
                
       const auto methodID = methodID_setAngles();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_updatePosition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "absMoveTo", "method_30634", "updatePosition", "m_20248_"), "(DDD)V");
    }

    static void updatePosition(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID_updatePosition();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_refreshPositionAfterTeleport() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "moveTo", "method_29495", "refreshPositionAfterTeleport", "m_20219_"), "(Lexc;)V");
    }

    static void refreshPositionAfterTeleport(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_refreshPositionAfterTeleport();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__refreshPositionAfterTeleport() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "moveTo", "method_24203", "refreshPositionAfterTeleport", "m_6027_"), "(DDD)V");
    }

    static void _refreshPositionAfterTeleport(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID__refreshPositionAfterTeleport();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_refreshPositionAndAngles() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "moveTo", "method_5725", "refreshPositionAndAngles", "m_20035_"), "(Ljd;FF)V");
    }

    static void refreshPositionAndAngles(const jobject& obj, const jobject& arg0, const jfloat& arg1, const jfloat& arg2) {
                
       const auto methodID = methodID_refreshPositionAndAngles();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__refreshPositionAndAngles() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "moveTo", "method_60949", "refreshPositionAndAngles", "m_339245_"), "(Lexc;FF)V");
    }

    static void _refreshPositionAndAngles(const jobject& obj, const jobject& arg0, const jfloat& arg1, const jfloat& arg2) {
                
       const auto methodID = methodID__refreshPositionAndAngles();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID___refreshPositionAndAngles() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "moveTo", "method_5808", "refreshPositionAndAngles", "m_7678_"), "(DDDFF)V");
    }

    static void __refreshPositionAndAngles(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2, const jfloat& arg3, const jfloat& arg4) {
                
       const auto methodID = methodID___refreshPositionAndAngles();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_resetPosition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bv", "setOldPosAndRot", "method_22862", "resetPosition", "m_146867_"), "()V");
    }

    static void resetPosition(const jobject& obj) {
                
       const auto methodID = methodID_resetPosition();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_distanceTo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "distanceTo", "method_5739", "distanceTo", "m_20270_"), "(Lbsr;)F");
    }

    static jfloat distanceTo(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_distanceTo();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_squaredDistanceTo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "distanceToSqr", "method_5649", "squaredDistanceTo", "m_20275_"), "(DDD)D");
    }

    static jdouble squaredDistanceTo(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID_squaredDistanceTo();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__squaredDistanceTo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "distanceToSqr", "method_5858", "squaredDistanceTo", "m_20280_"), "(Lbsr;)D");
    }

    static jdouble _squaredDistanceTo(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__squaredDistanceTo();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID___squaredDistanceTo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "distanceToSqr", "method_5707", "squaredDistanceTo", "m_20238_"), "(Lexc;)D");
    }

    static jdouble __squaredDistanceTo(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID___squaredDistanceTo();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onPlayerCollision() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b_", "playerTouch", "method_5694", "onPlayerCollision", "m_6123_"), "(Lcmx;)V");
    }

    static void onPlayerCollision(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onPlayerCollision();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_pushAwayFrom() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "push", "method_5697", "pushAwayFrom", "m_7334_"), "(Lbsr;)V");
    }

    static void pushAwayFrom(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_pushAwayFrom();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_addVelocity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "push", "method_60491", "addVelocity", "m_339673_"), "(Lexc;)V");
    }

    static void addVelocity(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addVelocity();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__addVelocity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "push", "method_5762", "addVelocity", "m_5997_"), "(DDD)V");
    }

    static void _addVelocity(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID__addVelocity();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_scheduleVelocityUpdate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bw", "markHurt", "method_5785", "scheduleVelocityUpdate", "m_5834_"), "()V");
    }

    static void scheduleVelocityUpdate(const jobject& obj) {
                
       const auto methodID = methodID_scheduleVelocityUpdate();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_damage() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "hurt", "method_5643", "damage", "m_6469_"), "(Lbrk;F)Z");
    }

    static jboolean damage(const jobject& obj, const jobject& arg0, const jfloat& arg1) {
                
       const auto methodID = methodID_damage();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getRotationVec() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "getViewVector", "method_5828", "getRotationVec", "m_20252_"), "(F)Lexc;");
    }

    static jobject getRotationVec(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_getRotationVec();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getFacing() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bx", "getNearestViewDirection", "method_58149", "getFacing", "m_324196_"), "()Lji;");
    }

    static jobject getFacing(const jobject& obj) {
                
       const auto methodID = methodID_getFacing();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getPitch() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "getViewXRot", "method_5695", "getPitch", "m_5686_"), "(F)F");
    }

    static jfloat getPitch(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_getPitch();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getYaw() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "getViewYRot", "method_5705", "getYaw", "m_5675_"), "(F)F");
    }

    static jfloat getYaw(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_getYaw();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getRotationVector() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "calculateViewVector", "method_5631", "getRotationVector", "m_20171_"), "(FF)Lexc;");
    }

    static jobject getRotationVector(const jobject& obj, const jfloat& arg0, const jfloat& arg1) {
                
       const auto methodID = methodID_getRotationVector();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getOppositeRotationVector() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "getUpVector", "method_18864", "getOppositeRotationVector", "m_20289_"), "(F)Lexc;");
    }

    static jobject getOppositeRotationVector(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_getOppositeRotationVector();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__getOppositeRotationVector() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "calculateUpVector", "method_18863", "getOppositeRotationVector", "m_20214_"), "(FF)Lexc;");
    }

    static jobject _getOppositeRotationVector(const jobject& obj, const jfloat& arg0, const jfloat& arg1) {
                
       const auto methodID = methodID__getOppositeRotationVector();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getEyePos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("by", "getEyePosition", "method_33571", "getEyePos", "m_146892_"), "()Lexc;");
    }

    static jobject getEyePos(const jobject& obj) {
                
       const auto methodID = methodID_getEyePos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getCameraPosVec() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "getEyePosition", "method_5836", "getCameraPosVec", "m_20299_"), "(F)Lexc;");
    }

    static jobject getCameraPosVec(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_getCameraPosVec();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getClientCameraPosVec() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "getLightProbePosition", "method_31166", "getClientCameraPosVec", "m_7371_"), "(F)Lexc;");
    }

    static jobject getClientCameraPosVec(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_getClientCameraPosVec();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getLerpedPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("m", "getPosition", "method_30950", "getLerpedPos", "m_20318_"), "(F)Lexc;");
    }

    static jobject getLerpedPos(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_getLerpedPos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_raycast() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "pick", "method_5745", "raycast", "m_19907_"), "(DFZ)Lexa;");
    }

    static jobject raycast(const jobject& obj, const jdouble& arg0, const jfloat& arg1, const jboolean& arg2) {
                
       const auto methodID = methodID_raycast();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_canBeHitByProjectile() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bz", "canBeHitByProjectile", "method_49108", "canBeHitByProjectile", "m_271807_"), "()Z");
    }

    static jboolean canBeHitByProjectile(const jobject& obj) {
                
       const auto methodID = methodID_canBeHitByProjectile();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_canHit() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bA", "isPickable", "method_5863", "canHit", "m_6087_"), "()Z");
    }

    static jboolean canHit(const jobject& obj) {
                
       const auto methodID = methodID_canHit();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isPushable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bB", "isPushable", "method_5810", "isPushable", "m_6094_"), "()Z");
    }

    static jboolean isPushable(const jobject& obj) {
                
       const auto methodID = methodID_isPushable();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_updateKilledAdvancementCriterion() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "awardKillScore", "method_5716", "updateKilledAdvancementCriterion", "m_5993_"), "(Lbsr;ILbrk;)V");
    }

    static void updateKilledAdvancementCriterion(const jobject& obj, const jobject& arg0, const jint& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_updateKilledAdvancementCriterion();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_shouldRender() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "shouldRender", "method_5727", "shouldRender", "m_6000_"), "(DDD)Z");
    }

    static jboolean shouldRender(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID_shouldRender();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__shouldRender() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "shouldRenderAtSqrDistance", "method_5640", "shouldRender", "m_6783_"), "(D)Z");
    }

    static jboolean _shouldRender(const jobject& obj, const jdouble& arg0) {
                
       const auto methodID = methodID__shouldRender();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_saveSelfNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "saveAsPassenger", "method_5786", "saveSelfNbt", "m_20086_"), "(Lub;)Z");
    }

    static jboolean saveSelfNbt(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_saveSelfNbt();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_saveNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "save", "method_5662", "saveNbt", "m_20223_"), "(Lub;)Z");
    }

    static jboolean saveNbt(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_saveNbt();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_writeNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "saveWithoutId", "method_5647", "writeNbt", "m_20240_"), "(Lub;)Lub;");
    }

    static jobject writeNbt(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_writeNbt();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_readNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "load", "method_5651", "readNbt", "m_20258_"), "(Lub;)V");
    }

    static void readNbt(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_readNbt();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_shouldSetPositionOnLoad() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bC", "repositionEntityAfterLoad", "method_5638", "shouldSetPositionOnLoad", "m_6093_"), "()Z");
    }

    static jboolean shouldSetPositionOnLoad(const jobject& obj) {
                
       const auto methodID = methodID_shouldSetPositionOnLoad();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getSavedEntityId() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bD", "getEncodeId", "method_5653", "getSavedEntityId", "m_20078_"), "()Ljava/lang/String;");
    }

    static jobject getSavedEntityId(const jobject& obj) {
                
       const auto methodID = methodID_getSavedEntityId();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_readCustomDataFromNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "readAdditionalSaveData", "method_5749", "readCustomDataFromNbt", "m_7378_"), "(Lub;)V");
    }

    static void readCustomDataFromNbt(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_readCustomDataFromNbt();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_writeCustomDataToNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "addAdditionalSaveData", "method_5652", "writeCustomDataToNbt", "m_7380_"), "(Lub;)V");
    }

    static void writeCustomDataToNbt(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_writeCustomDataToNbt();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_toNbtList() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "newDoubleList", "method_5846", "toNbtList", "m_20063_"), "([D)Luh;");
    }

    static jobject toNbtList(const jobject& obj, const jarray& arg0, const jdouble& arg1) {
                
       const auto methodID = methodID_toNbtList();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__toNbtList() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "newFloatList", "method_5726", "toNbtList", "m_20065_"), "([F)Luh;");
    }

    static jobject _toNbtList(const jobject& obj, const jarray& arg0, const jfloat& arg1) {
                
       const auto methodID = methodID__toNbtList();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_dropItem() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "spawnAtLocation", "method_5706", "dropItem", "m_19998_"), "(Ldcv;)Lcjh;");
    }

    static jobject dropItem(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_dropItem();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__dropItem() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "spawnAtLocation", "method_5870", "dropItem", "m_20000_"), "(Ldcv;I)Lcjh;");
    }

    static jobject _dropItem(const jobject& obj, const jobject& arg0, const jint& arg1) {
                
       const auto methodID = methodID__dropItem();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_dropStack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "spawnAtLocation", "method_5775", "dropStack", "m_19983_"), "(Lcuq;)Lcjh;");
    }

    static jobject dropStack(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_dropStack();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__dropStack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "spawnAtLocation", "method_5699", "dropStack", "m_5552_"), "(Lcuq;F)Lcjh;");
    }

    static jobject _dropStack(const jobject& obj, const jobject& arg0, const jfloat& arg1) {
                
       const auto methodID = methodID__dropStack();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isAlive() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bE", "isAlive", "method_5805", "isAlive", "m_6084_"), "()Z");
    }

    static jboolean isAlive(const jobject& obj) {
                
       const auto methodID = methodID_isAlive();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isInsideWall() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bF", "isInWall", "method_5757", "isInsideWall", "m_5830_"), "()Z");
    }

    static jboolean isInsideWall(const jobject& obj) {
                
       const auto methodID = methodID_isInsideWall();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_interact() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "interact", "method_5688", "interact", "m_6096_"), "(Lcmx;Lbqq;)Lbqr;");
    }

    static jobject interact(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_interact();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_collidesWith() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "canCollideWith", "method_30949", "collidesWith", "m_7337_"), "(Lbsr;)Z");
    }

    static jboolean collidesWith(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_collidesWith();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isCollidable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bG", "canBeCollidedWith", "method_30948", "isCollidable", "m_5829_"), "()Z");
    }

    static jboolean isCollidable(const jobject& obj) {
                
       const auto methodID = methodID_isCollidable();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_tickRiding() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("u", "rideTick", "method_5842", "tickRiding", "m_6083_"), "()V");
    }

    static void tickRiding(const jobject& obj) {
                
       const auto methodID = methodID_tickRiding();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_updatePassengerPosition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "positionRider", "method_24201", "updatePassengerPosition", "m_7332_"), "(Lbsr;)V");
    }

    static void updatePassengerPosition(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_updatePassengerPosition();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__updatePassengerPosition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "positionRider", "method_5865", "updatePassengerPosition", "m_19956_"), "(Lbsr;Lbsr$a;)V");
    }

    static void _updatePassengerPosition(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID__updatePassengerPosition();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_onPassengerLookAround() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "onPassengerTurned", "method_5644", "onPassengerLookAround", "m_7340_"), "(Lbsr;)V");
    }

    static void onPassengerLookAround(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onPassengerLookAround();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getVehicleAttachmentPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "getVehicleAttachmentPoint", "method_55668", "getVehicleAttachmentPos", "m_320507_"), "(Lbsr;)Lexc;");
    }

    static jobject getVehicleAttachmentPos(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getVehicleAttachmentPos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getPassengerRidingPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("m", "getPassengerRidingPosition", "method_52538", "getPassengerRidingPos", "m_292590_"), "(Lbsr;)Lexc;");
    }

    static jobject getPassengerRidingPos(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getPassengerRidingPos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getPassengerAttachmentPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getPassengerAttachmentPoint", "method_52533", "getPassengerAttachmentPos", "m_293035_"), "(Lbsr;Lbsu;F)Lexc;");
    }

    static jobject getPassengerAttachmentPos(const jobject& obj, const jobject& arg0, const jobject& arg1, const jfloat& arg2) {
                
       const auto methodID = methodID_getPassengerAttachmentPos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__getPassengerAttachmentPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getDefaultPassengerAttachmentPoint", "method_55665", "getPassengerAttachmentPos", "m_323171_"), "(Lbsr;Lbsr;Lbst;)Lexc;");
    }

    static jobject _getPassengerAttachmentPos(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID__getPassengerAttachmentPos();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_startRiding() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("n", "startRiding", "method_5804", "startRiding", "m_20329_"), "(Lbsr;)Z");
    }

    static jboolean startRiding(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_startRiding();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isLiving() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bH", "showVehicleHealth", "method_5709", "isLiving", "m_20152_"), "()Z");
    }

    static jboolean isLiving(const jobject& obj) {
                
       const auto methodID = methodID_isLiving();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID__startRiding() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "startRiding", "method_5873", "startRiding", "m_7998_"), "(Lbsr;Z)Z");
    }

    static jboolean _startRiding(const jobject& obj, const jobject& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID__startRiding();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_canStartRiding() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("o", "canRide", "method_5860", "canStartRiding", "m_7341_"), "(Lbsr;)Z");
    }

    static jboolean canStartRiding(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_canStartRiding();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_removeAllPassengers() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bI", "ejectPassengers", "method_5772", "removeAllPassengers", "m_20153_"), "()V");
    }

    static void removeAllPassengers(const jobject& obj) {
                
       const auto methodID = methodID_removeAllPassengers();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_dismountVehicle() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bJ", "removeVehicle", "method_29239", "dismountVehicle", "m_6038_"), "()V");
    }

    static void dismountVehicle(const jobject& obj) {
                
       const auto methodID = methodID_dismountVehicle();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_stopRiding() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("ad", "stopRiding", "method_5848", "stopRiding", "m_8127_"), "()V");
    }

    static void stopRiding(const jobject& obj) {
                
       const auto methodID = methodID_stopRiding();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_addPassenger() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("p", "addPassenger", "method_5627", "addPassenger", "m_20348_"), "(Lbsr;)V");
    }

    static void addPassenger(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addPassenger();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_removePassenger() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("q", "removePassenger", "method_5793", "removePassenger", "m_20351_"), "(Lbsr;)V");
    }

    static void removePassenger(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_removePassenger();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_canAddPassenger() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("r", "canAddPassenger", "method_5818", "canAddPassenger", "m_7310_"), "(Lbsr;)Z");
    }

    static jboolean canAddPassenger(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_canAddPassenger();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_couldAcceptPassenger() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bK", "couldAcceptPassenger", "method_48921", "couldAcceptPassenger", "m_269011_"), "()Z");
    }

    static jboolean couldAcceptPassenger(const jobject& obj) {
                
       const auto methodID = methodID_couldAcceptPassenger();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_updateTrackedPositionAndAngles() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "lerpTo", "method_5759", "updateTrackedPositionAndAngles", "m_6453_"), "(DDDFFI)V");
    }

    static void updateTrackedPositionAndAngles(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2, const jfloat& arg3, const jfloat& arg4, const jint& arg5) {
                
       const auto methodID = methodID_updateTrackedPositionAndAngles();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
    static jmethodID methodID_getLerpTargetX() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c_", "lerpTargetX", "method_53830", "getLerpTargetX", "m_293268_"), "()D");
    }

    static jdouble getLerpTargetX(const jobject& obj) {
                
       const auto methodID = methodID_getLerpTargetX();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_getLerpTargetY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d_", "lerpTargetY", "method_53827", "getLerpTargetY", "m_293950_"), "()D");
    }

    static jdouble getLerpTargetY(const jobject& obj) {
                
       const auto methodID = methodID_getLerpTargetY();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_getLerpTargetZ() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("P_", "lerpTargetZ", "method_53828", "getLerpTargetZ", "m_292720_"), "()D");
    }

    static jdouble getLerpTargetZ(const jobject& obj) {
                
       const auto methodID = methodID_getLerpTargetZ();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_getLerpTargetPitch() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("Q_", "lerpTargetXRot", "method_53829", "getLerpTargetPitch", "m_293123_"), "()F");
    }

    static jfloat getLerpTargetPitch(const jobject& obj) {
                
       const auto methodID = methodID_getLerpTargetPitch();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_getLerpTargetYaw() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e_", "lerpTargetYRot", "method_53831", "getLerpTargetYaw", "m_293582_"), "()F");
    }

    static jfloat getLerpTargetYaw(const jobject& obj) {
                
       const auto methodID = methodID_getLerpTargetYaw();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_updateTrackedHeadRotation() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "lerpHeadTo", "method_5683", "updateTrackedHeadRotation", "m_6541_"), "(FI)V");
    }

    static void updateTrackedHeadRotation(const jobject& obj, const jfloat& arg0, const jint& arg1) {
                
       const auto methodID = methodID_updateTrackedHeadRotation();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getTargetingMargin() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bL", "getPickRadius", "method_5871", "getTargetingMargin", "m_6143_"), "()F");
    }

    static jfloat getTargetingMargin(const jobject& obj) {
                
       const auto methodID = methodID_getTargetingMargin();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID__getRotationVector() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bM", "getLookAngle", "method_5720", "getRotationVector", "m_20154_"), "()Lexc;");
    }

    static jobject _getRotationVector(const jobject& obj) {
                
       const auto methodID = methodID__getRotationVector();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getHandPosOffset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getHandHoldingItemAngle", "method_40123", "getHandPosOffset", "m_204034_"), "(Lcul;)Lexc;");
    }

    static jobject getHandPosOffset(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getHandPosOffset();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getRotationClient() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bN", "getRotationVector", "method_5802", "getRotationClient", "m_20155_"), "()Lexb;");
    }

    static jobject getRotationClient(const jobject& obj) {
                
       const auto methodID = methodID_getRotationClient();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getRotationVecClient() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bO", "getForward", "method_5663", "getRotationVecClient", "m_20156_"), "()Lexc;");
    }

    static jobject getRotationVecClient(const jobject& obj) {
                
       const auto methodID = methodID_getRotationVecClient();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_tryUsePortal() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setAsInsidePortal", "method_60697", "tryUsePortal", "m_339563_"), "(Ldlr;Ljd;)V");
    }

    static void tryUsePortal(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_tryUsePortal();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_tickPortalTeleportation() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bP", "handlePortal", "method_60698", "tickPortalTeleportation", "m_338897_"), "()V");
    }

    static void tickPortalTeleportation(const jobject& obj) {
                
       const auto methodID = methodID_tickPortalTeleportation();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getDefaultPortalCooldown() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bQ", "getDimensionChangingDelay", "method_5806", "getDefaultPortalCooldown", "m_6045_"), "()I");
    }

    static jint getDefaultPortalCooldown(const jobject& obj) {
                
       const auto methodID = methodID_getDefaultPortalCooldown();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_setVelocityClient() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "lerpMotion", "method_5750", "setVelocityClient", "m_6001_"), "(DDD)V");
    }

    static void setVelocityClient(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID_setVelocityClient();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_onDamaged() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "handleDamageEvent", "method_48922", "onDamaged", "m_269138_"), "(Lbrk;)V");
    }

    static void onDamaged(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onDamaged();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_handleStatus() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "handleEntityEvent", "method_5711", "handleStatus", "m_7822_"), "(B)V");
    }

    static void handleStatus(const jobject& obj, const jbyte& arg0) {
                
       const auto methodID = methodID_handleStatus();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_animateDamage() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("n", "animateHurt", "method_5879", "animateDamage", "m_6053_"), "(F)V");
    }

    static void animateDamage(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_animateDamage();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isOnFire() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bR", "isOnFire", "method_5809", "isOnFire", "m_6060_"), "()Z");
    }

    static jboolean isOnFire(const jobject& obj) {
                
       const auto methodID = methodID_isOnFire();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasVehicle() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bS", "isPassenger", "method_5765", "hasVehicle", "m_20159_"), "()Z");
    }

    static jboolean hasVehicle(const jobject& obj) {
                
       const auto methodID = methodID_hasVehicle();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasPassengers() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bT", "isVehicle", "method_5782", "hasPassengers", "m_20160_"), "()Z");
    }

    static jboolean hasPassengers(const jobject& obj) {
                
       const auto methodID = methodID_hasPassengers();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_shouldDismountUnderwater() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bU", "dismountsUnderwater", "method_49693", "shouldDismountUnderwater", "m_275843_"), "()Z");
    }

    static jboolean shouldDismountUnderwater(const jobject& obj) {
                
       const auto methodID = methodID_shouldDismountUnderwater();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_shouldControlVehicles() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bV", "canControlVehicle", "method_52534", "shouldControlVehicles", "m_293117_"), "()Z");
    }

    static jboolean shouldControlVehicles(const jobject& obj) {
                
       const auto methodID = methodID_shouldControlVehicles();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setSneaking() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "setShiftKeyDown", "method_5660", "setSneaking", "m_20260_"), "(Z)V");
    }

    static void setSneaking(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setSneaking();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isSneaking() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bW", "isShiftKeyDown", "method_5715", "isSneaking", "m_6144_"), "()Z");
    }

    static jboolean isSneaking(const jobject& obj) {
                
       const auto methodID = methodID_isSneaking();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_bypassesSteppingEffects() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bX", "isSteppingCarefully", "method_21749", "bypassesSteppingEffects", "m_20161_"), "()Z");
    }

    static jboolean bypassesSteppingEffects(const jobject& obj) {
                
       const auto methodID = methodID_bypassesSteppingEffects();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_bypassesLandingEffects() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bY", "isSuppressingBounce", "method_21750", "bypassesLandingEffects", "m_20162_"), "()Z");
    }

    static jboolean bypassesLandingEffects(const jobject& obj) {
                
       const auto methodID = methodID_bypassesLandingEffects();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isSneaky() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bZ", "isDiscrete", "method_21751", "isSneaky", "m_20163_"), "()Z");
    }

    static jboolean isSneaky(const jobject& obj) {
                
       const auto methodID = methodID_isSneaky();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isDescending() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("ca", "isDescending", "method_21752", "isDescending", "m_20164_"), "()Z");
    }

    static jboolean isDescending(const jobject& obj) {
                
       const auto methodID = methodID_isDescending();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isInSneakingPose() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cb", "isCrouching", "method_18276", "isInSneakingPose", "m_6047_"), "()Z");
    }

    static jboolean isInSneakingPose(const jobject& obj) {
                
       const auto methodID = methodID_isInSneakingPose();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isSprinting() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cc", "isSprinting", "method_5624", "isSprinting", "m_20142_"), "()Z");
    }

    static jboolean isSprinting(const jobject& obj) {
                
       const auto methodID = methodID_isSprinting();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setSprinting() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "setSprinting", "method_5728", "setSprinting", "m_6858_"), "(Z)V");
    }

    static void setSprinting(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setSprinting();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isSwimming() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cd", "isSwimming", "method_5681", "isSwimming", "m_6069_"), "()Z");
    }

    static jboolean isSwimming(const jobject& obj) {
                
       const auto methodID = methodID_isSwimming();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isInSwimmingPose() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("ce", "isVisuallySwimming", "method_20232", "isInSwimmingPose", "m_6067_"), "()Z");
    }

    static jboolean isInSwimmingPose(const jobject& obj) {
                
       const auto methodID = methodID_isInSwimmingPose();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isCrawling() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cf", "isVisuallyCrawling", "method_20448", "isCrawling", "m_20143_"), "()Z");
    }

    static jboolean isCrawling(const jobject& obj) {
                
       const auto methodID = methodID_isCrawling();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setSwimming() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "setSwimming", "method_5796", "setSwimming", "m_20282_"), "(Z)V");
    }

    static void setSwimming(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setSwimming();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isGlowingLocal() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cg", "hasGlowingTag", "method_36361", "isGlowingLocal", "m_146886_"), "()Z");
    }

    static jboolean isGlowingLocal(const jobject& obj) {
                
       const auto methodID = methodID_isGlowingLocal();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setGlowing() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "setGlowingTag", "method_5834", "setGlowing", "m_146915_"), "(Z)V");
    }

    static void setGlowing(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setGlowing();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isGlowing() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("ch", "isCurrentlyGlowing", "method_5851", "isGlowing", "m_142038_"), "()Z");
    }

    static jboolean isGlowing(const jobject& obj) {
                
       const auto methodID = methodID_isGlowing();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isInvisible() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("ci", "isInvisible", "method_5767", "isInvisible", "m_20145_"), "()Z");
    }

    static jboolean isInvisible(const jobject& obj) {
                
       const auto methodID = methodID_isInvisible();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isInvisibleTo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "isInvisibleTo", "method_5756", "isInvisibleTo", "m_20177_"), "(Lcmx;)Z");
    }

    static jboolean isInvisibleTo(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isInvisibleTo();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isOnRail() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cj", "isOnRails", "method_52172", "isOnRail", "m_288188_"), "()Z");
    }

    static jboolean isOnRail(const jobject& obj) {
                
       const auto methodID = methodID_isOnRail();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_updateEventHandler() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateDynamicGameEventListener", "method_42147", "updateEventHandler", "m_213651_"), "(Ljava/util/function/BiConsumer;)V");
    }

    static void updateEventHandler(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_updateEventHandler();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getScoreboardTeam() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("ck", "getTeam", "method_5781", "getScoreboardTeam", "m_5647_"), "()Leyb;");
    }

    static jobject getScoreboardTeam(const jobject& obj) {
                
       const auto methodID = methodID_getScoreboardTeam();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_isTeammate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("s", "isAlliedTo", "method_5722", "isTeammate", "m_7307_"), "(Lbsr;)Z");
    }

    static jboolean isTeammate(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isTeammate();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isTeamPlayer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isAlliedTo", "method_5645", "isTeamPlayer", "m_20031_"), "(Leyi;)Z");
    }

    static jboolean isTeamPlayer(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isTeamPlayer();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setInvisible() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "setInvisible", "method_5648", "setInvisible", "m_6842_"), "(Z)V");
    }

    static void setInvisible(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setInvisible();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getFlag() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "getSharedFlag", "method_5795", "getFlag", "m_20291_"), "(I)Z");
    }

    static jboolean getFlag(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_getFlag();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setFlag() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setSharedFlag", "method_5729", "setFlag", "m_20115_"), "(IZ)V");
    }

    static void setFlag(const jobject& obj, const jint& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_setFlag();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getMaxAir() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cl", "getMaxAirSupply", "method_5748", "getMaxAir", "m_6062_"), "()I");
    }

    static jint getMaxAir(const jobject& obj) {
                
       const auto methodID = methodID_getMaxAir();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getAir() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cm", "getAirSupply", "method_5669", "getAir", "m_20146_"), "()I");
    }

    static jint getAir(const jobject& obj) {
                
       const auto methodID = methodID_getAir();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_setAir() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "setAirSupply", "method_5855", "setAir", "m_20301_"), "(I)V");
    }

    static void setAir(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_setAir();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getFrozenTicks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cn", "getTicksFrozen", "method_32312", "getFrozenTicks", "m_146888_"), "()I");
    }

    static jint getFrozenTicks(const jobject& obj) {
                
       const auto methodID = methodID_getFrozenTicks();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_setFrozenTicks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "setTicksFrozen", "method_32317", "setFrozenTicks", "m_146917_"), "(I)V");
    }

    static void setFrozenTicks(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_setFrozenTicks();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getFreezingScale() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("co", "getPercentFrozen", "method_32313", "getFreezingScale", "m_146889_"), "()F");
    }

    static jfloat getFreezingScale(const jobject& obj) {
                
       const auto methodID = methodID_getFreezingScale();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_isFrozen() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cp", "isFullyFrozen", "method_32314", "isFrozen", "m_146890_"), "()Z");
    }

    static jboolean isFrozen(const jobject& obj) {
                
       const auto methodID = methodID_isFrozen();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getMinFreezeDamageTicks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cq", "getTicksRequiredToFreeze", "method_32315", "getMinFreezeDamageTicks", "m_146891_"), "()I");
    }

    static jint getMinFreezeDamageTicks(const jobject& obj) {
                
       const auto methodID = methodID_getMinFreezeDamageTicks();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_onStruckByLightning() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "thunderHit", "method_5800", "onStruckByLightning", "m_8038_"), "(Laqu;Lbtm;)V");
    }

    static void onStruckByLightning(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_onStruckByLightning();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_onBubbleColumnSurfaceCollision() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "onAboveBubbleCol", "method_5700", "onBubbleColumnSurfaceCollision", "m_6845_"), "(Z)V");
    }

    static void onBubbleColumnSurfaceCollision(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_onBubbleColumnSurfaceCollision();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onBubbleColumnCollision() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("m", "onInsideBubbleColumn", "method_5764", "onBubbleColumnCollision", "m_20321_"), "(Z)V");
    }

    static void onBubbleColumnCollision(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_onBubbleColumnCollision();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onKilledOther() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "killedEntity", "method_5874", "onKilledOther", "m_214076_"), "(Laqu;Lbtn;)Z");
    }

    static jboolean onKilledOther(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_onKilledOther();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_limitFallDistance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cr", "checkSlowFallDistance", "method_45318", "limitFallDistance", "m_245125_"), "()V");
    }

    static void limitFallDistance(const jobject& obj) {
                
       const auto methodID = methodID_limitFallDistance();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_onLanding() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("n", "resetFallDistance", "method_38785", "onLanding", "m_183634_"), "()V");
    }

    static void onLanding(const jobject& obj) {
                
       const auto methodID = methodID_onLanding();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_pushOutOfBlocks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("m", "moveTowardsClosestSpace", "method_5632", "pushOutOfBlocks", "m_20314_"), "(DDD)V");
    }

    static void pushOutOfBlocks(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID_pushOutOfBlocks();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_slowMovement() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "makeStuckInBlock", "method_5844", "slowMovement", "m_7601_"), "(Ldtc;Lexc;)V");
    }

    static void slowMovement(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_slowMovement();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_removeClickEvents() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "removeAction", "method_5856", "removeClickEvents", "m_20140_"), "(Lwz;)Lwz;");
    }

    static jobject removeClickEvents(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_removeClickEvents();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getName() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("ah", "getName", "method_5477", "getName", "m_7755_"), "()Lwz;");
    }

    static jobject getName(const jobject& obj) {
                
       const auto methodID = methodID_getName();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getDefaultName() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cs", "getTypeName", "method_23315", "getDefaultName", "m_5677_"), "()Lwz;");
    }

    static jobject getDefaultName(const jobject& obj) {
                
       const auto methodID = methodID_getDefaultName();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_isPartOf() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("t", "is", "method_5779", "isPartOf", "m_7306_"), "(Lbsr;)Z");
    }

    static jboolean isPartOf(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isPartOf();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getHeadYaw() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("ct", "getYHeadRot", "method_5791", "getHeadYaw", "m_6080_"), "()F");
    }

    static jfloat getHeadYaw(const jobject& obj) {
                
       const auto methodID = methodID_getHeadYaw();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_setHeadYaw() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("o", "setYHeadRot", "method_5847", "setHeadYaw", "m_5616_"), "(F)V");
    }

    static void setHeadYaw(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_setHeadYaw();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setBodyYaw() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("p", "setYBodyRot", "method_5636", "setBodyYaw", "m_5618_"), "(F)V");
    }

    static void setBodyYaw(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_setBodyYaw();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isAttackable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cu", "isAttackable", "method_5732", "isAttackable", "m_6097_"), "()Z");
    }

    static jboolean isAttackable(const jobject& obj) {
                
       const auto methodID = methodID_isAttackable();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_handleAttack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("u", "skipAttackInteraction", "method_5698", "handleAttack", "m_7313_"), "(Lbsr;)Z");
    }

    static jboolean handleAttack(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_handleAttack();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isInvulnerableTo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "isInvulnerableTo", "method_5679", "isInvulnerableTo", "m_6673_"), "(Lbrk;)Z");
    }

    static jboolean isInvulnerableTo(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isInvulnerableTo();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isInvulnerable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cv", "isInvulnerable", "method_5655", "isInvulnerable", "m_20147_"), "()Z");
    }

    static jboolean isInvulnerable(const jobject& obj) {
                
       const auto methodID = methodID_isInvulnerable();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setInvulnerable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("n", "setInvulnerable", "method_5684", "setInvulnerable", "m_20331_"), "(Z)V");
    }

    static void setInvulnerable(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setInvulnerable();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_copyPositionAndRotation() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("v", "copyPosition", "method_5719", "copyPositionAndRotation", "m_20359_"), "(Lbsr;)V");
    }

    static void copyPositionAndRotation(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_copyPositionAndRotation();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_copyFrom() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("w", "restoreFrom", "method_5878", "copyFrom", "m_20361_"), "(Lbsr;)V");
    }

    static void copyFrom(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_copyFrom();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_teleportTo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "changeDimension", "method_5731", "teleportTo", "m_5489_"), "(Leqc;)Lbsr;");
    }

    static jobject teleportTo(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_teleportTo();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_addPortalChunkTicketAt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "placePortalTicket", "method_60950", "addPortalChunkTicketAt", "m_340627_"), "(Ljd;)V");
    }

    static void addPortalChunkTicketAt(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addPortalChunkTicketAt();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_removeFromDimension() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cw", "removeAfterChangingDimensions", "method_30076", "removeFromDimension", "m_6089_"), "()V");
    }

    static void removeFromDimension(const jobject& obj) {
                
       const auto methodID = methodID_removeFromDimension();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_positionInPortal() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getRelativePortalPosition", "method_30633", "positionInPortal", "m_7643_"), "(Lji$a;Ll$a;)Lexc;");
    }

    static jobject positionInPortal(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_positionInPortal();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_canUsePortals() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("o", "canUsePortal", "method_5822", "canUsePortals", "m_31145_"), "(Z)Z");
    }

    static jboolean canUsePortals(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_canUsePortals();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_canTeleportBetween() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "canChangeDimensions", "method_61113", "canTeleportBetween", "m_6072_"), "(Ldcw;Ldcw;)Z");
    }

    static jboolean canTeleportBetween(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_canTeleportBetween();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getEffectiveExplosionResistance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getBlockExplosionResistance", "method_5774", "getEffectiveExplosionResistance", "m_7077_"), "(Ldco;Ldcc;Ljd;Ldtc;Lepe;F)F");
    }

    static jfloat getEffectiveExplosionResistance(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4, const jfloat& arg5) {
                
       const auto methodID = methodID_getEffectiveExplosionResistance();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
    static jmethodID methodID_canExplosionDestroyBlock() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "shouldBlockExplode", "method_5853", "canExplosionDestroyBlock", "m_7349_"), "(Ldco;Ldcc;Ljd;Ldtc;F)Z");
    }

    static jboolean canExplosionDestroyBlock(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jfloat& arg4) {
                
       const auto methodID = methodID_canExplosionDestroyBlock();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_getSafeFallDistance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cx", "getMaxFallDistance", "method_5850", "getSafeFallDistance", "m_6056_"), "()I");
    }

    static jint getSafeFallDistance(const jobject& obj) {
                
       const auto methodID = methodID_getSafeFallDistance();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_canAvoidTraps() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("r_", "isIgnoringBlockTriggers", "method_5696", "canAvoidTraps", "m_6090_"), "()Z");
    }

    static jboolean canAvoidTraps(const jobject& obj) {
                
       const auto methodID = methodID_canAvoidTraps();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_populateCrashReport() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "fillCrashReportCategory", "method_5819", "populateCrashReport", "m_7976_"), "(Lp;)V");
    }

    static void populateCrashReport(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_populateCrashReport();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_doesRenderOnFire() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cy", "displayFireAnimation", "method_5862", "doesRenderOnFire", "m_6051_"), "()Z");
    }

    static jboolean doesRenderOnFire(const jobject& obj) {
                
       const auto methodID = methodID_doesRenderOnFire();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setUuid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a_", "setUUID", "method_5826", "setUuid", "m_20084_"), "(Ljava/util/UUID;)V");
    }

    static void setUuid(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setUuid();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getUuid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cz", "getUUID", "method_5667", "getUuid", "m_20148_"), "()Ljava/util/UUID;");
    }

    static jobject getUuid(const jobject& obj) {
                
       const auto methodID = methodID_getUuid();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getUuidAsString() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cA", "getStringUUID", "method_5845", "getUuidAsString", "m_20149_"), "()Ljava/lang/String;");
    }

    static jobject getUuidAsString(const jobject& obj) {
                
       const auto methodID = methodID_getUuidAsString();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getNameForScoreboard() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cB", "getScoreboardName", "method_5820", "getNameForScoreboard", "m_6302_"), "()Ljava/lang/String;");
    }

    static jobject getNameForScoreboard(const jobject& obj) {
                
       const auto methodID = methodID_getNameForScoreboard();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_isPushedByFluids() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cC", "isPushedByFluid", "method_5675", "isPushedByFluids", "m_6063_"), "()Z");
    }

    static jboolean isPushedByFluids(const jobject& obj) {
                
       const auto methodID = methodID_isPushedByFluids();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getRenderDistanceMultiplier() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("cD", "getViewScale", "method_5824", "getRenderDistanceMultiplier", "m_20150_"), "()D");
    }

    static jdouble getRenderDistanceMultiplier() {
       const auto clazz = self();
       const auto methodID = methodID_getRenderDistanceMultiplier();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID);
    };
    
    static jmethodID methodID_setRenderDistanceMultiplier() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "setViewScale", "method_5840", "setRenderDistanceMultiplier", "m_20103_"), "(D)V");
    }

    static void setRenderDistanceMultiplier(const jdouble& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_setRenderDistanceMultiplier();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getDisplayName() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("S_", "getDisplayName", "method_5476", "getDisplayName", "m_5446_"), "()Lwz;");
    }

    static jobject getDisplayName(const jobject& obj) {
                
       const auto methodID = methodID_getDisplayName();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_setCustomName() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setCustomName", "method_5665", "setCustomName", "m_6593_"), "(Lwz;)V");
    }

    static void setCustomName(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setCustomName();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getCustomName() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aj", "getCustomName", "method_5797", "getCustomName", "m_7770_"), "()Lwz;");
    }

    static jobject getCustomName(const jobject& obj) {
                
       const auto methodID = methodID_getCustomName();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasCustomName() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("ai", "hasCustomName", "method_16914", "hasCustomName", "m_8077_"), "()Z");
    }

    static jboolean hasCustomName(const jobject& obj) {
                
       const auto methodID = methodID_hasCustomName();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setCustomNameVisible() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("p", "setCustomNameVisible", "method_5880", "setCustomNameVisible", "m_20340_"), "(Z)V");
    }

    static void setCustomNameVisible(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setCustomNameVisible();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isCustomNameVisible() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cE", "isCustomNameVisible", "method_5807", "isCustomNameVisible", "m_20151_"), "()Z");
    }

    static jboolean isCustomNameVisible(const jobject& obj) {
                
       const auto methodID = methodID_isCustomNameVisible();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_teleport() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "teleportTo", "method_48105", "teleport", "m_264318_"), "(Laqu;DDDLjava/util/Set;FF)Z");
    }

    static jboolean teleport(const jobject& obj, const jobject& arg0, const jdouble& arg1, const jdouble& arg2, const jdouble& arg3, const jobject& arg4, const jfloat& arg5, const jfloat& arg6) {
                
       const auto methodID = methodID_teleport();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    };
    
    static jmethodID methodID_requestTeleportAndDismount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "dismountTo", "method_33567", "requestTeleportAndDismount", "m_142098_"), "(DDD)V");
    }

    static void requestTeleportAndDismount(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID_requestTeleportAndDismount();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_requestTeleport() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "teleportTo", "method_5859", "requestTeleport", "m_6021_"), "(DDD)V");
    }

    static void requestTeleport(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID_requestTeleport();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_teleportPassengers() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("I", "teleportPassengers", "method_49792", "teleportPassengers", "m_276804_"), "()V");
    }

    static void teleportPassengers(const jobject& obj) {
                
       const auto methodID = methodID_teleportPassengers();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_requestTeleportOffset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "teleportRelative", "method_45166", "requestTeleportOffset", "m_246847_"), "(DDD)V");
    }

    static void requestTeleportOffset(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID_requestTeleportOffset();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_shouldRenderName() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cF", "shouldShowName", "method_5733", "shouldRenderName", "m_6052_"), "()Z");
    }

    static jboolean shouldRenderName(const jobject& obj) {
                
       const auto methodID = methodID_shouldRenderName();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_onDataTrackerUpdate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onSyncedDataUpdated", "method_48850", "onDataTrackerUpdate", "m_269505_"), "(Ljava/util/List;)V");
    }

    static void onDataTrackerUpdate(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onDataTrackerUpdate();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onTrackedDataSet() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onSyncedDataUpdated", "method_5674", "onTrackedDataSet", "m_7350_"), "(Lajw;)V");
    }

    static void onTrackedDataSet(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onTrackedDataSet();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_reinitDimensions() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cG", "fixupDimensions", "method_46396", "reinitDimensions", "m_252801_"), "()V");
    }

    static void reinitDimensions(const jobject& obj) {
                
       const auto methodID = methodID_reinitDimensions();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_calculateDimensions() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i_", "refreshDimensions", "method_18382", "calculateDimensions", "m_6210_"), "()V");
    }

    static void calculateDimensions(const jobject& obj) {
                
       const auto methodID = methodID_calculateDimensions();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_recalculateDimensions() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "fudgePositionAfterSizeChange", "method_60490", "recalculateDimensions", "m_340111_"), "(Lbsu;)Z");
    }

    static jboolean recalculateDimensions(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_recalculateDimensions();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getHorizontalFacing() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cH", "getDirection", "method_5735", "getHorizontalFacing", "m_6350_"), "()Lji;");
    }

    static jobject getHorizontalFacing(const jobject& obj) {
                
       const auto methodID = methodID_getHorizontalFacing();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getMovementDirection() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cI", "getMotionDirection", "method_5755", "getMovementDirection", "m_6374_"), "()Lji;");
    }

    static jobject getMovementDirection(const jobject& obj) {
                
       const auto methodID = methodID_getMovementDirection();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getHoverEvent() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cJ", "createHoverEvent", "method_5769", "getHoverEvent", "m_20190_"), "()Lxf;");
    }

    static jobject getHoverEvent(const jobject& obj) {
                
       const auto methodID = methodID_getHoverEvent();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_canBeSpectated() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "broadcastToPlayer", "method_5680", "canBeSpectated", "m_6459_"), "(Laqv;)Z");
    }

    static jboolean canBeSpectated(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_canBeSpectated();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getBoundingBox() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cK", "getBoundingBox", "method_5829", "getBoundingBox", "m_20191_"), "()Lewx;");
    }

    static jobject getBoundingBox(const jobject& obj) {
                
       const auto methodID = methodID_getBoundingBox();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getVisibilityBoundingBox() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h_", "getBoundingBoxForCulling", "method_5830", "getVisibilityBoundingBox", "m_6921_"), "()Lewx;");
    }

    static jobject getVisibilityBoundingBox(const jobject& obj) {
                
       const auto methodID = methodID_getVisibilityBoundingBox();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_setBoundingBox() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setBoundingBox", "method_5857", "setBoundingBox", "m_20011_"), "(Lewx;)V");
    }

    static void setBoundingBox(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setBoundingBox();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getEyeHeight() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getEyeHeight", "method_18381", "getEyeHeight", "m_20236_"), "(Lbua;)F");
    }

    static jfloat getEyeHeight(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getEyeHeight();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getStandingEyeHeight() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cL", "getEyeHeight", "method_5751", "getStandingEyeHeight", "m_20192_"), "()F");
    }

    static jfloat getStandingEyeHeight(const jobject& obj) {
                
       const auto methodID = methodID_getStandingEyeHeight();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_getLeashOffset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("q", "getLeashOffset", "method_45321", "getLeashOffset", "m_245894_"), "(F)Lexc;");
    }

    static jobject getLeashOffset(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_getLeashOffset();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__getLeashOffset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cM", "getLeashOffset", "method_29919", "getLeashOffset", "m_7939_"), "()Lexc;");
    }

    static jobject _getLeashOffset(const jobject& obj) {
                
       const auto methodID = methodID__getLeashOffset();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getStackReference() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a_", "getSlot", "method_32318", "getStackReference", "m_141942_"), "(I)Lbug;");
    }

    static jobject getStackReference(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_getStackReference();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_sendMessage() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "sendSystemMessage", "method_43496", "sendMessage", "m_213846_"), "(Lwz;)V");
    }

    static void sendMessage(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_sendMessage();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getEntityWorld() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cN", "getCommandSenderWorld", "method_5770", "getEntityWorld", "m_20193_"), "()Ldcw;");
    }

    static jobject getEntityWorld(const jobject& obj) {
                
       const auto methodID = methodID_getEntityWorld();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getServer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cO", "getServer", "method_5682", "getServer", "m_20194_"), "()Lnet/minecraft/server/MinecraftServer;");
    }

    static jobject getServer(const jobject& obj) {
                
       const auto methodID = methodID_getServer();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_interactAt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "interactAt", "method_5664", "interactAt", "m_7111_"), "(Lcmx;Lexc;Lbqq;)Lbqr;");
    }

    static jobject interactAt(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_interactAt();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_isImmuneToExplosion() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "ignoreExplosion", "method_5659", "isImmuneToExplosion", "m_6128_"), "(Ldco;)Z");
    }

    static jboolean isImmuneToExplosion(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isImmuneToExplosion();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onStartedTrackingBy() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "startSeenByPlayer", "method_5837", "onStartedTrackingBy", "m_6457_"), "(Laqv;)V");
    }

    static void onStartedTrackingBy(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onStartedTrackingBy();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onStoppedTrackingBy() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "stopSeenByPlayer", "method_5742", "onStoppedTrackingBy", "m_6452_"), "(Laqv;)V");
    }

    static void onStoppedTrackingBy(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onStoppedTrackingBy();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_applyRotation() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "rotate", "method_5832", "applyRotation", "m_7890_"), "(Ldmm;)F");
    }

    static jfloat applyRotation(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_applyRotation();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_applyMirror() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "mirror", "method_5763", "applyMirror", "m_6961_"), "(Ldkv;)F");
    }

    static jfloat applyMirror(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_applyMirror();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_entityDataRequiresOperator() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cP", "onlyOpCanSetNbt", "method_5833", "entityDataRequiresOperator", "m_6127_"), "()Z");
    }

    static jboolean entityDataRequiresOperator(const jobject& obj) {
                
       const auto methodID = methodID_entityDataRequiresOperator();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getProjectileDeflection() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "deflection", "method_56071", "getProjectileDeflection", "m_321219_"), "(Lcnp;)Lcnq;");
    }

    static jobject getProjectileDeflection(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getProjectileDeflection();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getControllingPassenger() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cQ", "getControllingPassenger", "method_5642", "getControllingPassenger", "m_6688_"), "()Lbtn;");
    }

    static jobject getControllingPassenger(const jobject& obj) {
                
       const auto methodID = methodID_getControllingPassenger();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasControllingPassenger() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cR", "hasControllingPassenger", "method_42148", "hasControllingPassenger", "m_217005_"), "()Z");
    }

    static jboolean hasControllingPassenger(const jobject& obj) {
                
       const auto methodID = methodID_hasControllingPassenger();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getPassengerList() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cS", "getPassengers", "method_5685", "getPassengerList", "m_20197_"), "()Ljava/util/List;");
    }

    static jobject getPassengerList(const jobject& obj) {
                
       const auto methodID = methodID_getPassengerList();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getFirstPassenger() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cT", "getFirstPassenger", "method_31483", "getFirstPassenger", "m_146895_"), "()Lbsr;");
    }

    static jobject getFirstPassenger(const jobject& obj) {
                
       const auto methodID = methodID_getFirstPassenger();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasPassenger() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("x", "hasPassenger", "method_5626", "hasPassenger", "m_20363_"), "(Lbsr;)Z");
    }

    static jboolean hasPassenger(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_hasPassenger();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__hasPassenger() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "hasPassenger", "method_5703", "hasPassenger", "m_146862_"), "(Ljava/util/function/Predicate;)Z");
    }

    static jboolean _hasPassenger(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__hasPassenger();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_streamIntoPassengers() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("J", "getIndirectPassengersStream", "method_31484", "streamIntoPassengers", "m_146920_"), "()Ljava/util/stream/Stream;");
    }

    static jobject streamIntoPassengers(const jobject& obj) {
                
       const auto methodID = methodID_streamIntoPassengers();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_streamSelfAndPassengers() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cU", "getSelfAndPassengers", "method_24204", "streamSelfAndPassengers", "m_20199_"), "()Ljava/util/stream/Stream;");
    }

    static jobject streamSelfAndPassengers(const jobject& obj) {
                
       const auto methodID = methodID_streamSelfAndPassengers();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_streamPassengersAndSelf() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cV", "getPassengersAndSelf", "method_31748", "streamPassengersAndSelf", "m_142429_"), "()Ljava/util/stream/Stream;");
    }

    static jobject streamPassengersAndSelf(const jobject& obj) {
                
       const auto methodID = methodID_streamPassengersAndSelf();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getPassengersDeep() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cW", "getIndirectPassengers", "method_5736", "getPassengersDeep", "m_146897_"), "()Ljava/lang/Iterable;");
    }

    static jobject getPassengersDeep(const jobject& obj) {
                
       const auto methodID = methodID_getPassengersDeep();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getPlayerPassengers() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cX", "countPlayerPassengers", "method_54757", "getPlayerPassengers", "m_305867_"), "()I");
    }

    static jint getPlayerPassengers(const jobject& obj) {
                
       const auto methodID = methodID_getPlayerPassengers();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasPlayerRider() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cY", "hasExactlyOnePlayerPassenger", "method_5817", "hasPlayerRider", "m_146898_"), "()Z");
    }

    static jboolean hasPlayerRider(const jobject& obj) {
                
       const auto methodID = methodID_hasPlayerRider();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getRootVehicle() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cZ", "getRootVehicle", "method_5668", "getRootVehicle", "m_20201_"), "()Lbsr;");
    }

    static jobject getRootVehicle(const jobject& obj) {
                
       const auto methodID = methodID_getRootVehicle();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_isConnectedThroughVehicle() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("y", "isPassengerOfSameVehicle", "method_5794", "isConnectedThroughVehicle", "m_20365_"), "(Lbsr;)Z");
    }

    static jboolean isConnectedThroughVehicle(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isConnectedThroughVehicle();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_hasPassengerDeep() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("z", "hasIndirectPassenger", "method_5821", "hasPassengerDeep", "m_20367_"), "(Lbsr;)Z");
    }

    static jboolean hasPassengerDeep(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_hasPassengerDeep();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isLogicalSideForUpdatingMovement() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("da", "isControlledByLocalInstance", "method_5787", "isLogicalSideForUpdatingMovement", "m_6109_"), "()Z");
    }

    static jboolean isLogicalSideForUpdatingMovement(const jobject& obj) {
                
       const auto methodID = methodID_isLogicalSideForUpdatingMovement();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_canMoveVoluntarily() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("db", "isEffectiveAi", "method_6034", "canMoveVoluntarily", "m_21515_"), "()Z");
    }

    static jboolean canMoveVoluntarily(const jobject& obj) {
                
       const auto methodID = methodID_canMoveVoluntarily();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getPassengerDismountOffset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getCollisionHorizontalEscapeVector", "method_24826", "getPassengerDismountOffset", "m_19903_"), "(DDF)Lexc;");
    }

    static jobject getPassengerDismountOffset(const jdouble& arg0, const jdouble& arg1, const jfloat& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_getPassengerDismountOffset();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_updatePassengerForDismount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getDismountLocationForPassenger", "method_24829", "updatePassengerForDismount", "m_7688_"), "(Lbtn;)Lexc;");
    }

    static jobject updatePassengerForDismount(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_updatePassengerForDismount();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getVehicle() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dc", "getVehicle", "method_5854", "getVehicle", "m_20202_"), "()Lbsr;");
    }

    static jobject getVehicle(const jobject& obj) {
                
       const auto methodID = methodID_getVehicle();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getControllingVehicle() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dd", "getControlledVehicle", "method_49694", "getControllingVehicle", "m_275832_"), "()Lbsr;");
    }

    static jobject getControllingVehicle(const jobject& obj) {
                
       const auto methodID = methodID_getControllingVehicle();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getPistonBehavior() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j_", "getPistonPushReaction", "method_5657", "getPistonBehavior", "m_7752_"), "()Lepj;");
    }

    static jobject getPistonBehavior(const jobject& obj) {
                
       const auto methodID = methodID_getPistonBehavior();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getSoundCategory() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("de", "getSoundSource", "method_5634", "getSoundCategory", "m_5720_"), "()Lavq;");
    }

    static jobject getSoundCategory(const jobject& obj) {
                
       const auto methodID = methodID_getSoundCategory();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getBurningDuration() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("df", "getFireImmuneTicks", "method_5676", "getBurningDuration", "m_6101_"), "()I");
    }

    static jint getBurningDuration(const jobject& obj) {
                
       const auto methodID = methodID_getBurningDuration();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getCommandSource() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dg", "createCommandSourceStack", "method_5671", "getCommandSource", "m_20203_"), "()Let;");
    }

    static jobject getCommandSource(const jobject& obj) {
                
       const auto methodID = methodID_getCommandSource();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getPermissionLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("G", "getPermissionLevel", "method_5691", "getPermissionLevel", "m_8088_"), "()I");
    }

    static jint getPermissionLevel(const jobject& obj) {
                
       const auto methodID = methodID_getPermissionLevel();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasPermissionLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "hasPermissions", "method_5687", "hasPermissionLevel", "m_20310_"), "(I)Z");
    }

    static jboolean hasPermissionLevel(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_hasPermissionLevel();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_shouldReceiveFeedback() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k_", "acceptsSuccess", "method_9200", "shouldReceiveFeedback", "m_6999_"), "()Z");
    }

    static jboolean shouldReceiveFeedback(const jobject& obj) {
                
       const auto methodID = methodID_shouldReceiveFeedback();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_shouldTrackOutput() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("w_", "acceptsFailure", "method_9202", "shouldTrackOutput", "m_7028_"), "()Z");
    }

    static jboolean shouldTrackOutput(const jobject& obj) {
                
       const auto methodID = methodID_shouldTrackOutput();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_shouldBroadcastConsoleToOps() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("M_", "shouldInformAdmins", "method_9201", "shouldBroadcastConsoleToOps", "m_6102_"), "()Z");
    }

    static jboolean shouldBroadcastConsoleToOps(const jobject& obj) {
                
       const auto methodID = methodID_shouldBroadcastConsoleToOps();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_lookAt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "lookAt", "method_5702", "lookAt", "m_7618_"), "(Lff$a;Lexc;)V");
    }

    static void lookAt(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_lookAt();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_lerpYaw() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("r", "getPreciseBodyRotation", "method_60951", "lerpYaw", "m_339180_"), "(F)F");
    }

    static jfloat lerpYaw(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_lerpYaw();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_updateMovementInFluid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateFluidHeightAndDoFluidPushing", "method_5692", "updateMovementInFluid", "m_204031_"), "(Lawu;D)Z");
    }

    static jboolean updateMovementInFluid(const jobject& obj, const jobject& arg0, const jdouble& arg1) {
                
       const auto methodID = methodID_updateMovementInFluid();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isRegionUnloaded() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dh", "touchingUnloadedChunk", "method_33724", "isRegionUnloaded", "m_146899_"), "()Z");
    }

    static jboolean isRegionUnloaded(const jobject& obj) {
                
       const auto methodID = methodID_isRegionUnloaded();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getFluidHeight() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getFluidHeight", "method_5861", "getFluidHeight", "m_204036_"), "(Lawu;)D");
    }

    static jdouble getFluidHeight(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getFluidHeight();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getSwimHeight() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("di", "getFluidJumpThreshold", "method_29241", "getSwimHeight", "m_20204_"), "()D");
    }

    static jdouble getSwimHeight(const jobject& obj) {
                
       const auto methodID = methodID_getSwimHeight();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_getWidth() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dj", "getBbWidth", "method_17681", "getWidth", "m_20205_"), "()F");
    }

    static jfloat getWidth(const jobject& obj) {
                
       const auto methodID = methodID_getWidth();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_getHeight() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dk", "getBbHeight", "method_17682", "getHeight", "m_20206_"), "()F");
    }

    static jfloat getHeight(const jobject& obj) {
                
       const auto methodID = methodID_getHeight();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_createSpawnPacket() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getAddEntityPacket", "method_18002", "createSpawnPacket", "m_5654_"), "(Laqt;)Lzg;");
    }

    static jobject createSpawnPacket(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_createSpawnPacket();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getDimensions() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getDimensions", "method_18377", "getDimensions", "m_6972_"), "(Lbua;)Lbsu;");
    }

    static jobject getDimensions(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getDimensions();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getAttachments() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dl", "getAttachments", "method_56072", "getAttachments", "m_319864_"), "()Lbst;");
    }

    static jobject getAttachments(const jobject& obj) {
                
       const auto methodID = methodID_getAttachments();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dm", "position", "method_19538", "getPos", "m_20182_"), "()Lexc;");
    }

    static jobject getPos(const jobject& obj) {
                
       const auto methodID = methodID_getPos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getSyncedPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dn", "trackingPosition", "method_43390", "getSyncedPos", "m_213870_"), "()Lexc;");
    }

    static jobject getSyncedPos(const jobject& obj) {
                
       const auto methodID = methodID_getSyncedPos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getBlockPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("do", "blockPosition", "method_24515", "getBlockPos", "m_20183_"), "()Ljd;");
    }

    static jobject getBlockPos(const jobject& obj) {
                
       const auto methodID = methodID_getBlockPos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getBlockStateAtPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dp", "getInBlockState", "method_55667", "getBlockStateAtPos", "m_321101_"), "()Ldtc;");
    }

    static jobject getBlockStateAtPos(const jobject& obj) {
                
       const auto methodID = methodID_getBlockStateAtPos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getChunkPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dq", "chunkPosition", "method_31476", "getChunkPos", "m_146902_"), "()Ldcd;");
    }

    static jobject getChunkPos(const jobject& obj) {
                
       const auto methodID = methodID_getChunkPos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getVelocity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dr", "getDeltaMovement", "method_18798", "getVelocity", "m_20184_"), "()Lexc;");
    }

    static jobject getVelocity(const jobject& obj) {
                
       const auto methodID = methodID_getVelocity();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_setVelocity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "setDeltaMovement", "method_18799", "setVelocity", "m_20256_"), "(Lexc;)V");
    }

    static void setVelocity(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setVelocity();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_addVelocityInternal() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "addDeltaMovement", "method_45319", "addVelocityInternal", "m_246865_"), "(Lexc;)V");
    }

    static void addVelocityInternal(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addVelocityInternal();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__setVelocity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("n", "setDeltaMovement", "method_18800", "setVelocity", "m_20334_"), "(DDD)V");
    }

    static void _setVelocity(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID__setVelocity();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getBlockX() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("ds", "getBlockX", "method_31477", "getBlockX", "m_146903_"), "()I");
    }

    static jint getBlockX(const jobject& obj) {
                
       const auto methodID = methodID_getBlockX();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getX() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dt", "getX", "method_23317", "getX", "m_20185_"), "()D");
    }

    static jdouble getX(const jobject& obj) {
                
       const auto methodID = methodID_getX();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_offsetX() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getX", "method_23316", "offsetX", "m_20165_"), "(D)D");
    }

    static jdouble offsetX(const jobject& obj, const jdouble& arg0) {
                
       const auto methodID = methodID_offsetX();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getParticleX() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getRandomX", "method_23322", "getParticleX", "m_20208_"), "(D)D");
    }

    static jdouble getParticleX(const jobject& obj, const jdouble& arg0) {
                
       const auto methodID = methodID_getParticleX();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getBlockY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("du", "getBlockY", "method_31478", "getBlockY", "m_146904_"), "()I");
    }

    static jint getBlockY(const jobject& obj) {
                
       const auto methodID = methodID_getBlockY();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dv", "getY", "method_23318", "getY", "m_20186_"), "()D");
    }

    static jdouble getY(const jobject& obj) {
                
       const auto methodID = methodID_getY();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_getBodyY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "getY", "method_23323", "getBodyY", "m_20227_"), "(D)D");
    }

    static jdouble getBodyY(const jobject& obj, const jdouble& arg0) {
                
       const auto methodID = methodID_getBodyY();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getRandomBodyY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dw", "getRandomY", "method_23319", "getRandomBodyY", "m_20187_"), "()D");
    }

    static jdouble getRandomBodyY(const jobject& obj) {
                
       const auto methodID = methodID_getRandomBodyY();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_getEyeY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dx", "getEyeY", "method_23320", "getEyeY", "m_20188_"), "()D");
    }

    static jdouble getEyeY(const jobject& obj) {
                
       const auto methodID = methodID_getEyeY();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_getBlockZ() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dy", "getBlockZ", "method_31479", "getBlockZ", "m_146907_"), "()I");
    }

    static jint getBlockZ(const jobject& obj) {
                
       const auto methodID = methodID_getBlockZ();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getZ() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dz", "getZ", "method_23321", "getZ", "m_20189_"), "()D");
    }

    static jdouble getZ(const jobject& obj) {
                
       const auto methodID = methodID_getZ();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_offsetZ() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "getZ", "method_23324", "offsetZ", "m_20246_"), "(D)D");
    }

    static jdouble offsetZ(const jobject& obj, const jdouble& arg0) {
                
       const auto methodID = methodID_offsetZ();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getParticleZ() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "getRandomZ", "method_23325", "getParticleZ", "m_20262_"), "(D)D");
    }

    static jdouble getParticleZ(const jobject& obj, const jdouble& arg0) {
                
       const auto methodID = methodID_getParticleZ();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("o", "setPosRaw", "method_23327", "setPos", "m_20343_"), "(DDD)V");
    }

    static void setPos(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID_setPos();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_checkDespawn() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dA", "checkDespawn", "method_5982", "checkDespawn", "m_6043_"), "()V");
    }

    static void checkDespawn(const jobject& obj) {
                
       const auto methodID = methodID_checkDespawn();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getLeashPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("s", "getRopeHoldPosition", "method_30951", "getLeashPos", "m_7398_"), "(F)Lexc;");
    }

    static jobject getLeashPos(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_getLeashPos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onSpawnPacket() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "recreateFromPacket", "method_31471", "onSpawnPacket", "m_141965_"), "(Labv;)V");
    }

    static void onSpawnPacket(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onSpawnPacket();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getPickBlockStack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dB", "getPickResult", "method_31480", "getPickBlockStack", "m_142340_"), "()Lcuq;");
    }

    static jobject getPickBlockStack(const jobject& obj) {
                
       const auto methodID = methodID_getPickBlockStack();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_setInPowderSnow() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("q", "setIsInPowderSnow", "method_32319", "setInPowderSnow", "m_146924_"), "(Z)V");
    }

    static void setInPowderSnow(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setInPowderSnow();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_canFreeze() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dC", "canFreeze", "method_32316", "canFreeze", "m_142079_"), "()Z");
    }

    static jboolean canFreeze(const jobject& obj) {
                
       const auto methodID = methodID_canFreeze();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_shouldEscapePowderSnow() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dD", "isFreezing", "method_40071", "shouldEscapePowderSnow", "m_203117_"), "()Z");
    }

    static jboolean shouldEscapePowderSnow(const jobject& obj) {
                
       const auto methodID = methodID_shouldEscapePowderSnow();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID__getYaw() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dE", "getYRot", "method_36454", "getYaw", "m_146908_"), "()F");
    }

    static jfloat _getYaw(const jobject& obj) {
                
       const auto methodID = methodID__getYaw();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_getBodyYaw() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dF", "getVisualRotationYInDegrees", "method_43078", "getBodyYaw", "m_213816_"), "()F");
    }

    static jfloat getBodyYaw(const jobject& obj) {
                
       const auto methodID = methodID_getBodyYaw();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_setYaw() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("t", "setYRot", "method_36456", "setYaw", "m_146922_"), "(F)V");
    }

    static void setYaw(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_setYaw();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__getPitch() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dG", "getXRot", "method_36455", "getPitch", "m_146909_"), "()F");
    }

    static jfloat _getPitch(const jobject& obj) {
                
       const auto methodID = methodID__getPitch();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_setPitch() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("u", "setXRot", "method_36457", "setPitch", "m_146926_"), "(F)V");
    }

    static void setPitch(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_setPitch();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_canSprintAsVehicle() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dH", "canSprint", "method_48155", "canSprintAsVehicle", "m_264410_"), "()Z");
    }

    static jboolean canSprintAsVehicle(const jobject& obj) {
                
       const auto methodID = methodID_canSprintAsVehicle();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getStepHeight() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dI", "maxUpStep", "method_49476", "getStepHeight", "m_274421_"), "()F");
    }

    static jfloat getStepHeight(const jobject& obj) {
                
       const auto methodID = methodID_getStepHeight();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_onExplodedBy() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onExplosionHit", "method_56918", "onExplodedBy", "m_8061_"), "(Lbsr;)V");
    }

    static void onExplodedBy(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onExplodedBy();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isRemoved() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dJ", "isRemoved", "method_31481", "isRemoved", "m_213877_"), "()Z");
    }

    static jboolean isRemoved(const jobject& obj) {
                
       const auto methodID = methodID_isRemoved();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getRemovalReason() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dK", "getRemovalReason", "method_35049", "getRemovalReason", "m_146911_"), "()Lbsr$c;");
    }

    static jobject getRemovalReason(const jobject& obj) {
                
       const auto methodID = methodID_getRemovalReason();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_setRemoved() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setRemoved", "method_31745", "setRemoved", "m_142467_"), "(Lbsr$c;)V");
    }

    static void setRemoved(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setRemoved();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_unsetRemoved() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dL", "unsetRemoved", "method_31482", "unsetRemoved", "m_146912_"), "()V");
    }

    static void unsetRemoved(const jobject& obj) {
                
       const auto methodID = methodID_unsetRemoved();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_setChangeListener() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setLevelCallback", "method_31744", "setChangeListener", "m_141960_"), "(Ldxh;)V");
    }

    static void setChangeListener(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setChangeListener();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_shouldSave() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dM", "shouldBeSaved", "method_31746", "shouldSave", "m_142391_"), "()Z");
    }

    static jboolean shouldSave(const jobject& obj) {
                
       const auto methodID = methodID_shouldSave();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isPlayer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dN", "isAlwaysTicking", "method_31747", "isPlayer", "m_142389_"), "()Z");
    }

    static jboolean isPlayer(const jobject& obj) {
                
       const auto methodID = methodID_isPlayer();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_canModifyAt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "mayInteract", "method_36971", "canModifyAt", "m_142265_"), "(Ldcw;Ljd;)Z");
    }

    static jboolean canModifyAt(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_canModifyAt();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getWorld() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dO", "level", "method_37908", "getWorld", "m_9236_"), "()Ldcw;");
    }

    static jobject getWorld(const jobject& obj) {
                
       const auto methodID = methodID_getWorld();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_setWorld() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setLevel", "method_51502", "setWorld", "m_284535_"), "(Ldcw;)V");
    }

    static void setWorld(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setWorld();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getDamageSources() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dP", "damageSources", "method_48923", "getDamageSources", "m_269291_"), "()Lbrl;");
    }

    static jobject getDamageSources(const jobject& obj) {
                
       const auto methodID = methodID_getDamageSources();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getRegistryManager() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dQ", "registryAccess", "method_56673", "getRegistryManager", "m_321891_"), "()Lka;");
    }

    static jobject getRegistryManager(const jobject& obj) {
                
       const auto methodID = methodID_getRegistryManager();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_lerpPosAndRotation() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "lerpPositionAndRotationStep", "method_52532", "lerpPosAndRotation", "m_293725_"), "(IDDDDD)V");
    }

    static void lerpPosAndRotation(const jobject& obj, const jint& arg0, const jdouble& arg1, const jdouble& arg2, const jdouble& arg3, const jdouble& arg4, const jdouble& arg5) {
                
       const auto methodID = methodID_lerpPosAndRotation();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
    static jmethodID methodID_getRandom() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dR", "getRandom", "method_59922", "getRandom", "m_339477_"), "()Layw;");
    }

    static jobject getRandom(const jobject& obj) {
                
       const auto methodID = methodID_getRandom();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getMovement() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("ag", "getKnownMovement", "method_60478", "getMovement", "m_339221_"), "()Lexc;");
    }

    static jobject getMovement(const jobject& obj) {
                
       const auto methodID = methodID_getMovement();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getWeaponStack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dS", "getWeaponItem", "method_59958", "getWeaponStack", "m_338776_"), "()Lcuq;");
    }

    static jobject getWeaponStack(const jobject& obj) {
                
       const auto methodID = methodID_getWeaponStack();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_ENTITY_ENTITY_HPP