// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_LOOT_FUNCTION_EXPLORATIONMAPLOOTFUNCTION$BUILDER_HPP
#define NET_MINECRAFT_LOOT_FUNCTION_EXPLORATIONMAPLOOTFUNCTION$BUILDER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.loot.function.ExplorationMapLootFunction$Builder
 * Remapped: esx$a
 */
namespace ExplorationMapLootFunction$Builder {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("esx$a", "net/minecraft/world/level/storage/loot/functions/ExplorationMapFunction$Builder", "net/minecraft/class_111$class_112", "net/minecraft/loot/function/ExplorationMapLootFunction$Builder", "net/minecraft/src/C_2914_$C_2916_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.loot.function.ExplorationMapLootFunction$Builder#destination
    static jobject get_field_destination(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "destination", "field_1039", "destination", "f_80562_"), "Lawu;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.loot.function.ExplorationMapLootFunction$Builder#destination
    static void set_field_destination(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "destination", "field_1039", "destination", "f_80562_"), "Lawu;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.loot.function.ExplorationMapLootFunction$Builder#decoration
    static jobject get_field_decoration(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "mapDecoration", "field_1042", "decoration", "f_80563_"), "Ljm;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.loot.function.ExplorationMapLootFunction$Builder#decoration
    static void set_field_decoration(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "mapDecoration", "field_1042", "decoration", "f_80563_"), "Ljm;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.loot.function.ExplorationMapLootFunction$Builder#zoom
    static jbyte get_field_zoom(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "zoom", "field_1043", "zoom", "f_80564_"), "B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetByteField(obj, fieldID);
    };

    // setter for static private field net.minecraft.loot.function.ExplorationMapLootFunction$Builder#zoom
    static void set_field_zoom(const jobject &obj, const jbyte &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "zoom", "field_1043", "zoom", "f_80564_"), "B");
        return MinecraftSDK::env->SetByteField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.loot.function.ExplorationMapLootFunction$Builder#searchRadius
    static jint get_field_searchRadius(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "searchRadius", "field_1040", "searchRadius", "f_80565_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.loot.function.ExplorationMapLootFunction$Builder#searchRadius
    static void set_field_searchRadius(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "searchRadius", "field_1040", "searchRadius", "f_80565_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.loot.function.ExplorationMapLootFunction$Builder#skipExistingChunks
    static jboolean get_field_skipExistingChunks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "skipKnownStructures", "field_1041", "skipExistingChunks", "f_80566_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.loot.function.ExplorationMapLootFunction$Builder#skipExistingChunks
    static void set_field_skipExistingChunks(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "skipKnownStructures", "field_1041", "skipExistingChunks", "f_80566_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    static jmethodID methodID_getThisBuilder() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getThis", "method_501", "getThisBuilder", "m_6477_"), "()Lesx$a;");
    }

    static jobject getThisBuilder(const jobject& obj) {
                
       const auto methodID = methodID_getThisBuilder();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_withDestination() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setDestination", "method_502", "withDestination", "m_210658_"), "(Lawu;)Lesx$a;");
    }

    static jobject withDestination(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_withDestination();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_withDecoration() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setMapDecoration", "method_499", "withDecoration", "m_80573_"), "(Ljm;)Lesx$a;");
    }

    static jobject withDecoration(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_withDecoration();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_withZoom() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setZoom", "method_500", "withZoom", "m_80569_"), "(B)Lesx$a;");
    }

    static jobject withZoom(const jobject& obj, const jbyte& arg0) {
                
       const auto methodID = methodID_withZoom();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__searchRadius() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setSearchRadius", "method_35521", "searchRadius", "m_165205_"), "(I)Lesx$a;");
    }

    static jobject _searchRadius(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID__searchRadius();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_withSkipExistingChunks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setSkipKnownStructures", "method_503", "withSkipExistingChunks", "m_80575_"), "(Z)Lesx$a;");
    }

    static jobject withSkipExistingChunks(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_withSkipExistingChunks();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_build() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "build", "method_515", "build", "m_7453_"), "()Letf;");
    }

    static jobject build(const jobject& obj) {
                
       const auto methodID = methodID_build();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_LOOT_FUNCTION_EXPLORATIONMAPLOOTFUNCTION$BUILDER_HPP