// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_LOOT_FUNCTION_ENCHANTRANDOMLYLOOTFUNCTION$BUILDER_HPP
#define NET_MINECRAFT_LOOT_FUNCTION_ENCHANTRANDOMLYLOOTFUNCTION$BUILDER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.loot.function.EnchantRandomlyLootFunction$Builder
 * Remapped: esu$a
 */
namespace EnchantRandomlyLootFunction$Builder {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("esu$a", "net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction$Builder", "net/minecraft/class_109$class_4954", "net/minecraft/loot/function/EnchantRandomlyLootFunction$Builder", "net/minecraft/src/C_2906_$C_2908_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.loot.function.EnchantRandomlyLootFunction$Builder#options
    static jobject get_field_options(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "options", "field_51794", "options", "f_337221_"), "Ljava/util/Optional;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.loot.function.EnchantRandomlyLootFunction$Builder#options
    static void set_field_options(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "options", "field_51794", "options", "f_337221_"), "Ljava/util/Optional;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.loot.function.EnchantRandomlyLootFunction$Builder#onlyCompatible
    static jboolean get_field_onlyCompatible(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "onlyCompatible", "field_51795", "onlyCompatible", "f_337327_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.loot.function.EnchantRandomlyLootFunction$Builder#onlyCompatible
    static void set_field_onlyCompatible(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "onlyCompatible", "field_51795", "onlyCompatible", "f_337327_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    static jmethodID methodID_getThisBuilder() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getThis", "method_25991", "getThisBuilder", "m_6477_"), "()Lesu$a;");
    }

    static jobject getThisBuilder(const jobject& obj) {
                
       const auto methodID = methodID_getThisBuilder();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_option() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "withEnchantment", "method_25992", "option", "m_80444_"), "(Ljm;)Lesu$a;");
    }

    static jobject option(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_option();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__options() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "withOneOf", "method_60293", "options", "m_338501_"), "(Ljq;)Lesu$a;");
    }

    static jobject _options(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__options();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_allowIncompatible() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "allowingIncompatibleEnchantments", "method_60294", "allowIncompatible", "m_338955_"), "()Lesu$a;");
    }

    static jobject allowIncompatible(const jobject& obj) {
                
       const auto methodID = methodID_allowIncompatible();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_build() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "build", "method_515", "build", "m_7453_"), "()Letf;");
    }

    static jobject build(const jobject& obj) {
                
       const auto methodID = methodID_build();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_LOOT_FUNCTION_ENCHANTRANDOMLYLOOTFUNCTION$BUILDER_HPP