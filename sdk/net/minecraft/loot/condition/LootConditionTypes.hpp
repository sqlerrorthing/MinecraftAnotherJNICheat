// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_LOOT_CONDITION_LOOTCONDITIONTYPES_HPP
#define NET_MINECRAFT_LOOT_CONDITION_LOOTCONDITIONTYPES_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.loot.condition.LootConditionTypes
 * Remapped: eve
 */
namespace LootConditionTypes {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("eve", "net/minecraft/world/level/storage/loot/predicates/LootItemConditions", "net/minecraft/class_217", "net/minecraft/loot/condition/LootConditionTypes", "net/minecraft/src/C_3007_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.loot.condition.LootConditionTypes#INVERTED
    [[maybe_unused]] static jobject get_field_INVERTED() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "INVERTED", "field_25235", "INVERTED", "f_81811_"), "Levd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.loot.condition.LootConditionTypes#INVERTED
    [[maybe_unused]] static void set_field_INVERTED(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "INVERTED", "field_25235", "INVERTED", "f_81811_"), "Levd;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.loot.condition.LootConditionTypes#ANY_OF
    [[maybe_unused]] static jobject get_field_ANY_OF() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ANY_OF", "field_44789", "ANY_OF", "f_285643_"), "Levd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.loot.condition.LootConditionTypes#ANY_OF
    [[maybe_unused]] static void set_field_ANY_OF(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ANY_OF", "field_44789", "ANY_OF", "f_285643_"), "Levd;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.loot.condition.LootConditionTypes#ALL_OF
    [[maybe_unused]] static jobject get_field_ALL_OF() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "ALL_OF", "field_44790", "ALL_OF", "f_285646_"), "Levd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.loot.condition.LootConditionTypes#ALL_OF
    [[maybe_unused]] static void set_field_ALL_OF(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "ALL_OF", "field_44790", "ALL_OF", "f_285646_"), "Levd;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.loot.condition.LootConditionTypes#RANDOM_CHANCE
    [[maybe_unused]] static jobject get_field_RANDOM_CHANCE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "RANDOM_CHANCE", "field_25237", "RANDOM_CHANCE", "f_81813_"), "Levd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.loot.condition.LootConditionTypes#RANDOM_CHANCE
    [[maybe_unused]] static void set_field_RANDOM_CHANCE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "RANDOM_CHANCE", "field_25237", "RANDOM_CHANCE", "f_81813_"), "Levd;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.loot.condition.LootConditionTypes#RANDOM_CHANCE_WITH_ENCHANTED_BONUS
    [[maybe_unused]] static jobject get_field_RANDOM_CHANCE_WITH_ENCHANTED_BONUS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "RANDOM_CHANCE_WITH_ENCHANTED_BONUS", "field_51811", "RANDOM_CHANCE_WITH_ENCHANTED_BONUS", "f_337367_"), "Levd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.loot.condition.LootConditionTypes#RANDOM_CHANCE_WITH_ENCHANTED_BONUS
    [[maybe_unused]] static void set_field_RANDOM_CHANCE_WITH_ENCHANTED_BONUS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "RANDOM_CHANCE_WITH_ENCHANTED_BONUS", "field_51811", "RANDOM_CHANCE_WITH_ENCHANTED_BONUS", "f_337367_"), "Levd;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.loot.condition.LootConditionTypes#ENTITY_PROPERTIES
    [[maybe_unused]] static jobject get_field_ENTITY_PROPERTIES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "ENTITY_PROPERTIES", "field_25239", "ENTITY_PROPERTIES", "f_81815_"), "Levd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.loot.condition.LootConditionTypes#ENTITY_PROPERTIES
    [[maybe_unused]] static void set_field_ENTITY_PROPERTIES(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "ENTITY_PROPERTIES", "field_25239", "ENTITY_PROPERTIES", "f_81815_"), "Levd;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.loot.condition.LootConditionTypes#KILLED_BY_PLAYER
    [[maybe_unused]] static jobject get_field_KILLED_BY_PLAYER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "KILLED_BY_PLAYER", "field_25240", "KILLED_BY_PLAYER", "f_81816_"), "Levd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.loot.condition.LootConditionTypes#KILLED_BY_PLAYER
    [[maybe_unused]] static void set_field_KILLED_BY_PLAYER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "KILLED_BY_PLAYER", "field_25240", "KILLED_BY_PLAYER", "f_81816_"), "Levd;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.loot.condition.LootConditionTypes#ENTITY_SCORES
    [[maybe_unused]] static jobject get_field_ENTITY_SCORES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "ENTITY_SCORES", "field_25241", "ENTITY_SCORES", "f_81817_"), "Levd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.loot.condition.LootConditionTypes#ENTITY_SCORES
    [[maybe_unused]] static void set_field_ENTITY_SCORES(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "ENTITY_SCORES", "field_25241", "ENTITY_SCORES", "f_81817_"), "Levd;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.loot.condition.LootConditionTypes#BLOCK_STATE_PROPERTY
    [[maybe_unused]] static jobject get_field_BLOCK_STATE_PROPERTY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "BLOCK_STATE_PROPERTY", "field_25242", "BLOCK_STATE_PROPERTY", "f_81818_"), "Levd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.loot.condition.LootConditionTypes#BLOCK_STATE_PROPERTY
    [[maybe_unused]] static void set_field_BLOCK_STATE_PROPERTY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "BLOCK_STATE_PROPERTY", "field_25242", "BLOCK_STATE_PROPERTY", "f_81818_"), "Levd;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.loot.condition.LootConditionTypes#MATCH_TOOL
    [[maybe_unused]] static jobject get_field_MATCH_TOOL() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "MATCH_TOOL", "field_25243", "MATCH_TOOL", "f_81819_"), "Levd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.loot.condition.LootConditionTypes#MATCH_TOOL
    [[maybe_unused]] static void set_field_MATCH_TOOL(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "MATCH_TOOL", "field_25243", "MATCH_TOOL", "f_81819_"), "Levd;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.loot.condition.LootConditionTypes#TABLE_BONUS
    [[maybe_unused]] static jobject get_field_TABLE_BONUS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "TABLE_BONUS", "field_25244", "TABLE_BONUS", "f_81820_"), "Levd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.loot.condition.LootConditionTypes#TABLE_BONUS
    [[maybe_unused]] static void set_field_TABLE_BONUS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "TABLE_BONUS", "field_25244", "TABLE_BONUS", "f_81820_"), "Levd;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.loot.condition.LootConditionTypes#SURVIVES_EXPLOSION
    [[maybe_unused]] static jobject get_field_SURVIVES_EXPLOSION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "SURVIVES_EXPLOSION", "field_25245", "SURVIVES_EXPLOSION", "f_81821_"), "Levd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.loot.condition.LootConditionTypes#SURVIVES_EXPLOSION
    [[maybe_unused]] static void set_field_SURVIVES_EXPLOSION(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "SURVIVES_EXPLOSION", "field_25245", "SURVIVES_EXPLOSION", "f_81821_"), "Levd;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.loot.condition.LootConditionTypes#DAMAGE_SOURCE_PROPERTIES
    [[maybe_unused]] static jobject get_field_DAMAGE_SOURCE_PROPERTIES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "DAMAGE_SOURCE_PROPERTIES", "field_25246", "DAMAGE_SOURCE_PROPERTIES", "f_81822_"), "Levd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.loot.condition.LootConditionTypes#DAMAGE_SOURCE_PROPERTIES
    [[maybe_unused]] static void set_field_DAMAGE_SOURCE_PROPERTIES(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "DAMAGE_SOURCE_PROPERTIES", "field_25246", "DAMAGE_SOURCE_PROPERTIES", "f_81822_"), "Levd;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.loot.condition.LootConditionTypes#LOCATION_CHECK
    [[maybe_unused]] static jobject get_field_LOCATION_CHECK() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "LOCATION_CHECK", "field_25247", "LOCATION_CHECK", "f_81823_"), "Levd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.loot.condition.LootConditionTypes#LOCATION_CHECK
    [[maybe_unused]] static void set_field_LOCATION_CHECK(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "LOCATION_CHECK", "field_25247", "LOCATION_CHECK", "f_81823_"), "Levd;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.loot.condition.LootConditionTypes#WEATHER_CHECK
    [[maybe_unused]] static jobject get_field_WEATHER_CHECK() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "WEATHER_CHECK", "field_25248", "WEATHER_CHECK", "f_81824_"), "Levd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.loot.condition.LootConditionTypes#WEATHER_CHECK
    [[maybe_unused]] static void set_field_WEATHER_CHECK(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "WEATHER_CHECK", "field_25248", "WEATHER_CHECK", "f_81824_"), "Levd;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.loot.condition.LootConditionTypes#REFERENCE
    [[maybe_unused]] static jobject get_field_REFERENCE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("p", "REFERENCE", "field_25249", "REFERENCE", "f_81825_"), "Levd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.loot.condition.LootConditionTypes#REFERENCE
    [[maybe_unused]] static void set_field_REFERENCE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("p", "REFERENCE", "field_25249", "REFERENCE", "f_81825_"), "Levd;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.loot.condition.LootConditionTypes#TIME_CHECK
    [[maybe_unused]] static jobject get_field_TIME_CHECK() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("q", "TIME_CHECK", "field_25250", "TIME_CHECK", "f_81826_"), "Levd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.loot.condition.LootConditionTypes#TIME_CHECK
    [[maybe_unused]] static void set_field_TIME_CHECK(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("q", "TIME_CHECK", "field_25250", "TIME_CHECK", "f_81826_"), "Levd;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.loot.condition.LootConditionTypes#VALUE_CHECK
    [[maybe_unused]] static jobject get_field_VALUE_CHECK() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("r", "VALUE_CHECK", "field_27911", "VALUE_CHECK", "f_165504_"), "Levd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.loot.condition.LootConditionTypes#VALUE_CHECK
    [[maybe_unused]] static void set_field_VALUE_CHECK(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("r", "VALUE_CHECK", "field_27911", "VALUE_CHECK", "f_165504_"), "Levd;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.loot.condition.LootConditionTypes#ENCHANTMENT_ACTIVE_CHECK
    [[maybe_unused]] static jobject get_field_ENCHANTMENT_ACTIVE_CHECK() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("s", "ENCHANTMENT_ACTIVE_CHECK", "field_51812", "ENCHANTMENT_ACTIVE_CHECK", "f_337110_"), "Levd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.loot.condition.LootConditionTypes#ENCHANTMENT_ACTIVE_CHECK
    [[maybe_unused]] static void set_field_ENCHANTMENT_ACTIVE_CHECK(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("s", "ENCHANTMENT_ACTIVE_CHECK", "field_51812", "ENCHANTMENT_ACTIVE_CHECK", "f_337110_"), "Levd;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_register() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "register", "method_29327", "register", "m_81831_"), "(Ljava/lang/String;Lcom/mojang/serialization/MapCodec;)Levd;");
    }

    static jobject register(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_register();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_LOOT_CONDITION_LOOTCONDITIONTYPES_HPP