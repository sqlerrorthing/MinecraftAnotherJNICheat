// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_LOOT_CONDITION_ALTERNATIVELOOTCONDITION$BUILDER_HPP
#define NET_MINECRAFT_LOOT_CONDITION_ALTERNATIVELOOTCONDITION$BUILDER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.loot.condition.AlternativeLootCondition$Builder
 * Remapped: eus$a
 */
namespace AlternativeLootCondition$Builder {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("eus$a", "net/minecraft/world/level/storage/loot/predicates/CompositeLootItemCondition$Builder", "net/minecraft/class_186$class_187", "net/minecraft/loot/condition/AlternativeLootCondition$Builder", "net/minecraft/src/C_285539_$C_285546_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.loot.condition.AlternativeLootCondition$Builder#terms
    static jobject get_field_terms(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "terms", "field_1248", "terms", "f_285633_"), "Lcom/google/common/collect/ImmutableList$Builder;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.loot.condition.AlternativeLootCondition$Builder#terms
    static void set_field_terms(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "terms", "field_1248", "terms", "f_285633_"), "Lcom/google/common/collect/ImmutableList$Builder;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_add() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addTerm", "method_51730", "add", "m_286010_"), "(Levc$a;)V");
    }

    static void add(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_add();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_build() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("build", "build", "", "", "m_6409_"), "()Levc;");
    }

    static jobject build(const jobject& obj) {
                
       const auto methodID = methodID_build();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__build() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "create", "method_51724", "build", "m_285950_"), "(Ljava/util/List;)Levc;");
    }

    static jobject _build(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__build();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_LOOT_CONDITION_ALTERNATIVELOOTCONDITION$BUILDER_HPP