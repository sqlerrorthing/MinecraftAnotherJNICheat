// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_LOOT_LOOTTABLE$BUILDER_HPP
#define NET_MINECRAFT_LOOT_LOOTTABLE$BUILDER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.loot.LootTable$Builder
 * Remapped: erw$a
 */
namespace LootTable$Builder {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("erw$a", "net/minecraft/world/level/storage/loot/LootTable$Builder", "net/minecraft/class_52$class_53", "net/minecraft/loot/LootTable$Builder", "net/minecraft/src/C_2822_$C_2824_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.loot.LootTable$Builder#pools
    static jobject get_field_pools(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "pools", "field_949", "pools", "f_79156_"), "Lcom/google/common/collect/ImmutableList$Builder;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.loot.LootTable$Builder#pools
    static void set_field_pools(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "pools", "field_949", "pools", "f_79156_"), "Lcom/google/common/collect/ImmutableList$Builder;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.loot.LootTable$Builder#functions
    static jobject get_field_functions(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "functions", "field_951", "functions", "f_79157_"), "Lcom/google/common/collect/ImmutableList$Builder;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.loot.LootTable$Builder#functions
    static void set_field_functions(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "functions", "field_951", "functions", "f_79157_"), "Lcom/google/common/collect/ImmutableList$Builder;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.loot.LootTable$Builder#type
    static jobject get_field_type(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "paramSet", "field_950", "type", "f_79158_"), "Leul;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.loot.LootTable$Builder#type
    static void set_field_type(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "paramSet", "field_950", "type", "f_79158_"), "Leul;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.loot.LootTable$Builder#randomSequenceId
    static jobject get_field_randomSequenceId(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "randomSequence", "field_44893", "randomSequenceId", "f_287003_"), "Ljava/util/Optional;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.loot.LootTable$Builder#randomSequenceId
    static void set_field_randomSequenceId(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "randomSequence", "field_44893", "randomSequenceId", "f_287003_"), "Ljava/util/Optional;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_pool() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "withPool", "method_336", "pool", "m_79161_"), "(Lerv$a;)Lerw$a;");
    }

    static jobject pool(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_pool();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__type() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setParamSet", "method_334", "type", "m_79165_"), "(Leul;)Lerw$a;");
    }

    static jobject _type(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__type();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__randomSequenceId() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setRandomSequence", "method_51883", "randomSequenceId", "m_287223_"), "(Lakr;)Lerw$a;");
    }

    static jobject _randomSequenceId(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__randomSequenceId();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_apply() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "apply", "method_335", "apply", "m_79078_"), "(Letf$a;)Lerw$a;");
    }

    static jobject apply(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_apply();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getThisFunctionConsumingBuilder() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "unwrap", "method_337", "getThisFunctionConsumingBuilder", "m_79073_"), "()Lerw$a;");
    }

    static jobject getThisFunctionConsumingBuilder(const jobject& obj) {
                
       const auto methodID = methodID_getThisFunctionConsumingBuilder();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_build() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "build", "method_338", "build", "m_79167_"), "()Lerw;");
    }

    static jobject build(const jobject& obj) {
                
       const auto methodID = methodID_build();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_LOOT_LOOTTABLE$BUILDER_HPP