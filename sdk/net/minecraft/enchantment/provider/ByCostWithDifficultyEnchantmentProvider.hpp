// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ENCHANTMENT_PROVIDER_BYCOSTWITHDIFFICULTYENCHANTMENTPROVIDER_HPP
#define NET_MINECRAFT_ENCHANTMENT_PROVIDER_BYCOSTWITHDIFFICULTYENCHANTMENTPROVIDER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.enchantment.provider.ByCostWithDifficultyEnchantmentProvider
 * Remapped: dbm
 */
namespace ByCostWithDifficultyEnchantmentProvider {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dbm", "net/minecraft/world/item/enchantment/providers/EnchantmentsByCostWithDifficulty", "net/minecraft/class_9744", "net/minecraft/enchantment/provider/ByCostWithDifficultyEnchantmentProvider", "net/minecraft/src/C_336493_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.enchantment.provider.ByCostWithDifficultyEnchantmentProvider#enchantments
    static jobject get_field_enchantments(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "enchantments", "comp_2766", "enchantments", "f_337635_"), "Ljq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.enchantment.provider.ByCostWithDifficultyEnchantmentProvider#enchantments
    static void set_field_enchantments(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "enchantments", "comp_2766", "enchantments", "f_337635_"), "Ljq;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.enchantment.provider.ByCostWithDifficultyEnchantmentProvider#minCost
    static jint get_field_minCost(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "minCost", "comp_2767", "minCost", "f_337475_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.enchantment.provider.ByCostWithDifficultyEnchantmentProvider#minCost
    static void set_field_minCost(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "minCost", "comp_2767", "minCost", "f_337475_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.enchantment.provider.ByCostWithDifficultyEnchantmentProvider#maxCostSpan
    static jint get_field_maxCostSpan(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "maxCostSpan", "comp_2768", "maxCostSpan", "f_336793_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.enchantment.provider.ByCostWithDifficultyEnchantmentProvider#maxCostSpan
    static void set_field_maxCostSpan(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "maxCostSpan", "comp_2768", "maxCostSpan", "f_336793_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for static public field net.minecraft.enchantment.provider.ByCostWithDifficultyEnchantmentProvider#MAX_COST
    [[maybe_unused]] static jint get_field_MAX_COST() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "MAX_ALLOWED_VALUE_PART", "field_52056", "MAX_COST", "f_337157_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.enchantment.provider.ByCostWithDifficultyEnchantmentProvider#MAX_COST
    [[maybe_unused]] static void set_field_MAX_COST(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "MAX_ALLOWED_VALUE_PART", "field_52056", "MAX_COST", "f_337157_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.enchantment.provider.ByCostWithDifficultyEnchantmentProvider#CODEC
    [[maybe_unused]] static jobject get_field_CODEC() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "CODEC", "field_51733", "CODEC", "f_337299_"), "Lcom/mojang/serialization/MapCodec;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.enchantment.provider.ByCostWithDifficultyEnchantmentProvider#CODEC
    [[maybe_unused]] static void set_field_CODEC(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "CODEC", "field_51733", "CODEC", "f_337299_"), "Lcom/mojang/serialization/MapCodec;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_provideEnchantments() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "enchant", "method_60266", "provideEnchantments", "m_338356_"), "(Lcuq;Ldai$a;Layw;Lbqp;)V");
    }

    static void provideEnchantments(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_provideEnchantments();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_getCodec() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "codec", "method_60265", "getCodec", "m_339126_"), "()Lcom/mojang/serialization/MapCodec;");
    }

    static jobject getCodec(const jobject& obj) {
                
       const auto methodID = methodID_getCodec();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__enchantments() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "enchantments", "comp_2766", "enchantments", "f_337635_"), "()Ljq;");
    }

    static jobject _enchantments(const jobject& obj) {
                
       const auto methodID = methodID__enchantments();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__minCost() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "minCost", "comp_2767", "minCost", "f_337475_"), "()I");
    }

    static jint _minCost(const jobject& obj) {
                
       const auto methodID = methodID__minCost();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID__maxCostSpan() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "maxCostSpan", "comp_2768", "maxCostSpan", "f_336793_"), "()I");
    }

    static jint _maxCostSpan(const jobject& obj) {
                
       const auto methodID = methodID__maxCostSpan();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_ENCHANTMENT_PROVIDER_BYCOSTWITHDIFFICULTYENCHANTMENTPROVIDER_HPP