// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_RESOURCE_DIRECTORYRESOURCEPACK_HPP
#define NET_MINECRAFT_RESOURCE_DIRECTORYRESOURCEPACK_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.resource.DirectoryResourcePack
 * Remapped: ast
 */
namespace DirectoryResourcePack {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("ast", "net/minecraft/server/packs/PathPackResources", "net/minecraft/class_3259", "net/minecraft/resource/DirectoryResourcePack", "net/minecraft/src/C_243631_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.resource.DirectoryResourcePack#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "LOGGER", "field_14187", "LOGGER", "f_244043_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.resource.DirectoryResourcePack#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "LOGGER", "field_14187", "LOGGER", "f_244043_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.resource.DirectoryResourcePack#SEPARATOR_JOINER
    [[maybe_unused]] static jobject get_field_SEPARATOR_JOINER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "PATH_JOINER", "field_40000", "SEPARATOR_JOINER", "f_244478_"), "Lcom/google/common/base/Joiner;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.resource.DirectoryResourcePack#SEPARATOR_JOINER
    [[maybe_unused]] static void set_field_SEPARATOR_JOINER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "PATH_JOINER", "field_40000", "SEPARATOR_JOINER", "f_244478_"), "Lcom/google/common/base/Joiner;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.resource.DirectoryResourcePack#root
    static jobject get_field_root(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "root", "field_40001", "root", "f_243919_"), "Ljava/nio/file/Path;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.resource.DirectoryResourcePack#root
    static void set_field_root(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "root", "field_40001", "root", "f_243919_"), "Ljava/nio/file/Path;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_openRoot() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getRootResource", "method_14410", "openRoot", "m_8017_"), "([Ljava/lang/String;)Latw;");
    }

    static jobject openRoot(const jobject& obj, const jarray& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_openRoot();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isValidPath() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "validatePath", "method_14402", "isValidPath", "m_246877_"), "(Ljava/nio/file/Path;)Z");
    }

    static jboolean isValidPath(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_isValidPath();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_open() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getResource", "method_14405", "open", "m_214146_"), "(Lass;Lakr;)Latw;");
    }

    static jobject open(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_open();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__open() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getResource", "method_45180", "open", "m_247113_"), "(Lakr;Ljava/nio/file/Path;)Latw;");
    }

    static jobject _open(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID__open();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID___open() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "returnFileIfExists", "method_45187", "open", "m_246992_"), "(Ljava/nio/file/Path;)Latw;");
    }

    static jobject __open(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID___open();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_findResources() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "listResources", "method_14408", "findResources", "m_8031_"), "(Lass;Ljava/lang/String;Ljava/lang/String;Lasq$a;)V");
    }

    static void findResources(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_findResources();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID__findResources() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "listPath", "method_45183", "findResources", "m_246914_"), "(Ljava/lang/String;Ljava/nio/file/Path;Ljava/util/List;Lasq$a;)V");
    }

    static void _findResources(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
       const auto clazz = self();
       const auto methodID = methodID__findResources();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_getNamespaces() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getNamespaces", "method_14406", "getNamespaces", "m_5698_"), "(Lass;)Ljava/util/Set;");
    }

    static jobject getNamespaces(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getNamespaces();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_close() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("close", "close", "", "", "close"), "()V");
    }

    static void close(const jobject& obj) {
                
       const auto methodID = methodID_close();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_RESOURCE_DIRECTORYRESOURCEPACK_HPP