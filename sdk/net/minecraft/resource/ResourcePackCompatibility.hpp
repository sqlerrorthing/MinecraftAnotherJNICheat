// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_RESOURCE_RESOURCEPACKCOMPATIBILITY_HPP
#define NET_MINECRAFT_RESOURCE_RESOURCEPACKCOMPATIBILITY_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.resource.ResourcePackCompatibility
 * Remapped: atn
 */
namespace ResourcePackCompatibility {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("atn", "net/minecraft/server/packs/repository/PackCompatibility", "net/minecraft/class_3281", "net/minecraft/resource/ResourcePackCompatibility", "net/minecraft/src/C_61_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.resource.ResourcePackCompatibility#TOO_OLD
    [[maybe_unused]] static jobject get_field_TOO_OLD() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "TOO_OLD", "field_14223", "TOO_OLD", "TOO_OLD"), "Latn;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.resource.ResourcePackCompatibility#TOO_OLD
    [[maybe_unused]] static void set_field_TOO_OLD(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "TOO_OLD", "field_14223", "TOO_OLD", "TOO_OLD"), "Latn;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.resource.ResourcePackCompatibility#TOO_NEW
    [[maybe_unused]] static jobject get_field_TOO_NEW() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "TOO_NEW", "field_14220", "TOO_NEW", "TOO_NEW"), "Latn;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.resource.ResourcePackCompatibility#TOO_NEW
    [[maybe_unused]] static void set_field_TOO_NEW(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "TOO_NEW", "field_14220", "TOO_NEW", "TOO_NEW"), "Latn;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.resource.ResourcePackCompatibility#COMPATIBLE
    [[maybe_unused]] static jobject get_field_COMPATIBLE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "COMPATIBLE", "field_14224", "COMPATIBLE", "COMPATIBLE"), "Latn;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.resource.ResourcePackCompatibility#COMPATIBLE
    [[maybe_unused]] static void set_field_COMPATIBLE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "COMPATIBLE", "field_14224", "COMPATIBLE", "COMPATIBLE"), "Latn;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.resource.ResourcePackCompatibility#notification
    static jobject get_field_notification(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "description", "field_14219", "notification", "f_10481_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.resource.ResourcePackCompatibility#notification
    static void set_field_notification(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "description", "field_14219", "notification", "f_10481_"), "Lwz;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.resource.ResourcePackCompatibility#confirmMessage
    static jobject get_field_confirmMessage(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "confirmation", "field_14222", "confirmMessage", "f_10482_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.resource.ResourcePackCompatibility#confirmMessage
    static void set_field_confirmMessage(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "confirmation", "field_14222", "confirmMessage", "f_10482_"), "Lwz;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_values() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("values", "values", "values", "values", "values"), "()[Latn;");
    }

    static jobject values() {
       const auto clazz = self();
       const auto methodID = methodID_values();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_valueOf() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("valueOf", "valueOf", "valueOf", "valueOf", "valueOf"), "(Ljava/lang/String;)Latn;");
    }

    static jobject valueOf(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_valueOf();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_isCompatible() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isCompatible", "method_14437", "isCompatible", "m_10489_"), "()Z");
    }

    static jboolean isCompatible(const jobject& obj) {
                
       const auto methodID = methodID_isCompatible();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_from() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "forVersion", "method_14436", "from", "m_295204_"), "(Layg;I)Latn;");
    }

    static jobject from(const jobject& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_from();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getNotification() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getDescription", "method_14439", "getNotification", "m_10492_"), "()Lwz;");
    }

    static jobject getNotification(const jobject& obj) {
                
       const auto methodID = methodID_getNotification();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getConfirmMessage() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getConfirmation", "method_14438", "getConfirmMessage", "m_10493_"), "()Lwz;");
    }

    static jobject getConfirmMessage(const jobject& obj) {
                
       const auto methodID = methodID_getConfirmMessage();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_RESOURCE_RESOURCEPACKCOMPATIBILITY_HPP