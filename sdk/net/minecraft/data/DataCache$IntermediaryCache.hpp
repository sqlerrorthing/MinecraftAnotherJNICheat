// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_DATA_DATACACHE$INTERMEDIARYCACHE_HPP
#define NET_MINECRAFT_DATA_DATACACHE$INTERMEDIARYCACHE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.data.DataCache$IntermediaryCache
 * Remapped: mb$c
 */
namespace DataCache$IntermediaryCache {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("mb$c", "net/minecraft/data/HashCache$ProviderCacheBuilder", "net/minecraft/class_2408$class_7858", "net/minecraft/data/DataCache$IntermediaryCache", "net/minecraft/src/C_4766_$C_252368_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.data.DataCache$IntermediaryCache#version
    static jobject get_field_version(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "version", "comp_1122", "version", "f_252424_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.data.DataCache$IntermediaryCache#version
    static void set_field_version(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "version", "comp_1122", "version", "f_252424_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.data.DataCache$IntermediaryCache#data
    static jobject get_field_data(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "data", "comp_1123", "data", "f_252466_"), "Ljava/util/concurrent/ConcurrentMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.data.DataCache$IntermediaryCache#data
    static void set_field_data(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "data", "comp_1123", "data", "f_252466_"), "Ljava/util/concurrent/ConcurrentMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_put() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "put", "method_46574", "put", "m_252796_"), "(Ljava/nio/file/Path;Lcom/google/common/hash/HashCode;)V");
    }

    static void put(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_put();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_toCachedData() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "build", "method_46573", "toCachedData", "m_252979_"), "()Lmb$b;");
    }

    static jobject toCachedData(const jobject& obj) {
                
       const auto methodID = methodID_toCachedData();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__version() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "version", "comp_1122", "version", "f_252424_"), "()Ljava/lang/String;");
    }

    static jobject _version(const jobject& obj) {
                
       const auto methodID = methodID__version();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__data() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "data", "comp_1123", "data", "f_252466_"), "()Ljava/util/concurrent/ConcurrentMap;");
    }

    static jobject _data(const jobject& obj) {
                
       const auto methodID = methodID__data();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_DATA_DATACACHE$INTERMEDIARYCACHE_HPP