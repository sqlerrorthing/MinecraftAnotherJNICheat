// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_DATA_DATACACHE$CACHEDDATAWRITER_HPP
#define NET_MINECRAFT_DATA_DATACACHE$CACHEDDATAWRITER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.data.DataCache$CachedDataWriter
 * Remapped: mb$a
 */
namespace DataCache$CachedDataWriter {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("mb$a", "net/minecraft/data/HashCache$CacheUpdater", "net/minecraft/class_2408$class_7404", "net/minecraft/data/DataCache$CachedDataWriter", "net/minecraft/src/C_4766_$C_213478_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.data.DataCache$CachedDataWriter#providerName
    static jobject get_field_providerName(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "provider", "field_40835", "providerName", "f_252505_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.data.DataCache$CachedDataWriter#providerName
    static void set_field_providerName(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "provider", "field_40835", "providerName", "f_252505_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.data.DataCache$CachedDataWriter#oldCache
    static jobject get_field_oldCache(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "oldCache", "field_38919", "oldCache", "f_236113_"), "Lmb$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.data.DataCache$CachedDataWriter#oldCache
    static void set_field_oldCache(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "oldCache", "field_38919", "oldCache", "f_236113_"), "Lmb$b;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.data.DataCache$CachedDataWriter#newCache
    static jobject get_field_newCache(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "newCache", "field_38920", "newCache", "f_236114_"), "Lmb$c;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.data.DataCache$CachedDataWriter#newCache
    static void set_field_newCache(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "newCache", "field_38920", "newCache", "f_236114_"), "Lmb$c;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.data.DataCache$CachedDataWriter#cacheMissCount
    static jobject get_field_cacheMissCount(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "writes", "field_38921", "cacheMissCount", "f_236115_"), "Ljava/util/concurrent/atomic/AtomicInteger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.data.DataCache$CachedDataWriter#cacheMissCount
    static void set_field_cacheMissCount(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "writes", "field_38921", "cacheMissCount", "f_236115_"), "Ljava/util/concurrent/atomic/AtomicInteger;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.data.DataCache$CachedDataWriter#closed
    static jboolean get_field_closed(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "closed", "field_40836", "closed", "f_252460_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.data.DataCache$CachedDataWriter#closed
    static void set_field_closed(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "closed", "field_40836", "closed", "f_252460_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    static jmethodID methodID_isCacheInvalid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "shouldWrite", "method_43355", "isCacheInvalid", "m_236119_"), "(Ljava/nio/file/Path;Lcom/google/common/hash/HashCode;)Z");
    }

    static jboolean isCacheInvalid(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_isCacheInvalid();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_write() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("writeIfNeeded", "writeIfNeeded", "method_43346", "write", "m_213871_"), "(Ljava/nio/file/Path;[BLcom/google/common/hash/HashCode;)V");
    }

    static void write(const jobject& obj, const jobject& arg0, const jarray& arg1, const jbyte& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_write();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_finish() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "close", "method_46572", "finish", "m_253164_"), "()Lmb$e;");
    }

    static jobject finish(const jobject& obj) {
                
       const auto methodID = methodID_finish();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_DATA_DATACACHE$CACHEDDATAWRITER_HPP