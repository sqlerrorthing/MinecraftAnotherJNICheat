// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_TEST_TESTSET_HPP
#define NET_MINECRAFT_TEST_TESTSET_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.test.TestSet
 * Remapped: ti
 */
namespace TestSet {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("ti", "net/minecraft/gametest/framework/MultipleTestTracker", "net/minecraft/class_4524", "net/minecraft/test/TestSet", "net/minecraft/src/C_4898_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.test.TestSet#NOT_STARTED
    [[maybe_unused]] static jchar get_field_NOT_STARTED() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "NOT_STARTED_TEST_CHAR", "field_33168", "NOT_STARTED", "f_177677_"), "C");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticCharField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.test.TestSet#NOT_STARTED
    [[maybe_unused]] static void set_field_NOT_STARTED(const jchar &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "NOT_STARTED_TEST_CHAR", "field_33168", "NOT_STARTED", "f_177677_"), "C");
        return MinecraftSDK::env->SetStaticCharField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.test.TestSet#RUNNING
    [[maybe_unused]] static jchar get_field_RUNNING() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ONGOING_TEST_CHAR", "field_33169", "RUNNING", "f_177678_"), "C");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticCharField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.test.TestSet#RUNNING
    [[maybe_unused]] static void set_field_RUNNING(const jchar &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ONGOING_TEST_CHAR", "field_33169", "RUNNING", "f_177678_"), "C");
        return MinecraftSDK::env->SetStaticCharField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.test.TestSet#PASS
    [[maybe_unused]] static jchar get_field_PASS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "SUCCESSFUL_TEST_CHAR", "field_33170", "PASS", "f_177679_"), "C");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticCharField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.test.TestSet#PASS
    [[maybe_unused]] static void set_field_PASS(const jchar &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "SUCCESSFUL_TEST_CHAR", "field_33170", "PASS", "f_177679_"), "C");
        return MinecraftSDK::env->SetStaticCharField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.test.TestSet#OPTIONAL_FAIL
    [[maybe_unused]] static jchar get_field_OPTIONAL_FAIL() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "FAILED_OPTIONAL_TEST_CHAR", "field_33171", "OPTIONAL_FAIL", "f_177680_"), "C");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticCharField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.test.TestSet#OPTIONAL_FAIL
    [[maybe_unused]] static void set_field_OPTIONAL_FAIL(const jchar &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "FAILED_OPTIONAL_TEST_CHAR", "field_33171", "OPTIONAL_FAIL", "f_177680_"), "C");
        return MinecraftSDK::env->SetStaticCharField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.test.TestSet#REQUIRED_FAIL
    [[maybe_unused]] static jchar get_field_REQUIRED_FAIL() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "FAILED_REQUIRED_TEST_CHAR", "field_33172", "REQUIRED_FAIL", "f_177681_"), "C");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticCharField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.test.TestSet#REQUIRED_FAIL
    [[maybe_unused]] static void set_field_REQUIRED_FAIL(const jchar &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "FAILED_REQUIRED_TEST_CHAR", "field_33172", "REQUIRED_FAIL", "f_177681_"), "C");
        return MinecraftSDK::env->SetStaticCharField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.test.TestSet#tests
    static jobject get_field_tests(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "tests", "field_20577", "tests", "f_127798_"), "Ljava/util/Collection;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.test.TestSet#tests
    static void set_field_tests(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "tests", "field_20577", "tests", "f_127798_"), "Ljava/util/Collection;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.test.TestSet#listeners
    static jobject get_field_listeners(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "listeners", "field_25303", "listeners", "f_127799_"), "Ljava/util/Collection;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.test.TestSet#listeners
    static void set_field_listeners(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "listeners", "field_25303", "listeners", "f_127799_"), "Ljava/util/Collection;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_add() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addTestToTrack", "method_22230", "add", "m_127809_"), "(Lsx;)V");
    }

    static void add(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_add();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_addListener() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addListener", "method_22231", "addListener", "m_127811_"), "(Lsy;)V");
    }

    static void addListener(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addListener();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__addListener() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addFailureListener", "method_29407", "addListener", "m_127807_"), "(Ljava/util/function/Consumer;)V");
    }

    static void _addListener(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__addListener();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getFailedRequiredTestCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getFailedRequiredCount", "method_22229", "getFailedRequiredTestCount", "m_127803_"), "()I");
    }

    static jint getFailedRequiredTestCount(const jobject& obj) {
                
       const auto methodID = methodID_getFailedRequiredTestCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getFailedOptionalTestCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getFailedOptionalCount", "method_22234", "getFailedOptionalTestCount", "m_127816_"), "()I");
    }

    static jint getFailedOptionalTestCount(const jobject& obj) {
                
       const auto methodID = methodID_getFailedOptionalTestCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getCompletedTestCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getDoneCount", "method_22235", "getCompletedTestCount", "m_127817_"), "()I");
    }

    static jint getCompletedTestCount(const jobject& obj) {
                
       const auto methodID = methodID_getCompletedTestCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_failed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "hasFailedRequired", "method_22236", "failed", "m_127818_"), "()Z");
    }

    static jboolean failed(const jobject& obj) {
                
       const auto methodID = methodID_failed();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasFailedOptionalTests() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "hasFailedOptional", "method_22237", "hasFailedOptionalTests", "m_127819_"), "()Z");
    }

    static jboolean hasFailedOptionalTests(const jobject& obj) {
                
       const auto methodID = methodID_hasFailedOptionalTests();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getRequiredTests() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "getFailedRequired", "method_36103", "getRequiredTests", "m_177682_"), "()Ljava/util/Collection;");
    }

    static jobject getRequiredTests(const jobject& obj) {
                
       const auto methodID = methodID_getRequiredTests();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getOptionalTests() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "getFailedOptional", "method_36104", "getOptionalTests", "m_177683_"), "()Ljava/util/Collection;");
    }

    static jobject getOptionalTests(const jobject& obj) {
                
       const auto methodID = methodID_getOptionalTests();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getTestCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "getTotalCount", "method_22238", "getTestCount", "m_127820_"), "()I");
    }

    static jint getTestCount(const jobject& obj) {
                
       const auto methodID = methodID_getTestCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_isDone() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "isDone", "method_22239", "isDone", "m_127821_"), "()Z");
    }

    static jboolean isDone(const jobject& obj) {
                
       const auto methodID = methodID_isDone();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getResultString() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "getProgressBar", "method_22240", "getResultString", "m_127822_"), "()Ljava/lang/String;");
    }

    static jobject getResultString(const jobject& obj) {
                
       const auto methodID = methodID_getResultString();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_remove() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "remove", "method_56243", "remove", "m_322296_"), "(Lsx;)V");
    }

    static void remove(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_remove();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_TEST_TESTSET_HPP