// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_TEST_TESTFUNCTION_HPP
#define NET_MINECRAFT_TEST_TESTFUNCTION_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.test.TestFunction
 * Remapped: tr
 */
namespace TestFunction {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("tr", "net/minecraft/gametest/framework/TestFunction", "net/minecraft/class_4529", "net/minecraft/test/TestFunction", "net/minecraft/src/C_4904_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.test.TestFunction#batchId
    static jobject get_field_batchId(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "batchName", "comp_2218", "batchId", "f_128067_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.test.TestFunction#batchId
    static void set_field_batchId(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "batchName", "comp_2218", "batchId", "f_128067_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.test.TestFunction#templatePath
    static jobject get_field_templatePath(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "testName", "comp_2219", "templatePath", "f_128068_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.test.TestFunction#templatePath
    static void set_field_templatePath(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "testName", "comp_2219", "templatePath", "f_128068_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.test.TestFunction#templateName
    static jobject get_field_templateName(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "structureName", "comp_2220", "templateName", "f_128069_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.test.TestFunction#templateName
    static void set_field_templateName(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "structureName", "comp_2220", "templateName", "f_128069_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.test.TestFunction#rotation
    static jobject get_field_rotation(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "rotation", "comp_2221", "rotation", "f_128074_"), "Ldmm;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.test.TestFunction#rotation
    static void set_field_rotation(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "rotation", "comp_2221", "rotation", "f_128074_"), "Ldmm;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.test.TestFunction#tickLimit
    static jint get_field_tickLimit(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "maxTicks", "comp_2222", "tickLimit", "f_128072_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.test.TestFunction#tickLimit
    static void set_field_tickLimit(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "maxTicks", "comp_2222", "tickLimit", "f_128072_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.test.TestFunction#setupTicks
    static jlong get_field_setupTicks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "setupTicks", "comp_2223", "setupTicks", "f_128073_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.test.TestFunction#setupTicks
    static void set_field_setupTicks(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "setupTicks", "comp_2223", "setupTicks", "f_128073_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.test.TestFunction#required
    static jboolean get_field_required(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "required", "comp_2224", "required", "f_128070_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.test.TestFunction#required
    static void set_field_required(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "required", "comp_2224", "required", "f_128070_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.test.TestFunction#manualOnly
    static jboolean get_field_manualOnly(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "manualOnly", "comp_2445", "manualOnly", "f_315754_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.test.TestFunction#manualOnly
    static void set_field_manualOnly(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "manualOnly", "comp_2445", "manualOnly", "f_315754_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.test.TestFunction#maxAttempts
    static jint get_field_maxAttempts(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "maxAttempts", "comp_2225", "maxAttempts", "f_177798_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.test.TestFunction#maxAttempts
    static void set_field_maxAttempts(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "maxAttempts", "comp_2225", "maxAttempts", "f_177798_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.test.TestFunction#requiredSuccesses
    static jint get_field_requiredSuccesses(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "requiredSuccesses", "comp_2226", "requiredSuccesses", "f_177799_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.test.TestFunction#requiredSuccesses
    static void set_field_requiredSuccesses(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "requiredSuccesses", "comp_2226", "requiredSuccesses", "f_177799_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.test.TestFunction#skyAccess
    static jboolean get_field_skyAccess(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "skyAccess", "comp_2362", "skyAccess", "f_314649_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.test.TestFunction#skyAccess
    static void set_field_skyAccess(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "skyAccess", "comp_2362", "skyAccess", "f_314649_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.test.TestFunction#starter
    static jobject get_field_starter(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "function", "comp_2227", "starter", "f_128071_"), "Ljava/util/function/Consumer;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.test.TestFunction#starter
    static void set_field_starter(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "function", "comp_2227", "starter", "f_128071_"), "Ljava/util/function/Consumer;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_start() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "run", "method_22297", "start", "m_128076_"), "(Lsw;)V");
    }

    static void start(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_start();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isFlaky() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isFlaky", "method_32257", "isFlaky", "m_177828_"), "()Z");
    }

    static jboolean isFlaky(const jobject& obj) {
                
       const auto methodID = methodID_isFlaky();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID__batchId() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "batchName", "comp_2218", "batchId", "f_128067_"), "()Ljava/lang/String;");
    }

    static jobject _batchId(const jobject& obj) {
                
       const auto methodID = methodID__batchId();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__templatePath() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "testName", "comp_2219", "templatePath", "f_128068_"), "()Ljava/lang/String;");
    }

    static jobject _templatePath(const jobject& obj) {
                
       const auto methodID = methodID__templatePath();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__templateName() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "structureName", "comp_2220", "templateName", "f_128069_"), "()Ljava/lang/String;");
    }

    static jobject _templateName(const jobject& obj) {
                
       const auto methodID = methodID__templateName();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__rotation() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "rotation", "comp_2221", "rotation", "f_128074_"), "()Ldmm;");
    }

    static jobject _rotation(const jobject& obj) {
                
       const auto methodID = methodID__rotation();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__tickLimit() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "maxTicks", "comp_2222", "tickLimit", "f_128072_"), "()I");
    }

    static jint _tickLimit(const jobject& obj) {
                
       const auto methodID = methodID__tickLimit();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID__setupTicks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "setupTicks", "comp_2223", "setupTicks", "f_128073_"), "()J");
    }

    static jlong _setupTicks(const jobject& obj) {
                
       const auto methodID = methodID__setupTicks();
       return MinecraftSDK::env->CallLongMethod(obj, methodID);
    };
    
    static jmethodID methodID__required() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "required", "comp_2224", "required", "f_128070_"), "()Z");
    }

    static jboolean _required(const jobject& obj) {
                
       const auto methodID = methodID__required();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID__manualOnly() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "manualOnly", "comp_2445", "manualOnly", "f_315754_"), "()Z");
    }

    static jboolean _manualOnly(const jobject& obj) {
                
       const auto methodID = methodID__manualOnly();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID__maxAttempts() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "maxAttempts", "comp_2225", "maxAttempts", "f_177798_"), "()I");
    }

    static jint _maxAttempts(const jobject& obj) {
                
       const auto methodID = methodID__maxAttempts();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID__requiredSuccesses() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "requiredSuccesses", "comp_2226", "requiredSuccesses", "f_177799_"), "()I");
    }

    static jint _requiredSuccesses(const jobject& obj) {
                
       const auto methodID = methodID__requiredSuccesses();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID__skyAccess() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "skyAccess", "comp_2362", "skyAccess", "f_314649_"), "()Z");
    }

    static jboolean _skyAccess(const jobject& obj) {
                
       const auto methodID = methodID__skyAccess();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID__starter() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("m", "function", "comp_2227", "starter", "f_128071_"), "()Ljava/util/function/Consumer;");
    }

    static jobject _starter(const jobject& obj) {
                
       const auto methodID = methodID__starter();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_TEST_TESTFUNCTION_HPP