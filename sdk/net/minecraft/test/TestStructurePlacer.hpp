// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_TEST_TESTSTRUCTUREPLACER_HPP
#define NET_MINECRAFT_TEST_TESTSTRUCTUREPLACER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.test.TestStructurePlacer
 * Remapped: tm
 */
namespace TestStructurePlacer {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("tm", "net/minecraft/gametest/framework/StructureGridSpawner", "net/minecraft/class_9120", "net/minecraft/test/TestStructurePlacer", "net/minecraft/src/C_313361_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.test.TestStructurePlacer#MARGIN_X
    [[maybe_unused]] static jint get_field_MARGIN_X() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "SPACE_BETWEEN_COLUMNS", "field_48497", "MARGIN_X", "f_317034_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.test.TestStructurePlacer#MARGIN_X
    [[maybe_unused]] static void set_field_MARGIN_X(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "SPACE_BETWEEN_COLUMNS", "field_48497", "MARGIN_X", "f_317034_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.test.TestStructurePlacer#MARGIN_Z
    [[maybe_unused]] static jint get_field_MARGIN_Z() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "SPACE_BETWEEN_ROWS", "field_48498", "MARGIN_Z", "f_314807_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.test.TestStructurePlacer#MARGIN_Z
    [[maybe_unused]] static void set_field_MARGIN_Z(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "SPACE_BETWEEN_ROWS", "field_48498", "MARGIN_Z", "f_314807_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.test.TestStructurePlacer#testsPerRow
    static jint get_field_testsPerRow(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "testsPerRow", "field_48499", "testsPerRow", "f_314071_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.test.TestStructurePlacer#testsPerRow
    static void set_field_testsPerRow(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "testsPerRow", "field_48499", "testsPerRow", "f_314071_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.test.TestStructurePlacer#testsInCurrentRow
    static jint get_field_testsInCurrentRow(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "currentRowCount", "field_48500", "testsInCurrentRow", "f_315917_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.test.TestStructurePlacer#testsInCurrentRow
    static void set_field_testsInCurrentRow(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "currentRowCount", "field_48500", "testsInCurrentRow", "f_315917_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.test.TestStructurePlacer#box
    static jobject get_field_box(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "rowBounds", "field_48501", "box", "f_316053_"), "Lewx;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.test.TestStructurePlacer#box
    static void set_field_box(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "rowBounds", "field_48501", "box", "f_316053_"), "Lewx;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.test.TestStructurePlacer#mutablePos
    static jobject get_field_mutablePos(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "nextTestNorthWestCorner", "field_48502", "mutablePos", "f_317117_"), "Ljd$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.test.TestStructurePlacer#mutablePos
    static void set_field_mutablePos(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "nextTestNorthWestCorner", "field_48502", "mutablePos", "f_317117_"), "Ljd$a;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.test.TestStructurePlacer#origin
    static jobject get_field_origin(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "firstTestNorthWestCorner", "field_48503", "origin", "f_315928_"), "Ljd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.test.TestStructurePlacer#origin
    static void set_field_origin(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "firstTestNorthWestCorner", "field_48503", "origin", "f_315928_"), "Ljd;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.test.TestStructurePlacer#clearBeforeBatch
    static jboolean get_field_clearBeforeBatch(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "clearOnBatch", "field_52281", "clearBeforeBatch", "f_337624_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.test.TestStructurePlacer#clearBeforeBatch
    static void set_field_clearBeforeBatch(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "clearOnBatch", "field_52281", "clearBeforeBatch", "f_337624_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.test.TestStructurePlacer#maxX
    static jfloat get_field_maxX(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "maxX", "field_52282", "maxX", "f_337516_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.test.TestStructurePlacer#maxX
    static void set_field_maxX(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "maxX", "field_52282", "maxX", "f_337516_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.test.TestStructurePlacer#statesToClear
    static jobject get_field_statesToClear(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "testInLastBatch", "field_52283", "statesToClear", "f_337477_"), "Ljava/util/Collection;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.test.TestStructurePlacer#statesToClear
    static void set_field_statesToClear(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "testInLastBatch", "field_52283", "statesToClear", "f_337477_"), "Ljava/util/Collection;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_onBatch() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onBatchStart", "method_61098", "onBatch", "m_339414_"), "(Laqu;)V");
    }

    static void onBatch(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onBatch();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_spawnStructure() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("spawnStructure", "spawnStructure", "spawnStructure", "spawnStructure", "m_321592_"), "(Lsx;)Ljava/util/Optional;");
    }

    static jobject spawnStructure(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_spawnStructure();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_TEST_TESTSTRUCTUREPLACER_HPP