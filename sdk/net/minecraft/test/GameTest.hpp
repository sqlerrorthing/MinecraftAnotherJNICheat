// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_TEST_GAMETEST_HPP
#define NET_MINECRAFT_TEST_GAMETEST_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.test.GameTest
 * Remapped: so
 */
namespace GameTest {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("so", "net/minecraft/gametest/framework/GameTest", "net/minecraft/class_6302", "net/minecraft/test/GameTest", "net/minecraft/src/C_141819_"));
        }
        return cachedClass;
    };

    static jmethodID methodID_tickLimit() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "timeoutTicks", "method_35932", "tickLimit", "m_177042_"), "()I");
    }

    static jint tickLimit(const jobject& obj) {
                
       const auto methodID = methodID_tickLimit();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_batchId() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "batch", "method_35933", "batchId", "m_177043_"), "()Ljava/lang/String;");
    }

    static jobject batchId(const jobject& obj) {
                
       const auto methodID = methodID_batchId();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_skyAccess() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "skyAccess", "method_57098", "skyAccess", "m_319580_"), "()Z");
    }

    static jboolean skyAccess(const jobject& obj) {
                
       const auto methodID = methodID_skyAccess();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_rotation() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "rotationSteps", "method_35934", "rotation", "m_177044_"), "()I");
    }

    static jint rotation(const jobject& obj) {
                
       const auto methodID = methodID_rotation();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_required() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "required", "method_35935", "required", "m_177045_"), "()Z");
    }

    static jboolean required(const jobject& obj) {
                
       const auto methodID = methodID_required();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_manualOnly() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "manualOnly", "method_57962", "manualOnly", "m_322475_"), "()Z");
    }

    static jboolean manualOnly(const jobject& obj) {
                
       const auto methodID = methodID_manualOnly();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_templateName() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "template", "method_35936", "templateName", "m_177046_"), "()Ljava/lang/String;");
    }

    static jobject templateName(const jobject& obj) {
                
       const auto methodID = methodID_templateName();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_duration() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "setupTicks", "method_35937", "duration", "m_177047_"), "()J");
    }

    static jlong duration(const jobject& obj) {
                
       const auto methodID = methodID_duration();
       return MinecraftSDK::env->CallLongMethod(obj, methodID);
    };
    
    static jmethodID methodID_maxAttempts() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "attempts", "method_35938", "maxAttempts", "m_177048_"), "()I");
    }

    static jint maxAttempts(const jobject& obj) {
                
       const auto methodID = methodID_maxAttempts();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_requiredSuccesses() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "requiredSuccesses", "method_35939", "requiredSuccesses", "m_177049_"), "()I");
    }

    static jint requiredSuccesses(const jobject& obj) {
                
       const auto methodID = methodID_requiredSuccesses();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_TEST_GAMETEST_HPP