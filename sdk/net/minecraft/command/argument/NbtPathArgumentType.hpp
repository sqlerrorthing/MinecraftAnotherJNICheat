// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_COMMAND_ARGUMENT_NBTPATHARGUMENTTYPE_HPP
#define NET_MINECRAFT_COMMAND_ARGUMENT_NBTPATHARGUMENTTYPE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.command.argument.NbtPathArgumentType
 * Remapped: fl
 */
namespace NbtPathArgumentType {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("fl", "net/minecraft/commands/arguments/NbtPathArgument", "net/minecraft/class_2203", "net/minecraft/command/argument/NbtPathArgumentType", "net/minecraft/src/C_3685_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.command.argument.NbtPathArgumentType#EXAMPLES
    [[maybe_unused]] static jobject get_field_EXAMPLES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "EXAMPLES", "field_9898", "EXAMPLES", "f_99484_"), "Ljava/util/Collection;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.command.argument.NbtPathArgumentType#EXAMPLES
    [[maybe_unused]] static void set_field_EXAMPLES(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "EXAMPLES", "field_9898", "EXAMPLES", "f_99484_"), "Ljava/util/Collection;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.command.argument.NbtPathArgumentType#INVALID_PATH_NODE_EXCEPTION
    [[maybe_unused]] static jobject get_field_INVALID_PATH_NODE_EXCEPTION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "ERROR_INVALID_NODE", "field_9900", "INVALID_PATH_NODE_EXCEPTION", "f_99482_"), "Lcom/mojang/brigadier/exceptions/SimpleCommandExceptionType;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.command.argument.NbtPathArgumentType#INVALID_PATH_NODE_EXCEPTION
    [[maybe_unused]] static void set_field_INVALID_PATH_NODE_EXCEPTION(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "ERROR_INVALID_NODE", "field_9900", "INVALID_PATH_NODE_EXCEPTION", "f_99482_"), "Lcom/mojang/brigadier/exceptions/SimpleCommandExceptionType;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.command.argument.NbtPathArgumentType#TOO_DEEP_EXCEPTION
    [[maybe_unused]] static jobject get_field_TOO_DEEP_EXCEPTION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ERROR_DATA_TOO_DEEP", "field_41706", "TOO_DEEP_EXCEPTION", "f_263133_"), "Lcom/mojang/brigadier/exceptions/SimpleCommandExceptionType;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.command.argument.NbtPathArgumentType#TOO_DEEP_EXCEPTION
    [[maybe_unused]] static void set_field_TOO_DEEP_EXCEPTION(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ERROR_DATA_TOO_DEEP", "field_41706", "TOO_DEEP_EXCEPTION", "f_263133_"), "Lcom/mojang/brigadier/exceptions/SimpleCommandExceptionType;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.command.argument.NbtPathArgumentType#NOTHING_FOUND_EXCEPTION
    [[maybe_unused]] static jobject get_field_NOTHING_FOUND_EXCEPTION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "ERROR_NOTHING_FOUND", "field_9899", "NOTHING_FOUND_EXCEPTION", "f_99483_"), "Lcom/mojang/brigadier/exceptions/DynamicCommandExceptionType;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.command.argument.NbtPathArgumentType#NOTHING_FOUND_EXCEPTION
    [[maybe_unused]] static void set_field_NOTHING_FOUND_EXCEPTION(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "ERROR_NOTHING_FOUND", "field_9899", "NOTHING_FOUND_EXCEPTION", "f_99483_"), "Lcom/mojang/brigadier/exceptions/DynamicCommandExceptionType;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.command.argument.NbtPathArgumentType#EXPECTED_LIST_EXCEPTION
    [[maybe_unused]] static jobject get_field_EXPECTED_LIST_EXCEPTION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "ERROR_EXPECTED_LIST", "field_41708", "EXPECTED_LIST_EXCEPTION", "f_263135_"), "Lcom/mojang/brigadier/exceptions/DynamicCommandExceptionType;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.command.argument.NbtPathArgumentType#EXPECTED_LIST_EXCEPTION
    [[maybe_unused]] static void set_field_EXPECTED_LIST_EXCEPTION(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "ERROR_EXPECTED_LIST", "field_41708", "EXPECTED_LIST_EXCEPTION", "f_263135_"), "Lcom/mojang/brigadier/exceptions/DynamicCommandExceptionType;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.command.argument.NbtPathArgumentType#INVALID_INDEX_EXCEPTION
    [[maybe_unused]] static jobject get_field_INVALID_INDEX_EXCEPTION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "ERROR_INVALID_INDEX", "field_41709", "INVALID_INDEX_EXCEPTION", "f_263128_"), "Lcom/mojang/brigadier/exceptions/DynamicCommandExceptionType;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.command.argument.NbtPathArgumentType#INVALID_INDEX_EXCEPTION
    [[maybe_unused]] static void set_field_INVALID_INDEX_EXCEPTION(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "ERROR_INVALID_INDEX", "field_41709", "INVALID_INDEX_EXCEPTION", "f_263128_"), "Lcom/mojang/brigadier/exceptions/DynamicCommandExceptionType;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.command.argument.NbtPathArgumentType#LEFT_SQUARE_BRACKET
    [[maybe_unused]] static jchar get_field_LEFT_SQUARE_BRACKET() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "INDEX_MATCH_START", "field_32182", "LEFT_SQUARE_BRACKET", "f_169530_"), "C");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticCharField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.command.argument.NbtPathArgumentType#LEFT_SQUARE_BRACKET
    [[maybe_unused]] static void set_field_LEFT_SQUARE_BRACKET(const jchar &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "INDEX_MATCH_START", "field_32182", "LEFT_SQUARE_BRACKET", "f_169530_"), "C");
        return MinecraftSDK::env->SetStaticCharField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.command.argument.NbtPathArgumentType#RIGHT_SQUARE_BRACKET
    [[maybe_unused]] static jchar get_field_RIGHT_SQUARE_BRACKET() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "INDEX_MATCH_END", "field_32183", "RIGHT_SQUARE_BRACKET", "f_169531_"), "C");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticCharField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.command.argument.NbtPathArgumentType#RIGHT_SQUARE_BRACKET
    [[maybe_unused]] static void set_field_RIGHT_SQUARE_BRACKET(const jchar &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "INDEX_MATCH_END", "field_32183", "RIGHT_SQUARE_BRACKET", "f_169531_"), "C");
        return MinecraftSDK::env->SetStaticCharField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.command.argument.NbtPathArgumentType#LEFT_CURLY_BRACKET
    [[maybe_unused]] static jchar get_field_LEFT_CURLY_BRACKET() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "KEY_MATCH_START", "field_32184", "LEFT_CURLY_BRACKET", "f_169532_"), "C");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticCharField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.command.argument.NbtPathArgumentType#LEFT_CURLY_BRACKET
    [[maybe_unused]] static void set_field_LEFT_CURLY_BRACKET(const jchar &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "KEY_MATCH_START", "field_32184", "LEFT_CURLY_BRACKET", "f_169532_"), "C");
        return MinecraftSDK::env->SetStaticCharField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.command.argument.NbtPathArgumentType#RIGHT_CURLY_BRACKET
    [[maybe_unused]] static jchar get_field_RIGHT_CURLY_BRACKET() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "KEY_MATCH_END", "field_32185", "RIGHT_CURLY_BRACKET", "f_169533_"), "C");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticCharField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.command.argument.NbtPathArgumentType#RIGHT_CURLY_BRACKET
    [[maybe_unused]] static void set_field_RIGHT_CURLY_BRACKET(const jchar &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "KEY_MATCH_END", "field_32185", "RIGHT_CURLY_BRACKET", "f_169533_"), "C");
        return MinecraftSDK::env->SetStaticCharField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.command.argument.NbtPathArgumentType#DOUBLE_QUOTE
    [[maybe_unused]] static jchar get_field_DOUBLE_QUOTE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "QUOTED_KEY_START", "field_32186", "DOUBLE_QUOTE", "f_169534_"), "C");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticCharField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.command.argument.NbtPathArgumentType#DOUBLE_QUOTE
    [[maybe_unused]] static void set_field_DOUBLE_QUOTE(const jchar &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "QUOTED_KEY_START", "field_32186", "DOUBLE_QUOTE", "f_169534_"), "C");
        return MinecraftSDK::env->SetStaticCharField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.command.argument.NbtPathArgumentType#SINGLE_QUOTE
    [[maybe_unused]] static jchar get_field_SINGLE_QUOTE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "SINGLE_QUOTED_KEY_START", "field_44920", "SINGLE_QUOTE", "f_287792_"), "C");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticCharField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.command.argument.NbtPathArgumentType#SINGLE_QUOTE
    [[maybe_unused]] static void set_field_SINGLE_QUOTE(const jchar &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "SINGLE_QUOTED_KEY_START", "field_44920", "SINGLE_QUOTE", "f_287792_"), "C");
        return MinecraftSDK::env->SetStaticCharField(clazz, fieldID, value);
    };

    static jmethodID methodID_nbtPath() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "nbtPath", "method_9360", "nbtPath", "m_99487_"), "()Lfl;");
    }

    static jobject nbtPath() {
       const auto clazz = self();
       const auto methodID = methodID_nbtPath();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_getNbtPath() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getPath", "method_9358", "getNbtPath", "m_99498_"), "(Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lfl$g;");
    }

    static jobject getNbtPath(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_getNbtPath();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_parse() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "parse", "method_9362", "parse", "parse"), "(Lcom/mojang/brigadier/StringReader;)Lfl$g;");
    }

    static jobject parse(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_parse();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_parseNode() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "parseNode", "method_9361", "parseNode", "m_99495_"), "(Lcom/mojang/brigadier/StringReader;Z)Lfl$h;");
    }

    static jobject parseNode(const jobject& arg0, const jboolean& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_parseNode();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_readCompoundChildNode() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "readObjectNode", "method_9352", "readCompoundChildNode", "m_99492_"), "(Lcom/mojang/brigadier/StringReader;Ljava/lang/String;)Lfl$h;");
    }

    static jobject readCompoundChildNode(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_readCompoundChildNode();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_readName() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "readUnquotedName", "method_9357", "readName", "m_99508_"), "(Lcom/mojang/brigadier/StringReader;)Ljava/lang/String;");
    }

    static jobject readName(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_readName();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getExamples() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("getExamples", "getExamples", "", "", "getExamples"), "()Ljava/util/Collection;");
    }

    static jobject getExamples(const jobject& obj) {
                
       const auto methodID = methodID_getExamples();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_isNameCharacter() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "isAllowedInUnquotedName", "method_9355", "isNameCharacter", "m_99488_"), "(C)Z");
    }

    static jboolean isNameCharacter(const jchar& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_isNameCharacter();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getPredicate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "createTagPredicate", "method_9359", "getPredicate", "m_99510_"), "(Lub;)Ljava/util/function/Predicate;");
    }

    static jobject getPredicate(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getPredicate();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_COMMAND_ARGUMENT_NBTPATHARGUMENTTYPE_HPP