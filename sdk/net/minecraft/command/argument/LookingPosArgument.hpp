// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_COMMAND_ARGUMENT_LOOKINGPOSARGUMENT_HPP
#define NET_MINECRAFT_COMMAND_ARGUMENT_LOOKINGPOSARGUMENT_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.command.argument.LookingPosArgument
 * Remapped: gs
 */
namespace LookingPosArgument {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("gs", "net/minecraft/commands/arguments/coordinates/LocalCoordinates", "net/minecraft/class_2268", "net/minecraft/command/argument/LookingPosArgument", "net/minecraft/src/C_4576_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.command.argument.LookingPosArgument#CARET
    [[maybe_unused]] static jchar get_field_CARET() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "PREFIX_LOCAL_COORDINATE", "field_32941", "CARET", "f_174681_"), "C");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticCharField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.command.argument.LookingPosArgument#CARET
    [[maybe_unused]] static void set_field_CARET(const jchar &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "PREFIX_LOCAL_COORDINATE", "field_32941", "CARET", "f_174681_"), "C");
        return MinecraftSDK::env->SetStaticCharField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.command.argument.LookingPosArgument#x
    static jdouble get_field_x(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "left", "field_10714", "x", "f_119898_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.command.argument.LookingPosArgument#x
    static void set_field_x(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "left", "field_10714", "x", "f_119898_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.command.argument.LookingPosArgument#y
    static jdouble get_field_y(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "up", "field_10713", "y", "f_119899_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.command.argument.LookingPosArgument#y
    static void set_field_y(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "up", "field_10713", "y", "f_119899_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.command.argument.LookingPosArgument#z
    static jdouble get_field_z(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "forwards", "field_10712", "z", "f_119900_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.command.argument.LookingPosArgument#z
    static void set_field_z(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "forwards", "field_10712", "z", "f_119900_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    static jmethodID methodID_toAbsolutePos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getPosition", "method_9708", "toAbsolutePos", "m_6955_"), "(Let;)Lexc;");
    }

    static jobject toAbsolutePos(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_toAbsolutePos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_toAbsoluteRotation() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getRotation", "method_9709", "toAbsoluteRotation", "m_6970_"), "(Let;)Lexb;");
    }

    static jobject toAbsoluteRotation(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_toAbsoluteRotation();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isXRelative() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isXRelative", "method_9705", "isXRelative", "m_6888_"), "()Z");
    }

    static jboolean isXRelative(const jobject& obj) {
                
       const auto methodID = methodID_isXRelative();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isYRelative() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "isYRelative", "method_9706", "isYRelative", "m_6892_"), "()Z");
    }

    static jboolean isYRelative(const jobject& obj) {
                
       const auto methodID = methodID_isYRelative();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isZRelative() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "isZRelative", "method_9707", "isZRelative", "m_6900_"), "()Z");
    }

    static jboolean isZRelative(const jobject& obj) {
                
       const auto methodID = methodID_isZRelative();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_parse() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "parse", "method_9711", "parse", "m_119906_"), "(Lcom/mojang/brigadier/StringReader;)Lgs;");
    }

    static jobject parse(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_parse();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_readCoordinate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "readDouble", "method_9710", "readCoordinate", "m_119908_"), "(Lcom/mojang/brigadier/StringReader;I)D");
    }

    static jdouble readCoordinate(const jobject& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_readCoordinate();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_COMMAND_ARGUMENT_LOOKINGPOSARGUMENT_HPP