// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_COMMAND_ARGUMENT_ENTITYARGUMENTTYPE$SERIALIZER_HPP
#define NET_MINECRAFT_COMMAND_ARGUMENT_ENTITYARGUMENTTYPE$SERIALIZER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.command.argument.EntityArgumentType$Serializer
 * Remapped: fg$a
 */
namespace EntityArgumentType$Serializer {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("fg$a", "net/minecraft/commands/arguments/EntityArgument$Info", "net/minecraft/class_2186$class_2187", "net/minecraft/command/argument/EntityArgumentType$Serializer", "net/minecraft/src/C_3395_$C_213331_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.command.argument.EntityArgumentType$Serializer#SINGLE_FLAG
    [[maybe_unused]] static jbyte get_field_SINGLE_FLAG() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "FLAG_SINGLE", "field_37850", "SINGLE_FLAG", "f_231262_"), "B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticByteField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.command.argument.EntityArgumentType$Serializer#SINGLE_FLAG
    [[maybe_unused]] static void set_field_SINGLE_FLAG(const jbyte &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "FLAG_SINGLE", "field_37850", "SINGLE_FLAG", "f_231262_"), "B");
        return MinecraftSDK::env->SetStaticByteField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.command.argument.EntityArgumentType$Serializer#PLAYERS_ONLY_FLAG
    [[maybe_unused]] static jbyte get_field_PLAYERS_ONLY_FLAG() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "FLAG_PLAYERS_ONLY", "field_37851", "PLAYERS_ONLY_FLAG", "f_231263_"), "B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticByteField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.command.argument.EntityArgumentType$Serializer#PLAYERS_ONLY_FLAG
    [[maybe_unused]] static void set_field_PLAYERS_ONLY_FLAG(const jbyte &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "FLAG_PLAYERS_ONLY", "field_37851", "PLAYERS_ONLY_FLAG", "f_231263_"), "B");
        return MinecraftSDK::env->SetStaticByteField(clazz, fieldID, value);
    };

    static jmethodID methodID_writePacket() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "serializeToNetwork", "method_9320", "writePacket", "m_214155_"), "(Lfg$a$a;Lvw;)V");
    }

    static void writePacket(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_writePacket();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_fromPacket() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "deserializeFromNetwork", "method_9321", "fromPacket", "m_213618_"), "(Lvw;)Lfg$a$a;");
    }

    static jobject fromPacket(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_fromPacket();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_writeJson() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "serializeToJson", "method_9319", "writeJson", "m_213719_"), "(Lfg$a$a;Lcom/google/gson/JsonObject;)V");
    }

    static void writeJson(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_writeJson();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getArgumentTypeProperties() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "unpack", "method_41727", "getArgumentTypeProperties", "m_214163_"), "(Lfg;)Lfg$a$a;");
    }

    static jobject getArgumentTypeProperties(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getArgumentTypeProperties();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_COMMAND_ARGUMENT_ENTITYARGUMENTTYPE$SERIALIZER_HPP