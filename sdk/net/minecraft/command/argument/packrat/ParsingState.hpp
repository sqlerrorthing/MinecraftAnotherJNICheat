// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_COMMAND_ARGUMENT_PACKRAT_PARSINGSTATE_HPP
#define NET_MINECRAFT_COMMAND_ARGUMENT_PACKRAT_PARSINGSTATE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.command.argument.packrat.ParsingState
 * Remapped: bmk
 */
namespace ParsingState {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("bmk", "net/minecraft/util/parsing/packrat/ParseState", "net/minecraft/class_9393", "net/minecraft/command/argument/packrat/ParsingState", "net/minecraft/src/C_313745_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.command.argument.packrat.ParsingState#packrats
    static jobject get_field_packrats(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "ruleCache", "field_49963", "packrats", "f_315699_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.command.argument.packrat.ParsingState#packrats
    static void set_field_packrats(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "ruleCache", "field_49963", "packrats", "f_315699_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.command.argument.packrat.ParsingState#rules
    static jobject get_field_rules(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "dictionary", "field_49964", "rules", "f_315927_"), "Lbmh;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.command.argument.packrat.ParsingState#rules
    static void set_field_rules(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "dictionary", "field_49964", "rules", "f_315927_"), "Lbmh;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.command.argument.packrat.ParsingState#errors
    static jobject get_field_errors(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "errorCollector", "field_49965", "errors", "f_316195_"), "Lbmi;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.command.argument.packrat.ParsingState#errors
    static void set_field_errors(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "errorCollector", "field_49965", "errors", "f_316195_"), "Lbmi;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_getErrors() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "errorCollector", "method_58310", "getErrors", "m_323339_"), "()Lbmi;");
    }

    static jobject getErrors(const jobject& obj) {
                
       const auto methodID = methodID_getErrors();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_startParsing() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "parseTopRule", "method_58312", "startParsing", "m_319664_"), "(Lbmf;)Ljava/util/Optional;");
    }

    static jobject startParsing(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_startParsing();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_parse() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "parse", "method_58316", "parse", "m_324142_"), "(Lbmf;)Ljava/util/Optional;");
    }

    static jobject parse(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_parse();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getCache() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "lookupInCache", "method_58313", "getCache", "m_319809_"), "(Lbmk$b;)Lbmk$a;");
    }

    static jobject getCache(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getCache();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_putCache() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "storeInCache", "method_58314", "putCache", "m_323197_"), "(Lbmk$b;Ljava/util/Optional;)V");
    }

    static void putCache(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_putCache();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getReader() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "input", "method_58315", "getReader", "m_322193_"), "()Ljava/lang/Object;");
    }

    static jobject getReader(const jobject& obj) {
                
       const auto methodID = methodID_getReader();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getCursor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "mark", "method_58317", "getCursor", "m_320129_"), "()I");
    }

    static jint getCursor(const jobject& obj) {
                
       const auto methodID = methodID_getCursor();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_setCursor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "restore", "method_58311", "setCursor", "m_321642_"), "(I)V");
    }

    static void setCursor(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_setCursor();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_COMMAND_ARGUMENT_PACKRAT_PARSINGSTATE_HPP