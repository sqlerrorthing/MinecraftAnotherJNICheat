// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_COMMAND_ARGUMENT_ARGUMENTHELPER_HPP
#define NET_MINECRAFT_COMMAND_ARGUMENT_ARGUMENTHELPER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.command.argument.ArgumentHelper
 * Remapped: iq
 */
namespace ArgumentHelper {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("iq", "net/minecraft/commands/synchronization/ArgumentUtils", "net/minecraft/class_7218", "net/minecraft/command/argument/ArgumentHelper", "net/minecraft/src/C_213454_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.command.argument.ArgumentHelper#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_37975", "LOGGER", "f_235397_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.command.argument.ArgumentHelper#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_37975", "LOGGER", "f_235397_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.command.argument.ArgumentHelper#MIN_FLAG
    [[maybe_unused]] static jbyte get_field_MIN_FLAG() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "NUMBER_FLAG_MIN", "field_37976", "MIN_FLAG", "f_235398_"), "B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticByteField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.command.argument.ArgumentHelper#MIN_FLAG
    [[maybe_unused]] static void set_field_MIN_FLAG(const jbyte &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "NUMBER_FLAG_MIN", "field_37976", "MIN_FLAG", "f_235398_"), "B");
        return MinecraftSDK::env->SetStaticByteField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.command.argument.ArgumentHelper#MAX_FLAG
    [[maybe_unused]] static jbyte get_field_MAX_FLAG() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "NUMBER_FLAG_MAX", "field_37977", "MAX_FLAG", "f_235399_"), "B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticByteField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.command.argument.ArgumentHelper#MAX_FLAG
    [[maybe_unused]] static void set_field_MAX_FLAG(const jbyte &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "NUMBER_FLAG_MAX", "field_37977", "MAX_FLAG", "f_235399_"), "B");
        return MinecraftSDK::env->SetStaticByteField(clazz, fieldID, value);
    };

    static jmethodID methodID_getMinMaxFlag() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "createNumberFlags", "method_41994", "getMinMaxFlag", "m_235427_"), "(ZZ)I");
    }

    static jint getMinMaxFlag(const jboolean& arg0, const jboolean& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_getMinMaxFlag();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_hasMinFlag() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "numberHasMin", "method_41986", "hasMinFlag", "m_235402_"), "(B)Z");
    }

    static jboolean hasMinFlag(const jbyte& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_hasMinFlag();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_hasMaxFlag() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "numberHasMax", "method_41995", "hasMaxFlag", "m_235430_"), "(B)Z");
    }

    static jboolean hasMaxFlag(const jbyte& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_hasMaxFlag();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_writeArgumentProperties() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "serializeCap", "method_41988", "writeArgumentProperties", "m_235407_"), "(Lcom/google/gson/JsonObject;Lio$a;)V");
    }

    static void writeArgumentProperties(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_writeArgumentProperties();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__writeArgumentProperties() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "serializeCap", "method_41989", "writeArgumentProperties", "m_235410_"), "(Lcom/google/gson/JsonObject;Lio;Lio$a;)V");
    }

    static void _writeArgumentProperties(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID__writeArgumentProperties();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_writeArgument() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "serializeArgumentToJson", "method_41987", "writeArgument", "m_235404_"), "(Lcom/google/gson/JsonObject;Lcom/mojang/brigadier/arguments/ArgumentType;)V");
    }

    static void writeArgument(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_writeArgument();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_toJson() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "serializeNodeToJson", "method_41990", "toJson", "m_235414_"), "(Lcom/mojang/brigadier/CommandDispatcher;Lcom/mojang/brigadier/tree/CommandNode;)Lcom/google/gson/JsonObject;");
    }

    static jobject toJson(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_toJson();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_collectUsedArgumentTypes() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "findUsedArgumentTypes", "method_41991", "collectUsedArgumentTypes", "m_235417_"), "(Lcom/mojang/brigadier/tree/CommandNode;)Ljava/util/Set;");
    }

    static jobject collectUsedArgumentTypes(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_collectUsedArgumentTypes();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID__collectUsedArgumentTypes() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "findUsedArgumentTypes", "method_41992", "collectUsedArgumentTypes", "m_235419_"), "(Lcom/mojang/brigadier/tree/CommandNode;Ljava/util/Set;Ljava/util/Set;)V");
    }

    static void _collectUsedArgumentTypes(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID__collectUsedArgumentTypes();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
};

#endif // NET_MINECRAFT_COMMAND_ARGUMENT_ARGUMENTHELPER_HPP