// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_COMMAND_ARGUMENT_ARGUMENTTYPES_HPP
#define NET_MINECRAFT_COMMAND_ARGUMENT_ARGUMENTTYPES_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.command.argument.ArgumentTypes
 * Remapped: ip
 */
namespace ArgumentTypes {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("ip", "net/minecraft/commands/synchronization/ArgumentTypeInfos", "net/minecraft/class_2316", "net/minecraft/command/argument/ArgumentTypes", "net/minecraft/src/C_213453_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.command.argument.ArgumentTypes#CLASS_MAP
    [[maybe_unused]] static jobject get_field_CLASS_MAP() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "BY_CLASS", "field_10921", "CLASS_MAP", "f_235379_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.command.argument.ArgumentTypes#CLASS_MAP
    [[maybe_unused]] static void set_field_CLASS_MAP(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "BY_CLASS", "field_10921", "CLASS_MAP", "f_235379_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_register() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "register", "method_10017", "register", "m_235386_"), "(Ljz;Ljava/lang/String;Ljava/lang/Class;Lio;)Lio;");
    }

    static jobject register(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_register();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID__register() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "bootstrap", "method_10015", "register", "m_235384_"), "(Ljz;)Lio;");
    }

    static jobject _register(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID__register();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_upcast() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "fixClassType", "method_41181", "upcast", "m_235395_"), "(Ljava/lang/Class;)Ljava/lang/Class;");
    }

    static jobject upcast(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_upcast();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_has() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "isClassRecognized", "method_41984", "has", "m_235391_"), "(Ljava/lang/Class;)Z");
    }

    static jboolean has(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_has();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_get() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "byClass", "method_41983", "get", "m_235382_"), "(Lcom/mojang/brigadier/arguments/ArgumentType;)Lio;");
    }

    static jobject get(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_get();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getArgumentTypeProperties() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "unpack", "method_41985", "getArgumentTypeProperties", "m_235393_"), "(Lcom/mojang/brigadier/arguments/ArgumentType;)Lio$a;");
    }

    static jobject getArgumentTypeProperties(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getArgumentTypeProperties();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_COMMAND_ARGUMENT_ARGUMENTTYPES_HPP