// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_COMMAND_FLOATRANGEARGUMENT_HPP
#define NET_MINECRAFT_COMMAND_FLOATRANGEARGUMENT_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.command.FloatRangeArgument
 * Remapped: ek
 */
namespace FloatRangeArgument {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("ek", "net/minecraft/advancements/critereon/WrappedMinMaxBounds", "net/minecraft/class_2152", "net/minecraft/command/FloatRangeArgument", "net/minecraft/src/C_2662_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.command.FloatRangeArgument#min
    static jobject get_field_min(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "min", "comp_1840", "min", "f_75352_"), "Ljava/lang/Float;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.command.FloatRangeArgument#min
    static void set_field_min(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "min", "comp_1840", "min", "f_75352_"), "Ljava/lang/Float;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.command.FloatRangeArgument#max
    static jobject get_field_max(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "max", "comp_1841", "max", "f_75353_"), "Ljava/lang/Float;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.command.FloatRangeArgument#max
    static void set_field_max(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "max", "comp_1841", "max", "f_75353_"), "Ljava/lang/Float;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for static public field net.minecraft.command.FloatRangeArgument#ANY
    [[maybe_unused]] static jobject get_field_ANY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "ANY", "field_9780", "ANY", "f_75350_"), "Lek;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.command.FloatRangeArgument#ANY
    [[maybe_unused]] static void set_field_ANY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "ANY", "field_9780", "ANY", "f_75350_"), "Lek;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.command.FloatRangeArgument#ONLY_INTS_EXCEPTION
    [[maybe_unused]] static jobject get_field_ONLY_INTS_EXCEPTION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ERROR_INTS_ONLY", "field_9781", "ONLY_INTS_EXCEPTION", "f_75351_"), "Lcom/mojang/brigadier/exceptions/SimpleCommandExceptionType;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.command.FloatRangeArgument#ONLY_INTS_EXCEPTION
    [[maybe_unused]] static void set_field_ONLY_INTS_EXCEPTION(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ERROR_INTS_ONLY", "field_9781", "ONLY_INTS_EXCEPTION", "f_75351_"), "Lcom/mojang/brigadier/exceptions/SimpleCommandExceptionType;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_exactly() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "exactly", "method_35401", "exactly", "m_164402_"), "(F)Lek;");
    }

    static jobject exactly(const jfloat& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_exactly();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_between() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "between", "method_35402", "between", "m_164404_"), "(FF)Lek;");
    }

    static jobject between(const jfloat& arg0, const jfloat& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_between();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_atLeast() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "atLeast", "method_35406", "atLeast", "m_164414_"), "(F)Lek;");
    }

    static jobject atLeast(const jfloat& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_atLeast();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_atMost() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "atMost", "method_35408", "atMost", "m_164417_"), "(F)Lek;");
    }

    static jobject atMost(const jfloat& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_atMost();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_isInRange() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "matches", "method_35409", "isInRange", "m_164419_"), "(F)Z");
    }

    static jboolean isInRange(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_isInRange();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isInSquaredRange() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "matchesSqr", "method_35400", "isInSquaredRange", "m_164400_"), "(D)Z");
    }

    static jboolean isInSquaredRange(const jobject& obj, const jdouble& arg0) {
                
       const auto methodID = methodID_isInSquaredRange();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_toJson() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "serializeToJson", "method_35407", "toJson", "m_164416_"), "()Lcom/google/gson/JsonElement;");
    }

    static jobject toJson(const jobject& obj) {
                
       const auto methodID = methodID_toJson();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_fromJson() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "fromJson", "method_35403", "fromJson", "m_164407_"), "(Lcom/google/gson/JsonElement;)Lek;");
    }

    static jobject fromJson(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_fromJson();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_parse() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "fromReader", "method_35404", "parse", "m_164409_"), "(Lcom/mojang/brigadier/StringReader;Z)Lek;");
    }

    static jobject parse(const jobject& arg0, const jboolean& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_parse();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__parse() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "fromReader", "method_9172", "parse", "m_75359_"), "(Lcom/mojang/brigadier/StringReader;ZLjava/util/function/Function;)Lek;");
    }

    static jobject _parse(const jobject& arg0, const jboolean& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID__parse();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_parseFloat() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "readNumber", "method_9176", "parseFloat", "m_75367_"), "(Lcom/mojang/brigadier/StringReader;Z)Ljava/lang/Float;");
    }

    static jobject parseFloat(const jobject& arg0, const jboolean& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_parseFloat();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_peekDigit() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "isAllowedNumber", "method_9173", "peekDigit", "m_75370_"), "(Lcom/mojang/brigadier/StringReader;Z)Z");
    }

    static jboolean peekDigit(const jobject& arg0, const jboolean& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_peekDigit();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_mapFloat() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "optionallyFormat", "method_9174", "mapFloat", "m_75363_"), "(Ljava/lang/Float;Ljava/util/function/Function;)Ljava/lang/Float;");
    }

    static jobject mapFloat(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_mapFloat();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__min() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "min", "comp_1840", "min", "f_75352_"), "()Ljava/lang/Float;");
    }

    static jobject _min(const jobject& obj) {
                
       const auto methodID = methodID__min();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__max() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "max", "comp_1841", "max", "f_75353_"), "()Ljava/lang/Float;");
    }

    static jobject _max(const jobject& obj) {
                
       const auto methodID = methodID__max();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_COMMAND_FLOATRANGEARGUMENT_HPP