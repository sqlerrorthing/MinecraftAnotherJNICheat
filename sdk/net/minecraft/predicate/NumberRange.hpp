// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_PREDICATE_NUMBERRANGE_HPP
#define NET_MINECRAFT_PREDICATE_NUMBERRANGE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.predicate.NumberRange
 * Remapped: dh
 */
namespace NumberRange {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dh", "net/minecraft/advancements/critereon/MinMaxBounds", "net/minecraft/class_2096", "net/minecraft/predicate/NumberRange", "net/minecraft/src/C_1863_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.predicate.NumberRange#EXCEPTION_EMPTY
    [[maybe_unused]] static jobject get_field_EXCEPTION_EMPTY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "ERROR_EMPTY", "field_9700", "EXCEPTION_EMPTY", "f_55297_"), "Lcom/mojang/brigadier/exceptions/SimpleCommandExceptionType;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.predicate.NumberRange#EXCEPTION_EMPTY
    [[maybe_unused]] static void set_field_EXCEPTION_EMPTY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "ERROR_EMPTY", "field_9700", "EXCEPTION_EMPTY", "f_55297_"), "Lcom/mojang/brigadier/exceptions/SimpleCommandExceptionType;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.predicate.NumberRange#EXCEPTION_SWAPPED
    [[maybe_unused]] static jobject get_field_EXCEPTION_SWAPPED() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ERROR_SWAPPED", "field_9701", "EXCEPTION_SWAPPED", "f_55298_"), "Lcom/mojang/brigadier/exceptions/SimpleCommandExceptionType;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.predicate.NumberRange#EXCEPTION_SWAPPED
    [[maybe_unused]] static void set_field_EXCEPTION_SWAPPED(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ERROR_SWAPPED", "field_9701", "EXCEPTION_SWAPPED", "f_55298_"), "Lcom/mojang/brigadier/exceptions/SimpleCommandExceptionType;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_min() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "min", "comp_1805", "min", "m_293284_"), "()Ljava/util/Optional;");
    }

    static jobject min(const jobject& obj) {
                
       const auto methodID = methodID_min();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_max() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "max", "comp_1806", "max", "m_294019_"), "()Ljava/util/Optional;");
    }

    static jobject max(const jobject& obj) {
                
       const auto methodID = methodID_max();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_isDummy() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "isAny", "method_9041", "isDummy", "m_55327_"), "()Z");
    }

    static jboolean isDummy(const jobject& obj) {
                
       const auto methodID = methodID_isDummy();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getConstantValue() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "unwrapPoint", "method_53194", "getConstantValue", "m_294647_"), "()Ljava/util/Optional;");
    }

    static jobject getConstantValue(const jobject& obj) {
                
       const auto methodID = methodID_getConstantValue();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_createCodec() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "createCodec", "method_53191", "createCodec", "m_294160_"), "(Lcom/mojang/serialization/Codec;Ldh$a;)Lcom/mojang/serialization/Codec;");
    }

    static jobject createCodec(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_createCodec();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_parse() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "fromReader", "method_9043", "parse", "m_55313_"), "(Lcom/mojang/brigadier/StringReader;Ldh$b;Ljava/util/function/Function;Ljava/util/function/Supplier;Ljava/util/function/Function;)Ldh;");
    }

    static jobject parse(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4) {
       const auto clazz = self();
       const auto methodID = methodID_parse();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_fromStringReader() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "readNumber", "method_9037", "fromStringReader", "m_55319_"), "(Lcom/mojang/brigadier/StringReader;Ljava/util/function/Function;Ljava/util/function/Supplier;)Ljava/util/Optional;");
    }

    static jobject fromStringReader(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_fromStringReader();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_isNextCharValid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "isAllowedInputChat", "method_9040", "isNextCharValid", "m_55311_"), "(Lcom/mojang/brigadier/StringReader;)Z");
    }

    static jboolean isNextCharValid(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_isNextCharValid();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_PREDICATE_NUMBERRANGE_HPP