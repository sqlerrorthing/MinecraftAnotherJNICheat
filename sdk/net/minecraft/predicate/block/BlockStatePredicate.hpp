// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_PREDICATE_BLOCK_BLOCKSTATEPREDICATE_HPP
#define NET_MINECRAFT_PREDICATE_BLOCK_BLOCKSTATEPREDICATE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.predicate.block.BlockStatePredicate
 * Remapped: dtl
 */
namespace BlockStatePredicate {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dtl", "net/minecraft/world/level/block/state/predicate/BlockStatePredicate", "net/minecraft/class_2715", "net/minecraft/predicate/block/BlockStatePredicate", "net/minecraft/src/C_2078_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.predicate.block.BlockStatePredicate#ANY
    [[maybe_unused]] static jobject get_field_ANY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "ANY", "field_12419", "ANY", "f_61281_"), "Ljava/util/function/Predicate;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.predicate.block.BlockStatePredicate#ANY
    [[maybe_unused]] static void set_field_ANY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "ANY", "field_12419", "ANY", "f_61281_"), "Ljava/util/function/Predicate;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.predicate.block.BlockStatePredicate#manager
    static jobject get_field_manager(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "definition", "field_12420", "manager", "f_61282_"), "Ldtd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.predicate.block.BlockStatePredicate#manager
    static void set_field_manager(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "definition", "field_12420", "manager", "f_61282_"), "Ldtd;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.predicate.block.BlockStatePredicate#propertyTests
    static jobject get_field_propertyTests(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "properties", "field_12421", "propertyTests", "f_61283_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.predicate.block.BlockStatePredicate#propertyTests
    static void set_field_propertyTests(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "properties", "field_12421", "propertyTests", "f_61283_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_forBlock() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "forBlock", "method_11758", "forBlock", "m_61287_"), "(Ldfy;)Ldtl;");
    }

    static jobject forBlock(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_forBlock();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_test() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "test", "method_11760", "test", "test"), "(Ldtc;)Z");
    }

    static jboolean test(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_test();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_testProperty() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "applies", "method_11761", "testProperty", "m_61291_"), "(Ldtc;Lduf;Ljava/util/function/Predicate;)Z");
    }

    static jboolean testProperty(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_testProperty();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_with() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "where", "method_11762", "with", "m_61295_"), "(Lduf;Ljava/util/function/Predicate;)Ldtl;");
    }

    static jobject with(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_with();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_PREDICATE_BLOCK_BLOCKSTATEPREDICATE_HPP