// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_PREDICATE_ENTITY_ENTITYFLAGSPREDICATE_HPP
#define NET_MINECRAFT_PREDICATE_ENTITY_ENTITYFLAGSPREDICATE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.predicate.entity.EntityFlagsPredicate
 * Remapped: bt
 */
namespace EntityFlagsPredicate {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("bt", "net/minecraft/advancements/critereon/EntityFlagsPredicate", "net/minecraft/class_2040", "net/minecraft/predicate/entity/EntityFlagsPredicate", "net/minecraft/src/C_1065_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.predicate.entity.EntityFlagsPredicate#isOnGround
    static jobject get_field_isOnGround(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "isOnGround", "comp_2666", "isOnGround", "f_337406_"), "Ljava/util/Optional;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.predicate.entity.EntityFlagsPredicate#isOnGround
    static void set_field_isOnGround(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "isOnGround", "comp_2666", "isOnGround", "f_337406_"), "Ljava/util/Optional;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.predicate.entity.EntityFlagsPredicate#isOnFire
    static jobject get_field_isOnFire(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "isOnFire", "comp_1756", "isOnFire", "f_33683_"), "Ljava/util/Optional;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.predicate.entity.EntityFlagsPredicate#isOnFire
    static void set_field_isOnFire(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "isOnFire", "comp_1756", "isOnFire", "f_33683_"), "Ljava/util/Optional;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.predicate.entity.EntityFlagsPredicate#isSneaking
    static jobject get_field_isSneaking(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "isCrouching", "comp_1757", "isSneaking", "f_33684_"), "Ljava/util/Optional;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.predicate.entity.EntityFlagsPredicate#isSneaking
    static void set_field_isSneaking(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "isCrouching", "comp_1757", "isSneaking", "f_33684_"), "Ljava/util/Optional;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.predicate.entity.EntityFlagsPredicate#isSprinting
    static jobject get_field_isSprinting(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "isSprinting", "comp_1758", "isSprinting", "f_33685_"), "Ljava/util/Optional;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.predicate.entity.EntityFlagsPredicate#isSprinting
    static void set_field_isSprinting(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "isSprinting", "comp_1758", "isSprinting", "f_33685_"), "Ljava/util/Optional;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.predicate.entity.EntityFlagsPredicate#isSwimming
    static jobject get_field_isSwimming(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "isSwimming", "comp_1759", "isSwimming", "f_33686_"), "Ljava/util/Optional;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.predicate.entity.EntityFlagsPredicate#isSwimming
    static void set_field_isSwimming(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "isSwimming", "comp_1759", "isSwimming", "f_33686_"), "Ljava/util/Optional;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.predicate.entity.EntityFlagsPredicate#isFlying
    static jobject get_field_isFlying(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "isFlying", "comp_2667", "isFlying", "f_336930_"), "Ljava/util/Optional;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.predicate.entity.EntityFlagsPredicate#isFlying
    static void set_field_isFlying(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "isFlying", "comp_2667", "isFlying", "f_336930_"), "Ljava/util/Optional;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.predicate.entity.EntityFlagsPredicate#isBaby
    static jobject get_field_isBaby(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "isBaby", "comp_1760", "isBaby", "f_33687_"), "Ljava/util/Optional;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.predicate.entity.EntityFlagsPredicate#isBaby
    static void set_field_isBaby(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "isBaby", "comp_1760", "isBaby", "f_33687_"), "Ljava/util/Optional;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for static public field net.minecraft.predicate.entity.EntityFlagsPredicate#CODEC
    [[maybe_unused]] static jobject get_field_CODEC() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CODEC", "field_45745", "CODEC", "f_291452_"), "Lcom/mojang/serialization/Codec;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.predicate.entity.EntityFlagsPredicate#CODEC
    [[maybe_unused]] static void set_field_CODEC(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CODEC", "field_45745", "CODEC", "f_291452_"), "Lcom/mojang/serialization/Codec;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_test() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "matches", "method_8892", "test", "m_33696_"), "(Lbsr;)Z");
    }

    static jboolean test(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_test();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__isOnGround() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isOnGround", "comp_2666", "isOnGround", "f_337406_"), "()Ljava/util/Optional;");
    }

    static jobject _isOnGround(const jobject& obj) {
                
       const auto methodID = methodID__isOnGround();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__isOnFire() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "isOnFire", "comp_1756", "isOnFire", "f_33683_"), "()Ljava/util/Optional;");
    }

    static jobject _isOnFire(const jobject& obj) {
                
       const auto methodID = methodID__isOnFire();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__isSneaking() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "isCrouching", "comp_1757", "isSneaking", "f_33684_"), "()Ljava/util/Optional;");
    }

    static jobject _isSneaking(const jobject& obj) {
                
       const auto methodID = methodID__isSneaking();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__isSprinting() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "isSprinting", "comp_1758", "isSprinting", "f_33685_"), "()Ljava/util/Optional;");
    }

    static jobject _isSprinting(const jobject& obj) {
                
       const auto methodID = methodID__isSprinting();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__isSwimming() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "isSwimming", "comp_1759", "isSwimming", "f_33686_"), "()Ljava/util/Optional;");
    }

    static jobject _isSwimming(const jobject& obj) {
                
       const auto methodID = methodID__isSwimming();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__isFlying() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "isFlying", "comp_2667", "isFlying", "f_336930_"), "()Ljava/util/Optional;");
    }

    static jobject _isFlying(const jobject& obj) {
                
       const auto methodID = methodID__isFlying();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__isBaby() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "isBaby", "comp_1760", "isBaby", "f_33687_"), "()Ljava/util/Optional;");
    }

    static jobject _isBaby(const jobject& obj) {
                
       const auto methodID = methodID__isBaby();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_PREDICATE_ENTITY_ENTITYFLAGSPREDICATE_HPP