// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_REALMS_FILEUPLOAD_HPP
#define NET_MINECRAFT_CLIENT_REALMS_FILEUPLOAD_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.realms.FileUpload
 * Remapped: fbw
 */
namespace FileUpload {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("fbw", "com/mojang/realmsclient/client/FileUpload", "net/minecraft/class_4337", "net/minecraft/client/realms/FileUpload", "net/minecraft/src/C_3218_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.client.realms.FileUpload#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_19550", "LOGGER", "f_87057_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.FileUpload#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_19550", "LOGGER", "f_87057_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.FileUpload#MAX_ATTEMPTS
    [[maybe_unused]] static jint get_field_MAX_ATTEMPTS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "MAX_RETRIES", "field_32056", "MAX_ATTEMPTS", "f_167233_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.FileUpload#MAX_ATTEMPTS
    [[maybe_unused]] static void set_field_MAX_ATTEMPTS(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "MAX_RETRIES", "field_32056", "MAX_ATTEMPTS", "f_167233_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.FileUpload#UPLOAD_ENDPOINT
    [[maybe_unused]] static jobject get_field_UPLOAD_ENDPOINT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "UPLOAD_PATH", "field_32057", "UPLOAD_ENDPOINT", "f_167234_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.FileUpload#UPLOAD_ENDPOINT
    [[maybe_unused]] static void set_field_UPLOAD_ENDPOINT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "UPLOAD_PATH", "field_32057", "UPLOAD_ENDPOINT", "f_167234_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.FileUpload#file
    static jobject get_field_file(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "file", "field_19551", "file", "f_87058_"), "Ljava/io/File;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.FileUpload#file
    static void set_field_file(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "file", "field_19551", "file", "f_87058_"), "Ljava/io/File;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.FileUpload#worldId
    static jlong get_field_worldId(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "realmId", "field_19552", "worldId", "f_316031_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.FileUpload#worldId
    static void set_field_worldId(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "realmId", "field_19552", "worldId", "f_316031_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.FileUpload#slotId
    static jint get_field_slotId(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "slotId", "field_19553", "slotId", "f_87060_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.FileUpload#slotId
    static void set_field_slotId(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "slotId", "field_19553", "slotId", "f_87060_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.FileUpload#uploadInfo
    static jobject get_field_uploadInfo(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "uploadInfo", "field_19554", "uploadInfo", "f_87061_"), "Lfdb;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.FileUpload#uploadInfo
    static void set_field_uploadInfo(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "uploadInfo", "field_19554", "uploadInfo", "f_87061_"), "Lfdb;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.FileUpload#sessionId
    static jobject get_field_sessionId(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "sessionId", "field_19555", "sessionId", "f_87062_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.FileUpload#sessionId
    static void set_field_sessionId(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "sessionId", "field_19555", "sessionId", "f_87062_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.FileUpload#username
    static jobject get_field_username(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "username", "field_19556", "username", "f_87063_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.FileUpload#username
    static void set_field_username(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "username", "field_19556", "username", "f_87063_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.FileUpload#clientVersion
    static jobject get_field_clientVersion(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "clientVersion", "field_19557", "clientVersion", "f_87064_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.FileUpload#clientVersion
    static void set_field_clientVersion(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "clientVersion", "field_19557", "clientVersion", "f_87064_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.FileUpload#worldVersion
    static jobject get_field_worldVersion(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "worldVersion", "field_49104", "worldVersion", "f_316268_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.FileUpload#worldVersion
    static void set_field_worldVersion(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "worldVersion", "field_49104", "worldVersion", "f_316268_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.FileUpload#uploadStatus
    static jobject get_field_uploadStatus(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "uploadStatus", "field_19558", "uploadStatus", "f_87065_"), "Lfcc;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.FileUpload#uploadStatus
    static void set_field_uploadStatus(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "uploadStatus", "field_19558", "uploadStatus", "f_87065_"), "Lfcc;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.FileUpload#cancelled
    static jobject get_field_cancelled(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "cancelled", "field_19559", "cancelled", "f_87066_"), "Ljava/util/concurrent/atomic/AtomicBoolean;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.FileUpload#cancelled
    static void set_field_cancelled(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "cancelled", "field_19559", "cancelled", "f_87066_"), "Ljava/util/concurrent/atomic/AtomicBoolean;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.FileUpload#uploadTask
    static jobject get_field_uploadTask(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "uploadTask", "field_19560", "uploadTask", "f_87067_"), "Ljava/util/concurrent/CompletableFuture;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.FileUpload#uploadTask
    static void set_field_uploadTask(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "uploadTask", "field_19560", "uploadTask", "f_87067_"), "Ljava/util/concurrent/CompletableFuture;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.FileUpload#requestConfig
    static jobject get_field_requestConfig(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "requestConfig", "field_19561", "requestConfig", "f_87068_"), "Lorg/apache/http/client/config/RequestConfig;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.FileUpload#requestConfig
    static void set_field_requestConfig(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "requestConfig", "field_19561", "requestConfig", "f_87068_"), "Lorg/apache/http/client/config/RequestConfig;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_upload() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "upload", "method_20973", "upload", "m_87084_"), "(Ljava/util/function/Consumer;)V");
    }

    static void upload(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_upload();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_cancel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "cancel", "method_20970", "cancel", "m_87078_"), "()V");
    }

    static void cancel(const jobject& obj) {
                
       const auto methodID = methodID_cancel();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_requestUpload() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "requestUpload", "method_20971", "requestUpload", "m_87079_"), "(I)Lfet;");
    }

    static jobject requestUpload(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_requestUpload();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_cleanup() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "cleanup", "method_20977", "cleanup", "m_87093_"), "(Lorg/apache/http/client/methods/HttpPost;Lorg/apache/http/impl/client/CloseableHttpClient;)V");
    }

    static void cleanup(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_cleanup();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_setupRequest() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setupRequest", "method_20976", "setupRequest", "m_87091_"), "(Lorg/apache/http/client/methods/HttpPost;)V");
    }

    static void setupRequest(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setupRequest();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_handleResponse() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleResponse", "method_20975", "handleResponse", "m_87088_"), "(Lorg/apache/http/HttpResponse;Lfet$a;)V");
    }

    static void handleResponse(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_handleResponse();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_shouldRetry() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "shouldRetry", "method_20972", "shouldRetry", "m_87081_"), "(JI)Z");
    }

    static jboolean shouldRetry(const jobject& obj, const jlong& arg0, const jint& arg1) {
                
       const auto methodID = methodID_shouldRetry();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_retryUploadAfter() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "retryUploadAfter", "method_20979", "retryUploadAfter", "m_87097_"), "(JI)Lfet;");
    }

    static jobject retryUploadAfter(const jobject& obj, const jlong& arg0, const jint& arg1) {
                
       const auto methodID = methodID_retryUploadAfter();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getRetryDelaySeconds() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getRetryDelaySeconds", "method_20974", "getRetryDelaySeconds", "m_87086_"), "(Lorg/apache/http/HttpResponse;)J");
    }

    static jlong getRetryDelaySeconds(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getRetryDelaySeconds();
       return MinecraftSDK::env->CallLongMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isFinished() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "isFinished", "method_20978", "isFinished", "m_87096_"), "()Z");
    }

    static jboolean isFinished(const jobject& obj) {
                
       const auto methodID = methodID_isFinished();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_REALMS_FILEUPLOAD_HPP