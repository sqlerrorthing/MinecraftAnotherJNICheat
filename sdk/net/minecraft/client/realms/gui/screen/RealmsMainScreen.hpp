// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_REALMS_GUI_SCREEN_REALMSMAINSCREEN_HPP
#define NET_MINECRAFT_CLIENT_REALMS_GUI_SCREEN_REALMSMAINSCREEN_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.realms.gui.screen.RealmsMainScreen
 * Remapped: fbt
 */
namespace RealmsMainScreen {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("fbt", "com/mojang/realmsclient/RealmsMainScreen", "net/minecraft/class_4325", "net/minecraft/client/realms/gui/screen/RealmsMainScreen", "net/minecraft/src/C_3197_"));
        }
        return cachedClass;
    };

    // getter for static default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#INFO_ICON_TEXTURE
    [[maybe_unused]] static jobject get_field_INFO_ICON_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "INFO_SPRITE", "field_45201", "INFO_ICON_TEXTURE", "f_291684_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#INFO_ICON_TEXTURE
    [[maybe_unused]] static void set_field_INFO_ICON_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "INFO_SPRITE", "field_45201", "INFO_ICON_TEXTURE", "f_291684_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#NEW_REALM_ICON_TEXTURE
    [[maybe_unused]] static jobject get_field_NEW_REALM_ICON_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "NEW_REALM_SPRITE", "field_45216", "NEW_REALM_ICON_TEXTURE", "f_290854_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#NEW_REALM_ICON_TEXTURE
    [[maybe_unused]] static void set_field_NEW_REALM_ICON_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "NEW_REALM_SPRITE", "field_45216", "NEW_REALM_ICON_TEXTURE", "f_290854_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#EXPIRED_STATUS_TEXTURE
    [[maybe_unused]] static jobject get_field_EXPIRED_STATUS_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "EXPIRED_SPRITE", "field_45217", "EXPIRED_STATUS_TEXTURE", "f_290924_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#EXPIRED_STATUS_TEXTURE
    [[maybe_unused]] static void set_field_EXPIRED_STATUS_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "EXPIRED_SPRITE", "field_45217", "EXPIRED_STATUS_TEXTURE", "f_290924_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#EXPIRES_SOON_STATUS_TEXTURE
    [[maybe_unused]] static jobject get_field_EXPIRES_SOON_STATUS_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("B", "EXPIRES_SOON_SPRITE", "field_45218", "EXPIRES_SOON_STATUS_TEXTURE", "f_291137_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#EXPIRES_SOON_STATUS_TEXTURE
    [[maybe_unused]] static void set_field_EXPIRES_SOON_STATUS_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("B", "EXPIRES_SOON_SPRITE", "field_45218", "EXPIRES_SOON_STATUS_TEXTURE", "f_291137_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#OPEN_STATUS_TEXTURE
    [[maybe_unused]] static jobject get_field_OPEN_STATUS_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("C", "OPEN_SPRITE", "field_45219", "OPEN_STATUS_TEXTURE", "f_290678_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#OPEN_STATUS_TEXTURE
    [[maybe_unused]] static void set_field_OPEN_STATUS_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("C", "OPEN_SPRITE", "field_45219", "OPEN_STATUS_TEXTURE", "f_290678_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#CLOSED_STATUS_TEXTURE
    [[maybe_unused]] static jobject get_field_CLOSED_STATUS_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("D", "CLOSED_SPRITE", "field_45191", "CLOSED_STATUS_TEXTURE", "f_290414_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#CLOSED_STATUS_TEXTURE
    [[maybe_unused]] static void set_field_CLOSED_STATUS_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("D", "CLOSED_SPRITE", "field_45191", "CLOSED_STATUS_TEXTURE", "f_290414_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#INVITE_ICON_TEXTURE
    [[maybe_unused]] static jobject get_field_INVITE_ICON_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("E", "INVITE_SPRITE", "field_45192", "INVITE_ICON_TEXTURE", "f_290673_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#INVITE_ICON_TEXTURE
    [[maybe_unused]] static void set_field_INVITE_ICON_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("E", "INVITE_SPRITE", "field_45192", "INVITE_ICON_TEXTURE", "f_290673_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#NEWS_ICON_TEXTURE
    [[maybe_unused]] static jobject get_field_NEWS_ICON_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("F", "NEWS_SPRITE", "field_45193", "NEWS_ICON_TEXTURE", "f_291632_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#NEWS_ICON_TEXTURE
    [[maybe_unused]] static void set_field_NEWS_ICON_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("F", "NEWS_SPRITE", "field_45193", "NEWS_ICON_TEXTURE", "f_291632_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("G", "LOGGER", "field_19475", "LOGGER", "f_86257_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("G", "LOGGER", "field_19475", "LOGGER", "f_86257_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#REALMS_TITLE_TEXTURE
    [[maybe_unused]] static jobject get_field_REALMS_TITLE_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("H", "LOGO_LOCATION", "field_45194", "REALMS_TITLE_TEXTURE", "f_86308_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#REALMS_TITLE_TEXTURE
    [[maybe_unused]] static void set_field_REALMS_TITLE_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("H", "LOGO_LOCATION", "field_45194", "REALMS_TITLE_TEXTURE", "f_86308_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#NO_REALMS_TEXTURE
    [[maybe_unused]] static jobject get_field_NO_REALMS_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("I", "NO_REALMS_LOCATION", "field_45195", "NO_REALMS_TEXTURE", "f_291111_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#NO_REALMS_TEXTURE
    [[maybe_unused]] static void set_field_NO_REALMS_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("I", "NO_REALMS_LOCATION", "field_45195", "NO_REALMS_TEXTURE", "f_291111_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#MENU_TEXT
    [[maybe_unused]] static jobject get_field_MENU_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("J", "TITLE", "field_45196", "MENU_TEXT", "f_290532_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#MENU_TEXT
    [[maybe_unused]] static void set_field_MENU_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("J", "TITLE", "field_45196", "MENU_TEXT", "f_290532_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#LOADING_TEXT
    [[maybe_unused]] static jobject get_field_LOADING_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("K", "LOADING_TEXT", "field_45197", "LOADING_TEXT", "f_291739_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#LOADING_TEXT
    [[maybe_unused]] static void set_field_LOADING_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("K", "LOADING_TEXT", "field_45197", "LOADING_TEXT", "f_291739_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#UNINITIALIZED_TEXT
    [[maybe_unused]] static jobject get_field_UNINITIALIZED_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("L", "SERVER_UNITIALIZED_TEXT", "field_26450", "UNINITIALIZED_TEXT", "f_86238_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#UNINITIALIZED_TEXT
    [[maybe_unused]] static void set_field_UNINITIALIZED_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("L", "SERVER_UNITIALIZED_TEXT", "field_26450", "UNINITIALIZED_TEXT", "f_86238_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#EXPIRED_LIST_TEXT
    [[maybe_unused]] static jobject get_field_EXPIRED_LIST_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("M", "SUBSCRIPTION_EXPIRED_TEXT", "field_26451", "EXPIRED_LIST_TEXT", "f_86239_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#EXPIRED_LIST_TEXT
    [[maybe_unused]] static void set_field_EXPIRED_LIST_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("M", "SUBSCRIPTION_EXPIRED_TEXT", "field_26451", "EXPIRED_LIST_TEXT", "f_86239_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#EXPIRED_RENEW_TEXT
    [[maybe_unused]] static jobject get_field_EXPIRED_RENEW_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("N", "SUBSCRIPTION_RENEW_TEXT", "field_26452", "EXPIRED_RENEW_TEXT", "f_86240_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#EXPIRED_RENEW_TEXT
    [[maybe_unused]] static void set_field_EXPIRED_RENEW_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("N", "SUBSCRIPTION_RENEW_TEXT", "field_26452", "EXPIRED_RENEW_TEXT", "f_86240_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#EXPIRED_TRIAL_TEXT
    [[maybe_unused]] static jobject get_field_EXPIRED_TRIAL_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("O", "TRIAL_EXPIRED_TEXT", "field_26453", "EXPIRED_TRIAL_TEXT", "f_86241_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#EXPIRED_TRIAL_TEXT
    [[maybe_unused]] static void set_field_EXPIRED_TRIAL_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("O", "TRIAL_EXPIRED_TEXT", "field_26453", "EXPIRED_TRIAL_TEXT", "f_86241_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#PLAY_TEXT
    [[maybe_unused]] static jobject get_field_PLAY_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("P", "PLAY_TEXT", "field_42859", "PLAY_TEXT", "f_271303_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#PLAY_TEXT
    [[maybe_unused]] static void set_field_PLAY_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("P", "PLAY_TEXT", "field_42859", "PLAY_TEXT", "f_271303_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#LEAVE_TEXT
    [[maybe_unused]] static jobject get_field_LEAVE_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("Q", "LEAVE_SERVER_TEXT", "field_42860", "LEAVE_TEXT", "f_271231_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#LEAVE_TEXT
    [[maybe_unused]] static void set_field_LEAVE_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("Q", "LEAVE_SERVER_TEXT", "field_42860", "LEAVE_TEXT", "f_271231_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#CONFIGURE_TEXT
    [[maybe_unused]] static jobject get_field_CONFIGURE_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("R", "CONFIGURE_SERVER_TEXT", "field_42861", "CONFIGURE_TEXT", "f_271441_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#CONFIGURE_TEXT
    [[maybe_unused]] static void set_field_CONFIGURE_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("R", "CONFIGURE_SERVER_TEXT", "field_42861", "CONFIGURE_TEXT", "f_271441_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#EXPIRED_TEXT
    [[maybe_unused]] static jobject get_field_EXPIRED_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("S", "SERVER_EXPIRED_TOOLTIP", "field_26457", "EXPIRED_TEXT", "f_86245_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#EXPIRED_TEXT
    [[maybe_unused]] static void set_field_EXPIRED_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("S", "SERVER_EXPIRED_TOOLTIP", "field_26457", "EXPIRED_TEXT", "f_86245_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#EXPIRES_SOON_TEXT
    [[maybe_unused]] static jobject get_field_EXPIRES_SOON_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("T", "SERVER_EXPIRES_SOON_TOOLTIP", "field_26458", "EXPIRES_SOON_TEXT", "f_86246_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#EXPIRES_SOON_TEXT
    [[maybe_unused]] static void set_field_EXPIRES_SOON_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("T", "SERVER_EXPIRES_SOON_TOOLTIP", "field_26458", "EXPIRES_SOON_TEXT", "f_86246_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#EXPIRES_IN_A_DAY_TEXT
    [[maybe_unused]] static jobject get_field_EXPIRES_IN_A_DAY_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("U", "SERVER_EXPIRES_IN_DAY_TOOLTIP", "field_26459", "EXPIRES_IN_A_DAY_TEXT", "f_86247_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#EXPIRES_IN_A_DAY_TEXT
    [[maybe_unused]] static void set_field_EXPIRES_IN_A_DAY_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("U", "SERVER_EXPIRES_IN_DAY_TOOLTIP", "field_26459", "EXPIRES_IN_A_DAY_TEXT", "f_86247_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#OPEN_TEXT
    [[maybe_unused]] static jobject get_field_OPEN_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("V", "SERVER_OPEN_TOOLTIP", "field_26460", "OPEN_TEXT", "f_86248_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#OPEN_TEXT
    [[maybe_unused]] static void set_field_OPEN_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("V", "SERVER_OPEN_TOOLTIP", "field_26460", "OPEN_TEXT", "f_86248_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#CLOSED_TEXT
    [[maybe_unused]] static jobject get_field_CLOSED_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("W", "SERVER_CLOSED_TOOLTIP", "field_26461", "CLOSED_TEXT", "f_86249_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#CLOSED_TEXT
    [[maybe_unused]] static void set_field_CLOSED_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("W", "SERVER_CLOSED_TOOLTIP", "field_26461", "CLOSED_TEXT", "f_86249_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#UNINITIALIZED_BUTTON_NARRATION
    [[maybe_unused]] static jobject get_field_UNINITIALIZED_BUTTON_NARRATION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("X", "UNITIALIZED_WORLD_NARRATION", "field_33776", "UNINITIALIZED_BUTTON_NARRATION", "f_167175_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#UNINITIALIZED_BUTTON_NARRATION
    [[maybe_unused]] static void set_field_UNINITIALIZED_BUTTON_NARRATION(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("X", "UNITIALIZED_WORLD_NARRATION", "field_33776", "UNINITIALIZED_BUTTON_NARRATION", "f_167175_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#NO_REALMS_TEXT
    [[maybe_unused]] static jobject get_field_NO_REALMS_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("Y", "NO_REALMS_TEXT", "field_45198", "NO_REALMS_TEXT", "f_290707_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#NO_REALMS_TEXT
    [[maybe_unused]] static void set_field_NO_REALMS_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("Y", "NO_REALMS_TEXT", "field_45198", "NO_REALMS_TEXT", "f_290707_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#NO_PENDING_TOOLTIP
    [[maybe_unused]] static jobject get_field_NO_PENDING_TOOLTIP() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("Z", "NO_PENDING_INVITES", "field_45199", "NO_PENDING_TOOLTIP", "f_291641_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#NO_PENDING_TOOLTIP
    [[maybe_unused]] static void set_field_NO_PENDING_TOOLTIP(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("Z", "NO_PENDING_INVITES", "field_45199", "NO_PENDING_TOOLTIP", "f_291641_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#PENDING_TOOLTIP
    [[maybe_unused]] static jobject get_field_PENDING_TOOLTIP() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aa", "PENDING_INVITES", "field_45200", "PENDING_TOOLTIP", "f_290929_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#PENDING_TOOLTIP
    [[maybe_unused]] static void set_field_PENDING_TOOLTIP(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aa", "PENDING_INVITES", "field_45200", "PENDING_TOOLTIP", "f_290929_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#INCOMPATIBLE_POPUP_TITLE
    [[maybe_unused]] static jobject get_field_INCOMPATIBLE_POPUP_TITLE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ab", "INCOMPATIBLE_POPUP_TITLE", "field_51815", "INCOMPATIBLE_POPUP_TITLE", "f_337281_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#INCOMPATIBLE_POPUP_TITLE
    [[maybe_unused]] static void set_field_INCOMPATIBLE_POPUP_TITLE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ab", "INCOMPATIBLE_POPUP_TITLE", "field_51815", "INCOMPATIBLE_POPUP_TITLE", "f_337281_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#INCOMPATIBLE_RELEASE_TYPE_MESSAGE
    [[maybe_unused]] static jobject get_field_INCOMPATIBLE_RELEASE_TYPE_MESSAGE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ac", "INCOMPATIBLE_RELEASE_TYPE_POPUP_MESSAGE", "field_51816", "INCOMPATIBLE_RELEASE_TYPE_MESSAGE", "f_336991_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#INCOMPATIBLE_RELEASE_TYPE_MESSAGE
    [[maybe_unused]] static void set_field_INCOMPATIBLE_RELEASE_TYPE_MESSAGE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ac", "INCOMPATIBLE_RELEASE_TYPE_POPUP_MESSAGE", "field_51816", "INCOMPATIBLE_RELEASE_TYPE_MESSAGE", "f_336991_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#field_42862
    [[maybe_unused]] static jint get_field_field_42862() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ad", "BUTTON_WIDTH", "field_42862", "field_42862", "f_271378_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#field_42862
    [[maybe_unused]] static void set_field_field_42862(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ad", "BUTTON_WIDTH", "field_42862", "field_42862", "f_271378_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#field_45209
    [[maybe_unused]] static jint get_field_field_45209() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ae", "BUTTON_COLUMNS", "field_45209", "field_45209", "f_290754_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#field_45209
    [[maybe_unused]] static void set_field_field_45209(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ae", "BUTTON_COLUMNS", "field_45209", "field_45209", "f_290754_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#field_45210
    [[maybe_unused]] static jint get_field_field_45210() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("af", "BUTTON_SPACING", "field_45210", "field_45210", "f_291666_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#field_45210
    [[maybe_unused]] static void set_field_field_45210(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("af", "BUTTON_SPACING", "field_45210", "field_45210", "f_291666_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#field_45211
    [[maybe_unused]] static jint get_field_field_45211() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ag", "CONTENT_WIDTH", "field_45211", "field_45211", "f_290880_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#field_45211
    [[maybe_unused]] static void set_field_field_45211(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ag", "CONTENT_WIDTH", "field_45211", "field_45211", "f_290880_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#field_44509
    [[maybe_unused]] static jint get_field_field_44509() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ah", "LOGO_WIDTH", "field_44509", "field_44509", "f_278420_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#field_44509
    [[maybe_unused]] static void set_field_field_44509(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ah", "LOGO_WIDTH", "field_44509", "field_44509", "f_278420_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#field_44510
    [[maybe_unused]] static jint get_field_field_44510() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ai", "LOGO_HEIGHT", "field_44510", "field_44510", "f_278497_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#field_44510
    [[maybe_unused]] static void set_field_field_44510(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ai", "LOGO_HEIGHT", "field_44510", "field_44510", "f_278497_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#field_44511
    [[maybe_unused]] static jint get_field_field_44511() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aj", "LOGO_TEXTURE_WIDTH", "field_44511", "field_44511", "f_278430_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#field_44511
    [[maybe_unused]] static void set_field_field_44511(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aj", "LOGO_TEXTURE_WIDTH", "field_44511", "field_44511", "f_278430_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#field_44512
    [[maybe_unused]] static jint get_field_field_44512() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ak", "LOGO_TEXTURE_HEIGHT", "field_44512", "field_44512", "f_278488_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#field_44512
    [[maybe_unused]] static void set_field_field_44512(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ak", "LOGO_TEXTURE_HEIGHT", "field_44512", "field_44512", "f_278488_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#field_44513
    [[maybe_unused]] static jint get_field_field_44513() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("al", "LOGO_PADDING", "field_44513", "field_44513", "f_278451_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#field_44513
    [[maybe_unused]] static void set_field_field_44513(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("al", "LOGO_PADDING", "field_44513", "field_44513", "f_278451_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#field_44514
    [[maybe_unused]] static jint get_field_field_44514() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("am", "HEADER_HEIGHT", "field_44514", "field_44514", "f_278457_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#field_44514
    [[maybe_unused]] static void set_field_field_44514(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("am", "HEADER_HEIGHT", "field_44514", "field_44514", "f_278457_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#field_45212
    [[maybe_unused]] static jint get_field_field_45212() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("an", "FOOTER_PADDING", "field_45212", "field_45212", "f_290986_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#field_45212
    [[maybe_unused]] static void set_field_field_45212(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("an", "FOOTER_PADDING", "field_45212", "field_45212", "f_290986_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#field_46670
    [[maybe_unused]] static jint get_field_field_46670() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ao", "NEW_REALM_SPRITE_WIDTH", "field_46670", "field_46670", "f_303294_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#field_46670
    [[maybe_unused]] static void set_field_field_46670(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ao", "NEW_REALM_SPRITE_WIDTH", "field_46670", "field_46670", "f_303294_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#field_46671
    [[maybe_unused]] static jint get_field_field_46671() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ap", "NEW_REALM_SPRITE_HEIGHT", "field_46671", "field_46671", "f_303305_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#field_46671
    [[maybe_unused]] static void set_field_field_46671(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ap", "NEW_REALM_SPRITE_HEIGHT", "field_46671", "field_46671", "f_303305_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#field_46215
    [[maybe_unused]] static jint get_field_field_46215() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aq", "ENTRY_WIDTH", "field_46215", "field_46215", "f_301848_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#field_46215
    [[maybe_unused]] static void set_field_field_46215(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aq", "ENTRY_WIDTH", "field_46215", "field_46215", "f_301848_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#field_46216
    [[maybe_unused]] static jint get_field_field_46216() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ar", "ITEM_HEIGHT", "field_46216", "field_46216", "f_301849_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#field_46216
    [[maybe_unused]] static void set_field_field_46216(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ar", "ITEM_HEIGHT", "field_46216", "field_46216", "f_301849_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#gameOnSnapshot
    [[maybe_unused]] static jboolean get_field_gameOnSnapshot() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("as", "SNAPSHOT", "field_46672", "gameOnSnapshot", "f_302464_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticBooleanField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#gameOnSnapshot
    [[maybe_unused]] static void set_field_gameOnSnapshot(const jboolean &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("as", "SNAPSHOT", "field_46672", "gameOnSnapshot", "f_302464_"), "Z");
        return MinecraftSDK::env->SetStaticBooleanField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#showingSnapshotRealms
    [[maybe_unused]] static jboolean get_field_showingSnapshotRealms() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("at", "snapshotToggle", "field_46673", "showingSnapshotRealms", "f_303830_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticBooleanField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#showingSnapshotRealms
    [[maybe_unused]] static void set_field_showingSnapshotRealms(const jboolean &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("at", "snapshotToggle", "field_46673", "showingSnapshotRealms", "f_303830_"), "Z");
        return MinecraftSDK::env->SetStaticBooleanField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#availabilityInfo
    static jobject get_field_availabilityInfo(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("au", "availability", "field_45213", "availabilityInfo", "f_290846_"), "Ljava/util/concurrent/CompletableFuture;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#availabilityInfo
    static void set_field_availabilityInfo(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("au", "availability", "field_45213", "availabilityInfo", "f_290846_"), "Ljava/util/concurrent/CompletableFuture;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#periodicRunnersManager
    static jobject get_field_periodicRunnersManager(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("av", "dataSubscription", "field_45214", "periodicRunnersManager", "f_238705_"), "Lfev$c;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#periodicRunnersManager
    static void set_field_periodicRunnersManager(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("av", "dataSubscription", "field_45214", "periodicRunnersManager", "f_238705_"), "Lfev$c;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#seenNotifications
    static jobject get_field_seenNotifications(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aw", "handledSeenNotifications", "field_42996", "seenNotifications", "f_273876_"), "Ljava/util/Set;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#seenNotifications
    static void set_field_seenNotifications(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aw", "handledSeenNotifications", "field_42996", "seenNotifications", "f_273876_"), "Ljava/util/Set;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#regionsPinged
    [[maybe_unused]] static jboolean get_field_regionsPinged() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ax", "regionsPinged", "field_19464", "regionsPinged", "f_86279_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticBooleanField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#regionsPinged
    [[maybe_unused]] static void set_field_regionsPinged(const jboolean &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ax", "regionsPinged", "field_19464", "regionsPinged", "f_86279_"), "Z");
        return MinecraftSDK::env->SetStaticBooleanField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#rateLimiter
    static jobject get_field_rateLimiter(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("ay", "inviteNarrationLimiter", "field_19477", "rateLimiter", "f_86280_"), "Lcom/google/common/util/concurrent/RateLimiter;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#rateLimiter
    static void set_field_rateLimiter(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("ay", "inviteNarrationLimiter", "field_19477", "rateLimiter", "f_86280_"), "Lcom/google/common/util/concurrent/RateLimiter;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#parent
    static jobject get_field_parent(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("az", "lastScreen", "field_19482", "parent", "f_86282_"), "Lfod;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#parent
    static void set_field_parent(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("az", "lastScreen", "field_19482", "parent", "f_86282_"), "Lfod;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#playButton
    static jobject get_field_playButton(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aA", "playButton", "field_45215", "playButton", "f_86285_"), "Lfim;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#playButton
    static void set_field_playButton(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aA", "playButton", "field_45215", "playButton", "f_86285_"), "Lfim;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#backButton
    static jobject get_field_backButton(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aB", "backButton", "field_19486", "backButton", "f_86286_"), "Lfim;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#backButton
    static void set_field_backButton(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aB", "backButton", "field_19486", "backButton", "f_86286_"), "Lfim;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#renewButton
    static jobject get_field_renewButton(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aC", "renewButton", "field_19487", "renewButton", "f_86287_"), "Lfim;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#renewButton
    static void set_field_renewButton(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aC", "renewButton", "field_19487", "renewButton", "f_86287_"), "Lfim;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#configureButton
    static jobject get_field_configureButton(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aD", "configureButton", "field_19488", "configureButton", "f_86288_"), "Lfim;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#configureButton
    static void set_field_configureButton(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aD", "configureButton", "field_19488", "configureButton", "f_86288_"), "Lfim;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#leaveButton
    static jobject get_field_leaveButton(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aE", "leaveButton", "field_19489", "leaveButton", "f_86289_"), "Lfim;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#leaveButton
    static void set_field_leaveButton(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aE", "leaveButton", "field_19489", "leaveButton", "f_86289_"), "Lfim;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#realmSelectionList
    static jobject get_field_realmSelectionList(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aF", "realmSelectionList", "field_19483", "realmSelectionList", "f_86283_"), "Lfbt$j;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#realmSelectionList
    static void set_field_realmSelectionList(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aF", "realmSelectionList", "field_19483", "realmSelectionList", "f_86283_"), "Lfbt$j;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#serverFilterer
    static jobject get_field_serverFilterer(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aG", "serverList", "field_39681", "serverFilterer", "f_238533_"), "Lfdo;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#serverFilterer
    static void set_field_serverFilterer(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aG", "serverList", "field_39681", "serverFilterer", "f_238533_"), "Lfdo;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#availableSnapshotServers
    static jobject get_field_availableSnapshotServers(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aH", "availableSnapshotServers", "field_46669", "availableSnapshotServers", "f_302288_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#availableSnapshotServers
    static void set_field_availableSnapshotServers(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aH", "availableSnapshotServers", "field_46669", "availableSnapshotServers", "f_302288_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#onlinePlayers
    static jobject get_field_onlinePlayers(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aI", "onlinePlayersPerRealm", "field_52116", "onlinePlayers", "f_337179_"), "Lfcs;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#onlinePlayers
    static void set_field_onlinePlayers(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aI", "onlinePlayersPerRealm", "field_52116", "onlinePlayers", "f_337179_"), "Lfcs;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#trialAvailable
    static jboolean get_field_trialAvailable(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aJ", "trialsAvailable", "field_19500", "trialAvailable", "f_86297_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#trialAvailable
    static void set_field_trialAvailable(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aJ", "trialsAvailable", "field_19500", "trialAvailable", "f_86297_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#newsLink
    static jobject get_field_newsLink(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aK", "newsLink", "field_45203", "newsLink", "f_86259_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#newsLink
    static void set_field_newsLink(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aK", "newsLink", "field_45203", "newsLink", "f_86259_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#lastPlayButtonClickTime
    static jlong get_field_lastPlayButtonClickTime(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aL", "lastClickTime", "field_37267", "lastPlayButtonClickTime", "f_212359_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static default field net.minecraft.client.realms.gui.screen.RealmsMainScreen#lastPlayButtonClickTime
    static void set_field_lastPlayButtonClickTime(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aL", "lastClickTime", "field_37267", "lastPlayButtonClickTime", "f_212359_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#notifications
    static jobject get_field_notifications(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aM", "notifications", "field_42997", "notifications", "f_273903_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#notifications
    static void set_field_notifications(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aM", "notifications", "field_42997", "notifications", "f_273903_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#purchaseButton
    static jobject get_field_purchaseButton(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aN", "addRealmButton", "field_45204", "purchaseButton", "f_291106_"), "Lfim;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#purchaseButton
    static void set_field_purchaseButton(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aN", "addRealmButton", "field_45204", "purchaseButton", "f_291106_"), "Lfim;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#inviteButton
    static jobject get_field_inviteButton(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aO", "pendingInvitesButton", "field_45205", "inviteButton", "f_86269_"), "Lfbt$g;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#inviteButton
    static void set_field_inviteButton(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aO", "pendingInvitesButton", "field_45205", "inviteButton", "f_86269_"), "Lfbt$g;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#newsButton
    static jobject get_field_newsButton(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aP", "newsButton", "field_45206", "newsButton", "f_86270_"), "Lfbt$g;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#newsButton
    static void set_field_newsButton(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aP", "newsButton", "field_45206", "newsButton", "f_86270_"), "Lfbt$g;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#loadStatus
    static jobject get_field_loadStatus(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aQ", "activeLayoutState", "field_45207", "loadStatus", "f_291447_"), "Lfbt$f;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#loadStatus
    static void set_field_loadStatus(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aQ", "activeLayoutState", "field_45207", "loadStatus", "f_291447_"), "Lfbt$f;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#layout
    static jobject get_field_layout(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aR", "layout", "field_45208", "layout", "f_290558_"), "Lflz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsMainScreen#layout
    static void set_field_layout(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aR", "layout", "field_45208", "layout", "f_290558_"), "Lflz;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_init() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aT_", "init", "method_25426", "init", "m_7856_"), "()V");
    }

    static void init(const jobject& obj) {
                
       const auto methodID = methodID_init();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_isSnapshotRealmsEligible() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "isSnapshot", "method_54330", "isSnapshotRealmsEligible", "m_307170_"), "()Z");
    }

    static jboolean isSnapshotRealmsEligible() {
       const auto clazz = self();
       const auto methodID = methodID_isSnapshotRealmsEligible();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID);
    };
    
    static jmethodID methodID_initTabNavigation() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "repositionElements", "method_48640", "initTabNavigation", "m_267719_"), "()V");
    }

    static void initTabNavigation(const jobject& obj) {
                
       const auto methodID = methodID_initTabNavigation();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_close() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "onClose", "method_25419", "close", "m_7379_"), "()V");
    }

    static void close(const jobject& obj) {
                
       const auto methodID = methodID_close();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_updateLoadStatus() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("C", "updateLayout", "method_54320", "updateLoadStatus", "m_304653_"), "()V");
    }

    static void updateLoadStatus(const jobject& obj) {
                
       const auto methodID = methodID_updateLoadStatus();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_onLoadStatusChange() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateLayout", "method_52635", "onLoadStatusChange", "m_293990_"), "(Lfbt$f;)V");
    }

    static void onLoadStatusChange(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onLoadStatusChange();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_makeLayoutFor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "createLayout", "method_52641", "makeLayoutFor", "m_293610_"), "(Lfbt$f;)Lflz;");
    }

    static jobject makeLayoutFor(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_makeLayoutFor();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_makeHeader() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("D", "createHeader", "method_52630", "makeHeader", "m_292856_"), "()Lfma;");
    }

    static jobject makeHeader(const jobject& obj) {
                
       const auto methodID = methodID_makeHeader();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_makeInnerLayout() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "createFooter", "method_52644", "makeInnerLayout", "m_294892_"), "(Lfbt$f;)Lfma;");
    }

    static jobject makeInnerLayout(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_makeInnerLayout();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_makeNoRealmsLayout() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("E", "createNoRealmsContent", "method_52631", "makeNoRealmsLayout", "m_292821_"), "()Lfmd;");
    }

    static jobject makeNoRealmsLayout(const jobject& obj) {
                
       const auto methodID = methodID_makeNoRealmsLayout();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_refreshButtons() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("F", "updateButtonStates", "method_52632", "refreshButtons", "m_86393_"), "()V");
    }

    static void refreshButtons(const jobject& obj) {
                
       const auto methodID = methodID_refreshButtons();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_shouldPlayButtonBeActive() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "shouldPlayButtonBeActive", "method_20874", "shouldPlayButtonBeActive", "m_86562_"), "(Lfcp;)Z");
    }

    static jboolean shouldPlayButtonBeActive(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_shouldPlayButtonBeActive();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_shouldRenewButtonBeActive() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "shouldRenewButtonBeActive", "method_20884", "shouldRenewButtonBeActive", "m_86594_"), "(Lfcp;)Z");
    }

    static jboolean shouldRenewButtonBeActive(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_shouldRenewButtonBeActive();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_shouldConfigureButtonBeActive() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "shouldConfigureButtonBeActive", "method_49285", "shouldConfigureButtonBeActive", "m_86619_"), "(Lfcp;)Z");
    }

    static jboolean shouldConfigureButtonBeActive(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_shouldConfigureButtonBeActive();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_shouldLeaveButtonBeActive() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "shouldLeaveButtonBeActive", "method_49288", "shouldLeaveButtonBeActive", "m_86644_"), "(Lfcp;)Z");
    }

    static jboolean shouldLeaveButtonBeActive(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_shouldLeaveButtonBeActive();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "tick", "method_25393", "tick", "m_86600_"), "()V");
    }

    static void tick(const jobject& obj) {
                
       const auto methodID = methodID_tick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_resetPendingInvitesCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("f", "refreshPendingInvites", "method_53792", "resetPendingInvitesCount", "m_294569_"), "()V");
    }

    static void resetPendingInvitesCount() {
       const auto clazz = self();
       const auto methodID = methodID_resetPendingInvitesCount();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID);
    };
    
    static jmethodID methodID_resetServerList() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("g", "refreshServerList", "method_53793", "resetServerList", "m_294350_"), "()V");
    }

    static void resetServerList() {
       const auto clazz = self();
       const auto methodID = methodID_resetServerList();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID);
    };
    
    static jmethodID methodID_resetPeriodicCheckers() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("G", "debugRefreshDataFetchers", "method_54324", "resetPeriodicCheckers", "m_305162_"), "()V");
    }

    static void resetPeriodicCheckers(const jobject& obj) {
                
       const auto methodID = methodID_resetPeriodicCheckers();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_createPeriodicRunnersManager() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "initDataFetcher", "method_44611", "createPeriodicRunnersManager", "m_86354_"), "(Lfdm;)Lfev$c;");
    }

    static jobject createPeriodicRunnersManager(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_createPeriodicRunnersManager();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_markAsSeen() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "markNotificationsAsSeen", "method_54104", "markAsSeen", "m_305244_"), "(Ljava/util/Collection;)V");
    }

    static void markAsSeen(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_markAsSeen();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_request() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "callRealmsClient", "method_49553", "request", "m_274332_"), "(Lfbt$k;Ljava/util/function/Consumer;)V");
    }

    static void request(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_request();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_refresh() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("J", "refreshListAndLayout", "method_49550", "refresh", "m_274604_"), "()V");
    }

    static void refresh(const jobject& obj) {
                
       const auto methodID = methodID_refresh();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_addNotificationEntry() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addListEntriesForNotification", "method_49551", "addNotificationEntry", "m_307520_"), "(Lfco;)Z");
    }

    static jboolean addNotificationEntry(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addNotificationEntry();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_pingRegions() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("K", "pingRegions", "method_20922", "pingRegions", "m_86327_"), "()V");
    }

    static void pingRegions(const jobject& obj) {
                
       const auto methodID = methodID_pingRegions();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getOwnedNonExpiredWorldIds() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("L", "getOwnedNonExpiredRealmIds", "method_20924", "getOwnedNonExpiredWorldIds", "m_86330_"), "()Ljava/util/List;");
    }

    static jobject getOwnedNonExpiredWorldIds(const jobject& obj) {
                
       const auto methodID = methodID_getOwnedNonExpiredWorldIds();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_onRenew() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "onRenew", "method_20928", "onRenew", "m_193499_"), "(Lfcp;)V");
    }

    static void onRenew(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onRenew();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_configureClicked() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "configureClicked", "method_20903", "configureClicked", "m_86656_"), "(Lfcp;)V");
    }

    static void configureClicked(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_configureClicked();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_leaveClicked() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "leaveClicked", "method_20906", "leaveClicked", "m_86669_"), "(Lfcp;)V");
    }

    static void leaveClicked(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_leaveClicked();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_findServer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("M", "getSelectedServer", "method_38503", "findServer", "m_193481_"), "()Lfcp;");
    }

    static jobject findServer(const jobject& obj) {
                
       const auto methodID = methodID_findServer();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_leaveServer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "leaveServer", "method_24991", "leaveServer", "m_193493_"), "(Lfcp;)V");
    }

    static void leaveServer(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_leaveServer();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_dismissNotification() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "dismissNotification", "method_49557", "dismissNotification", "m_274580_"), "(Ljava/util/UUID;)V");
    }

    static void dismissNotification(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_dismissNotification();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_removeSelection() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "resetScreen", "method_38505", "removeSelection", "m_193498_"), "()V");
    }

    static void removeSelection(const jobject& obj) {
                
       const auto methodID = methodID_removeSelection();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getNarratedTitle() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "getNarrationMessage", "method_25435", "getNarratedTitle", "m_142562_"), "()Lwz;");
    }

    static jobject getNarratedTitle(const jobject& obj) {
                
       const auto methodID = methodID_getNarratedTitle();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_render() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "render", "method_25394", "render", "m_88315_"), "(Lfhz;IIF)V");
    }

    static void render(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2, const jfloat& arg3) {
                
       const auto methodID = methodID_render();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_showBuyRealmsScreen() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("N", "openTrialAvailablePopup", "method_53791", "showBuyRealmsScreen", "m_294891_"), "()V");
    }

    static void showBuyRealmsScreen(const jobject& obj) {
                
       const auto methodID = methodID_showBuyRealmsScreen();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_play() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "play", "method_20853", "play", "m_86515_"), "(Lfcp;Lfod;)V");
    }

    static void play(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_play();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__play() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "play", "method_54327", "play", "m_307704_"), "(Lfcp;Lfod;Z)V");
    }

    static void _play(const jobject& arg0, const jobject& arg1, const jboolean& arg2) {
       const auto clazz = self();
       const auto methodID = methodID__play();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_showCompatibilityScreen() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "confirmToPlay", "method_54326", "showCompatibilityScreen", "m_306234_"), "(Lfcp;Lfod;Lwz;Lwz;Lwz;)V");
    }

    static void showCompatibilityScreen(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4) {
       const auto clazz = self();
       const auto methodID = methodID_showCompatibilityScreen();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_showNeedsUpgradeScreen() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "upgradeRealmAndPlay", "method_60861", "showNeedsUpgradeScreen", "m_339620_"), "(Lfcp;Lfod;)V");
    }

    static void showNeedsUpgradeScreen(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_showNeedsUpgradeScreen();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getVersionText() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getVersionComponent", "method_54562", "getVersionText", "m_305395_"), "(Ljava/lang/String;Z)Lwz;");
    }

    static jobject getVersionText(const jobject& arg0, const jboolean& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_getVersionText();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__getVersionText() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getVersionComponent", "method_54561", "getVersionText", "m_305180_"), "(Ljava/lang/String;I)Lwz;");
    }

    static jobject _getVersionText(const jobject& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID__getVersionText();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isSelfOwnedServer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("i", "isSelfOwnedServer", "method_20909", "isSelfOwnedServer", "m_86683_"), "(Lfcp;)Z");
    }

    static jboolean isSelfOwnedServer(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_isSelfOwnedServer();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_isOwnedNotExpired() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "isSelfOwnedNonExpiredServer", "method_25001", "isOwnedNotExpired", "m_86688_"), "(Lfcp;)Z");
    }

    static jboolean isOwnedNotExpired(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isOwnedNotExpired();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_drawEnvironmentText() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "renderEnvironment", "method_52637", "drawEnvironmentText", "m_294361_"), "(Lfhz;Ljava/lang/String;I)V");
    }

    static void drawEnvironmentText(const jobject& obj, const jobject& arg0, const jobject& arg1, const jint& arg2) {
                
       const auto methodID = methodID_drawEnvironmentText();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_REALMS_GUI_SCREEN_REALMSMAINSCREEN_HPP