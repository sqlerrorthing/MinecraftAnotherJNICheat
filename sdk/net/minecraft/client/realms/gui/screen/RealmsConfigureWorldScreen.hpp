// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_REALMS_GUI_SCREEN_REALMSCONFIGUREWORLDSCREEN_HPP
#define NET_MINECRAFT_CLIENT_REALMS_GUI_SCREEN_REALMSCONFIGUREWORLDSCREEN_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen
 * Remapped: fdx
 */
namespace RealmsConfigureWorldScreen {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("fdx", "com/mojang/realmsclient/gui/screens/RealmsConfigureWorldScreen", "net/minecraft/class_4388", "net/minecraft/client/realms/gui/screen/RealmsConfigureWorldScreen", "net/minecraft/src/C_3292_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#EXPIRED_STATUS_TEXTURE
    [[maybe_unused]] static jobject get_field_EXPIRED_STATUS_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "EXPIRED_SPRITE", "field_22690", "EXPIRED_STATUS_TEXTURE", "f_291258_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#EXPIRED_STATUS_TEXTURE
    [[maybe_unused]] static void set_field_EXPIRED_STATUS_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "EXPIRED_SPRITE", "field_22690", "EXPIRED_STATUS_TEXTURE", "f_291258_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#EXPIRES_SOON_STATUS_TEXTURE
    [[maybe_unused]] static jobject get_field_EXPIRES_SOON_STATUS_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "EXPIRES_SOON_SPRITE", "field_22691", "EXPIRES_SOON_STATUS_TEXTURE", "f_290373_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#EXPIRES_SOON_STATUS_TEXTURE
    [[maybe_unused]] static void set_field_EXPIRES_SOON_STATUS_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "EXPIRES_SOON_SPRITE", "field_22691", "EXPIRES_SOON_STATUS_TEXTURE", "f_290373_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#OPEN_STATUS_TEXTURE
    [[maybe_unused]] static jobject get_field_OPEN_STATUS_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "OPEN_SPRITE", "field_45240", "OPEN_STATUS_TEXTURE", "f_291004_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#OPEN_STATUS_TEXTURE
    [[maybe_unused]] static void set_field_OPEN_STATUS_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "OPEN_SPRITE", "field_45240", "OPEN_STATUS_TEXTURE", "f_291004_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#CLOSED_STATUS_TEXTURE
    [[maybe_unused]] static jobject get_field_CLOSED_STATUS_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("B", "CLOSED_SPRITE", "field_45241", "CLOSED_STATUS_TEXTURE", "f_291789_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#CLOSED_STATUS_TEXTURE
    [[maybe_unused]] static void set_field_CLOSED_STATUS_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("B", "CLOSED_SPRITE", "field_45241", "CLOSED_STATUS_TEXTURE", "f_291789_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("C", "LOGGER", "field_19790", "LOGGER", "f_88395_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("C", "LOGGER", "field_19790", "LOGGER", "f_88395_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#WORLDS_TITLE
    [[maybe_unused]] static jobject get_field_WORLDS_TITLE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("D", "WORLD_LIST_TITLE", "field_26479", "WORLDS_TITLE", "f_167372_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#WORLDS_TITLE
    [[maybe_unused]] static void set_field_WORLDS_TITLE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("D", "WORLD_LIST_TITLE", "field_26479", "WORLDS_TITLE", "f_167372_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#CONFIGURE_REALM_TITLE
    [[maybe_unused]] static jobject get_field_CONFIGURE_REALM_TITLE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("E", "TITLE", "field_26480", "CONFIGURE_REALM_TITLE", "f_88400_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#CONFIGURE_REALM_TITLE
    [[maybe_unused]] static void set_field_CONFIGURE_REALM_TITLE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("E", "TITLE", "field_26480", "CONFIGURE_REALM_TITLE", "f_88400_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#EXPIRED_TEXT
    [[maybe_unused]] static jobject get_field_EXPIRED_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("F", "SERVER_EXPIRED_TOOLTIP", "field_26482", "EXPIRED_TEXT", "f_88403_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#EXPIRED_TEXT
    [[maybe_unused]] static void set_field_EXPIRED_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("F", "SERVER_EXPIRED_TOOLTIP", "field_26482", "EXPIRED_TEXT", "f_88403_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#EXPIRES_SOON_TEXT
    [[maybe_unused]] static jobject get_field_EXPIRES_SOON_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("G", "SERVER_EXPIRING_SOON_TOOLTIP", "field_26483", "EXPIRES_SOON_TEXT", "f_88404_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#EXPIRES_SOON_TEXT
    [[maybe_unused]] static void set_field_EXPIRES_SOON_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("G", "SERVER_EXPIRING_SOON_TOOLTIP", "field_26483", "EXPIRES_SOON_TEXT", "f_88404_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#EXPIRES_IN_A_DAY_TEXT
    [[maybe_unused]] static jobject get_field_EXPIRES_IN_A_DAY_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("H", "SERVER_EXPIRING_IN_DAY_TOOLTIP", "field_26484", "EXPIRES_IN_A_DAY_TEXT", "f_88405_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#EXPIRES_IN_A_DAY_TEXT
    [[maybe_unused]] static void set_field_EXPIRES_IN_A_DAY_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("H", "SERVER_EXPIRING_IN_DAY_TOOLTIP", "field_26484", "EXPIRES_IN_A_DAY_TEXT", "f_88405_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#OPEN_TEXT
    [[maybe_unused]] static jobject get_field_OPEN_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("I", "SERVER_OPEN_TOOLTIP", "field_26485", "OPEN_TEXT", "f_88406_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#OPEN_TEXT
    [[maybe_unused]] static void set_field_OPEN_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("I", "SERVER_OPEN_TOOLTIP", "field_26485", "OPEN_TEXT", "f_88406_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#CLOSED_TEXT
    [[maybe_unused]] static jobject get_field_CLOSED_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("J", "SERVER_CLOSED_TOOLTIP", "field_26486", "CLOSED_TEXT", "f_88407_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#CLOSED_TEXT
    [[maybe_unused]] static void set_field_CLOSED_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("J", "SERVER_CLOSED_TOOLTIP", "field_26486", "CLOSED_TEXT", "f_88407_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#field_32121
    [[maybe_unused]] static jint get_field_field_32121() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("K", "DEFAULT_BUTTON_WIDTH", "field_32121", "field_32121", "f_167373_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#field_32121
    [[maybe_unused]] static void set_field_field_32121(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("K", "DEFAULT_BUTTON_WIDTH", "field_32121", "field_32121", "f_167373_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#field_32122
    [[maybe_unused]] static jint get_field_field_32122() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("L", "DEFAULT_BUTTON_OFFSET", "field_32122", "field_32122", "f_167374_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#field_32122
    [[maybe_unused]] static void set_field_field_32122(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("L", "DEFAULT_BUTTON_OFFSET", "field_32122", "field_32122", "f_167374_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#tooltip
    static jobject get_field_tooltip(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("M", "toolTip", "field_19791", "tooltip", "f_88408_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#tooltip
    static void set_field_tooltip(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("M", "toolTip", "field_19791", "tooltip", "f_88408_"), "Lwz;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#parent
    static jobject get_field_parent(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("N", "lastScreen", "field_19792", "parent", "f_88380_"), "Lfbt;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#parent
    static void set_field_parent(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("N", "lastScreen", "field_19792", "parent", "f_88380_"), "Lfbt;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#server
    static jobject get_field_server(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("O", "serverData", "field_20493", "server", "f_88381_"), "Lfcp;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#server
    static void set_field_server(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("O", "serverData", "field_20493", "server", "f_88381_"), "Lfcp;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#serverId
    static jlong get_field_serverId(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("P", "serverId", "field_19794", "serverId", "f_88382_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#serverId
    static void set_field_serverId(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("P", "serverId", "field_19794", "serverId", "f_88382_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#left_x
    static jint get_field_left_x(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("Q", "leftX", "field_19795", "left_x", "f_88383_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#left_x
    static void set_field_left_x(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("Q", "leftX", "field_19795", "left_x", "f_88383_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#right_x
    static jint get_field_right_x(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("R", "rightX", "field_19796", "right_x", "f_88384_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#right_x
    static void set_field_right_x(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("R", "rightX", "field_19796", "right_x", "f_88384_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#playersButton
    static jobject get_field_playersButton(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("S", "playersButton", "field_19799", "playersButton", "f_88385_"), "Lfim;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#playersButton
    static void set_field_playersButton(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("S", "playersButton", "field_19799", "playersButton", "f_88385_"), "Lfim;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#settingsButton
    static jobject get_field_settingsButton(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("T", "settingsButton", "field_19800", "settingsButton", "f_88386_"), "Lfim;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#settingsButton
    static void set_field_settingsButton(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("T", "settingsButton", "field_19800", "settingsButton", "f_88386_"), "Lfim;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#subscriptionButton
    static jobject get_field_subscriptionButton(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("U", "subscriptionButton", "field_19801", "subscriptionButton", "f_88387_"), "Lfim;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#subscriptionButton
    static void set_field_subscriptionButton(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("U", "subscriptionButton", "field_19801", "subscriptionButton", "f_88387_"), "Lfim;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#optionsButton
    static jobject get_field_optionsButton(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("V", "optionsButton", "field_19802", "optionsButton", "f_88388_"), "Lfim;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#optionsButton
    static void set_field_optionsButton(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("V", "optionsButton", "field_19802", "optionsButton", "f_88388_"), "Lfim;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#backupButton
    static jobject get_field_backupButton(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("W", "backupButton", "field_19803", "backupButton", "f_88389_"), "Lfim;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#backupButton
    static void set_field_backupButton(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("W", "backupButton", "field_19803", "backupButton", "f_88389_"), "Lfim;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#resetWorldButton
    static jobject get_field_resetWorldButton(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("X", "resetWorldButton", "field_19804", "resetWorldButton", "f_88390_"), "Lfim;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#resetWorldButton
    static void set_field_resetWorldButton(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("X", "resetWorldButton", "field_19804", "resetWorldButton", "f_88390_"), "Lfim;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#switchMinigameButton
    static jobject get_field_switchMinigameButton(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("Y", "switchMinigameButton", "field_19805", "switchMinigameButton", "f_88391_"), "Lfim;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#switchMinigameButton
    static void set_field_switchMinigameButton(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("Y", "switchMinigameButton", "field_19805", "switchMinigameButton", "f_88391_"), "Lfim;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#stateChanged
    static jboolean get_field_stateChanged(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("Z", "stateChanged", "field_19806", "stateChanged", "f_88392_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#stateChanged
    static void set_field_stateChanged(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("Z", "stateChanged", "field_19806", "stateChanged", "f_88392_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#slotButtons
    static jobject get_field_slotButtons(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aa", "slotButtonList", "field_33777", "slotButtons", "f_167375_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen#slotButtons
    static void set_field_slotButtons(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("aa", "slotButtonList", "field_33777", "slotButtons", "f_167375_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_init() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aT_", "init", "method_25426", "init", "m_7856_"), "()V");
    }

    static void init(const jobject& obj) {
                
       const auto methodID = methodID_init();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_addSlotButton() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addSlotButton", "method_21199", "addSlotButton", "m_167385_"), "(I)Lfdp;");
    }

    static jobject addSlotButton(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_addSlotButton();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_buttonLeft() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "leftButton", "method_21220", "buttonLeft", "m_88463_"), "(I)I");
    }

    static jint buttonLeft(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_buttonLeft();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_buttonCenter() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "centerButton", "method_21200", "buttonCenter", "m_88465_"), "(II)I");
    }

    static jint buttonCenter(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_buttonCenter();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_render() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "render", "method_25394", "render", "m_88315_"), "(Lfhz;IIF)V");
    }

    static void render(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2, const jfloat& arg3) {
                
       const auto methodID = methodID_render();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_frame() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "frame", "method_21228", "frame", "m_88487_"), "(I)I");
    }

    static jint frame(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_frame();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_close() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "onClose", "method_25419", "close", "m_7379_"), "()V");
    }

    static void close(const jobject& obj) {
                
       const auto methodID = methodID_close();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_fetchServerData() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "fetchServerData", "method_21204", "fetchServerData", "m_88426_"), "(J)V");
    }

    static void fetchServerData(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_fetchServerData();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_disableButtons() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("C", "disableButtons", "method_21234", "disableButtons", "m_88528_"), "()V");
    }

    static void disableButtons(const jobject& obj) {
                
       const auto methodID = methodID_disableButtons();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_joinRealm() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "joinRealm", "method_21206", "joinRealm", "m_88438_"), "(Lfcp;)V");
    }

    static void joinRealm(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_joinRealm();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_switchToMinigame() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("D", "switchToMinigame", "method_21236", "switchToMinigame", "m_88533_"), "()V");
    }

    static void switchToMinigame(const jobject& obj) {
                
       const auto methodID = methodID_switchToMinigame();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_switchToFullSlot() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "switchToFullSlot", "method_21203", "switchToFullSlot", "m_88420_"), "(ILfcp;)V");
    }

    static void switchToFullSlot(const jobject& obj, const jint& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_switchToFullSlot();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_switchToEmptySlot() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "switchToEmptySlot", "method_21222", "switchToEmptySlot", "m_88468_"), "(ILfcp;)V");
    }

    static void switchToEmptySlot(const jobject& obj, const jint& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_switchToEmptySlot();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_drawServerState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "drawServerStatus", "method_21201", "drawServerState", "m_88489_"), "(Lfhz;IIII)V");
    }

    static void drawServerState(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2, const jint& arg3, const jint& arg4) {
                
       const auto methodID = methodID_drawServerState();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID__drawServerState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "drawRealmStatus", "method_53460", "drawServerState", "m_295928_"), "(Lfhz;IIIILakr;Ljava/util/function/Supplier;)V");
    }

    static void _drawServerState(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2, const jint& arg3, const jint& arg4, const jobject& arg5, const jobject& arg6) {
                
       const auto methodID = methodID__drawServerState();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    };
    
    static jmethodID methodID_isMinigame() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("E", "isMinigame", "method_21238", "isMinigame", "m_88534_"), "()Z");
    }

    static jboolean isMinigame(const jobject& obj) {
                
       const auto methodID = methodID_isMinigame();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_hideRegularButtons() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("F", "hideRegularButtons", "method_21240", "hideRegularButtons", "m_88535_"), "()V");
    }

    static void hideRegularButtons(const jobject& obj) {
                
       const auto methodID = methodID_hideRegularButtons();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_removeButton() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "hide", "method_25138", "removeButton", "m_88450_"), "(Lfim;)V");
    }

    static void removeButton(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_removeButton();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_addButton() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "show", "method_21226", "addButton", "m_88484_"), "(Lfim;)V");
    }

    static void addButton(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addButton();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_hideMinigameButtons() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("G", "hideMinigameButtons", "method_21242", "hideMinigameButtons", "m_88536_"), "()V");
    }

    static void hideMinigameButtons(const jobject& obj) {
                
       const auto methodID = methodID_hideMinigameButtons();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_saveSlotSettings() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "saveSlotSettings", "method_21208", "saveSlotSettings", "m_88444_"), "(Lfcu;)V");
    }

    static void saveSlotSettings(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_saveSlotSettings();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_saveSettings() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "saveSettings", "method_21215", "saveSettings", "m_88454_"), "(Ljava/lang/String;Ljava/lang/String;)V");
    }

    static void saveSettings(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_saveSettings();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_openTheWorld() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "openTheWorld", "method_21218", "openTheWorld", "m_88459_"), "(Z)V");
    }

    static void openTheWorld(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_openTheWorld();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_closeTheWorld() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "closeTheWorld", "method_21217", "closeTheWorld", "m_88452_"), "()V");
    }

    static void closeTheWorld(const jobject& obj) {
                
       const auto methodID = methodID_closeTheWorld();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID__stateChanged() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "stateChanged", "method_21198", "stateChanged", "m_88413_"), "()V");
    }

    static void _stateChanged(const jobject& obj) {
                
       const auto methodID = methodID__stateChanged();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_switchMinigame() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "templateSelectionCallback", "method_32484", "switchMinigame", "m_167394_"), "(Lfde;)V");
    }

    static void switchMinigame(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_switchMinigame();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getNewScreen() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "getNewScreen", "method_21219", "getNewScreen", "m_88486_"), "()Lfdx;");
    }

    static jobject getNewScreen(const jobject& obj) {
                
       const auto methodID = methodID_getNewScreen();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_REALMS_GUI_SCREEN_REALMSCONFIGUREWORLDSCREEN_HPP