// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_REALMS_SIZEUNIT_HPP
#define NET_MINECRAFT_CLIENT_REALMS_SIZEUNIT_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.realms.SizeUnit
 * Remapped: fbu
 */
namespace SizeUnit {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("fbu", "com/mojang/realmsclient/Unit", "net/minecraft/class_4428", "net/minecraft/client/realms/SizeUnit", "net/minecraft/src/C_3212_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.client.realms.SizeUnit#B
    [[maybe_unused]] static jobject get_field_B() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "B", "field_20200", "B", "B"), "Lfbu;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.realms.SizeUnit#B
    [[maybe_unused]] static void set_field_B(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "B", "field_20200", "B", "B"), "Lfbu;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.client.realms.SizeUnit#KB
    [[maybe_unused]] static jobject get_field_KB() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "KB", "field_20201", "KB", "KB"), "Lfbu;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.realms.SizeUnit#KB
    [[maybe_unused]] static void set_field_KB(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "KB", "field_20201", "KB", "KB"), "Lfbu;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.client.realms.SizeUnit#MB
    [[maybe_unused]] static jobject get_field_MB() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "MB", "field_20202", "MB", "MB"), "Lfbu;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.realms.SizeUnit#MB
    [[maybe_unused]] static void set_field_MB(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "MB", "field_20202", "MB", "MB"), "Lfbu;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.client.realms.SizeUnit#GB
    [[maybe_unused]] static jobject get_field_GB() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "GB", "field_20203", "GB", "GB"), "Lfbu;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.realms.SizeUnit#GB
    [[maybe_unused]] static void set_field_GB(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "GB", "field_20203", "GB", "GB"), "Lfbu;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.SizeUnit#BASE
    [[maybe_unused]] static jint get_field_BASE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "BASE_UNIT", "field_32055", "BASE", "f_167231_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.SizeUnit#BASE
    [[maybe_unused]] static void set_field_BASE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "BASE_UNIT", "field_32055", "BASE", "f_167231_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    static jmethodID methodID_values() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("values", "values", "values", "values", "values"), "()[Lfbu;");
    }

    static jobject values() {
       const auto clazz = self();
       const auto methodID = methodID_values();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_valueOf() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("valueOf", "valueOf", "valueOf", "valueOf", "valueOf"), "(Ljava/lang/String;)Lfbu;");
    }

    static jobject valueOf(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_valueOf();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getLargestUnit() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getLargest", "method_25027", "getLargestUnit", "m_86940_"), "(J)Lfbu;");
    }

    static jobject getLargestUnit(const jlong& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getLargestUnit();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_convertToUnit() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "convertTo", "method_25028", "convertToUnit", "m_86942_"), "(JLfbu;)D");
    }

    static jdouble convertToUnit(const jlong& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_convertToUnit();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getUserFriendlyString() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "humanReadable", "method_25029", "getUserFriendlyString", "m_86945_"), "(J)Ljava/lang/String;");
    }

    static jobject getUserFriendlyString(const jlong& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getUserFriendlyString();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_humanReadableSize() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "humanReadable", "method_25030", "humanReadableSize", "m_86947_"), "(JLfbu;)Ljava/lang/String;");
    }

    static jobject humanReadableSize(const jlong& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_humanReadableSize();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_REALMS_SIZEUNIT_HPP