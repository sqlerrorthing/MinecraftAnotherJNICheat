// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_REALMS_DTO_UPLOADINFO_HPP
#define NET_MINECRAFT_CLIENT_REALMS_DTO_UPLOADINFO_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.realms.dto.UploadInfo
 * Remapped: fdb
 */
namespace UploadInfo {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("fdb", "com/mojang/realmsclient/dto/UploadInfo", "net/minecraft/class_4888", "net/minecraft/client/realms/dto/UploadInfo", "net/minecraft/src/C_3260_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.client.realms.dto.UploadInfo#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_22657", "LOGGER", "f_87686_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.dto.UploadInfo#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_22657", "LOGGER", "f_87686_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.dto.UploadInfo#HTTP_PROTOCOL
    [[maybe_unused]] static jobject get_field_HTTP_PROTOCOL() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "DEFAULT_SCHEMA", "field_32116", "HTTP_PROTOCOL", "f_167324_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.dto.UploadInfo#HTTP_PROTOCOL
    [[maybe_unused]] static void set_field_HTTP_PROTOCOL(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "DEFAULT_SCHEMA", "field_32116", "HTTP_PROTOCOL", "f_167324_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.dto.UploadInfo#PORT
    [[maybe_unused]] static jint get_field_PORT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "DEFAULT_PORT", "field_32117", "PORT", "f_167325_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.dto.UploadInfo#PORT
    [[maybe_unused]] static void set_field_PORT(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "DEFAULT_PORT", "field_32117", "PORT", "f_167325_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.realms.dto.UploadInfo#PROTOCOL_PATTERN
    [[maybe_unused]] static jobject get_field_PROTOCOL_PATTERN() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "URI_SCHEMA_PATTERN", "field_26467", "PROTOCOL_PATTERN", "f_87687_"), "Ljava/util/regex/Pattern;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.dto.UploadInfo#PROTOCOL_PATTERN
    [[maybe_unused]] static void set_field_PROTOCOL_PATTERN(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "URI_SCHEMA_PATTERN", "field_26467", "PROTOCOL_PATTERN", "f_87687_"), "Ljava/util/regex/Pattern;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.dto.UploadInfo#worldClosed
    static jboolean get_field_worldClosed(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "worldClosed", "field_22658", "worldClosed", "f_87688_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.dto.UploadInfo#worldClosed
    static void set_field_worldClosed(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "worldClosed", "field_22658", "worldClosed", "f_87688_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.dto.UploadInfo#token
    static jobject get_field_token(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "token", "field_22659", "token", "f_87689_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.dto.UploadInfo#token
    static void set_field_token(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "token", "field_22659", "token", "f_87689_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.realms.dto.UploadInfo#uploadEndpoint
    static jobject get_field_uploadEndpoint(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "uploadEndpoint", "field_22660", "uploadEndpoint", "f_87690_"), "Ljava/net/URI;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.realms.dto.UploadInfo#uploadEndpoint
    static void set_field_uploadEndpoint(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "uploadEndpoint", "field_22660", "uploadEndpoint", "f_87690_"), "Ljava/net/URI;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_parse() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "parse", "method_25088", "parse", "m_87700_"), "(Ljava/lang/String;)Lfdb;");
    }

    static jobject parse(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_parse();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getUrl() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "assembleUri", "method_30862", "getUrl", "m_87702_"), "(Ljava/lang/String;I)Ljava/net/URI;");
    }

    static jobject getUrl(const jobject& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_getUrl();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getPort() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "selectPortOrDefault", "method_30861", "getPort", "m_87697_"), "(II)I");
    }

    static jint getPort(const jint& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_getPort();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getUrlWithProtocol() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "ensureEndpointSchema", "method_30863", "getUrlWithProtocol", "m_87705_"), "(Ljava/lang/String;Ljava/util/regex/Matcher;)Ljava/lang/String;");
    }

    static jobject getUrlWithProtocol(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_getUrlWithProtocol();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_createRequestContent() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "createRequest", "method_30864", "createRequestContent", "m_87709_"), "(Ljava/lang/String;)Ljava/lang/String;");
    }

    static jobject createRequestContent(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_createRequestContent();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getToken() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getToken", "method_25087", "getToken", "m_87696_"), "()Ljava/lang/String;");
    }

    static jobject getToken(const jobject& obj) {
                
       const auto methodID = methodID_getToken();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getUploadEndpoint() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getUploadEndpoint", "method_25089", "getUploadEndpoint", "m_87708_"), "()Ljava/net/URI;");
    }

    static jobject getUploadEndpoint(const jobject& obj) {
                
       const auto methodID = methodID_getUploadEndpoint();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_isWorldClosed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "isWorldClosed", "method_25091", "isWorldClosed", "m_87711_"), "()Z");
    }

    static jboolean isWorldClosed(const jobject& obj) {
                
       const auto methodID = methodID_isWorldClosed();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_REALMS_DTO_UPLOADINFO_HPP