// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_OPTION_SIMPLEOPTION$VALIDATINGINTSLIDERCALLBACKS_HPP
#define NET_MINECRAFT_CLIENT_OPTION_SIMPLEOPTION$VALIDATINGINTSLIDERCALLBACKS_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.option.SimpleOption$ValidatingIntSliderCallbacks
 * Remapped: fgr$f
 */
namespace SimpleOption$ValidatingIntSliderCallbacks {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("fgr$f", "net/minecraft/client/OptionInstance$IntRange", "net/minecraft/class_7172$class_7174", "net/minecraft/client/option/SimpleOption$ValidatingIntSliderCallbacks", "net/minecraft/src/C_213334_$C_213341_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.client.option.SimpleOption$ValidatingIntSliderCallbacks#minInclusive
    static jint get_field_minInclusive(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "minInclusive", "comp_593", "minInclusive", "f_231639_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.option.SimpleOption$ValidatingIntSliderCallbacks#minInclusive
    static void set_field_minInclusive(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "minInclusive", "comp_593", "minInclusive", "f_231639_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.option.SimpleOption$ValidatingIntSliderCallbacks#maxInclusive
    static jint get_field_maxInclusive(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "maxInclusive", "comp_594", "maxInclusive", "f_231640_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.option.SimpleOption$ValidatingIntSliderCallbacks#maxInclusive
    static void set_field_maxInclusive(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "maxInclusive", "comp_594", "maxInclusive", "f_231640_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.option.SimpleOption$ValidatingIntSliderCallbacks#applyValueImmediately
    static jboolean get_field_applyValueImmediately(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "applyValueImmediately", "comp_2661", "applyValueImmediately", "f_316444_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.option.SimpleOption$ValidatingIntSliderCallbacks#applyValueImmediately
    static void set_field_applyValueImmediately(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "applyValueImmediately", "comp_2661", "applyValueImmediately", "f_316444_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    static jmethodID methodID_validate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "validateValue", "method_41761", "validate", "m_214064_"), "(Ljava/lang/Integer;)Ljava/util/Optional;");
    }

    static jobject validate(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_validate();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_codec() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "codec", "comp_675", "codec", "m_213664_"), "()Lcom/mojang/serialization/Codec;");
    }

    static jobject codec(const jobject& obj) {
                
       const auto methodID = methodID_codec();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__minInclusive() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "minInclusive", "comp_593", "minInclusive", "m_214123_"), "()I");
    }

    static jint _minInclusive(const jobject& obj) {
                
       const auto methodID = methodID__minInclusive();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID__maxInclusive() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "maxInclusive", "comp_594", "maxInclusive", "m_214118_"), "()I");
    }

    static jint _maxInclusive(const jobject& obj) {
                
       const auto methodID = methodID__maxInclusive();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID__applyValueImmediately() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aR_", "applyValueImmediately", "comp_2661", "applyValueImmediately", "m_320795_"), "()Z");
    }

    static jboolean _applyValueImmediately(const jobject& obj) {
                
       const auto methodID = methodID__applyValueImmediately();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_OPTION_SIMPLEOPTION$VALIDATINGINTSLIDERCALLBACKS_HPP