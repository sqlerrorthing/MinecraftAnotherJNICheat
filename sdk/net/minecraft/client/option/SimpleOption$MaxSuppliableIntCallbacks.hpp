// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_OPTION_SIMPLEOPTION$MAXSUPPLIABLEINTCALLBACKS_HPP
#define NET_MINECRAFT_CLIENT_OPTION_SIMPLEOPTION$MAXSUPPLIABLEINTCALLBACKS_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.option.SimpleOption$MaxSuppliableIntCallbacks
 * Remapped: fgr$c
 */
namespace SimpleOption$MaxSuppliableIntCallbacks {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("fgr$c", "net/minecraft/client/OptionInstance$ClampingLazyMaxIntRange", "net/minecraft/class_7172$class_7304", "net/minecraft/client/option/SimpleOption$MaxSuppliableIntCallbacks", "net/minecraft/src/C_213334_$C_213337_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.client.option.SimpleOption$MaxSuppliableIntCallbacks#minInclusive
    static jint get_field_minInclusive(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "minInclusive", "comp_593", "minInclusive", "f_231583_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.option.SimpleOption$MaxSuppliableIntCallbacks#minInclusive
    static void set_field_minInclusive(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "minInclusive", "comp_593", "minInclusive", "f_231583_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.option.SimpleOption$MaxSuppliableIntCallbacks#maxSupplier
    static jobject get_field_maxSupplier(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "maxSupplier", "comp_690", "maxSupplier", "f_231584_"), "Ljava/util/function/IntSupplier;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.option.SimpleOption$MaxSuppliableIntCallbacks#maxSupplier
    static void set_field_maxSupplier(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "maxSupplier", "comp_690", "maxSupplier", "f_231584_"), "Ljava/util/function/IntSupplier;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.option.SimpleOption$MaxSuppliableIntCallbacks#encodableMaxInclusive
    static jint get_field_encodableMaxInclusive(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "encodableMaxInclusive", "comp_1316", "encodableMaxInclusive", "f_276069_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.option.SimpleOption$MaxSuppliableIntCallbacks#encodableMaxInclusive
    static void set_field_encodableMaxInclusive(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "encodableMaxInclusive", "comp_1316", "encodableMaxInclusive", "f_276069_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    static jmethodID methodID_validate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "validateValue", "method_42408", "validate", "m_214064_"), "(Ljava/lang/Integer;)Ljava/util/Optional;");
    }

    static jobject validate(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_validate();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_maxInclusive() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "maxInclusive", "comp_594", "maxInclusive", "m_214118_"), "()I");
    }

    static jint maxInclusive(const jobject& obj) {
                
       const auto methodID = methodID_maxInclusive();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_codec() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "codec", "comp_675", "codec", "m_213664_"), "()Lcom/mojang/serialization/Codec;");
    }

    static jobject codec(const jobject& obj) {
                
       const auto methodID = methodID_codec();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_isCycling() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "createCycleButton", "method_42722", "isCycling", "m_214105_"), "()Z");
    }

    static jboolean isCycling(const jobject& obj) {
                
       const auto methodID = methodID_isCycling();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getValues() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "valueListSupplier", "method_42721", "getValues", "m_213889_"), "()Lfit$c;");
    }

    static jobject getValues(const jobject& obj) {
                
       const auto methodID = methodID_getValues();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__minInclusive() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "minInclusive", "comp_593", "minInclusive", "m_214123_"), "()I");
    }

    static jint _minInclusive(const jobject& obj) {
                
       const auto methodID = methodID__minInclusive();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID__maxSupplier() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "maxSupplier", "comp_690", "maxSupplier", "f_231584_"), "()Ljava/util/function/IntSupplier;");
    }

    static jobject _maxSupplier(const jobject& obj) {
                
       const auto methodID = methodID__maxSupplier();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__encodableMaxInclusive() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "encodableMaxInclusive", "comp_1316", "encodableMaxInclusive", "f_276069_"), "()I");
    }

    static jint _encodableMaxInclusive(const jobject& obj) {
                
       const auto methodID = methodID__encodableMaxInclusive();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_OPTION_SIMPLEOPTION$MAXSUPPLIABLEINTCALLBACKS_HPP