// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_UTIL_BUFFERALLOCATOR_HPP
#define NET_MINECRAFT_CLIENT_UTIL_BUFFERALLOCATOR_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.util.BufferAllocator
 * Remapped: fbf
 */
namespace BufferAllocator {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("fbf", "com/mojang/blaze3d/vertex/ByteBufferBuilder", "net/minecraft/class_9799", "net/minecraft/client/util/BufferAllocator", "net/minecraft/src/C_336589_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.client.util.BufferAllocator#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_52078", "LOGGER", "f_337525_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.util.BufferAllocator#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_52078", "LOGGER", "f_337525_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.util.BufferAllocator#allocator
    [[maybe_unused]] static jobject get_field_allocator() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ALLOCATOR", "field_52079", "allocator", "f_337626_"), "Lorg/lwjgl/system/MemoryUtil$MemoryAllocator;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.util.BufferAllocator#allocator
    [[maybe_unused]] static void set_field_allocator(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ALLOCATOR", "field_52079", "allocator", "f_337626_"), "Lorg/lwjgl/system/MemoryUtil$MemoryAllocator;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.util.BufferAllocator#MIN_GROWTH
    [[maybe_unused]] static jint get_field_MIN_GROWTH() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "MAX_GROWTH_SIZE", "field_52080", "MIN_GROWTH", "f_337594_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.util.BufferAllocator#MIN_GROWTH
    [[maybe_unused]] static void set_field_MIN_GROWTH(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "MAX_GROWTH_SIZE", "field_52080", "MIN_GROWTH", "f_337594_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.util.BufferAllocator#CLOSED
    [[maybe_unused]] static jint get_field_CLOSED() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "BUFFER_FREED_GENERATION", "field_52081", "CLOSED", "f_336759_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.util.BufferAllocator#CLOSED
    [[maybe_unused]] static void set_field_CLOSED(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "BUFFER_FREED_GENERATION", "field_52081", "CLOSED", "f_336759_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for default field net.minecraft.client.util.BufferAllocator#pointer
    static jlong get_field_pointer(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "pointer", "field_52082", "pointer", "f_337511_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static default field net.minecraft.client.util.BufferAllocator#pointer
    static void set_field_pointer(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "pointer", "field_52082", "pointer", "f_337511_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.util.BufferAllocator#size
    static jint get_field_size(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "capacity", "field_52083", "size", "f_336824_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.util.BufferAllocator#size
    static void set_field_size(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "capacity", "field_52083", "size", "f_336824_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.util.BufferAllocator#offset
    static jint get_field_offset(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "writeOffset", "field_52084", "offset", "f_337065_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.util.BufferAllocator#offset
    static void set_field_offset(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "writeOffset", "field_52084", "offset", "f_337065_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.util.BufferAllocator#prevOffset
    static jint get_field_prevOffset(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "nextResultOffset", "field_52085", "prevOffset", "f_337195_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.util.BufferAllocator#prevOffset
    static void set_field_prevOffset(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "nextResultOffset", "field_52085", "prevOffset", "f_337195_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.util.BufferAllocator#refCount
    static jint get_field_refCount(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "resultCount", "field_52086", "refCount", "f_337608_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.util.BufferAllocator#refCount
    static void set_field_refCount(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "resultCount", "field_52086", "refCount", "f_337608_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.util.BufferAllocator#clearCount
    static jint get_field_clearCount(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "generation", "field_52087", "clearCount", "f_337664_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.util.BufferAllocator#clearCount
    static void set_field_clearCount(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "generation", "field_52087", "clearCount", "f_337664_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    static jmethodID methodID_allocate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "reserve", "method_60808", "allocate", "m_338881_"), "(I)J");
    }

    static jlong allocate(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_allocate();
       return MinecraftSDK::env->CallLongMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_growIfNecessary() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "ensureCapacity", "method_60810", "growIfNecessary", "m_339252_"), "(I)V");
    }

    static void growIfNecessary(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_growIfNecessary();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_grow() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "resize", "method_60812", "grow", "m_338423_"), "(I)V");
    }

    static void grow(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_grow();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getAllocated() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "build", "method_60807", "getAllocated", "m_339207_"), "()Lfbf$a;");
    }

    static jobject getAllocated(const jobject& obj) {
                
       const auto methodID = methodID_getAllocated();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_clear() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "clear", "method_60809", "clear", "m_340278_"), "()V");
    }

    static void clear(const jobject& obj) {
                
       const auto methodID = methodID_clear();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_reset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "discard", "method_60811", "reset", "m_339056_"), "()V");
    }

    static void reset(const jobject& obj) {
                
       const auto methodID = methodID_reset();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_clearCountEquals() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "isValid", "method_60814", "clearCountEquals", "m_338446_"), "(I)Z");
    }

    static jboolean clearCountEquals(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_clearCountEquals();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_clearIfUnreferenced() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "freeResult", "method_60813", "clearIfUnreferenced", "m_340122_"), "()V");
    }

    static void clearIfUnreferenced(const jobject& obj) {
                
       const auto methodID = methodID_clearIfUnreferenced();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_forceClear() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "discardResults", "method_60815", "forceClear", "m_339343_"), "()V");
    }

    static void forceClear(const jobject& obj) {
                
       const auto methodID = methodID_forceClear();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_close() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("close", "close", "", "", "close"), "()V");
    }

    static void close(const jobject& obj) {
                
       const auto methodID = methodID_close();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_ensureNotFreed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "checkOpen", "method_60816", "ensureNotFreed", "m_339060_"), "()V");
    }

    static void ensureNotFreed(const jobject& obj) {
                
       const auto methodID = methodID_ensureNotFreed();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_UTIL_BUFFERALLOCATOR_HPP