// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_UTIL_MONITORTRACKER_HPP
#define NET_MINECRAFT_CLIENT_UTIL_MONITORTRACKER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.util.MonitorTracker
 * Remapped: fak
 */
namespace MonitorTracker {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("fak", "com/mojang/blaze3d/platform/ScreenManager", "net/minecraft/class_323", "net/minecraft/client/util/MonitorTracker", "net/minecraft/src/C_3158_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.client.util.MonitorTracker#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_37266", "LOGGER", "f_212357_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.util.MonitorTracker#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_37266", "LOGGER", "f_212357_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.client.util.MonitorTracker#pointerToMonitorMap
    static jobject get_field_pointerToMonitorMap(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "monitors", "field_1993", "pointerToMonitorMap", "f_85262_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.util.MonitorTracker#pointerToMonitorMap
    static void set_field_pointerToMonitorMap(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "monitors", "field_1993", "pointerToMonitorMap", "f_85262_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.util.MonitorTracker#monitorFactory
    static jobject get_field_monitorFactory(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "monitorCreator", "field_1991", "monitorFactory", "f_85263_"), "Lfai;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.util.MonitorTracker#monitorFactory
    static void set_field_monitorFactory(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "monitorCreator", "field_1991", "monitorFactory", "f_85263_"), "Lfai;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_handleMonitorEvent() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onMonitorChange", "method_1683", "handleMonitorEvent", "m_85273_"), "(JI)V");
    }

    static void handleMonitorEvent(const jobject& obj, const jlong& arg0, const jint& arg1) {
                
       const auto methodID = methodID_handleMonitorEvent();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getMonitor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getMonitor", "method_1680", "getMonitor", "m_85271_"), "(J)Lfah;");
    }

    static jobject getMonitor(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_getMonitor();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__getMonitor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "findBestMonitor", "method_1681", "getMonitor", "m_85276_"), "(Lfam;)Lfah;");
    }

    static jobject _getMonitor(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__getMonitor();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_clamp() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "clamp", "method_15991", "clamp", "m_85267_"), "(III)I");
    }

    static jint clamp(const jint& arg0, const jint& arg1, const jint& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_clamp();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_stop() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "shutdown", "method_15992", "stop", "m_85266_"), "()V");
    }

    static void stop(const jobject& obj) {
                
       const auto methodID = methodID_stop();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_UTIL_MONITORTRACKER_HPP