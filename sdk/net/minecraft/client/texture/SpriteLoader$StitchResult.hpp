// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_TEXTURE_SPRITELOADER$STITCHRESULT_HPP
#define NET_MINECRAFT_CLIENT_TEXTURE_SPRITELOADER$STITCHRESULT_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.texture.SpriteLoader$StitchResult
 * Remapped: gqg$a
 */
namespace SpriteLoader$StitchResult {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("gqg$a", "net/minecraft/client/renderer/texture/SpriteLoader$Preparations", "net/minecraft/class_7766$class_7767", "net/minecraft/client/texture/SpriteLoader$StitchResult", "net/minecraft/src/C_243537_$C_243503_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.client.texture.SpriteLoader$StitchResult#width
    static jint get_field_width(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "width", "comp_1040", "width", "f_243669_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.texture.SpriteLoader$StitchResult#width
    static void set_field_width(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "width", "comp_1040", "width", "f_243669_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.texture.SpriteLoader$StitchResult#height
    static jint get_field_height(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "height", "comp_1041", "height", "f_244632_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.texture.SpriteLoader$StitchResult#height
    static void set_field_height(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "height", "comp_1041", "height", "f_244632_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.texture.SpriteLoader$StitchResult#mipLevel
    static jint get_field_mipLevel(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "mipLevel", "comp_1042", "mipLevel", "f_244353_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.texture.SpriteLoader$StitchResult#mipLevel
    static void set_field_mipLevel(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "mipLevel", "comp_1042", "mipLevel", "f_244353_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.texture.SpriteLoader$StitchResult#missing
    static jobject get_field_missing(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "missing", "comp_1043", "missing", "f_243912_"), "Lgql;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.texture.SpriteLoader$StitchResult#missing
    static void set_field_missing(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "missing", "comp_1043", "missing", "f_243912_"), "Lgql;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.texture.SpriteLoader$StitchResult#regions
    static jobject get_field_regions(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "regions", "comp_1044", "regions", "f_243807_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.texture.SpriteLoader$StitchResult#regions
    static void set_field_regions(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "regions", "comp_1044", "regions", "f_243807_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.texture.SpriteLoader$StitchResult#readyForUpload
    static jobject get_field_readyForUpload(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "readyForUpload", "comp_1045", "readyForUpload", "f_244415_"), "Ljava/util/concurrent/CompletableFuture;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.texture.SpriteLoader$StitchResult#readyForUpload
    static void set_field_readyForUpload(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "readyForUpload", "comp_1045", "readyForUpload", "f_244415_"), "Ljava/util/concurrent/CompletableFuture;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_whenComplete() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "waitForUpload", "method_45845", "whenComplete", "m_246429_"), "()Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject whenComplete(const jobject& obj) {
                
       const auto methodID = methodID_whenComplete();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__width() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "width", "comp_1040", "width", "f_243669_"), "()I");
    }

    static jint _width(const jobject& obj) {
                
       const auto methodID = methodID__width();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID__height() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "height", "comp_1041", "height", "f_244632_"), "()I");
    }

    static jint _height(const jobject& obj) {
                
       const auto methodID = methodID__height();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID__mipLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "mipLevel", "comp_1042", "mipLevel", "f_244353_"), "()I");
    }

    static jint _mipLevel(const jobject& obj) {
                
       const auto methodID = methodID__mipLevel();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID__missing() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "missing", "comp_1043", "missing", "f_243912_"), "()Lgql;");
    }

    static jobject _missing(const jobject& obj) {
                
       const auto methodID = methodID__missing();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__regions() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "regions", "comp_1044", "regions", "f_243807_"), "()Ljava/util/Map;");
    }

    static jobject _regions(const jobject& obj) {
                
       const auto methodID = methodID__regions();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__readyForUpload() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "readyForUpload", "comp_1045", "readyForUpload", "f_244415_"), "()Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject _readyForUpload(const jobject& obj) {
                
       const auto methodID = methodID__readyForUpload();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_TEXTURE_SPRITELOADER$STITCHRESULT_HPP