// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_TEXTURE_MIPMAPHELPER_HPP
#define NET_MINECRAFT_CLIENT_TEXTURE_MIPMAPHELPER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.texture.MipmapHelper
 * Remapped: gqa
 */
namespace MipmapHelper {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("gqa", "net/minecraft/client/renderer/texture/MipmapGenerator", "net/minecraft/class_4725", "net/minecraft/client/texture/MipmapHelper", "net/minecraft/src/C_4472_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.client.texture.MipmapHelper#MIN_ALPHA
    [[maybe_unused]] static jint get_field_MIN_ALPHA() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "ALPHA_CUTOUT_CUTOFF", "field_32949", "MIN_ALPHA", "f_174686_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.texture.MipmapHelper#MIN_ALPHA
    [[maybe_unused]] static void set_field_MIN_ALPHA(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "ALPHA_CUTOUT_CUTOFF", "field_32949", "MIN_ALPHA", "f_174686_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.texture.MipmapHelper#COLOR_FRACTIONS
    [[maybe_unused]] static jfloat get_field_COLOR_FRACTIONS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "POW22", "field_21747", "COLOR_FRACTIONS", "f_118038_"), "[F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.texture.MipmapHelper#COLOR_FRACTIONS
    [[maybe_unused]] static void set_field_COLOR_FRACTIONS(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "POW22", "field_21747", "COLOR_FRACTIONS", "f_118038_"), "[F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    static jmethodID methodID_getMipmapLevelsImages() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "generateMipLevels", "method_24102", "getMipmapLevelsImages", "m_246246_"), "([Lfaj;I)[Lfaj;");
    }

    static jobject getMipmapLevelsImages(const jarray& arg0, const jobject& arg1, const jint& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_getMipmapLevelsImages();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_hasAlpha() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "hasTransparentPixel", "method_45804", "hasAlpha", "m_246464_"), "(Lfaj;)Z");
    }

    static jboolean hasAlpha(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_hasAlpha();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_blend() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "alphaBlend", "method_24101", "blend", "m_118048_"), "(IIIIZ)I");
    }

    static jint blend(const jint& arg0, const jint& arg1, const jint& arg2, const jint& arg3, const jboolean& arg4) {
       const auto clazz = self();
       const auto methodID = methodID_blend();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_getColorComponent() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "gammaBlend", "method_24100", "getColorComponent", "m_118042_"), "(IIIII)I");
    }

    static jint getColorComponent(const jint& arg0, const jint& arg1, const jint& arg2, const jint& arg3, const jint& arg4) {
       const auto clazz = self();
       const auto methodID = methodID_getColorComponent();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_getColorFraction() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getPow22", "method_24099", "getColorFraction", "m_118040_"), "(I)F");
    }

    static jfloat getColorFraction(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getColorFraction();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_TEXTURE_MIPMAPHELPER_HPP