// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_TEXTURE_TEXTUREMANAGER_HPP
#define NET_MINECRAFT_CLIENT_TEXTURE_TEXTUREMANAGER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.texture.TextureManager
 * Remapped: gqm
 */
namespace TextureManager {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("gqm", "net/minecraft/client/renderer/texture/TextureManager", "net/minecraft/class_1060", "net/minecraft/client/texture/TextureManager", "net/minecraft/src/C_4490_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.client.texture.TextureManager#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "LOGGER", "field_5288", "LOGGER", "f_118467_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.texture.TextureManager#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "LOGGER", "field_5288", "LOGGER", "f_118467_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.client.texture.TextureManager#MISSING_IDENTIFIER
    [[maybe_unused]] static jobject get_field_MISSING_IDENTIFIER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "INTENTIONAL_MISSING_TEXTURE", "field_5285", "MISSING_IDENTIFIER", "f_118466_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.texture.TextureManager#MISSING_IDENTIFIER
    [[maybe_unused]] static void set_field_MISSING_IDENTIFIER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "INTENTIONAL_MISSING_TEXTURE", "field_5285", "MISSING_IDENTIFIER", "f_118466_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.client.texture.TextureManager#textures
    static jobject get_field_textures(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "byPath", "field_5286", "textures", "f_118468_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.texture.TextureManager#textures
    static void set_field_textures(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "byPath", "field_5286", "textures", "f_118468_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.texture.TextureManager#tickListeners
    static jobject get_field_tickListeners(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "tickableTextures", "field_5284", "tickListeners", "f_118469_"), "Ljava/util/Set;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.texture.TextureManager#tickListeners
    static void set_field_tickListeners(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "tickableTextures", "field_5284", "tickListeners", "f_118469_"), "Ljava/util/Set;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.texture.TextureManager#dynamicIdCounters
    static jobject get_field_dynamicIdCounters(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "prefixRegister", "field_5283", "dynamicIdCounters", "f_118470_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.texture.TextureManager#dynamicIdCounters
    static void set_field_dynamicIdCounters(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "prefixRegister", "field_5283", "dynamicIdCounters", "f_118470_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.texture.TextureManager#resourceContainer
    static jobject get_field_resourceContainer(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "resourceManager", "field_5287", "resourceContainer", "f_118471_"), "Laue;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.texture.TextureManager#resourceContainer
    static void set_field_resourceContainer(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "resourceManager", "field_5287", "resourceContainer", "f_118471_"), "Laue;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_bindTexture() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "bindForSetup", "method_22813", "bindTexture", "m_174784_"), "(Lakr;)V");
    }

    static void bindTexture(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_bindTexture();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_bindTextureInner() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "_bind", "method_4618", "bindTextureInner", "m_118519_"), "(Lakr;)V");
    }

    static void bindTextureInner(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_bindTextureInner();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_registerTexture() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "register", "method_4616", "registerTexture", "m_118495_"), "(Lakr;Lgpw;)V");
    }

    static void registerTexture(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_registerTexture();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_closeTexture() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "safeClose", "method_30299", "closeTexture", "m_118508_"), "(Lakr;Lgpw;)V");
    }

    static void closeTexture(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_closeTexture();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_loadTexture() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "loadTexture", "method_24303", "loadTexture", "m_118515_"), "(Lakr;Lgpw;)Lgpw;");
    }

    static jobject loadTexture(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_loadTexture();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getTexture() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getTexture", "method_4619", "getTexture", "m_118506_"), "(Lakr;)Lgpw;");
    }

    static jobject getTexture(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getTexture();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getOrDefault() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getTexture", "method_34590", "getOrDefault", "m_174786_"), "(Lakr;Lgpw;)Lgpw;");
    }

    static jobject getOrDefault(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_getOrDefault();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_registerDynamicTexture() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "register", "method_4617", "registerDynamicTexture", "m_118490_"), "(Ljava/lang/String;Lgpy;)Lakr;");
    }

    static jobject registerDynamicTexture(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_registerDynamicTexture();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_loadTextureAsync() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "preload", "method_18168", "loadTextureAsync", "m_118501_"), "(Lakr;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject loadTextureAsync(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_loadTextureAsync();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_runOnRenderThread() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "execute", "method_22812", "runOnRenderThread", "m_118488_"), "(Ljava/lang/Runnable;)V");
    }

    static void runOnRenderThread(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_runOnRenderThread();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "tick", "method_4622", "tick", "m_7673_"), "()V");
    }

    static void tick(const jobject& obj) {
                
       const auto methodID = methodID_tick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_destroyTexture() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "release", "method_4615", "destroyTexture", "m_118513_"), "(Lakr;)V");
    }

    static void destroyTexture(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_destroyTexture();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_close() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("close", "close", "", "", "close"), "()V");
    }

    static void close(const jobject& obj) {
                
       const auto methodID = methodID_close();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_reload() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "reload", "method_25931", "reload", "m_5540_"), "(Laty$a;Laue;Lbnf;Lbnf;Ljava/util/concurrent/Executor;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject reload(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4, const jobject& arg5) {
                
       const auto methodID = methodID_reload();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
    static jmethodID methodID_dumpDynamicTextures() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "dumpAllSheets", "method_49715", "dumpDynamicTextures", "m_276085_"), "(Ljava/nio/file/Path;)V");
    }

    static void dumpDynamicTextures(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_dumpDynamicTextures();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_dumpDynamicTexturesInternal() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "_dumpAllSheets", "method_49717", "dumpDynamicTexturesInternal", "m_276083_"), "(Ljava/nio/file/Path;)V");
    }

    static void dumpDynamicTexturesInternal(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_dumpDynamicTexturesInternal();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_TEXTURE_TEXTUREMANAGER_HPP