// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_TEXTURE_SPRITECONTENTS$INTERPOLATION_HPP
#define NET_MINECRAFT_CLIENT_TEXTURE_SPRITECONTENTS$INTERPOLATION_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.texture.SpriteContents$Interpolation
 * Remapped: gqf$c
 */
namespace SpriteContents$Interpolation {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("gqf$c", "net/minecraft/client/renderer/texture/SpriteContents$InterpolationData", "net/minecraft/class_7764$class_4728", "net/minecraft/client/texture/SpriteContents$Interpolation", "net/minecraft/src/C_243582_$C_243617_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.client.texture.SpriteContents$Interpolation#images
    static jobject get_field_images(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "activeFrame", "field_21758", "images", "f_244527_"), "[Lfaj;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.texture.SpriteContents$Interpolation#images
    static void set_field_images(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "activeFrame", "field_21758", "images", "f_244527_"), "[Lfaj;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_apply() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "uploadInterpolatedFrame", "method_24128", "apply", "m_245152_"), "(IILgqf$d;)V");
    }

    static void apply(const jobject& obj, const jint& arg0, const jint& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_apply();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getPixelColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getPixel", "method_24130", "getPixelColor", "m_246491_"), "(Lgqf$a;IIII)I");
    }

    static jint getPixelColor(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2, const jint& arg3, const jint& arg4) {
                
       const auto methodID = methodID_getPixelColor();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_lerp() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "mix", "method_24129", "lerp", "m_247111_"), "(DII)I");
    }

    static jint lerp(const jobject& obj, const jdouble& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_lerp();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_close() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("close", "close", "", "", "close"), "()V");
    }

    static void close(const jobject& obj) {
                
       const auto methodID = methodID_close();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_TEXTURE_SPRITECONTENTS$INTERPOLATION_HPP