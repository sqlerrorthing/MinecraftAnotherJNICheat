// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_TEXTURE_NATIVEIMAGE_HPP
#define NET_MINECRAFT_CLIENT_TEXTURE_NATIVEIMAGE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.texture.NativeImage
 * Remapped: faj
 */
namespace NativeImage {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("faj", "com/mojang/blaze3d/platform/NativeImage", "net/minecraft/class_1011", "net/minecraft/client/texture/NativeImage", "net/minecraft/src/C_3148_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.client.texture.NativeImage#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_21684", "LOGGER", "f_84958_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.texture.NativeImage#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_21684", "LOGGER", "f_84958_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.texture.NativeImage#WRITE_TO_FILE_OPEN_OPTIONS
    [[maybe_unused]] static jobject get_field_WRITE_TO_FILE_OPEN_OPTIONS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "OPEN_OPTIONS", "field_4992", "WRITE_TO_FILE_OPEN_OPTIONS", "f_84959_"), "Ljava/util/Set;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.texture.NativeImage#WRITE_TO_FILE_OPEN_OPTIONS
    [[maybe_unused]] static void set_field_WRITE_TO_FILE_OPEN_OPTIONS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "OPEN_OPTIONS", "field_4992", "WRITE_TO_FILE_OPEN_OPTIONS", "f_84959_"), "Ljava/util/Set;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.client.texture.NativeImage#format
    static jobject get_field_format(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "format", "field_4986", "format", "f_84960_"), "Lfaj$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.texture.NativeImage#format
    static void set_field_format(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "format", "field_4986", "format", "f_84960_"), "Lfaj$a;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.texture.NativeImage#width
    static jint get_field_width(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "width", "field_4991", "width", "f_84961_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.texture.NativeImage#width
    static void set_field_width(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "width", "field_4991", "width", "f_84961_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.texture.NativeImage#height
    static jint get_field_height(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "height", "field_4989", "height", "f_84962_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.texture.NativeImage#height
    static void set_field_height(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "height", "field_4989", "height", "f_84962_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.texture.NativeImage#isStbImage
    static jboolean get_field_isStbImage(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "useStbFree", "field_4990", "isStbImage", "f_84963_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.texture.NativeImage#isStbImage
    static void set_field_isStbImage(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "useStbFree", "field_4990", "isStbImage", "f_84963_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.texture.NativeImage#pointer
    static jlong get_field_pointer(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "pixels", "field_4988", "pointer", "f_84964_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.texture.NativeImage#pointer
    static void set_field_pointer(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "pixels", "field_4988", "pointer", "f_84964_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.texture.NativeImage#sizeBytes
    static jlong get_field_sizeBytes(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "size", "field_4987", "sizeBytes", "f_84965_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.texture.NativeImage#sizeBytes
    static void set_field_sizeBytes(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "size", "field_4987", "sizeBytes", "f_84965_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    static jmethodID methodID_isOutOfBounds() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "isOutsideBounds", "method_36559", "isOutOfBounds", "m_166422_"), "(II)Z");
    }

    static jboolean isOutOfBounds(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_isOutOfBounds();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_read() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "read", "method_4309", "read", "m_85058_"), "(Ljava/io/InputStream;)Lfaj;");
    }

    static jobject read(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_read();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID__read() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "read", "method_4310", "read", "m_85048_"), "(Lfaj$a;Ljava/io/InputStream;)Lfaj;");
    }

    static jobject _read(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID__read();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID___read() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "read", "method_4324", "read", "m_85062_"), "(Ljava/nio/ByteBuffer;)Lfaj;");
    }

    static jobject __read(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID___read();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID____read() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "read", "method_49277", "read", "m_271751_"), "([B)Lfaj;");
    }

    static jobject ___read(const jarray& arg0, const jbyte& arg1) {
       const auto clazz = self();
       const auto methodID = methodID____read();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_____read() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "read", "method_4303", "read", "m_85051_"), "(Lfaj$a;Ljava/nio/ByteBuffer;)Lfaj;");
    }

    static jobject ____read(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_____read();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_setTextureFilter() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "setFilter", "method_4308", "setTextureFilter", "m_85081_"), "(ZZ)V");
    }

    static void setTextureFilter(const jboolean& arg0, const jboolean& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_setTextureFilter();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_checkAllocated() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "checkAllocated", "method_4320", "checkAllocated", "m_85124_"), "()V");
    }

    static void checkAllocated(const jobject& obj) {
                
       const auto methodID = methodID_checkAllocated();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_close() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("close", "close", "", "", "close"), "()V");
    }

    static void close(const jobject& obj) {
                
       const auto methodID = methodID_close();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getWidth() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getWidth", "method_4307", "getWidth", "m_84982_"), "()I");
    }

    static jint getWidth(const jobject& obj) {
                
       const auto methodID = methodID_getWidth();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getHeight() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getHeight", "method_4323", "getHeight", "m_85084_"), "()I");
    }

    static jint getHeight(const jobject& obj) {
                
       const auto methodID = methodID_getHeight();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getFormat() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "format", "method_4318", "getFormat", "m_85102_"), "()Lfaj$a;");
    }

    static jobject getFormat(const jobject& obj) {
                
       const auto methodID = methodID_getFormat();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getPixelRGBA", "method_4315", "getColor", "m_84985_"), "(II)I");
    }

    static jint getColor(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_getColor();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_setColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setPixelRGBA", "method_4305", "setColor", "m_84988_"), "(III)V");
    }

    static void setColor(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_setColor();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_applyToCopy() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "mappedCopy", "method_48462", "applyToCopy", "m_266528_"), "(Ljava/util/function/IntUnaryOperator;)Lfaj;");
    }

    static jobject applyToCopy(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_applyToCopy();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_apply() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "applyToAllPixels", "method_51596", "apply", "m_284481_"), "(Ljava/util/function/IntUnaryOperator;)V");
    }

    static void apply(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_apply();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_copyPixelsRgba() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getPixelsRGBA", "method_48463", "copyPixelsRgba", "m_266370_"), "()[I");
    }

    static jint copyPixelsRgba(const jobject& obj) {
                
       const auto methodID = methodID_copyPixelsRgba();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_setLuminance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setPixelLuminance", "method_35621", "setLuminance", "m_166402_"), "(IIB)V");
    }

    static void setLuminance(const jobject& obj, const jint& arg0, const jint& arg1, const jbyte& arg2) {
                
       const auto methodID = methodID_setLuminance();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getRed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getRedOrLuminance", "method_35623", "getRed", "m_166408_"), "(II)B");
    }

    static jbyte getRed(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_getRed();
       return MinecraftSDK::env->CallByteMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getGreen() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getGreenOrLuminance", "method_35625", "getGreen", "m_166415_"), "(II)B");
    }

    static jbyte getGreen(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_getGreen();
       return MinecraftSDK::env->CallByteMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getBlue() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getBlueOrLuminance", "method_35626", "getBlue", "m_166418_"), "(II)B");
    }

    static jbyte getBlue(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_getBlue();
       return MinecraftSDK::env->CallByteMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getOpacity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "getLuminanceOrAlpha", "method_4311", "getOpacity", "m_85087_"), "(II)B");
    }

    static jbyte getOpacity(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_getOpacity();
       return MinecraftSDK::env->CallByteMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_blend() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "blendPixel", "method_35624", "blend", "m_166411_"), "(III)V");
    }

    static void blend(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_blend();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_makePixelArray() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "makePixelArray", "method_4322", "makePixelArray", "m_85118_"), "()[I");
    }

    static jint makePixelArray(const jobject& obj) {
                
       const auto methodID = methodID_makePixelArray();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_upload() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "upload", "method_4301", "upload", "m_85040_"), "(IIIZ)V");
    }

    static void upload(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2, const jboolean& arg3) {
                
       const auto methodID = methodID_upload();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID__upload() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "upload", "method_4312", "upload", "m_85003_"), "(IIIIIIIZZ)V");
    }

    static void _upload(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2, const jint& arg3, const jint& arg4, const jint& arg5, const jint& arg6, const jboolean& arg7, const jboolean& arg8) {
                
       const auto methodID = methodID__upload();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    };
    
    static jmethodID methodID___upload() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "upload", "method_22619", "upload", "m_85013_"), "(IIIIIIIZZZZ)V");
    }

    static void __upload(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2, const jint& arg3, const jint& arg4, const jint& arg5, const jint& arg6, const jboolean& arg7, const jboolean& arg8, const jboolean& arg9, const jboolean& arg10) {
                
       const auto methodID = methodID___upload();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    };
    
    static jmethodID methodID_uploadInternal() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "_upload", "method_4321", "uploadInternal", "m_85090_"), "(IIIIIIIZZZZ)V");
    }

    static void uploadInternal(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2, const jint& arg3, const jint& arg4, const jint& arg5, const jint& arg6, const jboolean& arg7, const jboolean& arg8, const jboolean& arg9, const jboolean& arg10) {
                
       const auto methodID = methodID_uploadInternal();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    };
    
    static jmethodID methodID_loadFromTextureImage() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "downloadTexture", "method_4327", "loadFromTextureImage", "m_85045_"), "(IZ)V");
    }

    static void loadFromTextureImage(const jobject& obj, const jint& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_loadFromTextureImage();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_readDepthComponent() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "downloadDepthBuffer", "method_35620", "readDepthComponent", "m_166400_"), "(F)V");
    }

    static void readDepthComponent(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_readDepthComponent();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_drawPixels() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "drawPixels", "method_35627", "drawPixels", "m_166421_"), "()V");
    }

    static void drawPixels(const jobject& obj) {
                
       const auto methodID = methodID_drawPixels();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_writeTo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "writeToFile", "method_4325", "writeTo", "m_85056_"), "(Ljava/io/File;)V");
    }

    static void writeTo(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_writeTo();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_makeGlyphBitmapSubpixel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "copyFromFont", "method_4316", "makeGlyphBitmapSubpixel", "m_85068_"), "(Lorg/lwjgl/util/freetype/FT_Face;I)Z");
    }

    static jboolean makeGlyphBitmapSubpixel(const jobject& obj, const jobject& arg0, const jint& arg1) {
                
       const auto methodID = methodID_makeGlyphBitmapSubpixel();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__writeTo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "writeToFile", "method_4314", "writeTo", "m_85066_"), "(Ljava/nio/file/Path;)V");
    }

    static void _writeTo(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__writeTo();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getBytes() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "asByteArray", "method_24036", "getBytes", "m_85121_"), "()[B");
    }

    static jbyte getBytes(const jobject& obj) {
                
       const auto methodID = methodID_getBytes();
       return MinecraftSDK::env->CallByteMethod(obj, methodID);
    };
    
    static jmethodID methodID_write() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "writeToChannel", "method_24032", "write", "m_85064_"), "(Ljava/nio/channels/WritableByteChannel;)Z");
    }

    static jboolean write(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_write();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_copyFrom() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "copyFrom", "method_4317", "copyFrom", "m_85054_"), "(Lfaj;)V");
    }

    static void copyFrom(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_copyFrom();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_fillRect() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "fillRect", "method_4326", "fillRect", "m_84997_"), "(IIIII)V");
    }

    static void fillRect(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2, const jint& arg3, const jint& arg4) {
                
       const auto methodID = methodID_fillRect();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_copyRect() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "copyRect", "method_4304", "copyRect", "m_85025_"), "(IIIIIIZZ)V");
    }

    static void copyRect(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2, const jint& arg3, const jint& arg4, const jint& arg5, const jboolean& arg6, const jboolean& arg7) {
                
       const auto methodID = methodID_copyRect();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    };
    
    static jmethodID methodID__copyRect() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "copyRect", "method_47594", "copyRect", "m_260930_"), "(Lfaj;IIIIIIZZ)V");
    }

    static void _copyRect(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2, const jint& arg3, const jint& arg4, const jint& arg5, const jint& arg6, const jboolean& arg7, const jboolean& arg8) {
                
       const auto methodID = methodID__copyRect();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    };
    
    static jmethodID methodID_mirrorVertically() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "flipY", "method_4319", "mirrorVertically", "m_85122_"), "()V");
    }

    static void mirrorVertically(const jobject& obj) {
                
       const auto methodID = methodID_mirrorVertically();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_resizeSubRectTo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "resizeSubRectTo", "method_4300", "resizeSubRectTo", "m_85034_"), "(IIIILfaj;)V");
    }

    static void resizeSubRectTo(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2, const jint& arg3, const jobject& arg4) {
                
       const auto methodID = methodID_resizeSubRectTo();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_untrack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "untrack", "method_4302", "untrack", "m_85123_"), "()V");
    }

    static void untrack(const jobject& obj) {
                
       const auto methodID = methodID_untrack();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_TEXTURE_NATIVEIMAGE_HPP