// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_PARTICLE_FIREWORKSSPARKPARTICLE$FIREWORKPARTICLE_HPP
#define NET_MINECRAFT_CLIENT_PARTICLE_FIREWORKSSPARKPARTICLE$FIREWORKPARTICLE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.particle.FireworksSparkParticle$FireworkParticle
 * Remapped: gbx$e
 */
namespace FireworksSparkParticle$FireworkParticle {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("gbx$e", "net/minecraft/client/particle/FireworkParticles$Starter", "net/minecraft/class_677$class_681", "net/minecraft/client/particle/FireworksSparkParticle$FireworkParticle", "net/minecraft/src/C_3988_$C_3994_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.client.particle.FireworksSparkParticle$FireworkParticle#CREEPER_PATTERN
    [[maybe_unused]] static jdouble get_field_CREEPER_PATTERN() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CREEPER_PARTICLE_COORDS", "field_49565", "CREEPER_PATTERN", "f_314340_"), "[[D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.particle.FireworksSparkParticle$FireworkParticle#CREEPER_PATTERN
    [[maybe_unused]] static void set_field_CREEPER_PATTERN(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CREEPER_PARTICLE_COORDS", "field_49565", "CREEPER_PATTERN", "f_314340_"), "[[D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.particle.FireworksSparkParticle$FireworkParticle#STAR_PATTERN
    [[maybe_unused]] static jdouble get_field_STAR_PATTERN() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "STAR_PARTICLE_COORDS", "field_49566", "STAR_PATTERN", "f_314345_"), "[[D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.particle.FireworksSparkParticle$FireworkParticle#STAR_PATTERN
    [[maybe_unused]] static void set_field_STAR_PATTERN(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "STAR_PARTICLE_COORDS", "field_49566", "STAR_PATTERN", "f_314345_"), "[[D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.client.particle.FireworksSparkParticle$FireworkParticle#age
    static jint get_field_age(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("D", "life", "field_3808", "age", "f_106754_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.particle.FireworksSparkParticle$FireworkParticle#age
    static void set_field_age(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("D", "life", "field_3808", "age", "f_106754_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.particle.FireworksSparkParticle$FireworkParticle#particleManager
    static jobject get_field_particleManager(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("E", "engine", "field_3805", "particleManager", "f_106755_"), "Lgcp;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.particle.FireworksSparkParticle$FireworkParticle#particleManager
    static void set_field_particleManager(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("E", "engine", "field_3805", "particleManager", "f_106755_"), "Lgcp;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.particle.FireworksSparkParticle$FireworkParticle#explosions
    static jobject get_field_explosions(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("F", "explosions", "field_3806", "explosions", "f_106752_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.particle.FireworksSparkParticle$FireworkParticle#explosions
    static void set_field_explosions(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("F", "explosions", "field_3806", "explosions", "f_106752_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.particle.FireworksSparkParticle$FireworkParticle#flicker
    static jboolean get_field_flicker(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("G", "twinkleDelay", "field_3807", "flicker", "f_106753_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.particle.FireworksSparkParticle$FireworkParticle#flicker
    static void set_field_flicker(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("G", "twinkleDelay", "field_3807", "flicker", "f_106753_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    static jmethodID methodID_tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "tick", "method_3070", "tick", "m_5989_"), "()V");
    }

    static void tick(const jobject& obj) {
                
       const auto methodID = methodID_tick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_isFar() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "isFarAwayFromCamera", "method_3029", "isFar", "m_106798_"), "()Z");
    }

    static jboolean isFar(const jobject& obj) {
                
       const auto methodID = methodID_isFar();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_addExplosionParticle() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "createParticle", "method_3030", "addExplosionParticle", "m_106767_"), "(DDDDDDLit/unimi/dsi/fastutil/ints/IntList;Lit/unimi/dsi/fastutil/ints/IntList;ZZ)V");
    }

    static void addExplosionParticle(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2, const jdouble& arg3, const jdouble& arg4, const jdouble& arg5, const jobject& arg6, const jobject& arg7, const jboolean& arg8, const jboolean& arg9) {
                
       const auto methodID = methodID_addExplosionParticle();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    };
    
    static jmethodID methodID_explodeBall() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "createParticleBall", "method_3031", "explodeBall", "m_106778_"), "(DILit/unimi/dsi/fastutil/ints/IntList;Lit/unimi/dsi/fastutil/ints/IntList;ZZ)V");
    }

    static void explodeBall(const jobject& obj, const jdouble& arg0, const jint& arg1, const jobject& arg2, const jobject& arg3, const jboolean& arg4, const jboolean& arg5) {
                
       const auto methodID = methodID_explodeBall();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
    static jmethodID methodID_explodeStar() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "createParticleShape", "method_3028", "explodeStar", "m_106785_"), "(D[[DLit/unimi/dsi/fastutil/ints/IntList;Lit/unimi/dsi/fastutil/ints/IntList;ZZZ)V");
    }

    static void explodeStar(const jobject& obj, const jdouble& arg0, const jarray& arg1, const jarray& arg2, const jdouble& arg3, const jobject& arg4, const jobject& arg5, const jboolean& arg6, const jboolean& arg7, const jboolean& arg8) {
                
       const auto methodID = methodID_explodeStar();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    };
    
    static jmethodID methodID_explodeBurst() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "createParticleBurst", "method_3032", "explodeBurst", "m_106793_"), "(Lit/unimi/dsi/fastutil/ints/IntList;Lit/unimi/dsi/fastutil/ints/IntList;ZZ)V");
    }

    static void explodeBurst(const jobject& obj, const jobject& arg0, const jobject& arg1, const jboolean& arg2, const jboolean& arg3) {
                
       const auto methodID = methodID_explodeBurst();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_PARTICLE_FIREWORKSSPARKPARTICLE$FIREWORKPARTICLE_HPP