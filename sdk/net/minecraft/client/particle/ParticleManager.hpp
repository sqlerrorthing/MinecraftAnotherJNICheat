// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_PARTICLE_PARTICLEMANAGER_HPP
#define NET_MINECRAFT_CLIENT_PARTICLE_PARTICLEMANAGER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.particle.ParticleManager
 * Remapped: gcp
 */
namespace ParticleManager {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("gcp", "net/minecraft/client/particle/ParticleEngine", "net/minecraft/class_702", "net/minecraft/client/particle/ParticleManager", "net/minecraft/src/C_4024_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.client.particle.ParticleManager#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "LOGGER", "field_40505", "LOGGER", "f_243727_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.particle.ParticleManager#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "LOGGER", "field_40505", "LOGGER", "f_243727_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.particle.ParticleManager#FINDER
    [[maybe_unused]] static jobject get_field_FINDER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "PARTICLE_LISTER", "field_40506", "FINDER", "f_243929_"), "Lakk;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.particle.ParticleManager#FINDER
    [[maybe_unused]] static void set_field_FINDER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "PARTICLE_LISTER", "field_40506", "FINDER", "f_243929_"), "Lakk;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.particle.ParticleManager#PARTICLES_PATH
    [[maybe_unused]] static jobject get_field_PARTICLES_PATH() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "PARTICLES_ATLAS_INFO", "field_41385", "PARTICLES_PATH", "f_260634_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.particle.ParticleManager#PARTICLES_PATH
    [[maybe_unused]] static void set_field_PARTICLES_PATH(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "PARTICLES_ATLAS_INFO", "field_41385", "PARTICLES_PATH", "f_260634_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.particle.ParticleManager#MAX_PARTICLE_COUNT
    [[maybe_unused]] static jint get_field_MAX_PARTICLE_COUNT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "MAX_PARTICLES_PER_LAYER", "field_32657", "MAX_PARTICLE_COUNT", "f_172264_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.particle.ParticleManager#MAX_PARTICLE_COUNT
    [[maybe_unused]] static void set_field_MAX_PARTICLE_COUNT(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "MAX_PARTICLES_PER_LAYER", "field_32657", "MAX_PARTICLE_COUNT", "f_172264_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.particle.ParticleManager#PARTICLE_TEXTURE_SHEETS
    [[maybe_unused]] static jobject get_field_PARTICLE_TEXTURE_SHEETS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "RENDER_ORDER", "field_17820", "PARTICLE_TEXTURE_SHEETS", "f_107288_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.particle.ParticleManager#PARTICLE_TEXTURE_SHEETS
    [[maybe_unused]] static void set_field_PARTICLE_TEXTURE_SHEETS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "RENDER_ORDER", "field_17820", "PARTICLE_TEXTURE_SHEETS", "f_107288_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for protected field net.minecraft.client.particle.ParticleManager#world
    static jobject get_field_world(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "level", "field_3834", "world", "f_107287_"), "Lfzf;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.client.particle.ParticleManager#world
    static void set_field_world(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "level", "field_3834", "world", "f_107287_"), "Lfzf;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.particle.ParticleManager#particles
    static jobject get_field_particles(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "particles", "field_3830", "particles", "f_107289_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.particle.ParticleManager#particles
    static void set_field_particles(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "particles", "field_3830", "particles", "f_107289_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.particle.ParticleManager#newEmitterParticles
    static jobject get_field_newEmitterParticles(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "trackingEmitters", "field_3837", "newEmitterParticles", "f_107290_"), "Ljava/util/Queue;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.particle.ParticleManager#newEmitterParticles
    static void set_field_newEmitterParticles(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "trackingEmitters", "field_3837", "newEmitterParticles", "f_107290_"), "Ljava/util/Queue;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.particle.ParticleManager#textureManager
    static jobject get_field_textureManager(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "textureManager", "field_3831", "textureManager", "f_107291_"), "Lgqm;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.particle.ParticleManager#textureManager
    static void set_field_textureManager(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "textureManager", "field_3831", "textureManager", "f_107291_"), "Lgqm;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.particle.ParticleManager#random
    static jobject get_field_random(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "random", "field_3832", "random", "f_107292_"), "Layw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.particle.ParticleManager#random
    static void set_field_random(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "random", "field_3832", "random", "f_107292_"), "Layw;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.particle.ParticleManager#factories
    static jobject get_field_factories(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "providers", "field_3835", "factories", "f_107293_"), "Lit/unimi/dsi/fastutil/ints/Int2ObjectMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.particle.ParticleManager#factories
    static void set_field_factories(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "providers", "field_3835", "factories", "f_107293_"), "Lit/unimi/dsi/fastutil/ints/Int2ObjectMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.particle.ParticleManager#newParticles
    static jobject get_field_newParticles(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "particlesToAdd", "field_3836", "newParticles", "f_107294_"), "Ljava/util/Queue;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.particle.ParticleManager#newParticles
    static void set_field_newParticles(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "particlesToAdd", "field_3836", "newParticles", "f_107294_"), "Ljava/util/Queue;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.particle.ParticleManager#spriteAwareFactories
    static jobject get_field_spriteAwareFactories(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "spriteSets", "field_18300", "spriteAwareFactories", "f_107295_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.particle.ParticleManager#spriteAwareFactories
    static void set_field_spriteAwareFactories(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "spriteSets", "field_18300", "spriteAwareFactories", "f_107295_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.particle.ParticleManager#particleAtlasTexture
    static jobject get_field_particleAtlasTexture(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "textureAtlas", "field_18301", "particleAtlasTexture", "f_107296_"), "Lgqk;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.particle.ParticleManager#particleAtlasTexture
    static void set_field_particleAtlasTexture(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "textureAtlas", "field_18301", "particleAtlasTexture", "f_107296_"), "Lgqk;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.particle.ParticleManager#groupCounts
    static jobject get_field_groupCounts(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "trackedParticleCounts", "field_29072", "groupCounts", "f_172265_"), "Lit/unimi/dsi/fastutil/objects/Object2IntOpenHashMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.particle.ParticleManager#groupCounts
    static void set_field_groupCounts(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "trackedParticleCounts", "field_29072", "groupCounts", "f_172265_"), "Lit/unimi/dsi/fastutil/objects/Object2IntOpenHashMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_registerDefaultFactories() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "registerProviders", "method_3062", "registerDefaultFactories", "m_107404_"), "()V");
    }

    static void registerDefaultFactories(const jobject& obj) {
                
       const auto methodID = methodID_registerDefaultFactories();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_registerFactory() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "register", "method_3043", "registerFactory", "m_107381_"), "(Lll;Lgcq;)V");
    }

    static void registerFactory(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_registerFactory();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_registerBlockLeakFactory() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "register", "method_49338", "registerBlockLeakFactory", "m_272137_"), "(Lll;Lgcq$a;)V");
    }

    static void registerBlockLeakFactory(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_registerBlockLeakFactory();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__registerFactory() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "register", "method_18834", "registerFactory", "m_107378_"), "(Lll;Lgcp$c;)V");
    }

    static void _registerFactory(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID__registerFactory();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_reload() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "reload", "method_25931", "reload", "m_5540_"), "(Laty$a;Laue;Lbnf;Lbnf;Ljava/util/concurrent/Executor;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject reload(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4, const jobject& arg5) {
                
       const auto methodID = methodID_reload();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
    static jmethodID methodID_clearAtlas() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "close", "method_18829", "clearAtlas", "m_107301_"), "()V");
    }

    static void clearAtlas(const jobject& obj) {
                
       const auto methodID = methodID_clearAtlas();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_loadTextureList() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "loadParticleDescription", "method_18836", "loadTextureList", "m_245118_"), "(Lakr;Lauc;)Ljava/util/Optional;");
    }

    static jobject loadTextureList(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_loadTextureList();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_addEmitter() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "createTrackingEmitter", "method_3061", "addEmitter", "m_107329_"), "(Lbsr;Llk;)V");
    }

    static void addEmitter(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_addEmitter();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__addEmitter() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "createTrackingEmitter", "method_3051", "addEmitter", "m_107332_"), "(Lbsr;Llk;I)V");
    }

    static void _addEmitter(const jobject& obj, const jobject& arg0, const jobject& arg1, const jint& arg2) {
                
       const auto methodID = methodID__addEmitter();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_addParticle() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "createParticle", "method_3056", "addParticle", "m_107370_"), "(Llk;DDDDDD)Lgcn;");
    }

    static jobject addParticle(const jobject& obj, const jobject& arg0, const jdouble& arg1, const jdouble& arg2, const jdouble& arg3, const jdouble& arg4, const jdouble& arg5, const jdouble& arg6) {
                
       const auto methodID = methodID_addParticle();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    };
    
    static jmethodID methodID_createParticle() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "makeParticle", "method_3055", "createParticle", "m_107395_"), "(Llk;DDDDDD)Lgcn;");
    }

    static jobject createParticle(const jobject& obj, const jobject& arg0, const jdouble& arg1, const jdouble& arg2, const jdouble& arg3, const jdouble& arg4, const jdouble& arg5, const jdouble& arg6) {
                
       const auto methodID = methodID_createParticle();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    };
    
    static jmethodID methodID__addParticle() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "add", "method_3058", "addParticle", "m_107344_"), "(Lgcn;)V");
    }

    static void _addParticle(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__addParticle();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "tick", "method_3057", "tick", "m_107388_"), "()V");
    }

    static void tick(const jobject& obj) {
                
       const auto methodID = methodID_tick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_tickParticles() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "tickParticleList", "method_3048", "tickParticles", "m_107384_"), "(Ljava/util/Collection;)V");
    }

    static void tickParticles(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_tickParticles();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_addTo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateCount", "method_34022", "addTo", "m_172281_"), "(Llj;I)V");
    }

    static void addTo(const jobject& obj, const jobject& arg0, const jint& arg1) {
                
       const auto methodID = methodID_addTo();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_tickParticle() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "tickParticle", "method_3059", "tickParticle", "m_107393_"), "(Lgcn;)V");
    }

    static void tickParticle(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_tickParticle();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_renderParticles() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "render", "method_3049", "renderParticles", "m_107336_"), "(Lgey;Lffy;F)V");
    }

    static void renderParticles(const jobject& obj, const jobject& arg0, const jobject& arg1, const jfloat& arg2) {
                
       const auto methodID = methodID_renderParticles();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_setWorld() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setLevel", "method_3045", "setWorld", "m_107342_"), "(Lfzf;)V");
    }

    static void setWorld(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setWorld();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_addBlockBreakParticles() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "destroy", "method_3046", "addBlockBreakParticles", "m_107355_"), "(Ljd;Ldtc;)V");
    }

    static void addBlockBreakParticles(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_addBlockBreakParticles();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_addBlockBreakingParticles() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "crack", "method_3054", "addBlockBreakingParticles", "m_107367_"), "(Ljd;Lji;)V");
    }

    static void addBlockBreakingParticles(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_addBlockBreakingParticles();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getDebugString() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "countParticles", "method_3052", "getDebugString", "m_107403_"), "()Ljava/lang/String;");
    }

    static jobject getDebugString(const jobject& obj) {
                
       const auto methodID = methodID_getDebugString();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_canAdd() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "hasSpaceInParticleLimit", "method_34021", "canAdd", "m_172279_"), "(Llj;)Z");
    }

    static jboolean canAdd(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_canAdd();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_clearParticles() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "clearParticles", "method_48015", "clearParticles", "m_263560_"), "()V");
    }

    static void clearParticles(const jobject& obj) {
                
       const auto methodID = methodID_clearParticles();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_PARTICLE_PARTICLEMANAGER_HPP