// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_PARTICLE_DRAGONBREATHPARTICLE_HPP
#define NET_MINECRAFT_CLIENT_PARTICLE_DRAGONBREATHPARTICLE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.particle.DragonBreathParticle
 * Remapped: gbo
 */
namespace DragonBreathParticle {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("gbo", "net/minecraft/client/particle/DragonBreathParticle", "net/minecraft/class_666", "net/minecraft/client/particle/DragonBreathParticle", "net/minecraft/src/C_3950_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.client.particle.DragonBreathParticle#MIN_COLOR
    [[maybe_unused]] static jint get_field_MIN_COLOR() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "COLOR_MIN", "field_32654", "MIN_COLOR", "f_171926_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.particle.DragonBreathParticle#MIN_COLOR
    [[maybe_unused]] static void set_field_MIN_COLOR(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "COLOR_MIN", "field_32654", "MIN_COLOR", "f_171926_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.particle.DragonBreathParticle#MAX_COLOR
    [[maybe_unused]] static jint get_field_MAX_COLOR() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "COLOR_MAX", "field_32655", "MAX_COLOR", "f_171927_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.particle.DragonBreathParticle#MAX_COLOR
    [[maybe_unused]] static void set_field_MAX_COLOR(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "COLOR_MAX", "field_32655", "MAX_COLOR", "f_171927_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.particle.DragonBreathParticle#MIN_RED
    [[maybe_unused]] static jfloat get_field_MIN_RED() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("F", "COLOR_MIN_RED", "field_32648", "MIN_RED", "f_171920_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.particle.DragonBreathParticle#MIN_RED
    [[maybe_unused]] static void set_field_MIN_RED(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("F", "COLOR_MIN_RED", "field_32648", "MIN_RED", "f_171920_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.particle.DragonBreathParticle#MIN_GREEN
    [[maybe_unused]] static jfloat get_field_MIN_GREEN() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("G", "COLOR_MIN_GREEN", "field_32649", "MIN_GREEN", "f_171921_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.particle.DragonBreathParticle#MIN_GREEN
    [[maybe_unused]] static void set_field_MIN_GREEN(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("G", "COLOR_MIN_GREEN", "field_32649", "MIN_GREEN", "f_171921_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.particle.DragonBreathParticle#MIN_BLUE
    [[maybe_unused]] static jfloat get_field_MIN_BLUE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("H", "COLOR_MIN_BLUE", "field_32650", "MIN_BLUE", "f_171922_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.particle.DragonBreathParticle#MIN_BLUE
    [[maybe_unused]] static void set_field_MIN_BLUE(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("H", "COLOR_MIN_BLUE", "field_32650", "MIN_BLUE", "f_171922_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.particle.DragonBreathParticle#MAX_RED
    [[maybe_unused]] static jfloat get_field_MAX_RED() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("I", "COLOR_MAX_RED", "field_32651", "MAX_RED", "f_171923_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.particle.DragonBreathParticle#MAX_RED
    [[maybe_unused]] static void set_field_MAX_RED(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("I", "COLOR_MAX_RED", "field_32651", "MAX_RED", "f_171923_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.particle.DragonBreathParticle#MAX_GREEN
    [[maybe_unused]] static jfloat get_field_MAX_GREEN() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("J", "COLOR_MAX_GREEN", "field_32652", "MAX_GREEN", "f_171924_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.particle.DragonBreathParticle#MAX_GREEN
    [[maybe_unused]] static void set_field_MAX_GREEN(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("J", "COLOR_MAX_GREEN", "field_32652", "MAX_GREEN", "f_171924_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.particle.DragonBreathParticle#MAX_BLUE
    [[maybe_unused]] static jfloat get_field_MAX_BLUE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("K", "COLOR_MAX_BLUE", "field_32653", "MAX_BLUE", "f_171925_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.particle.DragonBreathParticle#MAX_BLUE
    [[maybe_unused]] static void set_field_MAX_BLUE(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("K", "COLOR_MAX_BLUE", "field_32653", "MAX_BLUE", "f_171925_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.client.particle.DragonBreathParticle#reachedGround
    static jboolean get_field_reachedGround(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("L", "hasHitGround", "field_3792", "reachedGround", "f_106002_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.particle.DragonBreathParticle#reachedGround
    static void set_field_reachedGround(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("L", "hasHitGround", "field_3792", "reachedGround", "f_106002_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.particle.DragonBreathParticle#spriteProvider
    static jobject get_field_spriteProvider(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("M", "sprites", "field_17793", "spriteProvider", "f_106003_"), "Lgdi;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.particle.DragonBreathParticle#spriteProvider
    static void set_field_spriteProvider(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("M", "sprites", "field_17793", "spriteProvider", "f_106003_"), "Lgdi;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "tick", "method_3070", "tick", "m_5989_"), "()V");
    }

    static void tick(const jobject& obj) {
                
       const auto methodID = methodID_tick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getType() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getRenderType", "method_18122", "getType", "m_7556_"), "()Lgcr;");
    }

    static jobject getType(const jobject& obj) {
                
       const auto methodID = methodID_getType();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getSize() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getQuadSize", "method_18132", "getSize", "m_5902_"), "(F)F");
    }

    static jfloat getSize(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_getSize();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_PARTICLE_DRAGONBREATHPARTICLE_HPP