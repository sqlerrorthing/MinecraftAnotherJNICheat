// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_GL_FRAMEBUFFER_HPP
#define NET_MINECRAFT_CLIENT_GL_FRAMEBUFFER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.gl.Framebuffer
 * Remapped: ezv
 */
namespace Framebuffer {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("ezv", "com/mojang/blaze3d/pipeline/RenderTarget", "net/minecraft/class_276", "net/minecraft/client/gl/Framebuffer", "net/minecraft/src/C_3106_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.client.gl.Framebuffer#field_31901
    [[maybe_unused]] static jint get_field_field_31901() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "RED_CHANNEL", "field_31901", "field_31901", "f_166194_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.gl.Framebuffer#field_31901
    [[maybe_unused]] static void set_field_field_31901(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "RED_CHANNEL", "field_31901", "field_31901", "f_166194_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.gl.Framebuffer#field_31902
    [[maybe_unused]] static jint get_field_field_31902() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "GREEN_CHANNEL", "field_31902", "field_31902", "f_166195_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.gl.Framebuffer#field_31902
    [[maybe_unused]] static void set_field_field_31902(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "GREEN_CHANNEL", "field_31902", "field_31902", "f_166195_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.gl.Framebuffer#field_31903
    [[maybe_unused]] static jint get_field_field_31903() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "BLUE_CHANNEL", "field_31903", "field_31903", "f_166196_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.gl.Framebuffer#field_31903
    [[maybe_unused]] static void set_field_field_31903(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "BLUE_CHANNEL", "field_31903", "field_31903", "f_166196_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.gl.Framebuffer#field_31904
    [[maybe_unused]] static jint get_field_field_31904() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "ALPHA_CHANNEL", "field_31904", "field_31904", "f_166197_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.gl.Framebuffer#field_31904
    [[maybe_unused]] static void set_field_field_31904(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "ALPHA_CHANNEL", "field_31904", "field_31904", "f_166197_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for public field net.minecraft.client.gl.Framebuffer#textureWidth
    static jint get_field_textureWidth(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "width", "field_1482", "textureWidth", "f_83915_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static public field net.minecraft.client.gl.Framebuffer#textureWidth
    static void set_field_textureWidth(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "width", "field_1482", "textureWidth", "f_83915_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.client.gl.Framebuffer#textureHeight
    static jint get_field_textureHeight(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "height", "field_1481", "textureHeight", "f_83916_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static public field net.minecraft.client.gl.Framebuffer#textureHeight
    static void set_field_textureHeight(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "height", "field_1481", "textureHeight", "f_83916_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.client.gl.Framebuffer#viewportWidth
    static jint get_field_viewportWidth(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "viewWidth", "field_1480", "viewportWidth", "f_83917_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static public field net.minecraft.client.gl.Framebuffer#viewportWidth
    static void set_field_viewportWidth(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "viewWidth", "field_1480", "viewportWidth", "f_83917_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.client.gl.Framebuffer#viewportHeight
    static jint get_field_viewportHeight(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "viewHeight", "field_1477", "viewportHeight", "f_83918_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static public field net.minecraft.client.gl.Framebuffer#viewportHeight
    static void set_field_viewportHeight(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "viewHeight", "field_1477", "viewportHeight", "f_83918_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.client.gl.Framebuffer#useDepthAttachment
    static jboolean get_field_useDepthAttachment(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "useDepth", "field_1478", "useDepthAttachment", "f_83919_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static public field net.minecraft.client.gl.Framebuffer#useDepthAttachment
    static void set_field_useDepthAttachment(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "useDepth", "field_1478", "useDepthAttachment", "f_83919_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.client.gl.Framebuffer#fbo
    static jint get_field_fbo(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "frameBufferId", "field_1476", "fbo", "f_83920_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static public field net.minecraft.client.gl.Framebuffer#fbo
    static void set_field_fbo(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "frameBufferId", "field_1476", "fbo", "f_83920_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.client.gl.Framebuffer#colorAttachment
    static jint get_field_colorAttachment(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "colorTextureId", "field_1475", "colorAttachment", "f_83923_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.client.gl.Framebuffer#colorAttachment
    static void set_field_colorAttachment(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "colorTextureId", "field_1475", "colorAttachment", "f_83923_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.client.gl.Framebuffer#depthAttachment
    static jint get_field_depthAttachment(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "depthBufferId", "field_1474", "depthAttachment", "f_83924_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.client.gl.Framebuffer#depthAttachment
    static void set_field_depthAttachment(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "depthBufferId", "field_1474", "depthAttachment", "f_83924_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gl.Framebuffer#clearColor
    static jfloat get_field_clearColor(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "clearChannels", "field_1479", "clearColor", "f_83921_"), "[F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gl.Framebuffer#clearColor
    static void set_field_clearColor(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "clearChannels", "field_1479", "clearColor", "f_83921_"), "[F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.client.gl.Framebuffer#texFilter
    static jint get_field_texFilter(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "filterMode", "field_1483", "texFilter", "f_83922_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static public field net.minecraft.client.gl.Framebuffer#texFilter
    static void set_field_texFilter(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "filterMode", "field_1483", "texFilter", "f_83922_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    static jmethodID methodID_resize() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "resize", "method_1234", "resize", "m_83941_"), "(IIZ)V");
    }

    static void resize(const jobject& obj, const jint& arg0, const jint& arg1, const jboolean& arg2) {
                
       const auto methodID = methodID_resize();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_resizeInternal() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "_resize", "method_22596", "resizeInternal", "m_83964_"), "(IIZ)V");
    }

    static void resizeInternal(const jobject& obj, const jint& arg0, const jint& arg1, const jboolean& arg2) {
                
       const auto methodID = methodID_resizeInternal();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_delete() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "destroyBuffers", "method_1238", "delete", "m_83930_"), "()V");
    }

    static void delete(const jobject& obj) {
                
       const auto methodID = methodID_delete();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_copyDepthFrom() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "copyDepthFrom", "method_29329", "copyDepthFrom", "m_83945_"), "(Lezv;)V");
    }

    static void copyDepthFrom(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_copyDepthFrom();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_initFbo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "createBuffers", "method_1231", "initFbo", "m_83950_"), "(IIZ)V");
    }

    static void initFbo(const jobject& obj, const jint& arg0, const jint& arg1, const jboolean& arg2) {
                
       const auto methodID = methodID_initFbo();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_setTexFilter() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setFilterMode", "method_58226", "setTexFilter", "m_83936_"), "(I)V");
    }

    static void setTexFilter(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_setTexFilter();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__setTexFilter() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setFilterMode", "method_1232", "setTexFilter", "m_321006_"), "(IZ)V");
    }

    static void _setTexFilter(const jobject& obj, const jint& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID__setTexFilter();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_checkFramebufferStatus() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "checkStatus", "method_1239", "checkFramebufferStatus", "m_83949_"), "()V");
    }

    static void checkFramebufferStatus(const jobject& obj) {
                
       const auto methodID = methodID_checkFramebufferStatus();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_beginRead() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "bindRead", "method_35610", "beginRead", "m_83956_"), "()V");
    }

    static void beginRead(const jobject& obj) {
                
       const auto methodID = methodID_beginRead();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_endRead() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "unbindRead", "method_1242", "endRead", "m_83963_"), "()V");
    }

    static void endRead(const jobject& obj) {
                
       const auto methodID = methodID_endRead();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_beginWrite() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "bindWrite", "method_1235", "beginWrite", "m_83947_"), "(Z)V");
    }

    static void beginWrite(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_beginWrite();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_bind() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "_bindWrite", "method_22595", "bind", "m_83961_"), "(Z)V");
    }

    static void bind(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_bind();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_endWrite() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "unbindWrite", "method_1240", "endWrite", "m_83970_"), "()V");
    }

    static void endWrite(const jobject& obj) {
                
       const auto methodID = methodID_endWrite();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_setClearColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setClearColor", "method_1236", "setClearColor", "m_83931_"), "(FFFF)V");
    }

    static void setClearColor(const jobject& obj, const jfloat& arg0, const jfloat& arg1, const jfloat& arg2, const jfloat& arg3) {
                
       const auto methodID = methodID_setClearColor();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_draw() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "blitToScreen", "method_1237", "draw", "m_83938_"), "(II)V");
    }

    static void draw(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_draw();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__draw() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "blitToScreen", "method_22594", "draw", "m_83957_"), "(IIZ)V");
    }

    static void _draw(const jobject& obj, const jint& arg0, const jint& arg1, const jboolean& arg2) {
                
       const auto methodID = methodID__draw();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_drawInternal() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "_blitToScreen", "method_1233", "drawInternal", "m_83971_"), "(IIZ)V");
    }

    static void drawInternal(const jobject& obj, const jint& arg0, const jint& arg1, const jboolean& arg2) {
                
       const auto methodID = methodID_drawInternal();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_clear() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "clear", "method_1230", "clear", "m_83954_"), "(Z)V");
    }

    static void clear(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_clear();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getColorAttachment() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "getColorTextureId", "method_30277", "getColorAttachment", "m_83975_"), "()I");
    }

    static jint getColorAttachment(const jobject& obj) {
                
       const auto methodID = methodID_getColorAttachment();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getDepthAttachment() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "getDepthTextureId", "method_30278", "getDepthAttachment", "m_83980_"), "()I");
    }

    static jint getDepthAttachment(const jobject& obj) {
                
       const auto methodID = methodID_getDepthAttachment();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_GL_FRAMEBUFFER_HPP