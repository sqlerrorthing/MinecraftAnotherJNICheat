// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_RENDER_FRUSTUM_HPP
#define NET_MINECRAFT_CLIENT_RENDER_FRUSTUM_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.render.Frustum
 * Remapped: gie
 */
namespace Frustum {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("gie", "net/minecraft/client/renderer/culling/Frustum", "net/minecraft/class_4604", "net/minecraft/client/render/Frustum", "net/minecraft/src/C_4273_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.client.render.Frustum#RECESSION_SCALE
    [[maybe_unused]] static jint get_field_RECESSION_SCALE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "OFFSET_STEP", "field_34820", "RECESSION_SCALE", "f_194437_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.render.Frustum#RECESSION_SCALE
    [[maybe_unused]] static void set_field_RECESSION_SCALE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "OFFSET_STEP", "field_34820", "RECESSION_SCALE", "f_194437_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.client.render.Frustum#frustumIntersection
    static jobject get_field_frustumIntersection(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "intersection", "field_40823", "frustumIntersection", "f_252531_"), "Lorg/joml/FrustumIntersection;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.render.Frustum#frustumIntersection
    static void set_field_frustumIntersection(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "intersection", "field_40823", "frustumIntersection", "f_252531_"), "Lorg/joml/FrustumIntersection;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.render.Frustum#positionProjectionMatrix
    static jobject get_field_positionProjectionMatrix(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "matrix", "field_40824", "positionProjectionMatrix", "f_252406_"), "Lorg/joml/Matrix4f;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.render.Frustum#positionProjectionMatrix
    static void set_field_positionProjectionMatrix(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "matrix", "field_40824", "positionProjectionMatrix", "f_252406_"), "Lorg/joml/Matrix4f;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.render.Frustum#recession
    static jobject get_field_recession(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "viewVector", "field_34821", "recession", "f_194438_"), "Lorg/joml/Vector4f;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.render.Frustum#recession
    static void set_field_recession(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "viewVector", "field_34821", "recession", "f_194438_"), "Lorg/joml/Vector4f;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.render.Frustum#x
    static jdouble get_field_x(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "camX", "field_20995", "x", "f_112996_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.render.Frustum#x
    static void set_field_x(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "camX", "field_20995", "x", "f_112996_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.render.Frustum#y
    static jdouble get_field_y(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "camY", "field_20996", "y", "f_112997_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.render.Frustum#y
    static void set_field_y(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "camY", "field_20996", "y", "f_112997_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.render.Frustum#z
    static jdouble get_field_z(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "camZ", "field_20997", "z", "f_112998_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.render.Frustum#z
    static void set_field_z(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "camZ", "field_20997", "z", "f_112998_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    static jmethodID methodID_coverBoxAroundSetPosition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "offsetToFullyIncludeCameraCube", "method_38557", "coverBoxAroundSetPosition", "m_194441_"), "(I)Lgie;");
    }

    static jobject coverBoxAroundSetPosition(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_coverBoxAroundSetPosition();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setPosition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "prepare", "method_23088", "setPosition", "m_113002_"), "(DDD)V");
    }

    static void setPosition(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID_setPosition();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_init() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "calculateFrustum", "method_23092", "init", "m_253155_"), "(Lorg/joml/Matrix4f;Lorg/joml/Matrix4f;)V");
    }

    static void init(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_init();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isVisible() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isVisible", "method_23093", "isVisible", "m_113029_"), "(Lewx;)Z");
    }

    static jboolean isVisible(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isVisible();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__isVisible() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "cubeInFrustum", "method_23089", "isVisible", "m_113006_"), "(DDDDDD)Z");
    }

    static jboolean _isVisible(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2, const jdouble& arg3, const jdouble& arg4, const jdouble& arg5) {
                
       const auto methodID = methodID__isVisible();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_RENDER_FRUSTUM_HPP