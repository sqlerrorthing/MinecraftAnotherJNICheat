// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_RENDER_LIGHTMAPTEXTUREMANAGER_HPP
#define NET_MINECRAFT_CLIENT_RENDER_LIGHTMAPTEXTUREMANAGER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.render.LightmapTextureManager
 * Remapped: gey
 */
namespace LightmapTextureManager {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("gey", "net/minecraft/client/renderer/LightTexture", "net/minecraft/class_765", "net/minecraft/client/render/LightmapTextureManager", "net/minecraft/src/C_4138_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.client.render.LightmapTextureManager#MAX_LIGHT_COORDINATE
    [[maybe_unused]] static jint get_field_MAX_LIGHT_COORDINATE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "FULL_BRIGHT", "field_32767", "MAX_LIGHT_COORDINATE", "f_173040_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.render.LightmapTextureManager#MAX_LIGHT_COORDINATE
    [[maybe_unused]] static void set_field_MAX_LIGHT_COORDINATE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "FULL_BRIGHT", "field_32767", "MAX_LIGHT_COORDINATE", "f_173040_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.client.render.LightmapTextureManager#MAX_SKY_LIGHT_COORDINATE
    [[maybe_unused]] static jint get_field_MAX_SKY_LIGHT_COORDINATE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "FULL_SKY", "field_32768", "MAX_SKY_LIGHT_COORDINATE", "f_173041_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.render.LightmapTextureManager#MAX_SKY_LIGHT_COORDINATE
    [[maybe_unused]] static void set_field_MAX_SKY_LIGHT_COORDINATE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "FULL_SKY", "field_32768", "MAX_SKY_LIGHT_COORDINATE", "f_173041_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.client.render.LightmapTextureManager#MAX_BLOCK_LIGHT_COORDINATE
    [[maybe_unused]] static jint get_field_MAX_BLOCK_LIGHT_COORDINATE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "FULL_BLOCK", "field_32769", "MAX_BLOCK_LIGHT_COORDINATE", "f_173042_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.render.LightmapTextureManager#MAX_BLOCK_LIGHT_COORDINATE
    [[maybe_unused]] static void set_field_MAX_BLOCK_LIGHT_COORDINATE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "FULL_BLOCK", "field_32769", "MAX_BLOCK_LIGHT_COORDINATE", "f_173042_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.client.render.LightmapTextureManager#texture
    static jobject get_field_texture(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "lightTexture", "field_4138", "texture", "f_109870_"), "Lgpy;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.render.LightmapTextureManager#texture
    static void set_field_texture(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "lightTexture", "field_4138", "texture", "f_109870_"), "Lgpy;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.render.LightmapTextureManager#image
    static jobject get_field_image(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "lightPixels", "field_4133", "image", "f_109871_"), "Lfaj;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.render.LightmapTextureManager#image
    static void set_field_image(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "lightPixels", "field_4133", "image", "f_109871_"), "Lfaj;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.render.LightmapTextureManager#textureIdentifier
    static jobject get_field_textureIdentifier(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "lightTextureLocation", "field_4136", "textureIdentifier", "f_109872_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.render.LightmapTextureManager#textureIdentifier
    static void set_field_textureIdentifier(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "lightTextureLocation", "field_4136", "textureIdentifier", "f_109872_"), "Lakr;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.render.LightmapTextureManager#dirty
    static jboolean get_field_dirty(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "updateLightTexture", "field_4135", "dirty", "f_109873_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.render.LightmapTextureManager#dirty
    static void set_field_dirty(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "updateLightTexture", "field_4135", "dirty", "f_109873_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.render.LightmapTextureManager#flickerIntensity
    static jfloat get_field_flickerIntensity(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "blockLightRedFlicker", "field_21528", "flickerIntensity", "f_109874_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.render.LightmapTextureManager#flickerIntensity
    static void set_field_flickerIntensity(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "blockLightRedFlicker", "field_21528", "flickerIntensity", "f_109874_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.render.LightmapTextureManager#renderer
    static jobject get_field_renderer(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "renderer", "field_4134", "renderer", "f_109875_"), "Lges;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.render.LightmapTextureManager#renderer
    static void set_field_renderer(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "renderer", "field_4134", "renderer", "f_109875_"), "Lges;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.render.LightmapTextureManager#client
    static jobject get_field_client(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "minecraft", "field_4137", "client", "f_109876_"), "Lfgo;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.render.LightmapTextureManager#client
    static void set_field_client(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "minecraft", "field_4137", "client", "f_109876_"), "Lfgo;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_close() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("close", "close", "", "", "close"), "()V");
    }

    static void close(const jobject& obj) {
                
       const auto methodID = methodID_close();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "tick", "method_3314", "tick", "m_109880_"), "()V");
    }

    static void tick(const jobject& obj) {
                
       const auto methodID = methodID_tick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_disable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "turnOffLightLayer", "method_3315", "disable", "m_109891_"), "()V");
    }

    static void disable(const jobject& obj) {
                
       const auto methodID = methodID_disable();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_enable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "turnOnLightLayer", "method_3316", "enable", "m_109896_"), "()V");
    }

    static void enable(const jobject& obj) {
                
       const auto methodID = methodID_enable();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getDarknessFactor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getDarknessGamma", "method_42597", "getDarknessFactor", "m_234319_"), "(F)F");
    }

    static jfloat getDarknessFactor(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_getDarknessFactor();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getDarkness() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "calculateDarknessScale", "method_42596", "getDarkness", "m_234312_"), "(Lbtn;FF)F");
    }

    static jfloat getDarkness(const jobject& obj, const jobject& arg0, const jfloat& arg1, const jfloat& arg2) {
                
       const auto methodID = methodID_getDarkness();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_update() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateLightTexture", "method_3313", "update", "m_109881_"), "(F)V");
    }

    static void update(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_update();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_clamp() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "clampColor", "method_46557", "clamp", "m_252983_"), "(Lorg/joml/Vector3f;)V");
    }

    static void clamp(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_clamp();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_easeOutQuart() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "notGamma", "method_23795", "easeOutQuart", "m_109892_"), "(F)F");
    }

    static jfloat easeOutQuart(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_easeOutQuart();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getBrightness() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getBrightness", "method_23284", "getBrightness", "m_234316_"), "(Ldwy;I)F");
    }

    static jfloat getBrightness(const jobject& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_getBrightness();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_pack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "pack", "method_23687", "pack", "m_109885_"), "(II)I");
    }

    static jint pack(const jint& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_pack();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getBlockLightCoordinates() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "block", "method_24186", "getBlockLightCoordinates", "m_109883_"), "(I)I");
    }

    static jint getBlockLightCoordinates(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getBlockLightCoordinates();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getSkyLightCoordinates() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "sky", "method_24187", "getSkyLightCoordinates", "m_109894_"), "(I)I");
    }

    static jint getSkyLightCoordinates(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getSkyLightCoordinates();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_RENDER_LIGHTMAPTEXTUREMANAGER_HPP