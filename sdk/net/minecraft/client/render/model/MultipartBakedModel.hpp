// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_RENDER_MODEL_MULTIPARTBAKEDMODEL_HPP
#define NET_MINECRAFT_CLIENT_RENDER_MODEL_MULTIPARTBAKEDMODEL_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.render.model.MultipartBakedModel
 * Remapped: gsw
 */
namespace MultipartBakedModel {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("gsw", "net/minecraft/client/resources/model/MultiPartBakedModel", "net/minecraft/class_1095", "net/minecraft/client/render/model/MultipartBakedModel", "net/minecraft/src/C_4538_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.client.render.model.MultipartBakedModel#components
    static jobject get_field_components(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "selectors", "field_5427", "components", "f_119459_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.render.model.MultipartBakedModel#components
    static void set_field_components(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "selectors", "field_5427", "components", "f_119459_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.client.render.model.MultipartBakedModel#ambientOcclusion
    static jboolean get_field_ambientOcclusion(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "hasAmbientOcclusion", "field_5430", "ambientOcclusion", "f_119453_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.client.render.model.MultipartBakedModel#ambientOcclusion
    static void set_field_ambientOcclusion(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "hasAmbientOcclusion", "field_5430", "ambientOcclusion", "f_119453_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.client.render.model.MultipartBakedModel#depthGui
    static jboolean get_field_depthGui(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "isGui3d", "field_5429", "depthGui", "f_119454_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.client.render.model.MultipartBakedModel#depthGui
    static void set_field_depthGui(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "isGui3d", "field_5429", "depthGui", "f_119454_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.client.render.model.MultipartBakedModel#sideLit
    static jboolean get_field_sideLit(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "usesBlockLight", "field_21863", "sideLit", "f_119455_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.client.render.model.MultipartBakedModel#sideLit
    static void set_field_sideLit(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "usesBlockLight", "field_21863", "sideLit", "f_119455_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.client.render.model.MultipartBakedModel#sprite
    static jobject get_field_sprite(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "particleIcon", "field_5425", "sprite", "f_119456_"), "Lgql;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.client.render.model.MultipartBakedModel#sprite
    static void set_field_sprite(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "particleIcon", "field_5425", "sprite", "f_119456_"), "Lgql;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.client.render.model.MultipartBakedModel#transformations
    static jobject get_field_transformations(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "transforms", "field_5426", "transformations", "f_119457_"), "Lggi;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.client.render.model.MultipartBakedModel#transformations
    static void set_field_transformations(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "transforms", "field_5426", "transformations", "f_119457_"), "Lggi;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.client.render.model.MultipartBakedModel#itemPropertyOverrides
    static jobject get_field_itemPropertyOverrides(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "overrides", "field_5428", "itemPropertyOverrides", "f_119458_"), "Lggg;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.client.render.model.MultipartBakedModel#itemPropertyOverrides
    static void set_field_itemPropertyOverrides(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "overrides", "field_5428", "itemPropertyOverrides", "f_119458_"), "Lggg;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.render.model.MultipartBakedModel#stateCache
    static jobject get_field_stateCache(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "selectorCache", "field_5431", "stateCache", "f_119460_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.render.model.MultipartBakedModel#stateCache
    static void set_field_stateCache(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "selectorCache", "field_5431", "stateCache", "f_119460_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_getQuads() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getQuads", "method_4707", "getQuads", "m_213637_"), "(Ldtc;Lji;Layw;)Ljava/util/List;");
    }

    static jobject getQuads(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_getQuads();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_useAmbientOcclusion() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "useAmbientOcclusion", "method_4708", "useAmbientOcclusion", "m_7541_"), "()Z");
    }

    static jboolean useAmbientOcclusion(const jobject& obj) {
                
       const auto methodID = methodID_useAmbientOcclusion();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasDepth() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "isGui3d", "method_4712", "hasDepth", "m_7539_"), "()Z");
    }

    static jboolean hasDepth(const jobject& obj) {
                
       const auto methodID = methodID_hasDepth();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isSideLit() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "usesBlockLight", "method_24304", "isSideLit", "m_7547_"), "()Z");
    }

    static jboolean isSideLit(const jobject& obj) {
                
       const auto methodID = methodID_isSideLit();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isBuiltin() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "isCustomRenderer", "method_4713", "isBuiltin", "m_7521_"), "()Z");
    }

    static jboolean isBuiltin(const jobject& obj) {
                
       const auto methodID = methodID_isBuiltin();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getParticleSprite() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "getParticleIcon", "method_4711", "getParticleSprite", "m_6160_"), "()Lgql;");
    }

    static jobject getParticleSprite(const jobject& obj) {
                
       const auto methodID = methodID_getParticleSprite();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getTransformation() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "getTransforms", "method_4709", "getTransformation", "m_7442_"), "()Lggi;");
    }

    static jobject getTransformation(const jobject& obj) {
                
       const auto methodID = methodID_getTransformation();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getOverrides() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "getOverrides", "method_4710", "getOverrides", "m_7343_"), "()Lggg;");
    }

    static jobject getOverrides(const jobject& obj) {
                
       const auto methodID = methodID_getOverrides();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_RENDER_MODEL_MULTIPARTBAKEDMODEL_HPP