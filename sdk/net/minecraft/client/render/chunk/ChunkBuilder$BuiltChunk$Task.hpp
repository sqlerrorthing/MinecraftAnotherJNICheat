// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_RENDER_CHUNK_CHUNKBUILDER$BUILTCHUNK$TASK_HPP
#define NET_MINECRAFT_CLIENT_RENDER_CHUNK_CHUNKBUILDER$BUILTCHUNK$TASK_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.render.chunk.ChunkBuilder$BuiltChunk$Task
 * Remapped: gia$b$a
 */
namespace ChunkBuilder$BuiltChunk$Task {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("gia$b$a", "net/minecraft/client/renderer/chunk/SectionRenderDispatcher$RenderSection$CompileTask", "net/minecraft/class_846$class_851$class_4577", "net/minecraft/client/render/chunk/ChunkBuilder$BuiltChunk$Task", "net/minecraft/src/C_290152_$C_290138_$C_290109_"));
        }
        return cachedClass;
    };

    // getter for protected field net.minecraft.client.render.chunk.ChunkBuilder$BuiltChunk$Task#distance
    static jdouble get_field_distance(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "distAtCreation", "field_20835", "distance", "f_290350_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.client.render.chunk.ChunkBuilder$BuiltChunk$Task#distance
    static void set_field_distance(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "distAtCreation", "field_20835", "distance", "f_290350_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.client.render.chunk.ChunkBuilder$BuiltChunk$Task#cancelled
    static jobject get_field_cancelled(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "isCancelled", "field_20836", "cancelled", "f_291175_"), "Ljava/util/concurrent/atomic/AtomicBoolean;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.client.render.chunk.ChunkBuilder$BuiltChunk$Task#cancelled
    static void set_field_cancelled(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "isCancelled", "field_20836", "cancelled", "f_291175_"), "Ljava/util/concurrent/atomic/AtomicBoolean;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.client.render.chunk.ChunkBuilder$BuiltChunk$Task#prioritized
    static jboolean get_field_prioritized(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "isHighPriority", "field_35304", "prioritized", "f_290632_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.client.render.chunk.ChunkBuilder$BuiltChunk$Task#prioritized
    static void set_field_prioritized(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "isHighPriority", "field_35304", "prioritized", "f_290632_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    static jmethodID methodID_run() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "doTask", "method_22783", "run", "m_294443_"), "(Lgfk;)Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject run(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_run();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_cancel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "cancel", "method_22782", "cancel", "m_292880_"), "()V");
    }

    static void cancel(const jobject& obj) {
                
       const auto methodID = methodID_cancel();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getName() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "name", "method_38556", "getName", "m_294775_"), "()Ljava/lang/String;");
    }

    static jobject getName(const jobject& obj) {
                
       const auto methodID = methodID_getName();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_compareTo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "compareTo", "method_22784", "compareTo", "compareTo"), "(Lgia$b$a;)I");
    }

    static jint compareTo(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_compareTo();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_RENDER_CHUNK_CHUNKBUILDER$BUILTCHUNK$TASK_HPP