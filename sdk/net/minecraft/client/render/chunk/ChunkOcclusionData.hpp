// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_RENDER_CHUNK_CHUNKOCCLUSIONDATA_HPP
#define NET_MINECRAFT_CLIENT_RENDER_CHUNK_CHUNKOCCLUSIONDATA_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.render.chunk.ChunkOcclusionData
 * Remapped: gic
 */
namespace ChunkOcclusionData {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("gic", "net/minecraft/client/renderer/chunk/VisibilitySet", "net/minecraft/class_854", "net/minecraft/client/render/chunk/ChunkOcclusionData", "net/minecraft/src/C_4272_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.client.render.chunk.ChunkOcclusionData#DIRECTION_COUNT
    [[maybe_unused]] static jint get_field_DIRECTION_COUNT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "FACINGS", "field_4491", "DIRECTION_COUNT", "f_112979_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.render.chunk.ChunkOcclusionData#DIRECTION_COUNT
    [[maybe_unused]] static void set_field_DIRECTION_COUNT(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "FACINGS", "field_4491", "DIRECTION_COUNT", "f_112979_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.client.render.chunk.ChunkOcclusionData#visibility
    static jobject get_field_visibility(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "data", "field_4492", "visibility", "f_112980_"), "Ljava/util/BitSet;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.render.chunk.ChunkOcclusionData#visibility
    static void set_field_visibility(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "data", "field_4492", "visibility", "f_112980_"), "Ljava/util/BitSet;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_addOpenEdgeFaces() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "add", "method_3693", "addOpenEdgeFaces", "m_112990_"), "(Ljava/util/Set;)V");
    }

    static void addOpenEdgeFaces(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addOpenEdgeFaces();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setVisibleThrough() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "set", "method_3692", "setVisibleThrough", "m_112986_"), "(Lji;Lji;Z)V");
    }

    static void setVisibleThrough(const jobject& obj, const jobject& arg0, const jobject& arg1, const jboolean& arg2) {
                
       const auto methodID = methodID_setVisibleThrough();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_fill() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setAll", "method_3694", "fill", "m_112992_"), "(Z)V");
    }

    static void fill(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_fill();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isVisibleThrough() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "visibilityBetween", "method_3695", "isVisibleThrough", "m_112983_"), "(Lji;Lji;)Z");
    }

    static jboolean isVisibleThrough(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_isVisibleThrough();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_RENDER_CHUNK_CHUNKOCCLUSIONDATA_HPP