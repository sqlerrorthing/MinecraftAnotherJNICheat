// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_RENDER_CHUNK_BLOCKBUFFERALLOCATORSTORAGE_HPP
#define NET_MINECRAFT_CLIENT_RENDER_CHUNK_BLOCKBUFFERALLOCATORSTORAGE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.render.chunk.BlockBufferAllocatorStorage
 * Remapped: gfk
 */
namespace BlockBufferAllocatorStorage {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("gfk", "net/minecraft/client/renderer/SectionBufferBuilderPack", "net/minecraft/class_750", "net/minecraft/client/render/chunk/BlockBufferAllocatorStorage", "net/minecraft/src/C_290184_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.client.render.chunk.BlockBufferAllocatorStorage#BLOCK_LAYERS
    [[maybe_unused]] static jobject get_field_BLOCK_LAYERS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "RENDER_TYPES", "field_52159", "BLOCK_LAYERS", "f_337274_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.render.chunk.BlockBufferAllocatorStorage#BLOCK_LAYERS
    [[maybe_unused]] static void set_field_BLOCK_LAYERS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "RENDER_TYPES", "field_52159", "BLOCK_LAYERS", "f_337274_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.client.render.chunk.BlockBufferAllocatorStorage#EXPECTED_TOTAL_SIZE
    [[maybe_unused]] static jint get_field_EXPECTED_TOTAL_SIZE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "TOTAL_BUFFERS_SIZE", "field_46902", "EXPECTED_TOTAL_SIZE", "f_303427_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.render.chunk.BlockBufferAllocatorStorage#EXPECTED_TOTAL_SIZE
    [[maybe_unused]] static void set_field_EXPECTED_TOTAL_SIZE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "TOTAL_BUFFERS_SIZE", "field_46902", "EXPECTED_TOTAL_SIZE", "f_303427_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.client.render.chunk.BlockBufferAllocatorStorage#allocators
    static jobject get_field_allocators(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "buffers", "field_3951", "allocators", "f_337438_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.render.chunk.BlockBufferAllocatorStorage#allocators
    static void set_field_allocators(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "buffers", "field_3951", "allocators", "f_337438_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_get() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "buffer", "method_3154", "get", "m_339320_"), "(Lgfh;)Lfbf;");
    }

    static jobject get(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_get();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_clear() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "clearAll", "method_22705", "clear", "m_294577_"), "()V");
    }

    static void clear(const jobject& obj) {
                
       const auto methodID = methodID_clear();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_reset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "discardAll", "method_23501", "reset", "m_293358_"), "()V");
    }

    static void reset(const jobject& obj) {
                
       const auto methodID = methodID_reset();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_close() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("close", "close", "", "", "close"), "()V");
    }

    static void close(const jobject& obj) {
                
       const auto methodID = methodID_close();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_RENDER_CHUNK_BLOCKBUFFERALLOCATORSTORAGE_HPP