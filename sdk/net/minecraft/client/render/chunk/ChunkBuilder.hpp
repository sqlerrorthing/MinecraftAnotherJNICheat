// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_RENDER_CHUNK_CHUNKBUILDER_HPP
#define NET_MINECRAFT_CLIENT_RENDER_CHUNK_CHUNKBUILDER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.render.chunk.ChunkBuilder
 * Remapped: gia
 */
namespace ChunkBuilder {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("gia", "net/minecraft/client/renderer/chunk/SectionRenderDispatcher", "net/minecraft/class_846", "net/minecraft/client/render/chunk/ChunkBuilder", "net/minecraft/src/C_290152_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.client.render.chunk.ChunkBuilder#field_35300
    [[maybe_unused]] static jint get_field_field_35300() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "MAX_HIGH_PRIORITY_QUOTA", "field_35300", "field_35300", "f_291537_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.render.chunk.ChunkBuilder#field_35300
    [[maybe_unused]] static void set_field_field_35300(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "MAX_HIGH_PRIORITY_QUOTA", "field_35300", "field_35300", "f_291537_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.client.render.chunk.ChunkBuilder#prioritizedTaskQueue
    static jobject get_field_prioritizedTaskQueue(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "toBatchHighPriority", "field_35301", "prioritizedTaskQueue", "f_290449_"), "Ljava/util/concurrent/PriorityBlockingQueue;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.render.chunk.ChunkBuilder#prioritizedTaskQueue
    static void set_field_prioritizedTaskQueue(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "toBatchHighPriority", "field_35301", "prioritizedTaskQueue", "f_290449_"), "Ljava/util/concurrent/PriorityBlockingQueue;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.render.chunk.ChunkBuilder#taskQueue
    static jobject get_field_taskQueue(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "toBatchLowPriority", "field_35302", "taskQueue", "f_291696_"), "Ljava/util/Queue;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.render.chunk.ChunkBuilder#taskQueue
    static void set_field_taskQueue(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "toBatchLowPriority", "field_35302", "taskQueue", "f_291696_"), "Ljava/util/Queue;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.render.chunk.ChunkBuilder#processablePrioritizedTaskCount
    static jint get_field_processablePrioritizedTaskCount(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "highPriorityQuota", "field_35303", "processablePrioritizedTaskCount", "f_291840_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.render.chunk.ChunkBuilder#processablePrioritizedTaskCount
    static void set_field_processablePrioritizedTaskCount(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "highPriorityQuota", "field_35303", "processablePrioritizedTaskCount", "f_291840_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.render.chunk.ChunkBuilder#uploadQueue
    static jobject get_field_uploadQueue(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "toUpload", "field_4443", "uploadQueue", "f_290841_"), "Ljava/util/Queue;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.render.chunk.ChunkBuilder#uploadQueue
    static void set_field_uploadQueue(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "toUpload", "field_4443", "uploadQueue", "f_290841_"), "Ljava/util/Queue;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.client.render.chunk.ChunkBuilder#buffers
    static jobject get_field_buffers(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "fixedBuffers", "field_20828", "buffers", "f_290794_"), "Lgfk;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.client.render.chunk.ChunkBuilder#buffers
    static void set_field_buffers(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "fixedBuffers", "field_20828", "buffers", "f_290794_"), "Lgfk;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.render.chunk.ChunkBuilder#buffersPool
    static jobject get_field_buffersPool(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "bufferPool", "field_46907", "buffersPool", "f_302374_"), "Lgfl;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.render.chunk.ChunkBuilder#buffersPool
    static void set_field_buffersPool(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "bufferPool", "field_46907", "buffersPool", "f_302374_"), "Lgfl;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.render.chunk.ChunkBuilder#queuedTaskCount
    static jint get_field_queuedTaskCount(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "toBatchCount", "field_20992", "queuedTaskCount", "f_290603_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.render.chunk.ChunkBuilder#queuedTaskCount
    static void set_field_queuedTaskCount(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "toBatchCount", "field_20992", "queuedTaskCount", "f_290603_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.render.chunk.ChunkBuilder#stopped
    static jboolean get_field_stopped(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "closed", "field_46908", "stopped", "f_302977_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.render.chunk.ChunkBuilder#stopped
    static void set_field_stopped(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "closed", "field_46908", "stopped", "f_302977_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.render.chunk.ChunkBuilder#mailbox
    static jobject get_field_mailbox(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "mailbox", "field_20829", "mailbox", "f_290713_"), "Lbpk;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.render.chunk.ChunkBuilder#mailbox
    static void set_field_mailbox(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "mailbox", "field_20829", "mailbox", "f_290713_"), "Lbpk;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.render.chunk.ChunkBuilder#executor
    static jobject get_field_executor(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "executor", "field_20830", "executor", "f_291206_"), "Ljava/util/concurrent/Executor;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.render.chunk.ChunkBuilder#executor
    static void set_field_executor(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "executor", "field_20830", "executor", "f_291206_"), "Ljava/util/concurrent/Executor;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.client.render.chunk.ChunkBuilder#world
    static jobject get_field_world(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "level", "field_20831", "world", "f_291400_"), "Lfzf;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.client.render.chunk.ChunkBuilder#world
    static void set_field_world(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "level", "field_20831", "world", "f_291400_"), "Lfzf;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.client.render.chunk.ChunkBuilder#worldRenderer
    static jobject get_field_worldRenderer(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "renderer", "field_20832", "worldRenderer", "f_290611_"), "Lgex;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.client.render.chunk.ChunkBuilder#worldRenderer
    static void set_field_worldRenderer(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "renderer", "field_20832", "worldRenderer", "f_290611_"), "Lgex;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.render.chunk.ChunkBuilder#cameraPosition
    static jobject get_field_cameraPosition(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "camera", "field_18766", "cameraPosition", "f_290602_"), "Lexc;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.render.chunk.ChunkBuilder#cameraPosition
    static void set_field_cameraPosition(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "camera", "field_18766", "cameraPosition", "f_290602_"), "Lexc;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.client.render.chunk.ChunkBuilder#field_52171
    static jobject get_field_field_52171(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "sectionCompiler", "field_52171", "field_52171", "f_337370_"), "Lghz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.client.render.chunk.ChunkBuilder#field_52171
    static void set_field_field_52171(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "sectionCompiler", "field_52171", "field_52171", "f_337370_"), "Lghz;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_setWorld() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setLevel", "method_22752", "setWorld", "m_293166_"), "(Lfzf;)V");
    }

    static void setWorld(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setWorld();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_scheduleRunTasks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "runTask", "method_22763", "scheduleRunTasks", "m_293371_"), "()V");
    }

    static void scheduleRunTasks(const jobject& obj) {
                
       const auto methodID = methodID_scheduleRunTasks();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_pollTask() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "pollTask", "method_39132", "pollTask", "m_293164_"), "()Lgia$b$a;");
    }

    static jobject pollTask(const jobject& obj) {
                
       const auto methodID = methodID_pollTask();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getDebugString() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getStats", "method_3622", "getDebugString", "m_292950_"), "()Ljava/lang/String;");
    }

    static jobject getDebugString(const jobject& obj) {
                
       const auto methodID = methodID_getDebugString();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getToBatchCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getToBatchCount", "method_34845", "getToBatchCount", "m_293066_"), "()I");
    }

    static jint getToBatchCount(const jobject& obj) {
                
       const auto methodID = methodID_getToBatchCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getChunksToUpload() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getToUpload", "method_34846", "getChunksToUpload", "m_294057_"), "()I");
    }

    static jint getChunksToUpload(const jobject& obj) {
                
       const auto methodID = methodID_getChunksToUpload();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getFreeBufferCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getFreeBufferCount", "method_34847", "getFreeBufferCount", "m_293327_"), "()I");
    }

    static jint getFreeBufferCount(const jobject& obj) {
                
       const auto methodID = methodID_getFreeBufferCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_setCameraPosition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setCamera", "method_19419", "setCameraPosition", "m_294870_"), "(Lexc;)V");
    }

    static void setCameraPosition(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setCameraPosition();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getCameraPosition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "getCameraPosition", "method_19420", "getCameraPosition", "m_293014_"), "()Lexc;");
    }

    static jobject getCameraPosition(const jobject& obj) {
                
       const auto methodID = methodID_getCameraPosition();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_upload() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "uploadAllPendingUploads", "method_22761", "upload", "m_295287_"), "()V");
    }

    static void upload(const jobject& obj) {
                
       const auto methodID = methodID_upload();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_rebuild() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "rebuildSectionSync", "method_3627", "rebuild", "m_295202_"), "(Lgia$b;Lghy;)V");
    }

    static void rebuild(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_rebuild();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_reset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "blockUntilClear", "method_3632", "reset", "m_295714_"), "()V");
    }

    static void reset(const jobject& obj) {
                
       const auto methodID = methodID_reset();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_send() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "schedule", "method_22756", "send", "m_294204_"), "(Lgia$b$a;)V");
    }

    static void send(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_send();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_scheduleUpload() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "uploadSectionLayer", "method_3635", "scheduleUpload", "m_292947_"), "(Lfbh;Lfbl;)Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject scheduleUpload(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_scheduleUpload();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_method_60906() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "uploadSectionIndexBuffer", "method_60906", "method_60906", "m_339467_"), "(Lfbf$a;Lfbl;)Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject method_60906(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_method_60906();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_clear() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "clearBatchQueue", "method_3633", "clear", "m_295487_"), "()V");
    }

    static void clear(const jobject& obj) {
                
       const auto methodID = methodID_clear();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_isEmpty() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "isQueueEmpty", "method_3630", "isEmpty", "m_293214_"), "()Z");
    }

    static jboolean isEmpty(const jobject& obj) {
                
       const auto methodID = methodID_isEmpty();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_stop() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "dispose", "method_3619", "stop", "m_294449_"), "()V");
    }

    static void stop(const jobject& obj) {
                
       const auto methodID = methodID_stop();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_RENDER_CHUNK_CHUNKBUILDER_HPP