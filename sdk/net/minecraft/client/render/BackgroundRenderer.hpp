// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_RENDER_BACKGROUNDRENDERER_HPP
#define NET_MINECRAFT_CLIENT_RENDER_BACKGROUNDRENDERER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.render.BackgroundRenderer
 * Remapped: ger
 */
namespace BackgroundRenderer {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("ger", "net/minecraft/client/renderer/FogRenderer", "net/minecraft/class_758", "net/minecraft/client/render/BackgroundRenderer", "net/minecraft/src/C_4122_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.client.render.BackgroundRenderer#WATER_FOG_LENGTH
    [[maybe_unused]] static jint get_field_WATER_FOG_LENGTH() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "WATER_FOG_DISTANCE", "field_32685", "WATER_FOG_LENGTH", "f_172575_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.render.BackgroundRenderer#WATER_FOG_LENGTH
    [[maybe_unused]] static void set_field_WATER_FOG_LENGTH(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "WATER_FOG_DISTANCE", "field_32685", "WATER_FOG_LENGTH", "f_172575_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.render.BackgroundRenderer#FOG_MODIFIERS
    [[maybe_unused]] static jobject get_field_FOG_MODIFIERS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "MOB_EFFECT_FOG", "field_38338", "FOG_MODIFIERS", "f_234164_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.render.BackgroundRenderer#FOG_MODIFIERS
    [[maybe_unused]] static void set_field_FOG_MODIFIERS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "MOB_EFFECT_FOG", "field_38338", "FOG_MODIFIERS", "f_234164_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.client.render.BackgroundRenderer#WATER_FOG_CHANGE_DURATION
    [[maybe_unused]] static jfloat get_field_WATER_FOG_CHANGE_DURATION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "BIOME_FOG_TRANSITION_TIME", "field_32684", "WATER_FOG_CHANGE_DURATION", "f_172574_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.render.BackgroundRenderer#WATER_FOG_CHANGE_DURATION
    [[maybe_unused]] static void set_field_WATER_FOG_CHANGE_DURATION(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "BIOME_FOG_TRANSITION_TIME", "field_32684", "WATER_FOG_CHANGE_DURATION", "f_172574_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.render.BackgroundRenderer#red
    [[maybe_unused]] static jfloat get_field_red() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "fogRed", "field_4034", "red", "f_109010_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.render.BackgroundRenderer#red
    [[maybe_unused]] static void set_field_red(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "fogRed", "field_4034", "red", "f_109010_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.render.BackgroundRenderer#green
    [[maybe_unused]] static jfloat get_field_green() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "fogGreen", "field_4033", "green", "f_109011_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.render.BackgroundRenderer#green
    [[maybe_unused]] static void set_field_green(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "fogGreen", "field_4033", "green", "f_109011_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.render.BackgroundRenderer#blue
    [[maybe_unused]] static jfloat get_field_blue() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "fogBlue", "field_4032", "blue", "f_109012_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.render.BackgroundRenderer#blue
    [[maybe_unused]] static void set_field_blue(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "fogBlue", "field_4032", "blue", "f_109012_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.render.BackgroundRenderer#waterFogColor
    [[maybe_unused]] static jint get_field_waterFogColor() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "targetBiomeFog", "field_4031", "waterFogColor", "f_109013_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.render.BackgroundRenderer#waterFogColor
    [[maybe_unused]] static void set_field_waterFogColor(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "targetBiomeFog", "field_4031", "waterFogColor", "f_109013_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.render.BackgroundRenderer#nextWaterFogColor
    [[maybe_unused]] static jint get_field_nextWaterFogColor() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "previousBiomeFog", "field_4041", "nextWaterFogColor", "f_109014_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.render.BackgroundRenderer#nextWaterFogColor
    [[maybe_unused]] static void set_field_nextWaterFogColor(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "previousBiomeFog", "field_4041", "nextWaterFogColor", "f_109014_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.render.BackgroundRenderer#lastWaterFogColorUpdateTime
    [[maybe_unused]] static jlong get_field_lastWaterFogColorUpdateTime() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "biomeChangedTime", "field_4042", "lastWaterFogColorUpdateTime", "f_109015_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticLongField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.render.BackgroundRenderer#lastWaterFogColorUpdateTime
    [[maybe_unused]] static void set_field_lastWaterFogColorUpdateTime(const jlong &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "biomeChangedTime", "field_4042", "lastWaterFogColorUpdateTime", "f_109015_"), "J");
        return MinecraftSDK::env->SetStaticLongField(clazz, fieldID, value);
    };

    static jmethodID methodID_render() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "setupColor", "method_3210", "render", "m_109018_"), "(Lffy;FLfzf;IF)V");
    }

    static void render(const jobject& arg0, const jfloat& arg1, const jobject& arg2, const jint& arg3, const jfloat& arg4) {
       const auto clazz = self();
       const auto methodID = methodID_render();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_clearFog() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "setupNoFog", "method_23792", "clearFog", "m_109017_"), "()V");
    }

    static void clearFog() {
       const auto clazz = self();
       const auto methodID = methodID_clearFog();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID);
    };
    
    static jmethodID methodID_getFogModifier() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getPriorityFogFunction", "method_42588", "getFogModifier", "m_234165_"), "(Lbsr;F)Lger$e;");
    }

    static jobject getFogModifier(const jobject& arg0, const jfloat& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_getFogModifier();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_applyFog() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "setupFog", "method_3211", "applyFog", "m_234172_"), "(Lffy;Lger$d;FZF)V");
    }

    static void applyFog(const jobject& arg0, const jobject& arg1, const jfloat& arg2, const jboolean& arg3, const jfloat& arg4) {
       const auto clazz = self();
       const auto methodID = methodID_applyFog();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_applyFogColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "levelFogColor", "method_3212", "applyFogColor", "m_109036_"), "()V");
    }

    static void applyFogColor() {
       const auto clazz = self();
       const auto methodID = methodID_applyFogColor();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_RENDER_BACKGROUNDRENDERER_HPP