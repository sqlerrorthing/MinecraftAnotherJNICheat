// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_GUI_HUD_DEBUG_DEBUGCHART_HPP
#define NET_MINECRAFT_CLIENT_GUI_HUD_DEBUG_DEBUGCHART_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.gui.hud.debug.DebugChart
 * Remapped: fkb
 */
namespace DebugChart {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("fkb", "net/minecraft/client/gui/components/debugchart/AbstractDebugChart", "net/minecraft/class_8755", "net/minecraft/client/gui/hud/debug/DebugChart", "net/minecraft/src/C_290159_"));
        }
        return cachedClass;
    };

    // getter for static protected field net.minecraft.client.gui.hud.debug.DebugChart#TEXT_COLOR
    [[maybe_unused]] static jint get_field_TEXT_COLOR() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "COLOR_GREY", "field_45915", "TEXT_COLOR", "f_290832_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static protected field net.minecraft.client.gui.hud.debug.DebugChart#TEXT_COLOR
    [[maybe_unused]] static void set_field_TEXT_COLOR(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "COLOR_GREY", "field_45915", "TEXT_COLOR", "f_290832_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static protected field net.minecraft.client.gui.hud.debug.DebugChart#field_45916
    [[maybe_unused]] static jint get_field_field_45916() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "CHART_HEIGHT", "field_45916", "field_45916", "f_290328_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static protected field net.minecraft.client.gui.hud.debug.DebugChart#field_45916
    [[maybe_unused]] static void set_field_field_45916(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "CHART_HEIGHT", "field_45916", "field_45916", "f_290328_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static protected field net.minecraft.client.gui.hud.debug.DebugChart#field_45917
    [[maybe_unused]] static jint get_field_field_45917() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "LINE_WIDTH", "field_45917", "field_45917", "f_291047_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static protected field net.minecraft.client.gui.hud.debug.DebugChart#field_45917
    [[maybe_unused]] static void set_field_field_45917(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "LINE_WIDTH", "field_45917", "field_45917", "f_291047_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for protected field net.minecraft.client.gui.hud.debug.DebugChart#textRenderer
    static jobject get_field_textRenderer(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "font", "field_45918", "textRenderer", "f_290686_"), "Lfhx;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.client.gui.hud.debug.DebugChart#textRenderer
    static void set_field_textRenderer(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "font", "field_45918", "textRenderer", "f_290686_"), "Lfhx;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.client.gui.hud.debug.DebugChart#log
    static jobject get_field_log(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "sampleStorage", "field_45919", "log", "f_316855_"), "Lblv;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.client.gui.hud.debug.DebugChart#log
    static void set_field_log(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "sampleStorage", "field_45919", "log", "f_316855_"), "Lblv;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_getWidth() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getWidth", "method_53470", "getWidth", "m_295014_"), "(I)I");
    }

    static jint getWidth(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_getWidth();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_render() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "drawChart", "method_53472", "render", "m_293623_"), "(Lfhz;II)V");
    }

    static void render(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_render();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_drawBar() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "drawDimensions", "method_56578", "drawBar", "m_319338_"), "(Lfhz;III)V");
    }

    static void drawBar(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2, const jint& arg3) {
                
       const auto methodID = methodID_drawBar();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_drawTotalBar() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "drawMainDimension", "method_56580", "drawTotalBar", "m_323640_"), "(Lfhz;III)V");
    }

    static void drawTotalBar(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2, const jint& arg3) {
                
       const auto methodID = methodID_drawTotalBar();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_drawOverlayBar() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "drawAdditionalDimensions", "method_56581", "drawOverlayBar", "m_321123_"), "(Lfhz;III)V");
    }

    static void drawOverlayBar(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2, const jint& arg3) {
                
       const auto methodID = methodID_drawOverlayBar();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_get() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getValueForAggregation", "method_56579", "get", "m_320595_"), "(I)J");
    }

    static jlong get(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_get();
       return MinecraftSDK::env->CallLongMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_renderThresholds() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "renderAdditionalLinesAndLabels", "method_53473", "renderThresholds", "m_293086_"), "(Lfhz;III)V");
    }

    static void renderThresholds(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2, const jint& arg3) {
                
       const auto methodID = methodID_renderThresholds();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_drawBorderedText() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "drawStringWithShade", "method_53474", "drawBorderedText", "m_293663_"), "(Lfhz;Ljava/lang/String;II)V");
    }

    static void drawBorderedText(const jobject& obj, const jobject& arg0, const jobject& arg1, const jint& arg2, const jint& arg3) {
                
       const auto methodID = methodID_drawBorderedText();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_format() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "toDisplayString", "method_53468", "format", "m_293688_"), "(D)Ljava/lang/String;");
    }

    static jobject format(const jobject& obj, const jdouble& arg0) {
                
       const auto methodID = methodID_format();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getHeight() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getSampleHeight", "method_53475", "getHeight", "m_292631_"), "(D)I");
    }

    static jint getHeight(const jobject& obj, const jdouble& arg0) {
                
       const auto methodID = methodID_getHeight();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getSampleColor", "method_53471", "getColor", "m_292871_"), "(J)I");
    }

    static jint getColor(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_getColor();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__getColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getSampleColor", "method_53469", "getColor", "m_295426_"), "(DDIDIDI)I");
    }

    static jint _getColor(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jint& arg2, const jdouble& arg3, const jint& arg4, const jdouble& arg5, const jint& arg6) {
                
       const auto methodID = methodID__getColor();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_GUI_HUD_DEBUG_DEBUGCHART_HPP