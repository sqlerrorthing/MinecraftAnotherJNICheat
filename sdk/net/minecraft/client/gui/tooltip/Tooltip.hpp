// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_GUI_TOOLTIP_TOOLTIP_HPP
#define NET_MINECRAFT_CLIENT_GUI_TOOLTIP_TOOLTIP_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.gui.tooltip.Tooltip
 * Remapped: fjx
 */
namespace Tooltip {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("fjx", "net/minecraft/client/gui/components/Tooltip", "net/minecraft/class_7919", "net/minecraft/client/gui/tooltip/Tooltip", "net/minecraft/src/C_256714_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.client.gui.tooltip.Tooltip#ROW_LENGTH
    [[maybe_unused]] static jint get_field_ROW_LENGTH() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "MAX_WIDTH", "field_41101", "ROW_LENGTH", "f_257026_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.tooltip.Tooltip#ROW_LENGTH
    [[maybe_unused]] static void set_field_ROW_LENGTH(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "MAX_WIDTH", "field_41101", "ROW_LENGTH", "f_257026_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.tooltip.Tooltip#content
    static jobject get_field_content(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "message", "field_41102", "content", "f_256850_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.tooltip.Tooltip#content
    static void set_field_content(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "message", "field_41102", "content", "f_256850_"), "Lwz;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.tooltip.Tooltip#lines
    static jobject get_field_lines(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "cachedTooltip", "field_41103", "lines", "f_256766_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.tooltip.Tooltip#lines
    static void set_field_lines(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "cachedTooltip", "field_41103", "lines", "f_256766_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.tooltip.Tooltip#language
    static jobject get_field_language(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "splitWithLanguage", "field_51822", "language", "f_337177_"), "Ltw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.tooltip.Tooltip#language
    static void set_field_language(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "splitWithLanguage", "field_51822", "language", "f_337177_"), "Ltw;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.tooltip.Tooltip#narration
    static jobject get_field_narration(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "narration", "field_41104", "narration", "f_257004_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.tooltip.Tooltip#narration
    static void set_field_narration(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "narration", "field_41104", "narration", "f_257004_"), "Lwz;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_of() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "create", "method_47408", "of", "m_257563_"), "(Lwz;Lwz;)Lfjx;");
    }

    static jobject of(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_of();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__of() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "create", "method_47407", "of", "m_257550_"), "(Lwz;)Lfjx;");
    }

    static jobject _of(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID__of();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_appendNarrations() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "updateNarration", "method_37020", "appendNarrations", "m_142291_"), "(Lfmi;)V");
    }

    static void appendNarrations(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_appendNarrations();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getLines() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "toCharSequence", "method_47405", "getLines", "m_257408_"), "(Lfgo;)Ljava/util/List;");
    }

    static jobject getLines(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getLines();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_wrapLines() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "splitTooltip", "method_47406", "wrapLines", "m_257868_"), "(Lfgo;Lwz;)Ljava/util/List;");
    }

    static jobject wrapLines(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_wrapLines();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_GUI_TOOLTIP_TOOLTIP_HPP