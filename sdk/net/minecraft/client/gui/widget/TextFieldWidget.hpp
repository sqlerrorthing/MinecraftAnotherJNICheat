// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_GUI_WIDGET_TEXTFIELDWIDGET_HPP
#define NET_MINECRAFT_CLIENT_GUI_WIDGET_TEXTFIELDWIDGET_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.gui.widget.TextFieldWidget
 * Remapped: fiv
 */
namespace TextFieldWidget {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("fiv", "net/minecraft/client/gui/components/EditBox", "net/minecraft/class_342", "net/minecraft/client/gui/widget/TextFieldWidget", "net/minecraft/src/C_3464_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.client.gui.widget.TextFieldWidget#TEXTURES
    [[maybe_unused]] static jobject get_field_TEXTURES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "SPRITES", "field_45914", "TEXTURES", "f_291511_"), "Lfjz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.widget.TextFieldWidget#TEXTURES
    [[maybe_unused]] static void set_field_TEXTURES(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "SPRITES", "field_45914", "TEXTURES", "f_291511_"), "Lfjz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.client.gui.widget.TextFieldWidget#field_32194
    [[maybe_unused]] static jint get_field_field_32194() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "BACKWARDS", "field_32194", "field_32194", "f_168999_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.gui.widget.TextFieldWidget#field_32194
    [[maybe_unused]] static void set_field_field_32194(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "BACKWARDS", "field_32194", "field_32194", "f_168999_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.client.gui.widget.TextFieldWidget#field_32195
    [[maybe_unused]] static jint get_field_field_32195() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "FORWARDS", "field_32195", "field_32195", "f_169000_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.gui.widget.TextFieldWidget#field_32195
    [[maybe_unused]] static void set_field_field_32195(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "FORWARDS", "field_32195", "field_32195", "f_169000_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.gui.widget.TextFieldWidget#field_32197
    [[maybe_unused]] static jint get_field_field_32197() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "CURSOR_INSERT_WIDTH", "field_32197", "field_32197", "f_169002_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.widget.TextFieldWidget#field_32197
    [[maybe_unused]] static void set_field_field_32197(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "CURSOR_INSERT_WIDTH", "field_32197", "field_32197", "f_169002_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.gui.widget.TextFieldWidget#VERTICAL_CURSOR_COLOR
    [[maybe_unused]] static jint get_field_VERTICAL_CURSOR_COLOR() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "CURSOR_INSERT_COLOR", "field_32198", "VERTICAL_CURSOR_COLOR", "f_169003_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.widget.TextFieldWidget#VERTICAL_CURSOR_COLOR
    [[maybe_unused]] static void set_field_VERTICAL_CURSOR_COLOR(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "CURSOR_INSERT_COLOR", "field_32198", "VERTICAL_CURSOR_COLOR", "f_169003_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.gui.widget.TextFieldWidget#HORIZONTAL_CURSOR
    [[maybe_unused]] static jobject get_field_HORIZONTAL_CURSOR() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "CURSOR_APPEND_CHARACTER", "field_32199", "HORIZONTAL_CURSOR", "f_169004_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.widget.TextFieldWidget#HORIZONTAL_CURSOR
    [[maybe_unused]] static void set_field_HORIZONTAL_CURSOR(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "CURSOR_APPEND_CHARACTER", "field_32199", "HORIZONTAL_CURSOR", "f_169004_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.client.gui.widget.TextFieldWidget#DEFAULT_EDITABLE_COLOR
    [[maybe_unused]] static jint get_field_DEFAULT_EDITABLE_COLOR() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "DEFAULT_TEXT_COLOR", "field_32196", "DEFAULT_EDITABLE_COLOR", "f_169001_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.gui.widget.TextFieldWidget#DEFAULT_EDITABLE_COLOR
    [[maybe_unused]] static void set_field_DEFAULT_EDITABLE_COLOR(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "DEFAULT_TEXT_COLOR", "field_32196", "DEFAULT_EDITABLE_COLOR", "f_169001_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.gui.widget.TextFieldWidget#field_45354
    [[maybe_unused]] static jint get_field_field_45354() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "CURSOR_BLINK_INTERVAL_MS", "field_45354", "field_45354", "f_290418_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.widget.TextFieldWidget#field_45354
    [[maybe_unused]] static void set_field_field_45354(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "CURSOR_BLINK_INTERVAL_MS", "field_45354", "field_45354", "f_290418_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.widget.TextFieldWidget#textRenderer
    static jobject get_field_textRenderer(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "font", "field_2105", "textRenderer", "f_94092_"), "Lfhx;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.widget.TextFieldWidget#textRenderer
    static void set_field_textRenderer(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "font", "field_2105", "textRenderer", "f_94092_"), "Lfhx;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.widget.TextFieldWidget#text
    static jobject get_field_text(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "value", "field_2092", "text", "f_94093_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.widget.TextFieldWidget#text
    static void set_field_text(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "value", "field_2092", "text", "f_94093_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.widget.TextFieldWidget#maxLength
    static jint get_field_maxLength(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "maxLength", "field_2108", "maxLength", "f_94094_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.widget.TextFieldWidget#maxLength
    static void set_field_maxLength(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "maxLength", "field_2108", "maxLength", "f_94094_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.widget.TextFieldWidget#drawsBackground
    static jboolean get_field_drawsBackground(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "bordered", "field_2095", "drawsBackground", "f_94096_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.widget.TextFieldWidget#drawsBackground
    static void set_field_drawsBackground(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "bordered", "field_2095", "drawsBackground", "f_94096_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.widget.TextFieldWidget#focusUnlocked
    static jboolean get_field_focusUnlocked(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "canLoseFocus", "field_2096", "focusUnlocked", "f_94097_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.widget.TextFieldWidget#focusUnlocked
    static void set_field_focusUnlocked(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "canLoseFocus", "field_2096", "focusUnlocked", "f_94097_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.widget.TextFieldWidget#editable
    static jboolean get_field_editable(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "isEditable", "field_2094", "editable", "f_94098_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.widget.TextFieldWidget#editable
    static void set_field_editable(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "isEditable", "field_2094", "editable", "f_94098_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.widget.TextFieldWidget#firstCharacterIndex
    static jint get_field_firstCharacterIndex(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "displayPos", "field_2103", "firstCharacterIndex", "f_94100_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.widget.TextFieldWidget#firstCharacterIndex
    static void set_field_firstCharacterIndex(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "displayPos", "field_2103", "firstCharacterIndex", "f_94100_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.widget.TextFieldWidget#selectionStart
    static jint get_field_selectionStart(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("w", "cursorPos", "field_2102", "selectionStart", "f_94101_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.widget.TextFieldWidget#selectionStart
    static void set_field_selectionStart(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("w", "cursorPos", "field_2102", "selectionStart", "f_94101_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.widget.TextFieldWidget#selectionEnd
    static jint get_field_selectionEnd(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("x", "highlightPos", "field_2101", "selectionEnd", "f_94102_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.widget.TextFieldWidget#selectionEnd
    static void set_field_selectionEnd(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("x", "highlightPos", "field_2101", "selectionEnd", "f_94102_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.widget.TextFieldWidget#editableColor
    static jint get_field_editableColor(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("y", "textColor", "field_2100", "editableColor", "f_94103_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.widget.TextFieldWidget#editableColor
    static void set_field_editableColor(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("y", "textColor", "field_2100", "editableColor", "f_94103_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.widget.TextFieldWidget#uneditableColor
    static jint get_field_uneditableColor(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("z", "textColorUneditable", "field_2098", "uneditableColor", "f_94104_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.widget.TextFieldWidget#uneditableColor
    static void set_field_uneditableColor(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("z", "textColorUneditable", "field_2098", "uneditableColor", "f_94104_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.widget.TextFieldWidget#suggestion
    static jobject get_field_suggestion(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("A", "suggestion", "field_2106", "suggestion", "f_94088_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.widget.TextFieldWidget#suggestion
    static void set_field_suggestion(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("A", "suggestion", "field_2106", "suggestion", "f_94088_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.widget.TextFieldWidget#changedListener
    static jobject get_field_changedListener(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("B", "responder", "field_2088", "changedListener", "f_94089_"), "Ljava/util/function/Consumer;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.widget.TextFieldWidget#changedListener
    static void set_field_changedListener(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("B", "responder", "field_2088", "changedListener", "f_94089_"), "Ljava/util/function/Consumer;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.widget.TextFieldWidget#textPredicate
    static jobject get_field_textPredicate(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("C", "filter", "field_2104", "textPredicate", "f_94090_"), "Ljava/util/function/Predicate;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.widget.TextFieldWidget#textPredicate
    static void set_field_textPredicate(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("C", "filter", "field_2104", "textPredicate", "f_94090_"), "Ljava/util/function/Predicate;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.widget.TextFieldWidget#renderTextProvider
    static jobject get_field_renderTextProvider(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("D", "formatter", "field_2099", "renderTextProvider", "f_94091_"), "Ljava/util/function/BiFunction;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.widget.TextFieldWidget#renderTextProvider
    static void set_field_renderTextProvider(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("D", "formatter", "field_2099", "renderTextProvider", "f_94091_"), "Ljava/util/function/BiFunction;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.widget.TextFieldWidget#placeholder
    static jobject get_field_placeholder(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("E", "hint", "field_41100", "placeholder", "f_256828_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.widget.TextFieldWidget#placeholder
    static void set_field_placeholder(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("E", "hint", "field_41100", "placeholder", "f_256828_"), "Lwz;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.widget.TextFieldWidget#lastSwitchFocusTime
    static jlong get_field_lastSwitchFocusTime(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("F", "focusedTime", "field_45352", "lastSwitchFocusTime", "f_291233_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.widget.TextFieldWidget#lastSwitchFocusTime
    static void set_field_lastSwitchFocusTime(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("F", "focusedTime", "field_45352", "lastSwitchFocusTime", "f_291233_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    static jmethodID methodID_setChangedListener() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setResponder", "method_1863", "setChangedListener", "m_94151_"), "(Ljava/util/function/Consumer;)V");
    }

    static void setChangedListener(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setChangedListener();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setRenderTextProvider() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setFormatter", "method_1854", "setRenderTextProvider", "m_94149_"), "(Ljava/util/function/BiFunction;)V");
    }

    static void setRenderTextProvider(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setRenderTextProvider();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getNarrationMessage() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aQ_", "createNarrationMessage", "method_25360", "getNarrationMessage", "m_5646_"), "()Lxn;");
    }

    static jobject getNarrationMessage(const jobject& obj) {
                
       const auto methodID = methodID_getNarrationMessage();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_setText() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setValue", "method_1852", "setText", "m_94144_"), "(Ljava/lang/String;)V");
    }

    static void setText(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setText();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getText() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getValue", "method_1882", "getText", "m_94155_"), "()Ljava/lang/String;");
    }

    static jobject getText(const jobject& obj) {
                
       const auto methodID = methodID_getText();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getSelectedText() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getHighlighted", "method_1866", "getSelectedText", "m_94173_"), "()Ljava/lang/String;");
    }

    static jobject getSelectedText(const jobject& obj) {
                
       const auto methodID = methodID_getSelectedText();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_setTextPredicate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setFilter", "method_1890", "setTextPredicate", "m_94153_"), "(Ljava/util/function/Predicate;)V");
    }

    static void setTextPredicate(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setTextPredicate();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_write() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "insertText", "method_1867", "write", "m_94164_"), "(Ljava/lang/String;)V");
    }

    static void write(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_write();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onChanged() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "onValueChange", "method_1874", "onChanged", "m_94174_"), "(Ljava/lang/String;)V");
    }

    static void onChanged(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onChanged();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_erase() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("q", "deleteText", "method_16873", "erase", "m_94217_"), "(I)V");
    }

    static void erase(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_erase();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_eraseWords() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "deleteWords", "method_1877", "eraseWords", "m_94176_"), "(I)V");
    }

    static void eraseWords(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_eraseWords();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_eraseCharacters() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "deleteChars", "method_1878", "eraseCharacters", "m_94180_"), "(I)V");
    }

    static void eraseCharacters(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_eraseCharacters();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_eraseCharactersTo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "deleteCharsToPos", "method_55506", "eraseCharactersTo", "m_306194_"), "(I)V");
    }

    static void eraseCharactersTo(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_eraseCharactersTo();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getWordSkipPosition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getWordPosition", "method_1853", "getWordSkipPosition", "m_94184_"), "(I)I");
    }

    static jint getWordSkipPosition(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_getWordSkipPosition();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__getWordSkipPosition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getWordPosition", "method_1869", "getWordSkipPosition", "m_94128_"), "(II)I");
    }

    static jint _getWordSkipPosition(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID__getWordSkipPosition();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID___getWordSkipPosition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getWordPosition", "method_1864", "getWordSkipPosition", "m_94140_"), "(IIZ)I");
    }

    static jint __getWordSkipPosition(const jobject& obj, const jint& arg0, const jint& arg1, const jboolean& arg2) {
                
       const auto methodID = methodID___getWordSkipPosition();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_moveCursor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "moveCursor", "method_1855", "moveCursor", "m_94188_"), "(IZ)V");
    }

    static void moveCursor(const jobject& obj, const jint& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_moveCursor();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getCursorPosWithOffset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("r", "getCursorPos", "method_27537", "getCursorPosWithOffset", "m_94220_"), "(I)I");
    }

    static jint getCursorPosWithOffset(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_getCursorPosWithOffset();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setCursor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "moveCursorTo", "method_1883", "setCursor", "m_94192_"), "(IZ)V");
    }

    static void setCursor(const jobject& obj, const jint& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_setCursor();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_setSelectionStart() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "setCursorPosition", "method_1875", "setSelectionStart", "m_94196_"), "(I)V");
    }

    static void setSelectionStart(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_setSelectionStart();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setCursorToStart() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "moveCursorToStart", "method_1870", "setCursorToStart", "m_94198_"), "(Z)V");
    }

    static void setCursorToStart(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setCursorToStart();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setCursorToEnd() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "moveCursorToEnd", "method_1872", "setCursorToEnd", "m_94201_"), "(Z)V");
    }

    static void setCursorToEnd(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setCursorToEnd();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_keyPressed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "keyPressed", "method_25404", "keyPressed", "m_7933_"), "(III)Z");
    }

    static jboolean keyPressed(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_keyPressed();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_isActive() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "canConsumeInput", "method_20315", "isActive", "m_94204_"), "()Z");
    }

    static jboolean isActive(const jobject& obj) {
                
       const auto methodID = methodID_isActive();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_charTyped() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "charTyped", "method_25400", "charTyped", "m_5534_"), "(CI)Z");
    }

    static jboolean charTyped(const jobject& obj, const jchar& arg0, const jint& arg1) {
                
       const auto methodID = methodID_charTyped();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_onClick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onClick", "method_25348", "onClick", "m_5716_"), "(DD)V");
    }

    static void onClick(const jobject& obj, const jdouble& arg0, const jdouble& arg1) {
                
       const auto methodID = methodID_onClick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_playDownSound() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "playDownSound", "method_25354", "playDownSound", "m_7435_"), "(Lgvf;)V");
    }

    static void playDownSound(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_playDownSound();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_renderWidget() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "renderWidget", "method_48579", "renderWidget", "m_87963_"), "(Lfhz;IIF)V");
    }

    static void renderWidget(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2, const jfloat& arg3) {
                
       const auto methodID = methodID_renderWidget();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_drawSelectionHighlight() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "renderHighlight", "method_1886", "drawSelectionHighlight", "m_264315_"), "(Lfhz;IIII)V");
    }

    static void drawSelectionHighlight(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2, const jint& arg3, const jint& arg4) {
                
       const auto methodID = methodID_drawSelectionHighlight();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_setMaxLength() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "setMaxLength", "method_1880", "setMaxLength", "m_94199_"), "(I)V");
    }

    static void setMaxLength(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_setMaxLength();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getMaxLength() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "getMaxLength", "method_1861", "getMaxLength", "m_94216_"), "()I");
    }

    static jint getMaxLength(const jobject& obj) {
                
       const auto methodID = methodID_getMaxLength();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getCursor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "getCursorPosition", "method_1881", "getCursor", "m_94207_"), "()I");
    }

    static jint getCursor(const jobject& obj) {
                
       const auto methodID = methodID_getCursor();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID__drawsBackground() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "isBordered", "method_1851", "drawsBackground", "m_94219_"), "()Z");
    }

    static jboolean _drawsBackground(const jobject& obj) {
                
       const auto methodID = methodID__drawsBackground();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setDrawsBackground() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "setBordered", "method_1858", "setDrawsBackground", "m_94182_"), "(Z)V");
    }

    static void setDrawsBackground(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setDrawsBackground();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setEditableColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "setTextColor", "method_1868", "setEditableColor", "m_94202_"), "(I)V");
    }

    static void setEditableColor(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_setEditableColor();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setUneditableColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "setTextColorUneditable", "method_1860", "setUneditableColor", "m_94205_"), "(I)V");
    }

    static void setUneditableColor(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_setUneditableColor();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setFocused() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setFocused", "method_25365", "setFocused", "m_93692_"), "(Z)V");
    }

    static void setFocused(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setFocused();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isEditable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "isEditable", "method_20316", "isEditable", "m_94222_"), "()Z");
    }

    static jboolean isEditable(const jobject& obj) {
                
       const auto methodID = methodID_isEditable();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setEditable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "setEditable", "method_1888", "setEditable", "m_94186_"), "(Z)V");
    }

    static void setEditable(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setEditable();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getInnerWidth() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "getInnerWidth", "method_1859", "getInnerWidth", "m_94210_"), "()I");
    }

    static jint getInnerWidth(const jobject& obj) {
                
       const auto methodID = methodID_getInnerWidth();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_setSelectionEnd() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "setHighlightPos", "method_1884", "setSelectionEnd", "m_94208_"), "(I)V");
    }

    static void setSelectionEnd(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_setSelectionEnd();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_updateFirstCharacterIndex() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("s", "scrollTo", "method_52719", "updateFirstCharacterIndex", "m_293607_"), "(I)V");
    }

    static void updateFirstCharacterIndex(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_updateFirstCharacterIndex();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setFocusUnlocked() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "setCanLoseFocus", "method_1856", "setFocusUnlocked", "m_94190_"), "(Z)V");
    }

    static void setFocusUnlocked(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setFocusUnlocked();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isVisible() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "isVisible", "method_1885", "isVisible", "m_94213_"), "()Z");
    }

    static jboolean isVisible(const jobject& obj) {
                
       const auto methodID = methodID_isVisible();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setVisible() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "setVisible", "method_1862", "setVisible", "m_94194_"), "(Z)V");
    }

    static void setVisible(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setVisible();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setSuggestion() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "setSuggestion", "method_1887", "setSuggestion", "m_94167_"), "(Ljava/lang/String;)V");
    }

    static void setSuggestion(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setSuggestion();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getCharacterX() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("p", "getScreenX", "method_1889", "getCharacterX", "m_94211_"), "(I)I");
    }

    static jint getCharacterX(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_getCharacterX();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_appendClickableNarrations() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateWidgetNarration", "method_47399", "appendClickableNarrations", "m_168797_"), "(Lfmi;)V");
    }

    static void appendClickableNarrations(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_appendClickableNarrations();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setPlaceholder() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "setHint", "method_47404", "setPlaceholder", "m_257771_"), "(Lwz;)V");
    }

    static void setPlaceholder(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setPlaceholder();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_GUI_WIDGET_TEXTFIELDWIDGET_HPP