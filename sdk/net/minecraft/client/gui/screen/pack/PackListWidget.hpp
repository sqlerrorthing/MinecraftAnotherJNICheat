// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_GUI_SCREEN_PACK_PACKLISTWIDGET_HPP
#define NET_MINECRAFT_CLIENT_GUI_SCREEN_PACK_PACKLISTWIDGET_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.gui.screen.pack.PackListWidget
 * Remapped: fru
 */
namespace PackListWidget {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("fru", "net/minecraft/client/gui/screens/packs/TransferableSelectionList", "net/minecraft/class_521", "net/minecraft/client/gui/screen/pack/PackListWidget", "net/minecraft/src/C_3708_"));
        }
        return cachedClass;
    };

    // getter for static default field net.minecraft.client.gui.screen.pack.PackListWidget#SELECT_HIGHLIGHTED_TEXTURE
    [[maybe_unused]] static jobject get_field_SELECT_HIGHLIGHTED_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "SELECT_HIGHLIGHTED_SPRITE", "field_45532", "SELECT_HIGHLIGHTED_TEXTURE", "f_290815_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.client.gui.screen.pack.PackListWidget#SELECT_HIGHLIGHTED_TEXTURE
    [[maybe_unused]] static void set_field_SELECT_HIGHLIGHTED_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "SELECT_HIGHLIGHTED_SPRITE", "field_45532", "SELECT_HIGHLIGHTED_TEXTURE", "f_290815_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.client.gui.screen.pack.PackListWidget#SELECT_TEXTURE
    [[maybe_unused]] static jobject get_field_SELECT_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "SELECT_SPRITE", "field_45533", "SELECT_TEXTURE", "f_291766_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.client.gui.screen.pack.PackListWidget#SELECT_TEXTURE
    [[maybe_unused]] static void set_field_SELECT_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "SELECT_SPRITE", "field_45533", "SELECT_TEXTURE", "f_291766_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.client.gui.screen.pack.PackListWidget#UNSELECT_HIGHLIGHTED_TEXTURE
    [[maybe_unused]] static jobject get_field_UNSELECT_HIGHLIGHTED_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "UNSELECT_HIGHLIGHTED_SPRITE", "field_45534", "UNSELECT_HIGHLIGHTED_TEXTURE", "f_290712_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.client.gui.screen.pack.PackListWidget#UNSELECT_HIGHLIGHTED_TEXTURE
    [[maybe_unused]] static void set_field_UNSELECT_HIGHLIGHTED_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "UNSELECT_HIGHLIGHTED_SPRITE", "field_45534", "UNSELECT_HIGHLIGHTED_TEXTURE", "f_290712_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.client.gui.screen.pack.PackListWidget#UNSELECT_TEXTURE
    [[maybe_unused]] static jobject get_field_UNSELECT_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "UNSELECT_SPRITE", "field_45535", "UNSELECT_TEXTURE", "f_291124_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.client.gui.screen.pack.PackListWidget#UNSELECT_TEXTURE
    [[maybe_unused]] static void set_field_UNSELECT_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "UNSELECT_SPRITE", "field_45535", "UNSELECT_TEXTURE", "f_291124_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.client.gui.screen.pack.PackListWidget#MOVE_UP_HIGHLIGHTED_TEXTURE
    [[maybe_unused]] static jobject get_field_MOVE_UP_HIGHLIGHTED_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("p", "MOVE_UP_HIGHLIGHTED_SPRITE", "field_45536", "MOVE_UP_HIGHLIGHTED_TEXTURE", "f_290868_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.client.gui.screen.pack.PackListWidget#MOVE_UP_HIGHLIGHTED_TEXTURE
    [[maybe_unused]] static void set_field_MOVE_UP_HIGHLIGHTED_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("p", "MOVE_UP_HIGHLIGHTED_SPRITE", "field_45536", "MOVE_UP_HIGHLIGHTED_TEXTURE", "f_290868_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.client.gui.screen.pack.PackListWidget#MOVE_UP_TEXTURE
    [[maybe_unused]] static jobject get_field_MOVE_UP_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("q", "MOVE_UP_SPRITE", "field_45537", "MOVE_UP_TEXTURE", "f_290938_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.client.gui.screen.pack.PackListWidget#MOVE_UP_TEXTURE
    [[maybe_unused]] static void set_field_MOVE_UP_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("q", "MOVE_UP_SPRITE", "field_45537", "MOVE_UP_TEXTURE", "f_290938_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.client.gui.screen.pack.PackListWidget#MOVE_DOWN_HIGHLIGHTED_TEXTURE
    [[maybe_unused]] static jobject get_field_MOVE_DOWN_HIGHLIGHTED_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("r", "MOVE_DOWN_HIGHLIGHTED_SPRITE", "field_45538", "MOVE_DOWN_HIGHLIGHTED_TEXTURE", "f_291686_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.client.gui.screen.pack.PackListWidget#MOVE_DOWN_HIGHLIGHTED_TEXTURE
    [[maybe_unused]] static void set_field_MOVE_DOWN_HIGHLIGHTED_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("r", "MOVE_DOWN_HIGHLIGHTED_SPRITE", "field_45538", "MOVE_DOWN_HIGHLIGHTED_TEXTURE", "f_291686_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.client.gui.screen.pack.PackListWidget#MOVE_DOWN_TEXTURE
    [[maybe_unused]] static jobject get_field_MOVE_DOWN_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("s", "MOVE_DOWN_SPRITE", "field_45539", "MOVE_DOWN_TEXTURE", "f_291299_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.client.gui.screen.pack.PackListWidget#MOVE_DOWN_TEXTURE
    [[maybe_unused]] static void set_field_MOVE_DOWN_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("s", "MOVE_DOWN_SPRITE", "field_45539", "MOVE_DOWN_TEXTURE", "f_291299_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.client.gui.screen.pack.PackListWidget#INCOMPATIBLE
    [[maybe_unused]] static jobject get_field_INCOMPATIBLE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("u", "INCOMPATIBLE_TITLE", "field_19126", "INCOMPATIBLE", "f_100053_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.client.gui.screen.pack.PackListWidget#INCOMPATIBLE
    [[maybe_unused]] static void set_field_INCOMPATIBLE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("u", "INCOMPATIBLE_TITLE", "field_19126", "INCOMPATIBLE", "f_100053_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.client.gui.screen.pack.PackListWidget#INCOMPATIBLE_CONFIRM
    [[maybe_unused]] static jobject get_field_INCOMPATIBLE_CONFIRM() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("v", "INCOMPATIBLE_CONFIRM_TITLE", "field_19127", "INCOMPATIBLE_CONFIRM", "f_100054_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.client.gui.screen.pack.PackListWidget#INCOMPATIBLE_CONFIRM
    [[maybe_unused]] static void set_field_INCOMPATIBLE_CONFIRM(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("v", "INCOMPATIBLE_CONFIRM_TITLE", "field_19127", "INCOMPATIBLE_CONFIRM", "f_100054_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.screen.pack.PackListWidget#title
    static jobject get_field_title(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("w", "title", "field_18978", "title", "f_100055_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.pack.PackListWidget#title
    static void set_field_title(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("w", "title", "field_18978", "title", "f_100055_"), "Lwz;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.client.gui.screen.pack.PackListWidget#screen
    static jobject get_field_screen(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("x", "screen", "field_41715", "screen", "f_263433_"), "Lfrt;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.client.gui.screen.pack.PackListWidget#screen
    static void set_field_screen(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("x", "screen", "field_41715", "screen", "f_263433_"), "Lfrt;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_renderHeader() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "renderHeader", "method_25312", "renderHeader", "m_7415_"), "(Lfhz;II)V");
    }

    static void renderHeader(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_renderHeader();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getRowWidth() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getRowWidth", "method_25322", "getRowWidth", "m_5759_"), "()I");
    }

    static jint getRowWidth(const jobject& obj) {
                
       const auto methodID = methodID_getRowWidth();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getScrollbarX() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("q", "getScrollbarPosition", "method_25329", "getScrollbarX", "m_5756_"), "()I");
    }

    static jint getScrollbarX(const jobject& obj) {
                
       const auto methodID = methodID_getScrollbarX();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_drawSelectionHighlight() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "renderSelection", "method_44398", "drawSelectionHighlight", "m_240140_"), "(Lfhz;IIIII)V");
    }

    static void drawSelectionHighlight(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2, const jint& arg3, const jint& arg4, const jint& arg5) {
                
       const auto methodID = methodID_drawSelectionHighlight();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
    static jmethodID methodID_keyPressed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "keyPressed", "method_25404", "keyPressed", "m_7933_"), "(III)Z");
    }

    static jboolean keyPressed(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_keyPressed();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_GUI_SCREEN_PACK_PACKLISTWIDGET_HPP