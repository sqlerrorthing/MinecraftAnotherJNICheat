// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_GUI_SCREEN_SCREEN_HPP
#define NET_MINECRAFT_CLIENT_GUI_SCREEN_SCREEN_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.gui.screen.Screen
 * Remapped: fod
 */
namespace Screen {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("fod", "net/minecraft/client/gui/screens/Screen", "net/minecraft/class_437", "net/minecraft/client/gui/screen/Screen", "net/minecraft/src/C_3583_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.client.gui.screen.Screen#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_22782", "LOGGER", "f_96536_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.Screen#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_22782", "LOGGER", "f_96536_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.gui.screen.Screen#SCREEN_USAGE_TEXT
    [[maybe_unused]] static jobject get_field_SCREEN_USAGE_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "USAGE_NARRATION", "field_33814", "SCREEN_USAGE_TEXT", "f_169367_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.Screen#SCREEN_USAGE_TEXT
    [[maybe_unused]] static void set_field_SCREEN_USAGE_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "USAGE_NARRATION", "field_33814", "SCREEN_USAGE_TEXT", "f_169367_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static protected field net.minecraft.client.gui.screen.Screen#PANORAMA_RENDERER
    [[maybe_unused]] static jobject get_field_PANORAMA_RENDERER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "CUBE_MAP", "field_49508", "PANORAMA_RENDERER", "f_314949_"), "Lgen;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static protected field net.minecraft.client.gui.screen.Screen#PANORAMA_RENDERER
    [[maybe_unused]] static void set_field_PANORAMA_RENDERER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "CUBE_MAP", "field_49508", "PANORAMA_RENDERER", "f_314949_"), "Lgen;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static protected field net.minecraft.client.gui.screen.Screen#ROTATING_PANORAMA_RENDERER
    [[maybe_unused]] static jobject get_field_ROTATING_PANORAMA_RENDERER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "PANORAMA", "field_49509", "ROTATING_PANORAMA_RENDERER", "f_317031_"), "Lgfb;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static protected field net.minecraft.client.gui.screen.Screen#ROTATING_PANORAMA_RENDERER
    [[maybe_unused]] static void set_field_ROTATING_PANORAMA_RENDERER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "PANORAMA", "field_49509", "ROTATING_PANORAMA_RENDERER", "f_317031_"), "Lgfb;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.client.gui.screen.Screen#MENU_BACKGROUND_TEXTURE
    [[maybe_unused]] static jobject get_field_MENU_BACKGROUND_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "MENU_BACKGROUND", "field_49511", "MENU_BACKGROUND_TEXTURE", "f_315252_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.gui.screen.Screen#MENU_BACKGROUND_TEXTURE
    [[maybe_unused]] static void set_field_MENU_BACKGROUND_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "MENU_BACKGROUND", "field_49511", "MENU_BACKGROUND_TEXTURE", "f_315252_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.client.gui.screen.Screen#HEADER_SEPARATOR_TEXTURE
    [[maybe_unused]] static jobject get_field_HEADER_SEPARATOR_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "HEADER_SEPARATOR", "field_49895", "HEADER_SEPARATOR_TEXTURE", "f_316769_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.gui.screen.Screen#HEADER_SEPARATOR_TEXTURE
    [[maybe_unused]] static void set_field_HEADER_SEPARATOR_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "HEADER_SEPARATOR", "field_49895", "HEADER_SEPARATOR_TEXTURE", "f_316769_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.client.gui.screen.Screen#FOOTER_SEPARATOR_TEXTURE
    [[maybe_unused]] static jobject get_field_FOOTER_SEPARATOR_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "FOOTER_SEPARATOR", "field_49896", "FOOTER_SEPARATOR_TEXTURE", "f_316966_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.gui.screen.Screen#FOOTER_SEPARATOR_TEXTURE
    [[maybe_unused]] static void set_field_FOOTER_SEPARATOR_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "FOOTER_SEPARATOR", "field_49896", "FOOTER_SEPARATOR_TEXTURE", "f_316966_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.gui.screen.Screen#INWORLD_MENU_BACKGROUND_TEXTURE
    [[maybe_unused]] static jobject get_field_INWORLD_MENU_BACKGROUND_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "INWORLD_MENU_BACKGROUND", "field_49894", "INWORLD_MENU_BACKGROUND_TEXTURE", "f_315794_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.Screen#INWORLD_MENU_BACKGROUND_TEXTURE
    [[maybe_unused]] static void set_field_INWORLD_MENU_BACKGROUND_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "INWORLD_MENU_BACKGROUND", "field_49894", "INWORLD_MENU_BACKGROUND_TEXTURE", "f_315794_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.client.gui.screen.Screen#INWORLD_HEADER_SEPARATOR_TEXTURE
    [[maybe_unused]] static jobject get_field_INWORLD_HEADER_SEPARATOR_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "INWORLD_HEADER_SEPARATOR", "field_49897", "INWORLD_HEADER_SEPARATOR_TEXTURE", "f_314458_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.gui.screen.Screen#INWORLD_HEADER_SEPARATOR_TEXTURE
    [[maybe_unused]] static void set_field_INWORLD_HEADER_SEPARATOR_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "INWORLD_HEADER_SEPARATOR", "field_49897", "INWORLD_HEADER_SEPARATOR_TEXTURE", "f_314458_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.client.gui.screen.Screen#INWORLD_FOOTER_SEPARATOR_TEXTURE
    [[maybe_unused]] static jobject get_field_INWORLD_FOOTER_SEPARATOR_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "INWORLD_FOOTER_SEPARATOR", "field_49898", "INWORLD_FOOTER_SEPARATOR_TEXTURE", "f_316128_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.gui.screen.Screen#INWORLD_FOOTER_SEPARATOR_TEXTURE
    [[maybe_unused]] static void set_field_INWORLD_FOOTER_SEPARATOR_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "INWORLD_FOOTER_SEPARATOR", "field_49898", "INWORLD_FOOTER_SEPARATOR_TEXTURE", "f_316128_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for protected field net.minecraft.client.gui.screen.Screen#title
    static jobject get_field_title(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "title", "field_22785", "title", "f_96539_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.client.gui.screen.Screen#title
    static void set_field_title(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "title", "field_22785", "title", "f_96539_"), "Lwz;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.screen.Screen#children
    static jobject get_field_children(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "children", "field_22786", "children", "f_96540_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.Screen#children
    static void set_field_children(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "children", "field_22786", "children", "f_96540_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.screen.Screen#selectables
    static jobject get_field_selectables(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "narratables", "field_33815", "selectables", "f_169368_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.Screen#selectables
    static void set_field_selectables(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "narratables", "field_33815", "selectables", "f_169368_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.client.gui.screen.Screen#client
    static jobject get_field_client(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "minecraft", "field_22787", "client", "f_96541_"), "Lfgo;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.client.gui.screen.Screen#client
    static void set_field_client(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "minecraft", "field_22787", "client", "f_96541_"), "Lfgo;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.screen.Screen#screenInitialized
    static jboolean get_field_screenInitialized(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "initialized", "field_42156", "screenInitialized", "f_267454_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.Screen#screenInitialized
    static void set_field_screenInitialized(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "initialized", "field_42156", "screenInitialized", "f_267454_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.client.gui.screen.Screen#width
    static jint get_field_width(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "width", "field_22789", "width", "f_96543_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static public field net.minecraft.client.gui.screen.Screen#width
    static void set_field_width(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "width", "field_22789", "width", "f_96543_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.client.gui.screen.Screen#height
    static jint get_field_height(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "height", "field_22790", "height", "f_96544_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static public field net.minecraft.client.gui.screen.Screen#height
    static void set_field_height(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "height", "field_22790", "height", "f_96544_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.screen.Screen#drawables
    static jobject get_field_drawables(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "renderables", "field_33816", "drawables", "f_169369_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.Screen#drawables
    static void set_field_drawables(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "renderables", "field_33816", "drawables", "f_169369_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.client.gui.screen.Screen#textRenderer
    static jobject get_field_textRenderer(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "font", "field_22793", "textRenderer", "f_96547_"), "Lfhx;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.client.gui.screen.Screen#textRenderer
    static void set_field_textRenderer(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "font", "field_22793", "textRenderer", "f_96547_"), "Lfhx;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for static private field net.minecraft.client.gui.screen.Screen#SCREEN_INIT_NARRATION_DELAY
    [[maybe_unused]] static jlong get_field_SCREEN_INIT_NARRATION_DELAY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("w", "NARRATE_SUPPRESS_AFTER_INIT_TIME", "field_33817", "SCREEN_INIT_NARRATION_DELAY", "f_169370_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticLongField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.Screen#SCREEN_INIT_NARRATION_DELAY
    [[maybe_unused]] static void set_field_SCREEN_INIT_NARRATION_DELAY(const jlong &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("w", "NARRATE_SUPPRESS_AFTER_INIT_TIME", "field_33817", "SCREEN_INIT_NARRATION_DELAY", "f_169370_"), "J");
        return MinecraftSDK::env->SetStaticLongField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.gui.screen.Screen#NARRATOR_MODE_CHANGE_DELAY
    [[maybe_unused]] static jlong get_field_NARRATOR_MODE_CHANGE_DELAY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("x", "NARRATE_DELAY_NARRATOR_ENABLED", "field_33818", "NARRATOR_MODE_CHANGE_DELAY", "f_169371_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticLongField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.Screen#NARRATOR_MODE_CHANGE_DELAY
    [[maybe_unused]] static void set_field_NARRATOR_MODE_CHANGE_DELAY(const jlong &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("x", "NARRATE_DELAY_NARRATOR_ENABLED", "field_33818", "NARRATOR_MODE_CHANGE_DELAY", "f_169371_"), "J");
        return MinecraftSDK::env->SetStaticLongField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.gui.screen.Screen#MOUSE_MOVE_NARRATION_DELAY
    [[maybe_unused]] static jlong get_field_MOUSE_MOVE_NARRATION_DELAY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("y", "NARRATE_DELAY_MOUSE_MOVE", "field_33819", "MOUSE_MOVE_NARRATION_DELAY", "f_169372_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticLongField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.Screen#MOUSE_MOVE_NARRATION_DELAY
    [[maybe_unused]] static void set_field_MOUSE_MOVE_NARRATION_DELAY(const jlong &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("y", "NARRATE_DELAY_MOUSE_MOVE", "field_33819", "MOUSE_MOVE_NARRATION_DELAY", "f_169372_"), "J");
        return MinecraftSDK::env->SetStaticLongField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.gui.screen.Screen#MOUSE_PRESS_SCROLL_NARRATION_DELAY
    [[maybe_unused]] static jlong get_field_MOUSE_PRESS_SCROLL_NARRATION_DELAY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("z", "NARRATE_DELAY_MOUSE_ACTION", "field_33820", "MOUSE_PRESS_SCROLL_NARRATION_DELAY", "f_169373_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticLongField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.Screen#MOUSE_PRESS_SCROLL_NARRATION_DELAY
    [[maybe_unused]] static void set_field_MOUSE_PRESS_SCROLL_NARRATION_DELAY(const jlong &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("z", "NARRATE_DELAY_MOUSE_ACTION", "field_33820", "MOUSE_PRESS_SCROLL_NARRATION_DELAY", "f_169373_"), "J");
        return MinecraftSDK::env->SetStaticLongField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.gui.screen.Screen#KEY_PRESS_NARRATION_DELAY
    [[maybe_unused]] static jlong get_field_KEY_PRESS_NARRATION_DELAY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("A", "NARRATE_DELAY_KEYBOARD_ACTION", "field_33821", "KEY_PRESS_NARRATION_DELAY", "f_169374_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticLongField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.Screen#KEY_PRESS_NARRATION_DELAY
    [[maybe_unused]] static void set_field_KEY_PRESS_NARRATION_DELAY(const jlong &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("A", "NARRATE_DELAY_KEYBOARD_ACTION", "field_33821", "KEY_PRESS_NARRATION_DELAY", "f_169374_"), "J");
        return MinecraftSDK::env->SetStaticLongField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.screen.Screen#narrator
    static jobject get_field_narrator(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("B", "narrationState", "field_33822", "narrator", "f_169375_"), "Lfml;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.Screen#narrator
    static void set_field_narrator(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("B", "narrationState", "field_33822", "narrator", "f_169375_"), "Lfml;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.screen.Screen#elementNarrationStartTime
    static jlong get_field_elementNarrationStartTime(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("C", "narrationSuppressTime", "field_33823", "elementNarrationStartTime", "f_169376_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.Screen#elementNarrationStartTime
    static void set_field_elementNarrationStartTime(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("C", "narrationSuppressTime", "field_33823", "elementNarrationStartTime", "f_169376_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.screen.Screen#screenNarrationStartTime
    static jlong get_field_screenNarrationStartTime(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("D", "nextNarrationTime", "field_33824", "screenNarrationStartTime", "f_169377_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.Screen#screenNarrationStartTime
    static void set_field_screenNarrationStartTime(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("D", "nextNarrationTime", "field_33824", "screenNarrationStartTime", "f_169377_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.client.gui.screen.Screen#narratorToggleButton
    static jobject get_field_narratorToggleButton(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "narratorButton", "field_52252", "narratorToggleButton", "f_337633_"), "Lfit;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.client.gui.screen.Screen#narratorToggleButton
    static void set_field_narratorToggleButton(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "narratorButton", "field_52252", "narratorToggleButton", "f_337633_"), "Lfit;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.screen.Screen#selected
    static jobject get_field_selected(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("E", "lastNarratable", "field_33813", "selected", "f_169365_"), "Lfmg;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.Screen#selected
    static void set_field_selected(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("E", "lastNarratable", "field_33813", "selected", "f_169365_"), "Lfmg;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.screen.Screen#tooltip
    static jobject get_field_tooltip(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("F", "deferredTooltipRendering", "field_41685", "tooltip", "f_262730_"), "Lfod$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.Screen#tooltip
    static void set_field_tooltip(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("F", "deferredTooltipRendering", "field_41685", "tooltip", "f_262730_"), "Lfod$a;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.client.gui.screen.Screen#executor
    static jobject get_field_executor(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "screenExecutor", "field_44944", "executor", "f_289574_"), "Ljava/util/concurrent/Executor;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.client.gui.screen.Screen#executor
    static void set_field_executor(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "screenExecutor", "field_44944", "executor", "f_289574_"), "Ljava/util/concurrent/Executor;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_getTitle() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("n", "getTitle", "method_25440", "getTitle", "m_96636_"), "()Lwz;");
    }

    static jobject getTitle(const jobject& obj) {
                
       const auto methodID = methodID_getTitle();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getNarratedTitle() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "getNarrationMessage", "method_25435", "getNarratedTitle", "m_142562_"), "()Lwz;");
    }

    static jobject getNarratedTitle(const jobject& obj) {
                
       const auto methodID = methodID_getNarratedTitle();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_renderWithTooltip() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "renderWithTooltip", "method_47413", "renderWithTooltip", "m_280264_"), "(Lfhz;IIF)V");
    }

    static void renderWithTooltip(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2, const jfloat& arg3) {
                
       const auto methodID = methodID_renderWithTooltip();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_render() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "render", "method_25394", "render", "m_88315_"), "(Lfhz;IIF)V");
    }

    static void render(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2, const jfloat& arg3) {
                
       const auto methodID = methodID_render();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_keyPressed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "keyPressed", "method_25404", "keyPressed", "m_7933_"), "(III)Z");
    }

    static jboolean keyPressed(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_keyPressed();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getTabNavigation() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("m", "createTabEvent", "method_48266", "getTabNavigation", "m_264442_"), "()Lfmo$c;");
    }

    static jobject getTabNavigation(const jobject& obj) {
                
       const auto methodID = methodID_getTabNavigation();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getArrowNavigation() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "createArrowEvent", "method_48264", "getArrowNavigation", "m_264409_"), "(Lfmq;)Lfmo$a;");
    }

    static jobject getArrowNavigation(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getArrowNavigation();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setInitialFocus() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aI_", "setInitialFocus", "method_56131", "setInitialFocus", "m_318615_"), "()V");
    }

    static void setInitialFocus(const jobject& obj) {
                
       const auto methodID = methodID_setInitialFocus();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID__setInitialFocus() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setInitialFocus", "method_48265", "setInitialFocus", "m_264313_"), "(Lfki;)V");
    }

    static void _setInitialFocus(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__setInitialFocus();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_blur() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("o", "clearFocus", "method_48267", "blur", "m_264131_"), "()V");
    }

    static void blur(const jobject& obj) {
                
       const auto methodID = methodID_blur();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_switchFocus() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "changeFocus", "method_48263", "switchFocus", "m_264158_"), "(Lfhw;)V");
    }

    static void switchFocus(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_switchFocus();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_shouldCloseOnEsc() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aJ_", "shouldCloseOnEsc", "method_25422", "shouldCloseOnEsc", "m_6913_"), "()Z");
    }

    static jboolean shouldCloseOnEsc(const jobject& obj) {
                
       const auto methodID = methodID_shouldCloseOnEsc();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_close() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "onClose", "method_25419", "close", "m_7379_"), "()V");
    }

    static void close(const jobject& obj) {
                
       const auto methodID = methodID_close();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_addDrawableChild() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "addRenderableWidget", "method_37063", "addDrawableChild", "m_142416_"), "(Lfki;)Lfki;");
    }

    static jobject addDrawableChild(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addDrawableChild();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_addDrawable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addRenderableOnly", "method_37060", "addDrawable", "m_169394_"), "(Lfjp;)Lfjp;");
    }

    static jobject addDrawable(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addDrawable();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_addSelectableChild() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "addWidget", "method_25429", "addSelectableChild", "m_7787_"), "(Lfki;)Lfki;");
    }

    static jobject addSelectableChild(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addSelectableChild();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_remove() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "removeWidget", "method_37066", "remove", "m_169411_"), "(Lfki;)V");
    }

    static void remove(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_remove();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_clearChildren() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("p", "clearWidgets", "method_37067", "clearChildren", "m_169413_"), "()V");
    }

    static void clearChildren(const jobject& obj) {
                
       const auto methodID = methodID_clearChildren();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getTooltipFromItem() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getTooltipFromItem", "method_25408", "getTooltipFromItem", "m_280152_"), "(Lfgo;Lcuq;)Ljava/util/List;");
    }

    static jobject getTooltipFromItem(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_getTooltipFromItem();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_insertText() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a_", "insertText", "method_25415", "insertText", "m_6697_"), "(Ljava/lang/String;Z)V");
    }

    static void insertText(const jobject& obj, const jobject& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_insertText();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_handleTextClick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleComponentClicked", "method_25430", "handleTextClick", "m_5561_"), "(Lxw;)Z");
    }

    static jboolean handleTextClick(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_handleTextClick();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_init() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "init", "method_25423", "init", "m_6575_"), "(Lfgo;II)V");
    }

    static void init(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_init();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_clearAndInit() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("q", "rebuildWidgets", "method_41843", "clearAndInit", "m_232761_"), "()V");
    }

    static void clearAndInit(const jobject& obj) {
                
       const auto methodID = methodID_clearAndInit();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID__children() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aK_", "children", "method_25396", "children", "m_6702_"), "()Ljava/util/List;");
    }

    static jobject _children(const jobject& obj) {
                
       const auto methodID = methodID__children();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__init() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aT_", "init", "method_25426", "init", "m_7856_"), "()V");
    }

    static void _init(const jobject& obj) {
                
       const auto methodID = methodID__init();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "tick", "method_25393", "tick", "m_86600_"), "()V");
    }

    static void tick(const jobject& obj) {
                
       const auto methodID = methodID_tick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_removed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "removed", "method_25432", "removed", "m_7861_"), "()V");
    }

    static void removed(const jobject& obj) {
                
       const auto methodID = methodID_removed();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_onDisplayed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aL_", "added", "method_49589", "onDisplayed", "m_274333_"), "()V");
    }

    static void onDisplayed(const jobject& obj) {
                
       const auto methodID = methodID_onDisplayed();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_renderBackground() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "renderBackground", "method_25420", "renderBackground", "m_280273_"), "(Lfhz;IIF)V");
    }

    static void renderBackground(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2, const jfloat& arg3) {
                
       const auto methodID = methodID_renderBackground();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_applyBlur() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "renderBlurredBackground", "method_57734", "applyBlur", "m_324436_"), "(F)V");
    }

    static void applyBlur(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_applyBlur();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_renderPanoramaBackground() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "renderPanorama", "method_57728", "renderPanoramaBackground", "m_318720_"), "(Lfhz;F)V");
    }

    static void renderPanoramaBackground(const jobject& obj, const jobject& arg0, const jfloat& arg1) {
                
       const auto methodID = methodID_renderPanoramaBackground();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_renderDarkening() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "renderMenuBackground", "method_57735", "renderDarkening", "m_323963_"), "(Lfhz;)V");
    }

    static void renderDarkening(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_renderDarkening();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__renderDarkening() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "renderMenuBackground", "method_57736", "renderDarkening", "m_320284_"), "(Lfhz;IIII)V");
    }

    static void _renderDarkening(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2, const jint& arg3, const jint& arg4) {
                
       const auto methodID = methodID__renderDarkening();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_renderBackgroundTexture() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "renderMenuBackgroundTexture", "method_57737", "renderBackgroundTexture", "m_323099_"), "(Lfhz;Lakr;IIFFII)V");
    }

    static void renderBackgroundTexture(const jobject& arg0, const jobject& arg1, const jint& arg2, const jint& arg3, const jfloat& arg4, const jfloat& arg5, const jint& arg6, const jint& arg7) {
       const auto clazz = self();
       const auto methodID = methodID_renderBackgroundTexture();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    };
    
    static jmethodID methodID_renderInGameBackground() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "renderTransparentBackground", "method_52752", "renderInGameBackground", "m_293900_"), "(Lfhz;)V");
    }

    static void renderInGameBackground(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_renderInGameBackground();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_shouldPause() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "isPauseScreen", "method_25421", "shouldPause", "m_7043_"), "()Z");
    }

    static jboolean shouldPause(const jobject& obj) {
                
       const auto methodID = methodID_shouldPause();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasControlDown() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("r", "hasControlDown", "method_25441", "hasControlDown", "m_96637_"), "()Z");
    }

    static jboolean hasControlDown() {
       const auto clazz = self();
       const auto methodID = methodID_hasControlDown();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID);
    };
    
    static jmethodID methodID_hasShiftDown() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("s", "hasShiftDown", "method_25442", "hasShiftDown", "m_96638_"), "()Z");
    }

    static jboolean hasShiftDown() {
       const auto clazz = self();
       const auto methodID = methodID_hasShiftDown();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID);
    };
    
    static jmethodID methodID_hasAltDown() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("t", "hasAltDown", "method_25443", "hasAltDown", "m_96639_"), "()Z");
    }

    static jboolean hasAltDown() {
       const auto clazz = self();
       const auto methodID = methodID_hasAltDown();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID);
    };
    
    static jmethodID methodID_isCut() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "isCut", "method_25436", "isCut", "m_96628_"), "(I)Z");
    }

    static jboolean isCut(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_isCut();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_isPaste() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("d", "isPaste", "method_25437", "isPaste", "m_96630_"), "(I)Z");
    }

    static jboolean isPaste(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_isPaste();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_isCopy() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("e", "isCopy", "method_25438", "isCopy", "m_96632_"), "(I)Z");
    }

    static jboolean isCopy(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_isCopy();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_isSelectAll() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("f", "isSelectAll", "method_25439", "isSelectAll", "m_96634_"), "(I)Z");
    }

    static jboolean isSelectAll(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_isSelectAll();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_initTabNavigation() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "repositionElements", "method_48640", "initTabNavigation", "m_267719_"), "()V");
    }

    static void initTabNavigation(const jobject& obj) {
                
       const auto methodID = methodID_initTabNavigation();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_resize() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "resize", "method_25410", "resize", "m_6574_"), "(Lfgo;II)V");
    }

    static void resize(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_resize();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_wrapScreenError() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "wrapScreenError", "method_25412", "wrapScreenError", "m_96579_"), "(Ljava/lang/Runnable;Ljava/lang/String;Ljava/lang/String;)V");
    }

    static void wrapScreenError(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_wrapScreenError();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_isValidCharacterForName() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isValidCharacterForName", "method_25414", "isValidCharacterForName", "m_96583_"), "(Ljava/lang/String;CI)Z");
    }

    static jboolean isValidCharacterForName(const jobject& obj, const jobject& arg0, const jchar& arg1, const jint& arg2) {
                
       const auto methodID = methodID_isValidCharacterForName();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_isMouseOver() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "isMouseOver", "method_25405", "isMouseOver", "m_5953_"), "(DD)Z");
    }

    static jboolean isMouseOver(const jobject& obj, const jdouble& arg0, const jdouble& arg1) {
                
       const auto methodID = methodID_isMouseOver();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_filesDragged() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onFilesDrop", "method_29638", "filesDragged", "m_7400_"), "(Ljava/util/List;)V");
    }

    static void filesDragged(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_filesDragged();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setScreenNarrationDelay() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "scheduleNarration", "method_37059", "setScreenNarrationDelay", "m_169380_"), "(JZ)V");
    }

    static void setScreenNarrationDelay(const jobject& obj, const jlong& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_setScreenNarrationDelay();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_setElementNarrationDelay() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "suppressNarration", "method_37058", "setElementNarrationDelay", "m_169378_"), "(J)V");
    }

    static void setElementNarrationDelay(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_setElementNarrationDelay();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_applyMouseMoveNarratorDelay() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("u", "afterMouseMove", "method_37068", "applyMouseMoveNarratorDelay", "m_169414_"), "()V");
    }

    static void applyMouseMoveNarratorDelay(const jobject& obj) {
                
       const auto methodID = methodID_applyMouseMoveNarratorDelay();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_applyMousePressScrollNarratorDelay() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("v", "afterMouseAction", "method_37069", "applyMousePressScrollNarratorDelay", "m_169415_"), "()V");
    }

    static void applyMousePressScrollNarratorDelay(const jobject& obj) {
                
       const auto methodID = methodID_applyMousePressScrollNarratorDelay();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_applyKeyPressNarratorDelay() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("x", "afterKeyboardAction", "method_37070", "applyKeyPressNarratorDelay", "m_169416_"), "()V");
    }

    static void applyKeyPressNarratorDelay(const jobject& obj) {
                
       const auto methodID = methodID_applyKeyPressNarratorDelay();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_isNarratorActive() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("C", "shouldRunNarration", "method_37073", "isNarratorActive", "m_169419_"), "()Z");
    }

    static jboolean isNarratorActive(const jobject& obj) {
                
       const auto methodID = methodID_isNarratorActive();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_updateNarrator() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("y", "handleDelayedNarration", "method_37071", "updateNarrator", "m_169417_"), "()V");
    }

    static void updateNarrator(const jobject& obj) {
                
       const auto methodID = methodID_updateNarrator();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_narrateScreenIfNarrationEnabled() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "triggerImmediateNarration", "method_37064", "narrateScreenIfNarrationEnabled", "m_169407_"), "(Z)V");
    }

    static void narrateScreenIfNarrationEnabled(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_narrateScreenIfNarrationEnabled();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_narrateScreen() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "runNarration", "method_37065", "narrateScreen", "m_169409_"), "(Z)V");
    }

    static void narrateScreen(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_narrateScreen();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_hasUsageText() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aS_", "shouldNarrateNavigation", "method_48262", "hasUsageText", "m_264396_"), "()Z");
    }

    static jboolean hasUsageText(const jobject& obj) {
                
       const auto methodID = methodID_hasUsageText();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_addScreenNarrations() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateNarrationState", "method_37062", "addScreenNarrations", "m_142228_"), "(Lfmi;)V");
    }

    static void addScreenNarrations(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addScreenNarrations();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_addElementNarrations() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "updateNarratedWidget", "method_37056", "addElementNarrations", "m_142227_"), "(Lfmi;)V");
    }

    static void addElementNarrations(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addElementNarrations();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getUsageNarrationText() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("z", "getUsageNarration", "method_53870", "getUsageNarrationText", "m_301494_"), "()Lwz;");
    }

    static jobject getUsageNarrationText(const jobject& obj) {
                
       const auto methodID = methodID_getUsageNarrationText();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_findSelectedElementData() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "findNarratableWidget", "method_37061", "findSelectedElementData", "m_169400_"), "(Ljava/util/List;Lfmg;)Lfod$b;");
    }

    static jobject findSelectedElementData(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_findSelectedElementData();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_refreshNarrator() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "updateNarratorStatus", "method_61040", "refreshNarrator", "m_340185_"), "(Z)V");
    }

    static void refreshNarrator(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_refreshNarrator();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_clearTooltip() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("A", "clearTooltipForNextRenderPass", "method_59840", "clearTooltip", "m_319277_"), "()V");
    }

    static void clearTooltip(const jobject& obj) {
                
       const auto methodID = methodID_clearTooltip();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_setTooltip() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setTooltipForNextRenderPass", "method_47414", "setTooltip", "m_257959_"), "(Ljava/util/List;)V");
    }

    static void setTooltip(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setTooltip();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__setTooltip() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setTooltipForNextRenderPass", "method_47942", "setTooltip", "m_262861_"), "(Ljava/util/List;Lfqo;Z)V");
    }

    static void _setTooltip(const jobject& obj, const jobject& arg0, const jobject& arg1, const jboolean& arg2) {
                
       const auto methodID = methodID__setTooltip();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID___setTooltip() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "setTooltipForNextRenderPass", "method_47415", "setTooltip", "m_257404_"), "(Lwz;)V");
    }

    static void __setTooltip(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID___setTooltip();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID____setTooltip() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setTooltipForNextRenderPass", "method_47412", "setTooltip", "m_262791_"), "(Lfjx;Lfqo;Z)V");
    }

    static void ___setTooltip(const jobject& obj, const jobject& arg0, const jobject& arg1, const jboolean& arg2) {
                
       const auto methodID = methodID____setTooltip();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getNavigationFocus() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("H", "getRectangle", "method_48202", "getNavigationFocus", "m_264198_"), "()Lfms;");
    }

    static jobject getNavigationFocus(const jobject& obj) {
                
       const auto methodID = methodID_getNavigationFocus();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getMusic() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("B", "getBackgroundMusic", "method_50024", "getMusic", "m_278176_"), "()Lavm;");
    }

    static jobject getMusic(const jobject& obj) {
                
       const auto methodID = methodID_getMusic();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_GUI_SCREEN_SCREEN_HPP