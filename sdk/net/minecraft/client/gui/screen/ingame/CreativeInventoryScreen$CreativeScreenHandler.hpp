// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_GUI_SCREEN_INGAME_CREATIVEINVENTORYSCREEN$CREATIVESCREENHANDLER_HPP
#define NET_MINECRAFT_CLIENT_GUI_SCREEN_INGAME_CREATIVEINVENTORYSCREEN$CREATIVESCREENHANDLER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.gui.screen.ingame.CreativeInventoryScreen$CreativeScreenHandler
 * Remapped: fpi$b
 */
namespace CreativeInventoryScreen$CreativeScreenHandler {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("fpi$b", "net/minecraft/client/gui/screens/inventory/CreativeModeInventoryScreen$ItemPickerMenu", "net/minecraft/class_481$class_483", "net/minecraft/client/gui/screen/ingame/CreativeInventoryScreen$CreativeScreenHandler", "net/minecraft/src/C_3652_$C_3654_"));
        }
        return cachedClass;
    };

    // getter for public field net.minecraft.client.gui.screen.ingame.CreativeInventoryScreen$CreativeScreenHandler#itemList
    static jobject get_field_itemList(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "items", "field_2897", "itemList", "f_98639_"), "Ljv;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static public field net.minecraft.client.gui.screen.ingame.CreativeInventoryScreen$CreativeScreenHandler#itemList
    static void set_field_itemList(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "items", "field_2897", "itemList", "f_98639_"), "Ljv;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.screen.ingame.CreativeInventoryScreen$CreativeScreenHandler#parent
    static jobject get_field_parent(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "inventoryMenu", "field_29349", "parent", "f_169749_"), "Lcpu;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.ingame.CreativeInventoryScreen$CreativeScreenHandler#parent
    static void set_field_parent(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "inventoryMenu", "field_29349", "parent", "f_169749_"), "Lcpu;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_canUse() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "stillValid", "method_7597", "canUse", "m_6875_"), "(Lcmx;)Z");
    }

    static jboolean canUse(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_canUse();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getOverflowRows() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "calculateRowCount", "method_47428", "getOverflowRows", "m_257935_"), "()I");
    }

    static jint getOverflowRows(const jobject& obj) {
                
       const auto methodID = methodID_getOverflowRows();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getRow() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getRowIndexForScroll", "method_47425", "getRow", "m_257485_"), "(F)I");
    }

    static jint getRow(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_getRow();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getScrollPosition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "getScrollForRowIndex", "method_47427", "getScrollPosition", "m_257538_"), "(I)F");
    }

    static jfloat getScrollPosition(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_getScrollPosition();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__getScrollPosition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "subtractInputFromScroll", "method_47426", "getScrollPosition", "m_258092_"), "(FD)F");
    }

    static jfloat _getScrollPosition(const jobject& obj, const jfloat& arg0, const jdouble& arg1) {
                
       const auto methodID = methodID__getScrollPosition();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_scrollItems() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "scrollTo", "method_2473", "scrollItems", "m_98642_"), "(F)V");
    }

    static void scrollItems(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_scrollItems();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_shouldShowScrollbar() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("m", "canScroll", "method_2474", "shouldShowScrollbar", "m_98654_"), "()Z");
    }

    static jboolean shouldShowScrollbar(const jobject& obj) {
                
       const auto methodID = methodID_shouldShowScrollbar();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_quickMove() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "quickMoveStack", "method_7601", "quickMove", "m_7648_"), "(Lcmx;I)Lcuq;");
    }

    static jobject quickMove(const jobject& obj, const jobject& arg0, const jint& arg1) {
                
       const auto methodID = methodID_quickMove();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_canInsertIntoSlot() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "canTakeItemForPickAll", "method_7613", "canInsertIntoSlot", "m_5882_"), "(Lcuq;Lcrq;)Z");
    }

    static jboolean canInsertIntoSlot(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_canInsertIntoSlot();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__canInsertIntoSlot() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "canDragTo", "method_7615", "canInsertIntoSlot", "m_5622_"), "(Lcrq;)Z");
    }

    static jboolean _canInsertIntoSlot(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__canInsertIntoSlot();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getCursorStack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "getCarried", "method_34255", "getCursorStack", "m_142621_"), "()Lcuq;");
    }

    static jobject getCursorStack(const jobject& obj) {
                
       const auto methodID = methodID_getCursorStack();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_setCursorStack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setCarried", "method_34254", "setCursorStack", "m_142503_"), "(Lcuq;)V");
    }

    static void setCursorStack(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setCursorStack();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_GUI_SCREEN_INGAME_CREATIVEINVENTORYSCREEN$CREATIVESCREENHANDLER_HPP