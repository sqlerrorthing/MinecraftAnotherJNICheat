// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_GUI_SCREEN_INGAME_CREATIVEINVENTORYSCREEN$CREATIVESLOT_HPP
#define NET_MINECRAFT_CLIENT_GUI_SCREEN_INGAME_CREATIVEINVENTORYSCREEN$CREATIVESLOT_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.gui.screen.ingame.CreativeInventoryScreen$CreativeSlot
 * Remapped: fpi$c
 */
namespace CreativeInventoryScreen$CreativeSlot {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("fpi$c", "net/minecraft/client/gui/screens/inventory/CreativeModeInventoryScreen$SlotWrapper", "net/minecraft/class_481$class_484", "net/minecraft/client/gui/screen/ingame/CreativeInventoryScreen$CreativeSlot", "net/minecraft/src/C_3652_$C_3655_"));
        }
        return cachedClass;
    };

    // getter for default field net.minecraft.client.gui.screen.ingame.CreativeInventoryScreen$CreativeSlot#slot
    static jobject get_field_slot(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "target", "field_2898", "slot", "f_98655_"), "Lcrq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.client.gui.screen.ingame.CreativeInventoryScreen$CreativeSlot#slot
    static void set_field_slot(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "target", "field_2898", "slot", "f_98655_"), "Lcrq;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_onTakeItem() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onTake", "method_7667", "onTakeItem", "m_142406_"), "(Lcmx;Lcuq;)V");
    }

    static void onTakeItem(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_onTakeItem();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_canInsert() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "mayPlace", "method_7680", "canInsert", "m_5857_"), "(Lcuq;)Z");
    }

    static jboolean canInsert(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_canInsert();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getStack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "getItem", "method_7677", "getStack", "m_7993_"), "()Lcuq;");
    }

    static jobject getStack(const jobject& obj) {
                
       const auto methodID = methodID_getStack();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasStack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "hasItem", "method_7681", "hasStack", "m_6657_"), "()Z");
    }

    static jboolean hasStack(const jobject& obj) {
                
       const auto methodID = methodID_hasStack();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setStack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setByPlayer", "method_48931", "setStack", "m_269206_"), "(Lcuq;Lcuq;)V");
    }

    static void setStack(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_setStack();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_setStackNoCallbacks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "set", "method_7673", "setStackNoCallbacks", "m_5852_"), "(Lcuq;)V");
    }

    static void setStackNoCallbacks(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setStackNoCallbacks();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_markDirty() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "setChanged", "method_7668", "markDirty", "m_6654_"), "()V");
    }

    static void markDirty(const jobject& obj) {
                
       const auto methodID = methodID_markDirty();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getMaxItemCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getMaxStackSize", "method_7675", "getMaxItemCount", "m_6641_"), "()I");
    }

    static jint getMaxItemCount(const jobject& obj) {
                
       const auto methodID = methodID_getMaxItemCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID__getMaxItemCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a_", "getMaxStackSize", "method_7676", "getMaxItemCount", "m_5866_"), "(Lcuq;)I");
    }

    static jint _getMaxItemCount(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__getMaxItemCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getBackgroundSprite() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getNoItemIcon", "method_7679", "getBackgroundSprite", "m_7543_"), "()Lcom/mojang/datafixers/util/Pair;");
    }

    static jobject getBackgroundSprite(const jobject& obj) {
                
       const auto methodID = methodID_getBackgroundSprite();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_takeStack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "remove", "method_7671", "takeStack", "m_6201_"), "(I)Lcuq;");
    }

    static jobject takeStack(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_takeStack();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isEnabled() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "isActive", "method_7682", "isEnabled", "m_6659_"), "()Z");
    }

    static jboolean isEnabled(const jobject& obj) {
                
       const auto methodID = methodID_isEnabled();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_canTakeItems() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "mayPickup", "method_7674", "canTakeItems", "m_8010_"), "(Lcmx;)Z");
    }

    static jboolean canTakeItems(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_canTakeItems();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_GUI_SCREEN_INGAME_CREATIVEINVENTORYSCREEN$CREATIVESLOT_HPP