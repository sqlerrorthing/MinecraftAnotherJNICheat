// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_GUI_SCREEN_WORLD_WORLDSCREENOPTIONGRID$OPTIONBUILDER_HPP
#define NET_MINECRAFT_CLIENT_GUI_SCREEN_WORLD_WORLDSCREENOPTIONGRID$OPTIONBUILDER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.gui.screen.world.WorldScreenOptionGrid$OptionBuilder
 * Remapped: ftj$d
 */
namespace WorldScreenOptionGrid$OptionBuilder {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("ftj$d", "net/minecraft/client/gui/screens/worldselection/SwitchGrid$SwitchBuilder", "net/minecraft/class_8096$class_8099", "net/minecraft/client/gui/screen/world/WorldScreenOptionGrid$OptionBuilder", "net/minecraft/src/C_267350_$C_267348_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.client.gui.screen.world.WorldScreenOptionGrid$OptionBuilder#text
    static jobject get_field_text(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "label", "field_42204", "text", "f_267484_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.world.WorldScreenOptionGrid$OptionBuilder#text
    static void set_field_text(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "label", "field_42204", "text", "f_267484_"), "Lwz;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.screen.world.WorldScreenOptionGrid$OptionBuilder#getter
    static jobject get_field_getter(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "stateSupplier", "field_42205", "getter", "f_267416_"), "Ljava/util/function/BooleanSupplier;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.world.WorldScreenOptionGrid$OptionBuilder#getter
    static void set_field_getter(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "stateSupplier", "field_42205", "getter", "f_267416_"), "Ljava/util/function/BooleanSupplier;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.screen.world.WorldScreenOptionGrid$OptionBuilder#setter
    static jobject get_field_setter(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "onClicked", "field_42206", "setter", "f_267466_"), "Ljava/util/function/Consumer;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.world.WorldScreenOptionGrid$OptionBuilder#setter
    static void set_field_setter(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "onClicked", "field_42206", "setter", "f_267466_"), "Ljava/util/function/Consumer;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.screen.world.WorldScreenOptionGrid$OptionBuilder#tooltip
    static jobject get_field_tooltip(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "info", "field_42207", "tooltip", "f_267377_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.world.WorldScreenOptionGrid$OptionBuilder#tooltip
    static void set_field_tooltip(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "info", "field_42207", "tooltip", "f_267377_"), "Lwz;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.screen.world.WorldScreenOptionGrid$OptionBuilder#toggleable
    static jobject get_field_toggleable(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "isActiveCondition", "field_42208", "toggleable", "f_267360_"), "Ljava/util/function/BooleanSupplier;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.world.WorldScreenOptionGrid$OptionBuilder#toggleable
    static void set_field_toggleable(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "isActiveCondition", "field_42208", "toggleable", "f_267360_"), "Ljava/util/function/BooleanSupplier;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.screen.world.WorldScreenOptionGrid$OptionBuilder#buttonWidth
    static jint get_field_buttonWidth(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "buttonWidth", "field_42209", "buttonWidth", "f_267480_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.world.WorldScreenOptionGrid$OptionBuilder#buttonWidth
    static void set_field_buttonWidth(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "buttonWidth", "field_42209", "buttonWidth", "f_267480_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    static jmethodID methodID__toggleable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "withIsActiveCondition", "method_48693", "toggleable", "m_267757_"), "(Ljava/util/function/BooleanSupplier;)Lftj$d;");
    }

    static jobject _toggleable(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__toggleable();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__tooltip() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "withInfo", "method_48694", "tooltip", "m_267664_"), "(Lwz;)Lftj$d;");
    }

    static jobject _tooltip(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__tooltip();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_build() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "build", "method_48691", "build", "m_269062_"), "(Lftj$a;Lfly;I)Lftj$c;");
    }

    static jobject build(const jobject& obj, const jobject& arg0, const jobject& arg1, const jint& arg2) {
                
       const auto methodID = methodID_build();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_GUI_SCREEN_WORLD_WORLDSCREENOPTIONGRID$OPTIONBUILDER_HPP