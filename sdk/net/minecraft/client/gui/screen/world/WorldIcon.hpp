// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_GUI_SCREEN_WORLD_WORLDICON_HPP
#define NET_MINECRAFT_CLIENT_GUI_SCREEN_WORLD_WORLDICON_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.gui.screen.world.WorldIcon
 * Remapped: fnn
 */
namespace WorldIcon {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("fnn", "net/minecraft/client/gui/screens/FaviconTexture", "net/minecraft/class_8573", "net/minecraft/client/gui/screen/world/WorldIcon", "net/minecraft/src/C_289024_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.client.gui.screen.world.WorldIcon#UNKNOWN_SERVER_ID
    [[maybe_unused]] static jobject get_field_UNKNOWN_SERVER_ID() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "MISSING_LOCATION", "field_44933", "UNKNOWN_SERVER_ID", "f_289036_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.world.WorldIcon#UNKNOWN_SERVER_ID
    [[maybe_unused]] static void set_field_UNKNOWN_SERVER_ID(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "MISSING_LOCATION", "field_44933", "UNKNOWN_SERVER_ID", "f_289036_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.gui.screen.world.WorldIcon#ICON_WIDTH
    [[maybe_unused]] static jint get_field_ICON_WIDTH() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "WIDTH", "field_44934", "ICON_WIDTH", "f_289028_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.world.WorldIcon#ICON_WIDTH
    [[maybe_unused]] static void set_field_ICON_WIDTH(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "WIDTH", "field_44934", "ICON_WIDTH", "f_289028_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.gui.screen.world.WorldIcon#ICON_HEIGHT
    [[maybe_unused]] static jint get_field_ICON_HEIGHT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "HEIGHT", "field_44935", "ICON_HEIGHT", "f_289045_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.world.WorldIcon#ICON_HEIGHT
    [[maybe_unused]] static void set_field_ICON_HEIGHT(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "HEIGHT", "field_44935", "ICON_HEIGHT", "f_289045_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.screen.world.WorldIcon#textureManager
    static jobject get_field_textureManager(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "textureManager", "field_44936", "textureManager", "f_289034_"), "Lgqm;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.world.WorldIcon#textureManager
    static void set_field_textureManager(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "textureManager", "field_44936", "textureManager", "f_289034_"), "Lgqm;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.screen.world.WorldIcon#id
    static jobject get_field_id(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "textureLocation", "field_44937", "id", "f_289037_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.world.WorldIcon#id
    static void set_field_id(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "textureLocation", "field_44937", "id", "f_289037_"), "Lakr;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.screen.world.WorldIcon#texture
    static jobject get_field_texture(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "texture", "field_44938", "texture", "f_289043_"), "Lgpy;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.world.WorldIcon#texture
    static void set_field_texture(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "texture", "field_44938", "texture", "f_289043_"), "Lgpy;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.screen.world.WorldIcon#closed
    static jboolean get_field_closed(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "closed", "field_44939", "closed", "f_289029_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.world.WorldIcon#closed
    static void set_field_closed(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "closed", "field_44939", "closed", "f_289029_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    static jmethodID methodID_forWorld() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "forWorld", "method_52200", "forWorld", "m_289210_"), "(Lgqm;Ljava/lang/String;)Lfnn;");
    }

    static jobject forWorld(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_forWorld();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_forServer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "forServer", "method_52202", "forServer", "m_289187_"), "(Lgqm;Ljava/lang/String;)Lfnn;");
    }

    static jobject forServer(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_forServer();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_load() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "upload", "method_52199", "load", "m_289201_"), "(Lfaj;)V");
    }

    static void load(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_load();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_destroy() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "clear", "method_52198", "destroy", "m_289218_"), "()V");
    }

    static void destroy(const jobject& obj) {
                
       const auto methodID = methodID_destroy();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getTextureId() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "textureLocation", "method_52201", "getTextureId", "m_289196_"), "()Lakr;");
    }

    static jobject getTextureId(const jobject& obj) {
                
       const auto methodID = methodID_getTextureId();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_close() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("close", "close", "", "", "close"), "()V");
    }

    static void close(const jobject& obj) {
                
       const auto methodID = methodID_close();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_assertOpen() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "checkOpen", "method_52203", "assertOpen", "m_289229_"), "()V");
    }

    static void assertOpen(const jobject& obj) {
                
       const auto methodID = methodID_assertOpen();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_GUI_SCREEN_WORLD_WORLDICON_HPP