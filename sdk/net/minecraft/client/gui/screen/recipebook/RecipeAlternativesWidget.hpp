// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_GUI_SCREEN_RECIPEBOOK_RECIPEALTERNATIVESWIDGET_HPP
#define NET_MINECRAFT_CLIENT_GUI_SCREEN_RECIPEBOOK_RECIPEALTERNATIVESWIDGET_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget
 * Remapped: frz
 */
namespace RecipeAlternativesWidget {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("frz", "net/minecraft/client/gui/screens/recipebook/OverlayRecipeComponent", "net/minecraft/class_508", "net/minecraft/client/gui/screen/recipebook/RecipeAlternativesWidget", "net/minecraft/src/C_3714_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#OVERLAY_RECIPE_TEXTURE
    [[maybe_unused]] static jobject get_field_OVERLAY_RECIPE_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "OVERLAY_RECIPE_SPRITE", "field_45541", "OVERLAY_RECIPE_TEXTURE", "f_290374_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#OVERLAY_RECIPE_TEXTURE
    [[maybe_unused]] static void set_field_OVERLAY_RECIPE_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "OVERLAY_RECIPE_SPRITE", "field_45541", "OVERLAY_RECIPE_TEXTURE", "f_290374_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#FURNACE_OVERLAY_HIGHLIGHTED_TEXTURE
    [[maybe_unused]] static jobject get_field_FURNACE_OVERLAY_HIGHLIGHTED_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "FURNACE_OVERLAY_HIGHLIGHTED_SPRITE", "field_45542", "FURNACE_OVERLAY_HIGHLIGHTED_TEXTURE", "f_291726_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#FURNACE_OVERLAY_HIGHLIGHTED_TEXTURE
    [[maybe_unused]] static void set_field_FURNACE_OVERLAY_HIGHLIGHTED_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "FURNACE_OVERLAY_HIGHLIGHTED_SPRITE", "field_45542", "FURNACE_OVERLAY_HIGHLIGHTED_TEXTURE", "f_291726_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#FURNACE_OVERLAY_TEXTURE
    [[maybe_unused]] static jobject get_field_FURNACE_OVERLAY_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "FURNACE_OVERLAY_SPRITE", "field_45543", "FURNACE_OVERLAY_TEXTURE", "f_291759_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#FURNACE_OVERLAY_TEXTURE
    [[maybe_unused]] static void set_field_FURNACE_OVERLAY_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "FURNACE_OVERLAY_SPRITE", "field_45543", "FURNACE_OVERLAY_TEXTURE", "f_291759_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#CRAFTING_OVERLAY_HIGHLIGHTED_TEXTURE
    [[maybe_unused]] static jobject get_field_CRAFTING_OVERLAY_HIGHLIGHTED_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "CRAFTING_OVERLAY_HIGHLIGHTED_SPRITE", "field_45544", "CRAFTING_OVERLAY_HIGHLIGHTED_TEXTURE", "f_290354_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#CRAFTING_OVERLAY_HIGHLIGHTED_TEXTURE
    [[maybe_unused]] static void set_field_CRAFTING_OVERLAY_HIGHLIGHTED_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "CRAFTING_OVERLAY_HIGHLIGHTED_SPRITE", "field_45544", "CRAFTING_OVERLAY_HIGHLIGHTED_TEXTURE", "f_290354_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#CRAFTING_OVERLAY_TEXTURE
    [[maybe_unused]] static jobject get_field_CRAFTING_OVERLAY_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "CRAFTING_OVERLAY_SPRITE", "field_45545", "CRAFTING_OVERLAY_TEXTURE", "f_291525_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#CRAFTING_OVERLAY_TEXTURE
    [[maybe_unused]] static void set_field_CRAFTING_OVERLAY_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "CRAFTING_OVERLAY_SPRITE", "field_45545", "CRAFTING_OVERLAY_TEXTURE", "f_291525_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#FURNACE_OVERLAY_DISABLED_HIGHLIGHTED_TEXTURE
    [[maybe_unused]] static jobject get_field_FURNACE_OVERLAY_DISABLED_HIGHLIGHTED_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "FURNACE_OVERLAY_DISABLED_HIGHLIGHTED_SPRITE", "field_45546", "FURNACE_OVERLAY_DISABLED_HIGHLIGHTED_TEXTURE", "f_291472_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#FURNACE_OVERLAY_DISABLED_HIGHLIGHTED_TEXTURE
    [[maybe_unused]] static void set_field_FURNACE_OVERLAY_DISABLED_HIGHLIGHTED_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "FURNACE_OVERLAY_DISABLED_HIGHLIGHTED_SPRITE", "field_45546", "FURNACE_OVERLAY_DISABLED_HIGHLIGHTED_TEXTURE", "f_291472_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#FURNACE_OVERLAY_DISABLED_TEXTURE
    [[maybe_unused]] static jobject get_field_FURNACE_OVERLAY_DISABLED_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "FURNACE_OVERLAY_DISABLED_SPRITE", "field_45547", "FURNACE_OVERLAY_DISABLED_TEXTURE", "f_291369_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#FURNACE_OVERLAY_DISABLED_TEXTURE
    [[maybe_unused]] static void set_field_FURNACE_OVERLAY_DISABLED_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "FURNACE_OVERLAY_DISABLED_SPRITE", "field_45547", "FURNACE_OVERLAY_DISABLED_TEXTURE", "f_291369_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#CRAFTING_OVERLAY_DISABLED_HIGHLIGHTED_TEXTURE
    [[maybe_unused]] static jobject get_field_CRAFTING_OVERLAY_DISABLED_HIGHLIGHTED_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "CRAFTING_OVERLAY_DISABLED_HIGHLIGHTED_SPRITE", "field_45548", "CRAFTING_OVERLAY_DISABLED_HIGHLIGHTED_TEXTURE", "f_290630_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#CRAFTING_OVERLAY_DISABLED_HIGHLIGHTED_TEXTURE
    [[maybe_unused]] static void set_field_CRAFTING_OVERLAY_DISABLED_HIGHLIGHTED_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "CRAFTING_OVERLAY_DISABLED_HIGHLIGHTED_SPRITE", "field_45548", "CRAFTING_OVERLAY_DISABLED_HIGHLIGHTED_TEXTURE", "f_290630_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#CRAFTING_OVERLAY_DISABLED_TEXTURE
    [[maybe_unused]] static jobject get_field_CRAFTING_OVERLAY_DISABLED_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "CRAFTING_OVERLAY_DISABLED_SPRITE", "field_45549", "CRAFTING_OVERLAY_DISABLED_TEXTURE", "f_291037_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#CRAFTING_OVERLAY_DISABLED_TEXTURE
    [[maybe_unused]] static void set_field_CRAFTING_OVERLAY_DISABLED_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "CRAFTING_OVERLAY_DISABLED_SPRITE", "field_45549", "CRAFTING_OVERLAY_DISABLED_TEXTURE", "f_291037_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#field_32406
    [[maybe_unused]] static jint get_field_field_32406() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "MAX_ROW", "field_32406", "field_32406", "f_170036_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#field_32406
    [[maybe_unused]] static void set_field_field_32406(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "MAX_ROW", "field_32406", "field_32406", "f_170036_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#field_32407
    [[maybe_unused]] static jint get_field_field_32407() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "MAX_ROW_LARGE", "field_32407", "field_32407", "f_170037_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#field_32407
    [[maybe_unused]] static void set_field_field_32407(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "MAX_ROW_LARGE", "field_32407", "field_32407", "f_170037_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#field_33739
    [[maybe_unused]] static jfloat get_field_field_33739() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "ITEM_RENDER_SCALE", "field_33739", "field_33739", "f_170038_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#field_33739
    [[maybe_unused]] static void set_field_field_33739(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "ITEM_RENDER_SCALE", "field_33739", "field_33739", "f_170038_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#field_42162
    [[maybe_unused]] static jint get_field_field_42162() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "BUTTON_SIZE", "field_42162", "field_42162", "f_267446_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#field_42162
    [[maybe_unused]] static void set_field_field_42162(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "BUTTON_SIZE", "field_42162", "field_42162", "f_267446_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#alternativeButtons
    static jobject get_field_alternativeButtons(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "recipeButtons", "field_3106", "alternativeButtons", "f_100173_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#alternativeButtons
    static void set_field_alternativeButtons(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "recipeButtons", "field_3106", "alternativeButtons", "f_100173_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#visible
    static jboolean get_field_visible(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "isVisible", "field_3107", "visible", "f_100174_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#visible
    static void set_field_visible(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "isVisible", "field_3107", "visible", "f_100174_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#buttonX
    static jint get_field_buttonX(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "x", "field_3105", "buttonX", "f_100175_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#buttonX
    static void set_field_buttonX(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "x", "field_3105", "buttonX", "f_100175_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#buttonY
    static jint get_field_buttonY(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "y", "field_3103", "buttonY", "f_100176_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#buttonY
    static void set_field_buttonY(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "y", "field_3103", "buttonY", "f_100176_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#client
    static jobject get_field_client(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "minecraft", "field_3108", "client", "f_100177_"), "Lfgo;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#client
    static void set_field_client(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "minecraft", "field_3108", "client", "f_100177_"), "Lfgo;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#resultCollection
    static jobject get_field_resultCollection(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "collection", "field_3111", "resultCollection", "f_100178_"), "Lfse;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#resultCollection
    static void set_field_resultCollection(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "collection", "field_3111", "resultCollection", "f_100178_"), "Lfse;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#lastClickedRecipe
    static jobject get_field_lastClickedRecipe(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "lastRecipeClicked", "field_3104", "lastClickedRecipe", "f_100179_"), "Lczb;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#lastClickedRecipe
    static void set_field_lastClickedRecipe(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "lastRecipeClicked", "field_3104", "lastClickedRecipe", "f_100179_"), "Lczb;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#time
    static jfloat get_field_time(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "time", "field_3110", "time", "f_100180_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static default field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#time
    static void set_field_time(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "time", "field_3110", "time", "f_100180_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#furnace
    static jboolean get_field_furnace(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("w", "isFurnaceMenu", "field_3112", "furnace", "f_100181_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static default field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget#furnace
    static void set_field_furnace(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("w", "isFurnaceMenu", "field_3112", "furnace", "f_100181_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    static jmethodID methodID_showAlternativesForResult() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "init", "method_2617", "showAlternativesForResult", "m_100194_"), "(Lfgo;Lfse;IIIIF)V");
    }

    static void showAlternativesForResult(const jobject& obj, const jobject& arg0, const jobject& arg1, const jint& arg2, const jint& arg3, const jint& arg4, const jint& arg5, const jfloat& arg6) {
                
       const auto methodID = methodID_showAlternativesForResult();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    };
    
    static jmethodID methodID_getResults() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getRecipeCollection", "method_2614", "getResults", "m_100184_"), "()Lfse;");
    }

    static jobject getResults(const jobject& obj) {
                
       const auto methodID = methodID_getResults();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getLastClickedRecipe() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getLastRecipeClicked", "method_2615", "getLastClickedRecipe", "m_100206_"), "()Lczb;");
    }

    static jobject getLastClickedRecipe(const jobject& obj) {
                
       const auto methodID = methodID_getLastClickedRecipe();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_mouseClicked() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "mouseClicked", "method_25402", "mouseClicked", "m_6375_"), "(DDI)Z");
    }

    static jboolean mouseClicked(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jint& arg2) {
                
       const auto methodID = methodID_mouseClicked();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_isMouseOver() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "isMouseOver", "method_25405", "isMouseOver", "m_5953_"), "(DD)Z");
    }

    static jboolean isMouseOver(const jobject& obj, const jdouble& arg0, const jdouble& arg1) {
                
       const auto methodID = methodID_isMouseOver();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_render() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "render", "method_25394", "render", "m_88315_"), "(Lfhz;IIF)V");
    }

    static void render(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2, const jfloat& arg3) {
                
       const auto methodID = methodID_render();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_setVisible() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setVisible", "method_2613", "setVisible", "m_100204_"), "(Z)V");
    }

    static void setVisible(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setVisible();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isVisible() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "isVisible", "method_2616", "isVisible", "m_100212_"), "()Z");
    }

    static jboolean isVisible(const jobject& obj) {
                
       const auto methodID = methodID_isVisible();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setFocused() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setFocused", "method_25365", "setFocused", "m_93692_"), "(Z)V");
    }

    static void setFocused(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setFocused();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isFocused() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aO_", "isFocused", "method_25370", "isFocused", "m_93696_"), "()Z");
    }

    static jboolean isFocused(const jobject& obj) {
                
       const auto methodID = methodID_isFocused();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_GUI_SCREEN_RECIPEBOOK_RECIPEALTERNATIVESWIDGET_HPP