// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_GUI_SCREEN_RECIPEBOOK_RECIPEALTERNATIVESWIDGET$ALTERNATIVEBUTTONWIDGET_HPP
#define NET_MINECRAFT_CLIENT_GUI_SCREEN_RECIPEBOOK_RECIPEALTERNATIVESWIDGET$ALTERNATIVEBUTTONWIDGET_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget$AlternativeButtonWidget
 * Remapped: frz$a
 */
namespace RecipeAlternativesWidget$AlternativeButtonWidget {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("frz$a", "net/minecraft/client/gui/screens/recipebook/OverlayRecipeComponent$OverlayRecipeButton", "net/minecraft/class_508$class_509", "net/minecraft/client/gui/screen/recipebook/RecipeAlternativesWidget$AlternativeButtonWidget", "net/minecraft/src/C_3714_$C_3715_"));
        }
        return cachedClass;
    };

    // getter for default field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget$AlternativeButtonWidget#recipe
    static jobject get_field_recipe(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "recipe", "field_3114", "recipe", "f_100228_"), "Lczb;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget$AlternativeButtonWidget#recipe
    static void set_field_recipe(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "recipe", "field_3114", "recipe", "f_100228_"), "Lczb;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget$AlternativeButtonWidget#craftable
    static jboolean get_field_craftable(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "isCraftable", "field_3115", "craftable", "f_100229_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget$AlternativeButtonWidget#craftable
    static void set_field_craftable(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "isCraftable", "field_3115", "craftable", "f_100229_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget$AlternativeButtonWidget#slots
    static jobject get_field_slots(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "ingredientPos", "field_3116", "slots", "f_100226_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget$AlternativeButtonWidget#slots
    static void set_field_slots(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "ingredientPos", "field_3116", "slots", "f_100226_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_alignRecipe() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "calculateIngredientsPositions", "method_2619", "alignRecipe", "m_6222_"), "(Lczb;)V");
    }

    static void alignRecipe(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_alignRecipe();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_appendClickableNarrations() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateWidgetNarration", "method_47399", "appendClickableNarrations", "m_168797_"), "(Lfmi;)V");
    }

    static void appendClickableNarrations(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_appendClickableNarrations();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_acceptAlignedInput() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addItemToSlot", "method_60343", "acceptAlignedInput", "m_5817_"), "(Lcyw;IIII)V");
    }

    static void acceptAlignedInput(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2, const jint& arg3, const jint& arg4) {
                
       const auto methodID = methodID_acceptAlignedInput();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_renderWidget() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "renderWidget", "method_48579", "renderWidget", "m_87963_"), "(Lfhz;IIF)V");
    }

    static void renderWidget(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2, const jfloat& arg3) {
                
       const auto methodID = methodID_renderWidget();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_GUI_SCREEN_RECIPEBOOK_RECIPEALTERNATIVESWIDGET$ALTERNATIVEBUTTONWIDGET_HPP