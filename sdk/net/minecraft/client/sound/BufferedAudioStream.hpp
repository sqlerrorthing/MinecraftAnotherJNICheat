// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_SOUND_BUFFEREDAUDIOSTREAM_HPP
#define NET_MINECRAFT_CLIENT_SOUND_BUFFEREDAUDIOSTREAM_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.sound.BufferedAudioStream
 * Remapped: gux
 */
namespace BufferedAudioStream {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("gux", "net/minecraft/client/sounds/FloatSampleSource", "net/minecraft/class_9673", "net/minecraft/client/sound/BufferedAudioStream", "net/minecraft/src/C_313268_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.client.sound.BufferedAudioStream#CHUNK_SIZE
    [[maybe_unused]] static jint get_field_CHUNK_SIZE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "EXPECTED_MAX_FRAME_SIZE", "field_51441", "CHUNK_SIZE", "f_315975_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.sound.BufferedAudioStream#CHUNK_SIZE
    [[maybe_unused]] static void set_field_CHUNK_SIZE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "EXPECTED_MAX_FRAME_SIZE", "field_51441", "CHUNK_SIZE", "f_315975_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    static jmethodID methodID_read() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "readChunk", "method_59758", "read", "m_319484_"), "(Lit/unimi/dsi/fastutil/floats/FloatConsumer;)Z");
    }

    static jboolean read(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_read();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__read() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "read", "method_19720", "read", "m_7118_"), "(I)Ljava/nio/ByteBuffer;");
    }

    static jobject _read(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID__read();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_readAll() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "readAll", "method_59757", "readAll", "m_319707_"), "()Ljava/nio/ByteBuffer;");
    }

    static jobject readAll(const jobject& obj) {
                
       const auto methodID = methodID_readAll();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_SOUND_BUFFEREDAUDIOSTREAM_HPP