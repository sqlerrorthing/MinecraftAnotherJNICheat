// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_SOUND_MUSICTRACKER_HPP
#define NET_MINECRAFT_CLIENT_SOUND_MUSICTRACKER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.sound.MusicTracker
 * Remapped: gva
 */
namespace MusicTracker {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("gva", "net/minecraft/client/sounds/MusicManager", "net/minecraft/class_1142", "net/minecraft/client/sound/MusicTracker", "net/minecraft/src/C_4598_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.client.sound.MusicTracker#DEFAULT_TIME_UNTIL_NEXT_SONG
    [[maybe_unused]] static jint get_field_DEFAULT_TIME_UNTIL_NEXT_SONG() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "STARTING_DELAY", "field_33019", "DEFAULT_TIME_UNTIL_NEXT_SONG", "f_174979_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.sound.MusicTracker#DEFAULT_TIME_UNTIL_NEXT_SONG
    [[maybe_unused]] static void set_field_DEFAULT_TIME_UNTIL_NEXT_SONG(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "STARTING_DELAY", "field_33019", "DEFAULT_TIME_UNTIL_NEXT_SONG", "f_174979_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.client.sound.MusicTracker#random
    static jobject get_field_random(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "random", "field_5571", "random", "f_120177_"), "Layw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.sound.MusicTracker#random
    static void set_field_random(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "random", "field_5571", "random", "f_120177_"), "Layw;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.sound.MusicTracker#client
    static jobject get_field_client(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "minecraft", "field_5575", "client", "f_120178_"), "Lfgo;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.sound.MusicTracker#client
    static void set_field_client(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "minecraft", "field_5575", "client", "f_120178_"), "Lfgo;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.sound.MusicTracker#current
    static jobject get_field_current(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "currentMusic", "field_5574", "current", "f_120179_"), "Lgua;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.sound.MusicTracker#current
    static void set_field_current(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "currentMusic", "field_5574", "current", "f_120179_"), "Lgua;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.sound.MusicTracker#timeUntilNextSong
    static jint get_field_timeUntilNextSong(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "nextSongDelay", "field_5572", "timeUntilNextSong", "f_120180_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.sound.MusicTracker#timeUntilNextSong
    static void set_field_timeUntilNextSong(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "nextSongDelay", "field_5572", "timeUntilNextSong", "f_120180_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    static jmethodID methodID_tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "tick", "method_18669", "tick", "m_120183_"), "()V");
    }

    static void tick(const jobject& obj) {
                
       const auto methodID = methodID_tick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_play() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "startPlaying", "method_4858", "play", "m_120184_"), "(Lavm;)V");
    }

    static void play(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_play();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_stop() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "stopPlaying", "method_50025", "stop", "m_278151_"), "(Lavm;)V");
    }

    static void stop(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_stop();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__stop() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "stopPlaying", "method_4859", "stop", "m_120186_"), "()V");
    }

    static void _stop(const jobject& obj) {
                
       const auto methodID = methodID__stop();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_isPlayingType() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "isPlayingMusic", "method_4860", "isPlayingType", "m_120187_"), "(Lavm;)Z");
    }

    static jboolean isPlayingType(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isPlayingType();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_SOUND_MUSICTRACKER_HPP