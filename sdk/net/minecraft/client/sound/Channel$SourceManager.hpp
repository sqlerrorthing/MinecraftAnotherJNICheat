// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_SOUND_CHANNEL$SOURCEMANAGER_HPP
#define NET_MINECRAFT_CLIENT_SOUND_CHANNEL$SOURCEMANAGER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.sound.Channel$SourceManager
 * Remapped: guu$a
 */
namespace Channel$SourceManager {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("guu$a", "net/minecraft/client/sounds/ChannelAccess$ChannelHandle", "net/minecraft/class_4235$class_4236", "net/minecraft/client/sound/Channel$SourceManager", "net/minecraft/src/C_4592_$C_4593_"));
        }
        return cachedClass;
    };

    // getter for default field net.minecraft.client.sound.Channel$SourceManager#source
    static jobject get_field_source(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "channel", "field_18941", "source", "f_120146_"), "Leze;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.client.sound.Channel$SourceManager#source
    static void set_field_source(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "channel", "field_18941", "source", "f_120146_"), "Leze;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.sound.Channel$SourceManager#stopped
    static jboolean get_field_stopped(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "stopped", "field_18942", "stopped", "f_120147_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.sound.Channel$SourceManager#stopped
    static void set_field_stopped(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "stopped", "field_18942", "stopped", "f_120147_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    static jmethodID methodID_isStopped() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isStopped", "method_19732", "isStopped", "m_120151_"), "()Z");
    }

    static jboolean isStopped(const jobject& obj) {
                
       const auto methodID = methodID_isStopped();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_run() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "execute", "method_19735", "run", "m_120154_"), "(Ljava/util/function/Consumer;)V");
    }

    static void run(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_run();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_close() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "release", "method_19736", "close", "m_120156_"), "()V");
    }

    static void close(const jobject& obj) {
                
       const auto methodID = methodID_close();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_SOUND_CHANNEL$SOURCEMANAGER_HPP