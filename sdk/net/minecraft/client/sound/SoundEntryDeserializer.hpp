// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_SOUND_SOUNDENTRYDESERIALIZER_HPP
#define NET_MINECRAFT_CLIENT_SOUND_SOUNDENTRYDESERIALIZER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.sound.SoundEntryDeserializer
 * Remapped: gtz
 */
namespace SoundEntryDeserializer {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("gtz", "net/minecraft/client/resources/sounds/SoundEventRegistrationSerializer", "net/minecraft/class_1115", "net/minecraft/client/sound/SoundEntryDeserializer", "net/minecraft/src/C_4565_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.client.sound.SoundEntryDeserializer#ONE
    [[maybe_unused]] static jobject get_field_ONE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "DEFAULT_FLOAT", "field_38801", "ONE", "f_235148_"), "Lbpu;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.sound.SoundEntryDeserializer#ONE
    [[maybe_unused]] static void set_field_ONE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "DEFAULT_FLOAT", "field_38801", "ONE", "f_235148_"), "Lbpu;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_deserialize() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "deserialize", "method_4791", "deserialize", "deserialize"), "(Lcom/google/gson/JsonElement;Ljava/lang/reflect/Type;Lcom/google/gson/JsonDeserializationContext;)Lgty;");
    }

    static jobject deserialize(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_deserialize();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_deserializeSounds() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getSounds", "method_4792", "deserializeSounds", "m_119830_"), "(Lcom/google/gson/JsonObject;)Ljava/util/List;");
    }

    static jobject deserializeSounds(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_deserializeSounds();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_deserializeSound() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getSound", "method_4790", "deserializeSound", "m_119835_"), "(Lcom/google/gson/JsonObject;)Lgtx;");
    }

    static jobject deserializeSound(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_deserializeSound();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_deserializeType() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getType", "method_4789", "deserializeType", "m_119832_"), "(Lcom/google/gson/JsonObject;Lgtx$a;)Lgtx$a;");
    }

    static jobject deserializeType(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_deserializeType();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_SOUND_SOUNDENTRYDESERIALIZER_HPP