// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_SOUND_SOUNDMANAGER_HPP
#define NET_MINECRAFT_CLIENT_SOUND_SOUNDMANAGER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.sound.SoundManager
 * Remapped: gvf
 */
namespace SoundManager {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("gvf", "net/minecraft/client/sounds/SoundManager", "net/minecraft/class_1144", "net/minecraft/client/sound/SoundManager", "net/minecraft/src/C_4603_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.client.sound.SoundManager#EMPTY_ID
    [[maybe_unused]] static jobject get_field_EMPTY_ID() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "EMPTY_SOUND_LOCATION", "field_52173", "EMPTY_ID", "f_337413_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.sound.SoundManager#EMPTY_ID
    [[maybe_unused]] static void set_field_EMPTY_ID(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "EMPTY_SOUND_LOCATION", "field_52173", "EMPTY_ID", "f_337413_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.client.sound.SoundManager#MISSING_SOUND
    [[maybe_unused]] static jobject get_field_MISSING_SOUND() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "EMPTY_SOUND", "field_5592", "MISSING_SOUND", "f_120344_"), "Lgtx;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.sound.SoundManager#MISSING_SOUND
    [[maybe_unused]] static void set_field_MISSING_SOUND(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "EMPTY_SOUND", "field_5592", "MISSING_SOUND", "f_120344_"), "Lgtx;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.client.sound.SoundManager#INTENTIONALLY_EMPTY_ID
    [[maybe_unused]] static jobject get_field_INTENTIONALLY_EMPTY_ID() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "INTENTIONALLY_EMPTY_SOUND_LOCATION", "field_42934", "INTENTIONALLY_EMPTY_ID", "f_271442_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.sound.SoundManager#INTENTIONALLY_EMPTY_ID
    [[maybe_unused]] static void set_field_INTENTIONALLY_EMPTY_ID(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "INTENTIONALLY_EMPTY_SOUND_LOCATION", "field_42934", "INTENTIONALLY_EMPTY_ID", "f_271442_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.client.sound.SoundManager#INTENTIONALLY_EMPTY_SOUND_SET
    [[maybe_unused]] static jobject get_field_INTENTIONALLY_EMPTY_SOUND_SET() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "INTENTIONALLY_EMPTY_SOUND_EVENT", "field_42935", "INTENTIONALLY_EMPTY_SOUND_SET", "f_271159_"), "Lgvg;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.sound.SoundManager#INTENTIONALLY_EMPTY_SOUND_SET
    [[maybe_unused]] static void set_field_INTENTIONALLY_EMPTY_SOUND_SET(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "INTENTIONALLY_EMPTY_SOUND_EVENT", "field_42935", "INTENTIONALLY_EMPTY_SOUND_SET", "f_271159_"), "Lgvg;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.client.sound.SoundManager#INTENTIONALLY_EMPTY_SOUND
    [[maybe_unused]] static jobject get_field_INTENTIONALLY_EMPTY_SOUND() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "INTENTIONALLY_EMPTY_SOUND", "field_42936", "INTENTIONALLY_EMPTY_SOUND", "f_271451_"), "Lgtx;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.sound.SoundManager#INTENTIONALLY_EMPTY_SOUND
    [[maybe_unused]] static void set_field_INTENTIONALLY_EMPTY_SOUND(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "INTENTIONALLY_EMPTY_SOUND", "field_42936", "INTENTIONALLY_EMPTY_SOUND", "f_271451_"), "Lgtx;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.client.sound.SoundManager#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "LOGGER", "field_5593", "LOGGER", "f_120345_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.client.sound.SoundManager#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "LOGGER", "field_5593", "LOGGER", "f_120345_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.sound.SoundManager#SOUNDS_JSON
    [[maybe_unused]] static jobject get_field_SOUNDS_JSON() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "SOUNDS_PATH", "field_33026", "SOUNDS_JSON", "f_174997_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.sound.SoundManager#SOUNDS_JSON
    [[maybe_unused]] static void set_field_SOUNDS_JSON(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "SOUNDS_PATH", "field_33026", "SOUNDS_JSON", "f_174997_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.sound.SoundManager#GSON
    [[maybe_unused]] static jobject get_field_GSON() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "GSON", "field_5594", "GSON", "f_120346_"), "Lcom/google/gson/Gson;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.sound.SoundManager#GSON
    [[maybe_unused]] static void set_field_GSON(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "GSON", "field_5594", "GSON", "f_120346_"), "Lcom/google/gson/Gson;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.sound.SoundManager#TYPE
    [[maybe_unused]] static jobject get_field_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "SOUND_EVENT_REGISTRATION_TYPE", "field_5591", "TYPE", "f_120347_"), "Lcom/google/gson/reflect/TypeToken;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.sound.SoundManager#TYPE
    [[maybe_unused]] static void set_field_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "SOUND_EVENT_REGISTRATION_TYPE", "field_5591", "TYPE", "f_120347_"), "Lcom/google/gson/reflect/TypeToken;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.client.sound.SoundManager#sounds
    static jobject get_field_sounds(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "registry", "field_5588", "sounds", "f_120348_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.sound.SoundManager#sounds
    static void set_field_sounds(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "registry", "field_5588", "sounds", "f_120348_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.sound.SoundManager#soundSystem
    static jobject get_field_soundSystem(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "soundEngine", "field_5590", "soundSystem", "f_120349_"), "Lgvc;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.sound.SoundManager#soundSystem
    static void set_field_soundSystem(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "soundEngine", "field_5590", "soundSystem", "f_120349_"), "Lgvc;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.sound.SoundManager#soundResources
    static jobject get_field_soundResources(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "soundCache", "field_40576", "soundResources", "f_244170_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.sound.SoundManager#soundResources
    static void set_field_soundResources(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "soundCache", "field_40576", "soundResources", "f_244170_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_prepare() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "prepare", "method_18180", "prepare", "m_5944_"), "(Laue;Lbnf;)Lgvf$a;");
    }

    static jobject prepare(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_prepare();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_apply() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "apply", "method_18182", "apply", "m_5787_"), "(Lgvf$a;Laue;Lbnf;)V");
    }

    static void apply(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_apply();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getSoundDevices() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getAvailableSoundDevices", "method_38565", "getSoundDevices", "m_194525_"), "()Ljava/util/List;");
    }

    static jobject getSoundDevices(const jobject& obj) {
                
       const auto methodID = methodID_getSoundDevices();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getListenerTransform() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getListenerTransform", "method_55593", "getListenerTransform", "m_307930_"), "()Lezh;");
    }

    static jobject getListenerTransform(const jobject& obj) {
                
       const auto methodID = methodID_getListenerTransform();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_isSoundResourcePresent() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "validateSoundResource", "method_4868", "isSoundResourcePresent", "m_247403_"), "(Lgtx;Lakr;Lauh;)Z");
    }

    static jboolean isSoundResourcePresent(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_isSoundResourcePresent();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_get() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getSoundEvent", "method_4869", "get", "m_120384_"), "(Lakr;)Lgvg;");
    }

    static jobject get(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_get();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getKeys() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getAvailableSounds", "method_4864", "getKeys", "m_120354_"), "()Ljava/util/Collection;");
    }

    static jobject getKeys(const jobject& obj) {
                
       const auto methodID = methodID_getKeys();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_playNextTick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "queueTickingSound", "method_22140", "playNextTick", "m_120372_"), "(Lgub;)V");
    }

    static void playNextTick(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_playNextTick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_play() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "play", "method_4873", "play", "m_120367_"), "(Lgua;)V");
    }

    static void play(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_play();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__play() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "playDelayed", "method_4872", "play", "m_120369_"), "(Lgua;I)V");
    }

    static void _play(const jobject& obj, const jobject& arg0, const jint& arg1) {
                
       const auto methodID = methodID__play();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_updateListenerPosition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateSource", "method_4876", "updateListenerPosition", "m_120361_"), "(Lffy;)V");
    }

    static void updateListenerPosition(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_updateListenerPosition();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_pauseAll() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "pause", "method_4879", "pauseAll", "m_120391_"), "()V");
    }

    static void pauseAll(const jobject& obj) {
                
       const auto methodID = methodID_pauseAll();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_stopAll() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "stop", "method_4881", "stopAll", "m_120405_"), "()V");
    }

    static void stopAll(const jobject& obj) {
                
       const auto methodID = methodID_stopAll();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_close() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "destroy", "method_4882", "close", "m_120406_"), "()V");
    }

    static void close(const jobject& obj) {
                
       const auto methodID = methodID_close();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_stopAbruptly() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "emergencyShutdown", "method_54649", "stopAbruptly", "m_307436_"), "()V");
    }

    static void stopAbruptly(const jobject& obj) {
                
       const auto methodID = methodID_stopAbruptly();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "tick", "method_18670", "tick", "m_120389_"), "(Z)V");
    }

    static void tick(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_tick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_resumeAll() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "resume", "method_4880", "resumeAll", "m_120407_"), "()V");
    }

    static void resumeAll(const jobject& obj) {
                
       const auto methodID = methodID_resumeAll();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_updateSoundVolume() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateSourceVolume", "method_4865", "updateSoundVolume", "m_120358_"), "(Lavq;F)V");
    }

    static void updateSoundVolume(const jobject& obj, const jobject& arg0, const jfloat& arg1) {
                
       const auto methodID = methodID_updateSoundVolume();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_stop() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "stop", "method_4870", "stop", "m_120399_"), "(Lgua;)V");
    }

    static void stop(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_stop();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isPlaying() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "isActive", "method_4877", "isPlaying", "m_120403_"), "(Lgua;)Z");
    }

    static jboolean isPlaying(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isPlaying();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_registerListener() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addListener", "method_4878", "registerListener", "m_120374_"), "(Lgve;)V");
    }

    static void registerListener(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_registerListener();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_unregisterListener() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "removeListener", "method_4866", "unregisterListener", "m_120401_"), "(Lgve;)V");
    }

    static void unregisterListener(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_unregisterListener();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_stopSounds() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "stop", "method_4875", "stopSounds", "m_120386_"), "(Lakr;Lavq;)V");
    }

    static void stopSounds(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_stopSounds();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getDebugString() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "getDebugString", "method_20305", "getDebugString", "m_120408_"), "()Ljava/lang/String;");
    }

    static jobject getDebugString(const jobject& obj) {
                
       const auto methodID = methodID_getDebugString();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_reloadSounds() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "reload", "method_38566", "reloadSounds", "m_194526_"), "()V");
    }

    static void reloadSounds(const jobject& obj) {
                
       const auto methodID = methodID_reloadSounds();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_SOUND_SOUNDMANAGER_HPP