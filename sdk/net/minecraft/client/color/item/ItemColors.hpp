// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_COLOR_ITEM_ITEMCOLORS_HPP
#define NET_MINECRAFT_CLIENT_COLOR_ITEM_ITEMCOLORS_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.color.item.ItemColors
 * Remapped: fhu
 */
namespace ItemColors {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("fhu", "net/minecraft/client/color/item/ItemColors", "net/minecraft/class_325", "net/minecraft/client/color/item/ItemColors", "net/minecraft/src/C_3428_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.client.color.item.ItemColors#NO_COLOR
    [[maybe_unused]] static jint get_field_NO_COLOR() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "DEFAULT", "field_32165", "NO_COLOR", "f_168642_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.color.item.ItemColors#NO_COLOR
    [[maybe_unused]] static void set_field_NO_COLOR(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "DEFAULT", "field_32165", "NO_COLOR", "f_168642_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.client.color.item.ItemColors#providers
    static jobject get_field_providers(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "itemColors", "field_1996", "providers", "f_92674_"), "Ljs;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.color.item.ItemColors#providers
    static void set_field_providers(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "itemColors", "field_1996", "providers", "f_92674_"), "Ljs;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_create() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "createDefault", "method_1706", "create", "m_92683_"), "(Lfhq;)Lfhu;");
    }

    static jobject create(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_create();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getColor", "method_1704", "getColor", "m_92676_"), "(Lcuq;I)I");
    }

    static jint getColor(const jobject& obj, const jobject& arg0, const jint& arg1) {
                
       const auto methodID = methodID_getColor();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_register() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "register", "method_1708", "register", "m_92689_"), "(Lfht;[Ldcv;)V");
    }

    static void register(const jobject& obj, const jobject& arg0, const jarray& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_register();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_COLOR_ITEM_ITEMCOLORS_HPP