// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_COLOR_BLOCK_BLOCKCOLORS_HPP
#define NET_MINECRAFT_CLIENT_COLOR_BLOCK_BLOCKCOLORS_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.color.block.BlockColors
 * Remapped: fhq
 */
namespace BlockColors {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("fhq", "net/minecraft/client/color/block/BlockColors", "net/minecraft/class_324", "net/minecraft/client/color/block/BlockColors", "net/minecraft/src/C_3423_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.client.color.block.BlockColors#NO_COLOR
    [[maybe_unused]] static jint get_field_NO_COLOR() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "DEFAULT", "field_32163", "NO_COLOR", "f_168640_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.color.block.BlockColors#NO_COLOR
    [[maybe_unused]] static void set_field_NO_COLOR(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "DEFAULT", "field_32163", "NO_COLOR", "f_168640_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.client.color.block.BlockColors#providers
    static jobject get_field_providers(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "blockColors", "field_1995", "providers", "f_92571_"), "Ljs;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.color.block.BlockColors#providers
    static void set_field_providers(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "blockColors", "field_1995", "providers", "f_92571_"), "Ljs;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.color.block.BlockColors#properties
    static jobject get_field_properties(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "coloringStates", "field_20271", "properties", "f_92572_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.color.block.BlockColors#properties
    static void set_field_properties(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "coloringStates", "field_20271", "properties", "f_92572_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_create() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "createDefault", "method_1689", "create", "m_92574_"), "()Lfhq;");
    }

    static jobject create() {
       const auto clazz = self();
       const auto methodID = methodID_create();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_getParticleColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getColor", "method_1691", "getParticleColor", "m_92582_"), "(Ldtc;Ldcw;Ljd;)I");
    }

    static jint getParticleColor(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_getParticleColor();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getColor", "method_1697", "getColor", "m_92577_"), "(Ldtc;Ldbz;Ljd;I)I");
    }

    static jint getColor(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jint& arg3) {
                
       const auto methodID = methodID_getColor();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_registerColorProvider() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "register", "method_1690", "registerColorProvider", "m_92589_"), "(Lfhp;[Ldfy;)V");
    }

    static void registerColorProvider(const jobject& obj, const jobject& arg0, const jarray& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_registerColorProvider();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_registerColorProperties() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addColoringStates", "method_21594", "registerColorProperties", "m_92592_"), "(Ljava/util/Set;[Ldfy;)V");
    }

    static void registerColorProperties(const jobject& obj, const jobject& arg0, const jarray& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_registerColorProperties();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_registerColorProperty() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addColoringState", "method_21593", "registerColorProperty", "m_92586_"), "(Lduf;[Ldfy;)V");
    }

    static void registerColorProperty(const jobject& obj, const jobject& arg0, const jarray& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_registerColorProperty();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getProperties() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getColoringProperties", "method_21592", "getProperties", "m_92575_"), "(Ldfy;)Ljava/util/Set;");
    }

    static jobject getProperties(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getProperties();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_COLOR_BLOCK_BLOCKCOLORS_HPP