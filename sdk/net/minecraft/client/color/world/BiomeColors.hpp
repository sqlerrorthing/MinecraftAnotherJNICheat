// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_COLOR_WORLD_BIOMECOLORS_HPP
#define NET_MINECRAFT_CLIENT_COLOR_WORLD_BIOMECOLORS_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.color.world.BiomeColors
 * Remapped: gel
 */
namespace BiomeColors {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("gel", "net/minecraft/client/renderer/BiomeColors", "net/minecraft/class_1163", "net/minecraft/client/color/world/BiomeColors", "net/minecraft/src/C_4108_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.client.color.world.BiomeColors#GRASS_COLOR
    [[maybe_unused]] static jobject get_field_GRASS_COLOR() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "GRASS_COLOR_RESOLVER", "field_5665", "GRASS_COLOR", "f_108789_"), "Ldch;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.color.world.BiomeColors#GRASS_COLOR
    [[maybe_unused]] static void set_field_GRASS_COLOR(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "GRASS_COLOR_RESOLVER", "field_5665", "GRASS_COLOR", "f_108789_"), "Ldch;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.client.color.world.BiomeColors#FOLIAGE_COLOR
    [[maybe_unused]] static jobject get_field_FOLIAGE_COLOR() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "FOLIAGE_COLOR_RESOLVER", "field_5664", "FOLIAGE_COLOR", "f_108790_"), "Ldch;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.color.world.BiomeColors#FOLIAGE_COLOR
    [[maybe_unused]] static void set_field_FOLIAGE_COLOR(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "FOLIAGE_COLOR_RESOLVER", "field_5664", "FOLIAGE_COLOR", "f_108790_"), "Ldch;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.client.color.world.BiomeColors#WATER_COLOR
    [[maybe_unused]] static jobject get_field_WATER_COLOR() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "WATER_COLOR_RESOLVER", "field_5666", "WATER_COLOR", "f_108791_"), "Ldch;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.color.world.BiomeColors#WATER_COLOR
    [[maybe_unused]] static void set_field_WATER_COLOR(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "WATER_COLOR_RESOLVER", "field_5666", "WATER_COLOR", "f_108791_"), "Ldch;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_getColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getAverageColor", "method_4965", "getColor", "m_108796_"), "(Ldbz;Ljd;Ldch;)I");
    }

    static jint getColor(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_getColor();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getGrassColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getAverageGrassColor", "method_4962", "getGrassColor", "m_108793_"), "(Ldbz;Ljd;)I");
    }

    static jint getGrassColor(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_getGrassColor();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getFoliageColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "getAverageFoliageColor", "method_4966", "getFoliageColor", "m_108804_"), "(Ldbz;Ljd;)I");
    }

    static jint getFoliageColor(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_getFoliageColor();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getWaterColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "getAverageWaterColor", "method_4961", "getWaterColor", "m_108811_"), "(Ldbz;Ljd;)I");
    }

    static jint getWaterColor(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_getWaterColor();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_COLOR_WORLD_BIOMECOLORS_HPP