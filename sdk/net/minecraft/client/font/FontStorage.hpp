// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_FONT_FONTSTORAGE_HPP
#define NET_MINECRAFT_CLIENT_FONT_FONTSTORAGE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.font.FontStorage
 * Remapped: fld
 */
namespace FontStorage {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("fld", "net/minecraft/client/gui/font/FontSet", "net/minecraft/class_377", "net/minecraft/client/font/FontStorage", "net/minecraft/src/C_3511_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.client.font.FontStorage#RANDOM
    [[maybe_unused]] static jobject get_field_RANDOM() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "RANDOM", "field_2252", "RANDOM", "f_95050_"), "Layw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.font.FontStorage#RANDOM
    [[maybe_unused]] static void set_field_RANDOM(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "RANDOM", "field_2252", "RANDOM", "f_95050_"), "Layw;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.font.FontStorage#MAX_ADVANCE
    [[maybe_unused]] static jfloat get_field_MAX_ADVANCE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "LARGE_FORWARD_ADVANCE", "field_39934", "MAX_ADVANCE", "f_242991_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.font.FontStorage#MAX_ADVANCE
    [[maybe_unused]] static void set_field_MAX_ADVANCE(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "LARGE_FORWARD_ADVANCE", "field_39934", "MAX_ADVANCE", "f_242991_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.client.font.FontStorage#textureManager
    static jobject get_field_textureManager(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "textureManager", "field_2248", "textureManager", "f_95051_"), "Lgqm;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.font.FontStorage#textureManager
    static void set_field_textureManager(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "textureManager", "field_2248", "textureManager", "f_95051_"), "Lgqm;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.font.FontStorage#id
    static jobject get_field_id(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "name", "field_2246", "id", "f_95052_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.font.FontStorage#id
    static void set_field_id(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "name", "field_2246", "id", "f_95052_"), "Lakr;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.font.FontStorage#blankGlyphRenderer
    static jobject get_field_blankGlyphRenderer(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "missingGlyph", "field_2256", "blankGlyphRenderer", "f_95053_"), "Lflh;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.font.FontStorage#blankGlyphRenderer
    static void set_field_blankGlyphRenderer(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "missingGlyph", "field_2256", "blankGlyphRenderer", "f_95053_"), "Lflh;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.font.FontStorage#whiteRectangleGlyphRenderer
    static jobject get_field_whiteRectangleGlyphRenderer(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "whiteGlyph", "field_20910", "whiteRectangleGlyphRenderer", "f_95054_"), "Lflh;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.font.FontStorage#whiteRectangleGlyphRenderer
    static void set_field_whiteRectangleGlyphRenderer(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "whiteGlyph", "field_20910", "whiteRectangleGlyphRenderer", "f_95054_"), "Lflh;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.font.FontStorage#allFonts
    static jobject get_field_allFonts(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "allProviders", "field_49120", "allFonts", "f_315683_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.font.FontStorage#allFonts
    static void set_field_allFonts(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "allProviders", "field_49120", "allFonts", "f_315683_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.font.FontStorage#availableFonts
    static jobject get_field_availableFonts(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "activeProviders", "field_49121", "availableFonts", "f_317127_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.font.FontStorage#availableFonts
    static void set_field_availableFonts(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "activeProviders", "field_49121", "availableFonts", "f_317127_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.font.FontStorage#glyphRendererCache
    static jobject get_field_glyphRendererCache(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "glyphs", "field_2253", "glyphRendererCache", "f_95056_"), "Lfla;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.font.FontStorage#glyphRendererCache
    static void set_field_glyphRendererCache(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "glyphs", "field_2253", "glyphRendererCache", "f_95056_"), "Lfla;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.font.FontStorage#glyphCache
    static jobject get_field_glyphCache(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "glyphInfos", "field_2257", "glyphCache", "f_95057_"), "Lfla;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.font.FontStorage#glyphCache
    static void set_field_glyphCache(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "glyphInfos", "field_2257", "glyphCache", "f_95057_"), "Lfla;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.font.FontStorage#charactersByWidth
    static jobject get_field_charactersByWidth(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "glyphsByWidth", "field_2249", "charactersByWidth", "f_95058_"), "Lit/unimi/dsi/fastutil/ints/Int2ObjectMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.font.FontStorage#charactersByWidth
    static void set_field_charactersByWidth(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "glyphsByWidth", "field_2249", "charactersByWidth", "f_95058_"), "Lit/unimi/dsi/fastutil/ints/Int2ObjectMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.font.FontStorage#glyphAtlases
    static jobject get_field_glyphAtlases(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "textures", "field_2254", "glyphAtlases", "f_95059_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.font.FontStorage#glyphAtlases
    static void set_field_glyphAtlases(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "textures", "field_2254", "glyphAtlases", "f_95059_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_setFonts() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "reload", "method_2004", "setFonts", "m_321905_"), "(Ljava/util/List;Ljava/util/Set;)V");
    }

    static void setFonts(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_setFonts();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_setActiveFilters() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "reload", "method_57036", "setActiveFilters", "m_95071_"), "(Ljava/util/Set;)V");
    }

    static void setActiveFilters(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setActiveFilters();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_clear() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "resetTextures", "method_57038", "clear", "m_322787_"), "()V");
    }

    static void clear(const jobject& obj) {
                
       const auto methodID = methodID_clear();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_applyFilters() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "selectProviders", "method_57037", "applyFilters", "m_321621_"), "(Ljava/util/List;Ljava/util/Set;)Ljava/util/List;");
    }

    static jobject applyFilters(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_applyFilters();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_close() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("close", "close", "", "", "close"), "()V");
    }

    static void close(const jobject& obj) {
                
       const auto methodID = methodID_close();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_closeGlyphAtlases() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "closeTextures", "method_2010", "closeGlyphAtlases", "m_95080_"), "()V");
    }

    static void closeGlyphAtlases(const jobject& obj) {
                
       const auto methodID = methodID_closeGlyphAtlases();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_isAdvanceInvalid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "hasFishyAdvance", "method_45079", "isAdvanceInvalid", "m_243068_"), "(Lezl;)Z");
    }

    static jboolean isAdvanceInvalid(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_isAdvanceInvalid();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_findGlyph() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "computeGlyphInfo", "method_40038", "findGlyph", "m_243121_"), "(I)Lfld$a;");
    }

    static jobject findGlyph(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_findGlyph();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getGlyph() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getGlyphInfo", "method_2011", "getGlyph", "m_243128_"), "(IZ)Lezl;");
    }

    static jobject getGlyph(const jobject& obj, const jint& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_getGlyph();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_findGlyphRenderer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "computeBakedGlyph", "method_41832", "findGlyphRenderer", "m_232564_"), "(I)Lflh;");
    }

    static jobject findGlyphRenderer(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_findGlyphRenderer();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getGlyphRenderer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getGlyph", "method_2014", "getGlyphRenderer", "m_95078_"), "(I)Lflh;");
    }

    static jobject getGlyphRenderer(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_getGlyphRenderer();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__getGlyphRenderer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "stitch", "method_2012", "getGlyphRenderer", "m_232556_"), "(Lezn;)Lflh;");
    }

    static jobject _getGlyphRenderer(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__getGlyphRenderer();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getObfuscatedGlyphRenderer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getRandomGlyph", "method_2013", "getObfuscatedGlyphRenderer", "m_95067_"), "(Lezl;)Lflh;");
    }

    static jobject getObfuscatedGlyphRenderer(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getObfuscatedGlyphRenderer();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getId() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "name", "method_57034", "getId", "m_321601_"), "()Lakr;");
    }

    static jobject getId(const jobject& obj) {
                
       const auto methodID = methodID_getId();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getRectangleRenderer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "whiteGlyph", "method_22943", "getRectangleRenderer", "m_95064_"), "()Lflh;");
    }

    static jobject getRectangleRenderer(const jobject& obj) {
                
       const auto methodID = methodID_getRectangleRenderer();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_FONT_FONTSTORAGE_HPP