// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_FONT_TRUETYPEFONT_HPP
#define NET_MINECRAFT_CLIENT_FONT_TRUETYPEFONT_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.font.TrueTypeFont
 * Remapped: ezp
 */
namespace TrueTypeFont {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("ezp", "com/mojang/blaze3d/font/TrueTypeGlyphProvider", "net/minecraft/class_395", "net/minecraft/client/font/TrueTypeFont", "net/minecraft/src/C_3101_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.client.font.TrueTypeFont#buffer
    static jobject get_field_buffer(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "fontMemory", "field_21839", "buffer", "f_83837_"), "Ljava/nio/ByteBuffer;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.font.TrueTypeFont#buffer
    static void set_field_buffer(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "fontMemory", "field_21839", "buffer", "f_83837_"), "Ljava/nio/ByteBuffer;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.font.TrueTypeFont#face
    static jobject get_field_face(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "face", "field_48383", "face", "f_314118_"), "Lorg/lwjgl/util/freetype/FT_Face;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.font.TrueTypeFont#face
    static void set_field_face(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "face", "field_48383", "face", "f_314118_"), "Lorg/lwjgl/util/freetype/FT_Face;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.client.font.TrueTypeFont#oversample
    static jfloat get_field_oversample(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "oversample", "field_2321", "oversample", "f_83839_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static default field net.minecraft.client.font.TrueTypeFont#oversample
    static void set_field_oversample(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "oversample", "field_2321", "oversample", "f_83839_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.font.TrueTypeFont#excludedCharacters
    static jobject get_field_excludedCharacters(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "skip", "field_2319", "excludedCharacters", "f_83840_"), "Lit/unimi/dsi/fastutil/ints/IntSet;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.font.TrueTypeFont#excludedCharacters
    static void set_field_excludedCharacters(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "skip", "field_2319", "excludedCharacters", "f_83840_"), "Lit/unimi/dsi/fastutil/ints/IntSet;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_getGlyph() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getGlyph", "method_2040", "getGlyph", "m_214022_"), "(I)Lezl;");
    }

    static jobject getGlyph(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_getGlyph();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getInfo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "validateFontOpen", "method_51884", "getInfo", "m_287161_"), "()Lorg/lwjgl/util/freetype/FT_Face;");
    }

    static jobject getInfo(const jobject& obj) {
                
       const auto methodID = methodID_getInfo();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_close() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("close", "close", "", "", "close"), "()V");
    }

    static void close(const jobject& obj) {
                
       const auto methodID = methodID_close();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getProvidedGlyphs() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getSupportedGlyphs", "method_27442", "getProvidedGlyphs", "m_6990_"), "()Lit/unimi/dsi/fastutil/ints/IntSet;");
    }

    static jobject getProvidedGlyphs(const jobject& obj) {
                
       const auto methodID = methodID_getProvidedGlyphs();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_FONT_TRUETYPEFONT_HPP