// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_FONT_BITMAPFONT$BITMAPFONTGLYPH_HPP
#define NET_MINECRAFT_CLIENT_FONT_BITMAPFONT$BITMAPFONTGLYPH_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.font.BitmapFont$BitmapFontGlyph
 * Remapped: flm$b
 */
namespace BitmapFont$BitmapFontGlyph {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("flm$b", "net/minecraft/client/gui/font/providers/BitmapProvider$Glyph", "net/minecraft/class_386$class_388", "net/minecraft/client/font/BitmapFont$BitmapFontGlyph", "net/minecraft/src/C_3522_$C_3525_"));
        }
        return cachedClass;
    };

    // getter for default field net.minecraft.client.font.BitmapFont$BitmapFontGlyph#scaleFactor
    static jfloat get_field_scaleFactor(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "scale", "comp_603", "scaleFactor", "f_95363_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static default field net.minecraft.client.font.BitmapFont$BitmapFontGlyph#scaleFactor
    static void set_field_scaleFactor(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "scale", "comp_603", "scaleFactor", "f_95363_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.client.font.BitmapFont$BitmapFontGlyph#image
    static jobject get_field_image(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "image", "comp_604", "image", "f_95364_"), "Lfaj;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.client.font.BitmapFont$BitmapFontGlyph#image
    static void set_field_image(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "image", "comp_604", "image", "f_95364_"), "Lfaj;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.client.font.BitmapFont$BitmapFontGlyph#x
    static jint get_field_x(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "offsetX", "comp_605", "x", "f_95365_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static default field net.minecraft.client.font.BitmapFont$BitmapFontGlyph#x
    static void set_field_x(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "offsetX", "comp_605", "x", "f_95365_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.client.font.BitmapFont$BitmapFontGlyph#y
    static jint get_field_y(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "offsetY", "comp_606", "y", "f_95366_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static default field net.minecraft.client.font.BitmapFont$BitmapFontGlyph#y
    static void set_field_y(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "offsetY", "comp_606", "y", "f_95366_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.client.font.BitmapFont$BitmapFontGlyph#width
    static jint get_field_width(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "width", "comp_607", "width", "f_95367_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static default field net.minecraft.client.font.BitmapFont$BitmapFontGlyph#width
    static void set_field_width(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "width", "comp_607", "width", "f_95367_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.client.font.BitmapFont$BitmapFontGlyph#height
    static jint get_field_height(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "height", "comp_608", "height", "f_95368_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static default field net.minecraft.client.font.BitmapFont$BitmapFontGlyph#height
    static void set_field_height(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "height", "comp_608", "height", "f_95368_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.font.BitmapFont$BitmapFontGlyph#advance
    static jint get_field_advance(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "advance", "comp_609", "advance", "f_95369_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.font.BitmapFont$BitmapFontGlyph#advance
    static void set_field_advance(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "advance", "comp_609", "advance", "f_95369_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.client.font.BitmapFont$BitmapFontGlyph#ascent
    static jint get_field_ascent(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "ascent", "comp_610", "ascent", "f_95370_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static default field net.minecraft.client.font.BitmapFont$BitmapFontGlyph#ascent
    static void set_field_ascent(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "ascent", "comp_610", "ascent", "f_95370_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    static jmethodID methodID_getAdvance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("getAdvance", "getAdvance", "", "", "m_7403_"), "()F");
    }

    static jfloat getAdvance(const jobject& obj) {
                
       const auto methodID = methodID_getAdvance();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_bake() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bake", "bake", "bake", "bake", "m_213604_"), "(Ljava/util/function/Function;)Lflh;");
    }

    static jobject bake(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_bake();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__scaleFactor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "scale", "comp_603", "scaleFactor", "f_95363_"), "()F");
    }

    static jfloat _scaleFactor(const jobject& obj) {
                
       const auto methodID = methodID__scaleFactor();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID__image() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "image", "comp_604", "image", "f_95364_"), "()Lfaj;");
    }

    static jobject _image(const jobject& obj) {
                
       const auto methodID = methodID__image();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__x() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "offsetX", "comp_605", "x", "f_95365_"), "()I");
    }

    static jint _x(const jobject& obj) {
                
       const auto methodID = methodID__x();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID__y() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "offsetY", "comp_606", "y", "f_95366_"), "()I");
    }

    static jint _y(const jobject& obj) {
                
       const auto methodID = methodID__y();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID__width() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "width", "comp_607", "width", "f_95367_"), "()I");
    }

    static jint _width(const jobject& obj) {
                
       const auto methodID = methodID__width();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID__height() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "height", "comp_608", "height", "f_95368_"), "()I");
    }

    static jint _height(const jobject& obj) {
                
       const auto methodID = methodID__height();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID__advance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "advance", "comp_609", "advance", "f_95369_"), "()I");
    }

    static jint _advance(const jobject& obj) {
                
       const auto methodID = methodID__advance();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID__ascent() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "ascent", "comp_610", "ascent", "f_95370_"), "()I");
    }

    static jint _ascent(const jobject& obj) {
                
       const auto methodID = methodID__ascent();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_FONT_BITMAPFONT$BITMAPFONTGLYPH_HPP