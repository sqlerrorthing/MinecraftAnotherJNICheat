// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_FONT_GLYPHATLASTEXTURE_HPP
#define NET_MINECRAFT_CLIENT_FONT_GLYPHATLASTEXTURE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.font.GlyphAtlasTexture
 * Remapped: fle
 */
namespace GlyphAtlasTexture {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("fle", "net/minecraft/client/gui/font/FontTexture", "net/minecraft/class_380", "net/minecraft/client/font/GlyphAtlasTexture", "net/minecraft/src/C_3512_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.client.font.GlyphAtlasTexture#SLOT_LENGTH
    [[maybe_unused]] static jint get_field_SLOT_LENGTH() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "SIZE", "field_32227", "SLOT_LENGTH", "f_169092_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.font.GlyphAtlasTexture#SLOT_LENGTH
    [[maybe_unused]] static void set_field_SLOT_LENGTH(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "SIZE", "field_32227", "SLOT_LENGTH", "f_169092_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.client.font.GlyphAtlasTexture#textRenderLayers
    static jobject get_field_textRenderLayers(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "renderTypes", "field_44759", "textRenderLayers", "f_283837_"), "Lflf;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.font.GlyphAtlasTexture#textRenderLayers
    static void set_field_textRenderLayers(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "renderTypes", "field_44759", "textRenderLayers", "f_283837_"), "Lflf;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.font.GlyphAtlasTexture#hasColor
    static jboolean get_field_hasColor(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "colored", "field_2263", "hasColor", "f_95094_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.font.GlyphAtlasTexture#hasColor
    static void set_field_hasColor(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "colored", "field_2263", "hasColor", "f_95094_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.font.GlyphAtlasTexture#rootSlot
    static jobject get_field_rootSlot(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "root", "field_2264", "rootSlot", "f_95095_"), "Lfle$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.font.GlyphAtlasTexture#rootSlot
    static void set_field_rootSlot(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "root", "field_2264", "rootSlot", "f_95095_"), "Lfle$a;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_load() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "load", "method_4625", "load", "m_6704_"), "(Laue;)V");
    }

    static void load(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_load();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_close() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("close", "close", "", "", "close"), "()V");
    }

    static void close(const jobject& obj) {
                
       const auto methodID = methodID_close();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getGlyphRenderer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "add", "method_2022", "getGlyphRenderer", "m_232568_"), "(Lezn;)Lflh;");
    }

    static jobject getGlyphRenderer(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getGlyphRenderer();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_save() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "dumpContents", "method_49712", "save", "m_276079_"), "(Lakr;Ljava/nio/file/Path;)V");
    }

    static void save(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_save();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_FONT_GLYPHATLASTEXTURE_HPP