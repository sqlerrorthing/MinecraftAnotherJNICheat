// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_FONT_TEXTHANDLER$LINEBREAKINGVISITOR_HPP
#define NET_MINECRAFT_CLIENT_FONT_TEXTHANDLER$LINEBREAKINGVISITOR_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.font.TextHandler$LineBreakingVisitor
 * Remapped: fgz$b
 */
namespace TextHandler$LineBreakingVisitor {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("fgz$b", "net/minecraft/client/StringSplitter$LineBreakFinder", "net/minecraft/class_5225$class_5227", "net/minecraft/client/font/TextHandler$LineBreakingVisitor", "net/minecraft/src/C_3410_$C_3413_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.client.font.TextHandler$LineBreakingVisitor#maxWidth
    static jfloat get_field_maxWidth(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "maxWidth", "field_24223", "maxWidth", "f_92461_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.font.TextHandler$LineBreakingVisitor#maxWidth
    static void set_field_maxWidth(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "maxWidth", "field_24223", "maxWidth", "f_92461_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.font.TextHandler$LineBreakingVisitor#endIndex
    static jint get_field_endIndex(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "lineBreak", "field_24224", "endIndex", "f_92462_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.font.TextHandler$LineBreakingVisitor#endIndex
    static void set_field_endIndex(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "lineBreak", "field_24224", "endIndex", "f_92462_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.font.TextHandler$LineBreakingVisitor#endStyle
    static jobject get_field_endStyle(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "lineBreakStyle", "field_24225", "endStyle", "f_92463_"), "Lxw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.font.TextHandler$LineBreakingVisitor#endStyle
    static void set_field_endStyle(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "lineBreakStyle", "field_24225", "endStyle", "f_92463_"), "Lxw;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.font.TextHandler$LineBreakingVisitor#nonEmpty
    static jboolean get_field_nonEmpty(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "hadNonZeroWidthChar", "field_24226", "nonEmpty", "f_92464_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.font.TextHandler$LineBreakingVisitor#nonEmpty
    static void set_field_nonEmpty(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "hadNonZeroWidthChar", "field_24226", "nonEmpty", "f_92464_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.font.TextHandler$LineBreakingVisitor#totalWidth
    static jfloat get_field_totalWidth(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "width", "field_24227", "totalWidth", "f_92465_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.font.TextHandler$LineBreakingVisitor#totalWidth
    static void set_field_totalWidth(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "width", "field_24227", "totalWidth", "f_92465_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.font.TextHandler$LineBreakingVisitor#lastSpaceBreak
    static jint get_field_lastSpaceBreak(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "lastSpace", "field_24228", "lastSpaceBreak", "f_92466_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.font.TextHandler$LineBreakingVisitor#lastSpaceBreak
    static void set_field_lastSpaceBreak(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "lastSpace", "field_24228", "lastSpaceBreak", "f_92466_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.font.TextHandler$LineBreakingVisitor#lastSpaceStyle
    static jobject get_field_lastSpaceStyle(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "lastSpaceStyle", "field_24229", "lastSpaceStyle", "f_92467_"), "Lxw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.font.TextHandler$LineBreakingVisitor#lastSpaceStyle
    static void set_field_lastSpaceStyle(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "lastSpaceStyle", "field_24229", "lastSpaceStyle", "f_92467_"), "Lxw;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.font.TextHandler$LineBreakingVisitor#count
    static jint get_field_count(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "nextChar", "field_24230", "count", "f_92468_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.font.TextHandler$LineBreakingVisitor#count
    static void set_field_count(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "nextChar", "field_24230", "count", "f_92468_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.font.TextHandler$LineBreakingVisitor#startOffset
    static jint get_field_startOffset(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "offset", "field_24231", "startOffset", "f_92469_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.font.TextHandler$LineBreakingVisitor#startOffset
    static void set_field_startOffset(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "offset", "field_24231", "startOffset", "f_92469_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    static jmethodID methodID_accept() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("accept", "accept", "accept", "accept", "m_6411_"), "(ILxw;I)Z");
    }

    static jboolean accept(const jobject& obj, const jint& arg0, const jobject& arg1, const jint& arg2) {
                
       const auto methodID = methodID_accept();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_breakLine() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "finishIteration", "method_27507", "breakLine", "m_92476_"), "(ILxw;)Z");
    }

    static jboolean breakLine(const jobject& obj, const jint& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_breakLine();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_hasLineBreak() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "lineBreakFound", "method_27509", "hasLineBreak", "m_92484_"), "()Z");
    }

    static jboolean hasLineBreak(const jobject& obj) {
                
       const auto methodID = methodID_hasLineBreak();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getEndingIndex() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getSplitPosition", "method_27505", "getEndingIndex", "m_92473_"), "()I");
    }

    static jint getEndingIndex(const jobject& obj) {
                
       const auto methodID = methodID_getEndingIndex();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getEndingStyle() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getSplitStyle", "method_27508", "getEndingStyle", "m_92483_"), "()Lxw;");
    }

    static jobject getEndingStyle(const jobject& obj) {
                
       const auto methodID = methodID_getEndingStyle();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_offset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addToOffset", "method_27506", "offset", "m_92474_"), "(I)V");
    }

    static void offset(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_offset();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_FONT_TEXTHANDLER$LINEBREAKINGVISITOR_HPP