// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_FONT_FONTFILTERTYPE$FILTERMAP_HPP
#define NET_MINECRAFT_CLIENT_FONT_FONTFILTERTYPE$FILTERMAP_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.font.FontFilterType$FilterMap
 * Remapped: flc$a
 */
namespace FontFilterType$FilterMap {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("flc$a", "net/minecraft/client/gui/font/FontOption$Filter", "net/minecraft/class_9243$class_9244", "net/minecraft/client/font/FontFilterType$FilterMap", "net/minecraft/src/C_313440_$C_313526_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.client.font.FontFilterType$FilterMap#activeFilters
    static jobject get_field_activeFilters(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "values", "field_49119", "activeFilters", "f_316067_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.font.FontFilterType$FilterMap#activeFilters
    static void set_field_activeFilters(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "values", "field_49119", "activeFilters", "f_316067_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for static public field net.minecraft.client.font.FontFilterType$FilterMap#CODEC
    [[maybe_unused]] static jobject get_field_CODEC() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CODEC", "field_49117", "CODEC", "f_314128_"), "Lcom/mojang/serialization/Codec;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.font.FontFilterType$FilterMap#CODEC
    [[maybe_unused]] static void set_field_CODEC(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CODEC", "field_49117", "CODEC", "f_314128_"), "Lcom/mojang/serialization/Codec;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.client.font.FontFilterType$FilterMap#NO_FILTER
    [[maybe_unused]] static jobject get_field_NO_FILTER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ALWAYS_PASS", "field_49118", "NO_FILTER", "f_315854_"), "Lflc$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.font.FontFilterType$FilterMap#NO_FILTER
    [[maybe_unused]] static void set_field_NO_FILTER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ALWAYS_PASS", "field_49118", "NO_FILTER", "f_315854_"), "Lflc$a;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_isAllowed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "apply", "method_57032", "isAllowed", "m_319512_"), "(Ljava/util/Set;)Z");
    }

    static jboolean isAllowed(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isAllowed();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_apply() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "merge", "method_57031", "apply", "m_323896_"), "(Lflc$a;)Lflc$a;");
    }

    static jobject apply(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_apply();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_FONT_FONTFILTERTYPE$FILTERMAP_HPP