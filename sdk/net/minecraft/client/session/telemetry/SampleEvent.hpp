// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_SESSION_TELEMETRY_SAMPLEEVENT_HPP
#define NET_MINECRAFT_CLIENT_SESSION_TELEMETRY_SAMPLEEVENT_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.session.telemetry.SampleEvent
 * Remapped: gvt
 */
namespace SampleEvent {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("gvt", "net/minecraft/client/telemetry/events/AggregatedTelemetryEvent", "net/minecraft/class_7976", "net/minecraft/client/session/telemetry/SampleEvent", "net/minecraft/src/C_260383_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.client.session.telemetry.SampleEvent#INTERVAL_IN_MILLIS
    [[maybe_unused]] static jint get_field_INTERVAL_IN_MILLIS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "SAMPLE_INTERVAL_MS", "field_41505", "INTERVAL_IN_MILLIS", "f_260549_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.session.telemetry.SampleEvent#INTERVAL_IN_MILLIS
    [[maybe_unused]] static void set_field_INTERVAL_IN_MILLIS(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "SAMPLE_INTERVAL_MS", "field_41505", "INTERVAL_IN_MILLIS", "f_260549_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.session.telemetry.SampleEvent#BATCH_SIZE
    [[maybe_unused]] static jint get_field_BATCH_SIZE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "SAMPLES_PER_EVENT", "field_41506", "BATCH_SIZE", "f_260454_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.session.telemetry.SampleEvent#BATCH_SIZE
    [[maybe_unused]] static void set_field_BATCH_SIZE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "SAMPLES_PER_EVENT", "field_41506", "BATCH_SIZE", "f_260454_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.client.session.telemetry.SampleEvent#sampleCount
    static jint get_field_sampleCount(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "sampleCount", "field_41507", "sampleCount", "f_260572_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.session.telemetry.SampleEvent#sampleCount
    static void set_field_sampleCount(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "sampleCount", "field_41507", "sampleCount", "f_260572_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.session.telemetry.SampleEvent#enabled
    static jboolean get_field_enabled(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "ticking", "field_41508", "enabled", "f_260520_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.session.telemetry.SampleEvent#enabled
    static void set_field_enabled(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "ticking", "field_41508", "enabled", "f_260520_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.session.telemetry.SampleEvent#lastSampleTime
    static jobject get_field_lastSampleTime(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "lastSampleTime", "field_41509", "lastSampleTime", "f_260699_"), "Ljava/time/Instant;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.session.telemetry.SampleEvent#lastSampleTime
    static void set_field_lastSampleTime(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "lastSampleTime", "field_41509", "lastSampleTime", "f_260699_"), "Ljava/time/Instant;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_start() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "start", "method_47777", "start", "m_260947_"), "()V");
    }

    static void start(const jobject& obj) {
                
       const auto methodID = methodID_start();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "tick", "method_47778", "tick", "m_263206_"), "(Lgvn;)V");
    }

    static void tick(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_tick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_shouldSample() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "shouldTakeSample", "method_47779", "shouldSample", "m_261168_"), "()Z");
    }

    static jboolean shouldSample(const jobject& obj) {
                
       const auto methodID = methodID_shouldSample();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_shouldSend() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "shouldSentEvent", "method_47780", "shouldSend", "m_261228_"), "()Z");
    }

    static jboolean shouldSend(const jobject& obj) {
                
       const auto methodID = methodID_shouldSend();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_disableSampling() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "stop", "method_47781", "disableSampling", "m_261217_"), "()V");
    }

    static void disableSampling(const jobject& obj) {
                
       const auto methodID = methodID_disableSampling();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getSampleCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "getSampleCount", "method_47782", "getSampleCount", "m_261091_"), "()I");
    }

    static jint getSampleCount(const jobject& obj) {
                
       const auto methodID = methodID_getSampleCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_sample() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "takeSample", "method_47783", "sample", "m_260835_"), "()V");
    }

    static void sample(const jobject& obj) {
                
       const auto methodID = methodID_sample();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_send() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "sendEvent", "method_47784", "send", "m_260819_"), "(Lgvn;)V");
    }

    static void send(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_send();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_SESSION_TELEMETRY_SAMPLEEVENT_HPP