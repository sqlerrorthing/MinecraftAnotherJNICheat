// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_SESSION_REPORT_CHATABUSEREPORT$BUILDER_HPP
#define NET_MINECRAFT_CLIENT_SESSION_REPORT_CHATABUSEREPORT$BUILDER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.session.report.ChatAbuseReport$Builder
 * Remapped: gah$a
 */
namespace ChatAbuseReport$Builder {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("gah$a", "net/minecraft/client/multiplayer/chat/report/ChatReport$Builder", "net/minecraft/class_7566$class_8772", "net/minecraft/client/session/report/ChatAbuseReport$Builder", "net/minecraft/src/C_290279_$C_290141_"));
        }
        return cachedClass;
    };

    static jmethodID methodID_getSelectedMessages() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "reportedMessages", "method_53597", "getSelectedMessages", "m_293300_"), "()Lit/unimi/dsi/fastutil/ints/IntSet;");
    }

    static jobject getSelectedMessages(const jobject& obj) {
                
       const auto methodID = methodID_getSelectedMessages();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_toggleMessageSelection() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "toggleReported", "method_53598", "toggleMessageSelection", "m_293661_"), "(I)V");
    }

    static void toggleMessageSelection(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_toggleMessageSelection();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isMessageSelected() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "isReported", "method_53603", "isMessageSelected", "m_294979_"), "(I)Z");
    }

    static jboolean isMessageSelected(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_isMessageSelected();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_hasEnoughInfo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "hasContent", "method_53602", "hasEnoughInfo", "m_293281_"), "()Z");
    }

    static jboolean hasEnoughInfo(const jobject& obj) {
                
       const auto methodID = methodID_hasEnoughInfo();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_validate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "checkBuildable", "method_53605", "validate", "m_293936_"), "()Lgak$b;");
    }

    static jobject validate(const jobject& obj) {
                
       const auto methodID = methodID_validate();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_build() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "build", "method_53600", "build", "m_292692_"), "(Lgao;)Lcom/mojang/datafixers/util/Either;");
    }

    static jobject build(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_build();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_collectEvidences() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "buildEvidence", "method_53604", "collectEvidences", "m_295235_"), "(Lgao;)Lcom/mojang/authlib/minecraft/report/ReportEvidence;");
    }

    static jobject collectEvidences(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_collectEvidences();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_toReportChatMessage() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "buildReportedChatMessage", "method_53599", "toReportChatMessage", "m_294214_"), "(Lgad$a;Z)Lcom/mojang/authlib/minecraft/report/ReportChatMessage;");
    }

    static jobject toReportChatMessage(const jobject& obj, const jobject& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_toReportChatMessage();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_copy() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "copy", "method_53606", "copy", "m_295874_"), "()Lgah$a;");
    }

    static jobject copy(const jobject& obj) {
                
       const auto methodID = methodID_copy();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_SESSION_REPORT_CHATABUSEREPORT$BUILDER_HPP