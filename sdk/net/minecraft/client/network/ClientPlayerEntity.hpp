// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_NETWORK_CLIENTPLAYERENTITY_HPP
#define NET_MINECRAFT_CLIENT_NETWORK_CLIENTPLAYERENTITY_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.network.ClientPlayerEntity
 * Remapped: geb
 */
namespace ClientPlayerEntity {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("geb", "net/minecraft/client/player/LocalPlayer", "net/minecraft/class_746", "net/minecraft/client/network/ClientPlayerEntity", "net/minecraft/src/C_4105_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.client.network.ClientPlayerEntity#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "LOGGER", "field_39078", "LOGGER", "f_234121_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.network.ClientPlayerEntity#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "LOGGER", "field_39078", "LOGGER", "f_234121_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.network.ClientPlayerEntity#field_32671
    [[maybe_unused]] static jint get_field_field_32671() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cJ", "POSITION_REMINDER_INTERVAL", "field_32671", "field_32671", "f_172525_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerEntity#field_32671
    [[maybe_unused]] static void set_field_field_32671(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cJ", "POSITION_REMINDER_INTERVAL", "field_32671", "field_32671", "f_172525_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.network.ClientPlayerEntity#field_32672
    [[maybe_unused]] static jint get_field_field_32672() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cK", "WATER_VISION_MAX_TIME", "field_32672", "field_32672", "f_172526_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerEntity#field_32672
    [[maybe_unused]] static void set_field_field_32672(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cK", "WATER_VISION_MAX_TIME", "field_32672", "field_32672", "f_172526_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.network.ClientPlayerEntity#field_32673
    [[maybe_unused]] static jint get_field_field_32673() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cL", "WATER_VISION_QUICK_TIME", "field_32673", "field_32673", "f_172527_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerEntity#field_32673
    [[maybe_unused]] static void set_field_field_32673(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cL", "WATER_VISION_QUICK_TIME", "field_32673", "field_32673", "f_172527_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.network.ClientPlayerEntity#field_32674
    [[maybe_unused]] static jfloat get_field_field_32674() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cM", "WATER_VISION_QUICK_PERCENT", "field_32674", "field_32674", "f_172528_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerEntity#field_32674
    [[maybe_unused]] static void set_field_field_32674(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cM", "WATER_VISION_QUICK_PERCENT", "field_32674", "field_32674", "f_172528_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.network.ClientPlayerEntity#field_32675
    [[maybe_unused]] static jdouble get_field_field_32675() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cN", "SUFFOCATING_COLLISION_CHECK_SCALE", "field_32675", "field_32675", "f_172529_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerEntity#field_32675
    [[maybe_unused]] static void set_field_field_32675(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cN", "SUFFOCATING_COLLISION_CHECK_SCALE", "field_32675", "field_32675", "f_172529_"), "D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.network.ClientPlayerEntity#MAX_SOFT_COLLISION_RADIANS
    [[maybe_unused]] static jdouble get_field_MAX_SOFT_COLLISION_RADIANS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cO", "MINOR_COLLISION_ANGLE_THRESHOLD_RADIAN", "field_36194", "MAX_SOFT_COLLISION_RADIANS", "f_197409_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerEntity#MAX_SOFT_COLLISION_RADIANS
    [[maybe_unused]] static void set_field_MAX_SOFT_COLLISION_RADIANS(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("cO", "MINOR_COLLISION_ANGLE_THRESHOLD_RADIAN", "field_36194", "MAX_SOFT_COLLISION_RADIANS", "f_197409_"), "D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    // getter for public field net.minecraft.client.network.ClientPlayerEntity#networkHandler
    static jobject get_field_networkHandler(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "connection", "field_3944", "networkHandler", "f_108617_"), "Lfzg;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static public field net.minecraft.client.network.ClientPlayerEntity#networkHandler
    static void set_field_networkHandler(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "connection", "field_3944", "networkHandler", "f_108617_"), "Lfzg;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerEntity#statHandler
    static jobject get_field_statHandler(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cP", "stats", "field_3928", "statHandler", "f_108591_"), "Lawa;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerEntity#statHandler
    static void set_field_statHandler(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cP", "stats", "field_3928", "statHandler", "f_108591_"), "Lawa;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerEntity#recipeBook
    static jobject get_field_recipeBook(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cQ", "recipeBook", "field_3930", "recipeBook", "f_108592_"), "Lfga;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerEntity#recipeBook
    static void set_field_recipeBook(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cQ", "recipeBook", "field_3930", "recipeBook", "f_108592_"), "Lfga;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerEntity#tickables
    static jobject get_field_tickables(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cR", "ambientSoundHandlers", "field_3933", "tickables", "f_108593_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerEntity#tickables
    static void set_field_tickables(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cR", "ambientSoundHandlers", "field_3933", "tickables", "f_108593_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerEntity#clientPermissionLevel
    static jint get_field_clientPermissionLevel(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cS", "permissionLevel", "field_3912", "clientPermissionLevel", "f_108594_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerEntity#clientPermissionLevel
    static void set_field_clientPermissionLevel(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cS", "permissionLevel", "field_3912", "clientPermissionLevel", "f_108594_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerEntity#lastX
    static jdouble get_field_lastX(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cT", "xLast", "field_3926", "lastX", "f_108595_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerEntity#lastX
    static void set_field_lastX(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cT", "xLast", "field_3926", "lastX", "f_108595_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerEntity#lastBaseY
    static jdouble get_field_lastBaseY(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cU", "yLast1", "field_3940", "lastBaseY", "f_108596_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerEntity#lastBaseY
    static void set_field_lastBaseY(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cU", "yLast1", "field_3940", "lastBaseY", "f_108596_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerEntity#lastZ
    static jdouble get_field_lastZ(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cV", "zLast", "field_3924", "lastZ", "f_108597_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerEntity#lastZ
    static void set_field_lastZ(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cV", "zLast", "field_3924", "lastZ", "f_108597_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerEntity#lastYaw
    static jfloat get_field_lastYaw(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cW", "yRotLast", "field_3941", "lastYaw", "f_108598_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerEntity#lastYaw
    static void set_field_lastYaw(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cW", "yRotLast", "field_3941", "lastYaw", "f_108598_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerEntity#lastPitch
    static jfloat get_field_lastPitch(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cX", "xRotLast", "field_3925", "lastPitch", "f_108599_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerEntity#lastPitch
    static void set_field_lastPitch(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cX", "xRotLast", "field_3925", "lastPitch", "f_108599_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerEntity#lastOnGround
    static jboolean get_field_lastOnGround(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cY", "lastOnGround", "field_3920", "lastOnGround", "f_108600_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerEntity#lastOnGround
    static void set_field_lastOnGround(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cY", "lastOnGround", "field_3920", "lastOnGround", "f_108600_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerEntity#inSneakingPose
    static jboolean get_field_inSneakingPose(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cZ", "crouching", "field_23093", "inSneakingPose", "f_108601_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerEntity#inSneakingPose
    static void set_field_inSneakingPose(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cZ", "crouching", "field_23093", "inSneakingPose", "f_108601_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerEntity#lastSneaking
    static jboolean get_field_lastSneaking(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("da", "wasShiftKeyDown", "field_3936", "lastSneaking", "f_108602_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerEntity#lastSneaking
    static void set_field_lastSneaking(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("da", "wasShiftKeyDown", "field_3936", "lastSneaking", "f_108602_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerEntity#lastSprinting
    static jboolean get_field_lastSprinting(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("db", "wasSprinting", "field_3919", "lastSprinting", "f_108603_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerEntity#lastSprinting
    static void set_field_lastSprinting(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("db", "wasSprinting", "field_3919", "lastSprinting", "f_108603_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerEntity#ticksSinceLastPositionPacketSent
    static jint get_field_ticksSinceLastPositionPacketSent(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("dc", "positionReminder", "field_3923", "ticksSinceLastPositionPacketSent", "f_108604_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerEntity#ticksSinceLastPositionPacketSent
    static void set_field_ticksSinceLastPositionPacketSent(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("dc", "positionReminder", "field_3923", "ticksSinceLastPositionPacketSent", "f_108604_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerEntity#healthInitialized
    static jboolean get_field_healthInitialized(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("dd", "flashOnSetHealth", "field_3918", "healthInitialized", "f_108605_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerEntity#healthInitialized
    static void set_field_healthInitialized(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("dd", "flashOnSetHealth", "field_3918", "healthInitialized", "f_108605_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.client.network.ClientPlayerEntity#input
    static jobject get_field_input(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cz", "input", "field_3913", "input", "f_108618_"), "Lgdz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static public field net.minecraft.client.network.ClientPlayerEntity#input
    static void set_field_input(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cz", "input", "field_3913", "input", "f_108618_"), "Lgdz;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.client.network.ClientPlayerEntity#client
    static jobject get_field_client(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cA", "minecraft", "field_3937", "client", "f_108619_"), "Lfgo;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.client.network.ClientPlayerEntity#client
    static void set_field_client(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cA", "minecraft", "field_3937", "client", "f_108619_"), "Lfgo;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.client.network.ClientPlayerEntity#ticksLeftToDoubleTapSprint
    static jint get_field_ticksLeftToDoubleTapSprint(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cB", "sprintTriggerTime", "field_3935", "ticksLeftToDoubleTapSprint", "f_108583_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.client.network.ClientPlayerEntity#ticksLeftToDoubleTapSprint
    static void set_field_ticksLeftToDoubleTapSprint(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cB", "sprintTriggerTime", "field_3935", "ticksLeftToDoubleTapSprint", "f_108583_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.client.network.ClientPlayerEntity#renderYaw
    static jfloat get_field_renderYaw(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cD", "yBob", "field_3932", "renderYaw", "f_108585_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static public field net.minecraft.client.network.ClientPlayerEntity#renderYaw
    static void set_field_renderYaw(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cD", "yBob", "field_3932", "renderYaw", "f_108585_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.client.network.ClientPlayerEntity#renderPitch
    static jfloat get_field_renderPitch(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cE", "xBob", "field_3916", "renderPitch", "f_108586_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static public field net.minecraft.client.network.ClientPlayerEntity#renderPitch
    static void set_field_renderPitch(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cE", "xBob", "field_3916", "renderPitch", "f_108586_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.client.network.ClientPlayerEntity#lastRenderYaw
    static jfloat get_field_lastRenderYaw(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cF", "yBobO", "field_3931", "lastRenderYaw", "f_108587_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static public field net.minecraft.client.network.ClientPlayerEntity#lastRenderYaw
    static void set_field_lastRenderYaw(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cF", "yBobO", "field_3931", "lastRenderYaw", "f_108587_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.client.network.ClientPlayerEntity#lastRenderPitch
    static jfloat get_field_lastRenderPitch(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cG", "xBobO", "field_3914", "lastRenderPitch", "f_108588_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static public field net.minecraft.client.network.ClientPlayerEntity#lastRenderPitch
    static void set_field_lastRenderPitch(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cG", "xBobO", "field_3914", "lastRenderPitch", "f_108588_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerEntity#field_3938
    static jint get_field_field_3938(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("de", "jumpRidingTicks", "field_3938", "field_3938", "f_108607_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerEntity#field_3938
    static void set_field_field_3938(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("de", "jumpRidingTicks", "field_3938", "field_3938", "f_108607_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerEntity#mountJumpStrength
    static jfloat get_field_mountJumpStrength(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("df", "jumpRidingScale", "field_3922", "mountJumpStrength", "f_108608_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerEntity#mountJumpStrength
    static void set_field_mountJumpStrength(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("df", "jumpRidingScale", "field_3922", "mountJumpStrength", "f_108608_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.client.network.ClientPlayerEntity#nauseaIntensity
    static jfloat get_field_nauseaIntensity(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cH", "spinningEffectIntensity", "field_44911", "nauseaIntensity", "f_108589_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static public field net.minecraft.client.network.ClientPlayerEntity#nauseaIntensity
    static void set_field_nauseaIntensity(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cH", "spinningEffectIntensity", "field_44911", "nauseaIntensity", "f_108589_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.client.network.ClientPlayerEntity#prevNauseaIntensity
    static jfloat get_field_prevNauseaIntensity(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cI", "oSpinningEffectIntensity", "field_44912", "prevNauseaIntensity", "f_108590_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static public field net.minecraft.client.network.ClientPlayerEntity#prevNauseaIntensity
    static void set_field_prevNauseaIntensity(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("cI", "oSpinningEffectIntensity", "field_44912", "prevNauseaIntensity", "f_108590_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerEntity#usingItem
    static jboolean get_field_usingItem(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("dg", "startedUsingItem", "field_3915", "usingItem", "f_108609_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerEntity#usingItem
    static void set_field_usingItem(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("dg", "startedUsingItem", "field_3915", "usingItem", "f_108609_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerEntity#activeHand
    static jobject get_field_activeHand(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("dh", "usingItemHand", "field_3945", "activeHand", "f_108610_"), "Lbqq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerEntity#activeHand
    static void set_field_activeHand(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("dh", "usingItemHand", "field_3945", "activeHand", "f_108610_"), "Lbqq;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerEntity#riding
    static jboolean get_field_riding(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("di", "handsBusy", "field_3942", "riding", "f_108611_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerEntity#riding
    static void set_field_riding(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("di", "handsBusy", "field_3942", "riding", "f_108611_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerEntity#autoJumpEnabled
    static jboolean get_field_autoJumpEnabled(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("dj", "autoJumpEnabled", "field_3927", "autoJumpEnabled", "f_108612_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerEntity#autoJumpEnabled
    static void set_field_autoJumpEnabled(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("dj", "autoJumpEnabled", "field_3927", "autoJumpEnabled", "f_108612_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerEntity#ticksToNextAutojump
    static jint get_field_ticksToNextAutojump(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("dk", "autoJumpTime", "field_3934", "ticksToNextAutojump", "f_108613_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerEntity#ticksToNextAutojump
    static void set_field_ticksToNextAutojump(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("dk", "autoJumpTime", "field_3934", "ticksToNextAutojump", "f_108613_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerEntity#falling
    static jboolean get_field_falling(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("dl", "wasFallFlying", "field_3939", "falling", "f_108614_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerEntity#falling
    static void set_field_falling(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("dl", "wasFallFlying", "field_3939", "falling", "f_108614_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerEntity#underwaterVisibilityTicks
    static jint get_field_underwaterVisibilityTicks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("dm", "waterVisionTime", "field_3917", "underwaterVisibilityTicks", "f_108615_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerEntity#underwaterVisibilityTicks
    static void set_field_underwaterVisibilityTicks(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("dm", "waterVisionTime", "field_3917", "underwaterVisibilityTicks", "f_108615_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerEntity#showsDeathScreen
    static jboolean get_field_showsDeathScreen(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("dn", "showDeathScreen", "field_20663", "showsDeathScreen", "f_108616_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerEntity#showsDeathScreen
    static void set_field_showsDeathScreen(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("dn", "showDeathScreen", "field_20663", "showsDeathScreen", "f_108616_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerEntity#limitedCraftingEnabled
    static jboolean get_field_limitedCraftingEnabled(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("do", "doLimitedCrafting", "field_46188", "limitedCraftingEnabled", "f_290392_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerEntity#limitedCraftingEnabled
    static void set_field_limitedCraftingEnabled(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("do", "doLimitedCrafting", "field_46188", "limitedCraftingEnabled", "f_290392_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    static jmethodID methodID_damage() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "hurt", "method_5643", "damage", "m_6469_"), "(Lbrk;F)Z");
    }

    static jboolean damage(const jobject& obj, const jobject& arg0, const jfloat& arg1) {
                
       const auto methodID = methodID_damage();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_heal() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "heal", "method_6025", "heal", "m_5634_"), "(F)V");
    }

    static void heal(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_heal();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_startRiding() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "startRiding", "method_5873", "startRiding", "m_7998_"), "(Lbsr;Z)Z");
    }

    static jboolean startRiding(const jobject& obj, const jobject& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_startRiding();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_dismountVehicle() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bJ", "removeVehicle", "method_29239", "dismountVehicle", "m_6038_"), "()V");
    }

    static void dismountVehicle(const jobject& obj) {
                
       const auto methodID = methodID_dismountVehicle();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getPitch() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "getViewXRot", "method_5695", "getPitch", "m_5686_"), "(F)F");
    }

    static jfloat getPitch(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_getPitch();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getYaw() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "getViewYRot", "method_5705", "getYaw", "m_5675_"), "(F)F");
    }

    static jfloat getYaw(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_getYaw();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "tick", "method_5773", "tick", "m_8119_"), "()V");
    }

    static void tick(const jobject& obj) {
                
       const auto methodID = methodID_tick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getMoodPercentage() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getCurrentMood", "method_26269", "getMoodPercentage", "m_108762_"), "()F");
    }

    static jfloat getMoodPercentage(const jobject& obj) {
                
       const auto methodID = methodID_getMoodPercentage();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_sendMovementPackets() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("E", "sendPosition", "method_3136", "sendMovementPackets", "m_108640_"), "()V");
    }

    static void sendMovementPackets(const jobject& obj) {
                
       const auto methodID = methodID_sendMovementPackets();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_sendSprintingPacket() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("F", "sendIsSprintingIfNeeded", "method_46742", "sendSprintingPacket", "m_254869_"), "()V");
    }

    static void sendSprintingPacket(const jobject& obj) {
                
       const auto methodID = methodID_sendSprintingPacket();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_dropSelectedItem() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "drop", "method_7290", "dropSelectedItem", "m_108700_"), "(Z)Z");
    }

    static jboolean dropSelectedItem(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_dropSelectedItem();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_swingHand() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "swing", "method_6104", "swingHand", "m_6674_"), "(Lbqq;)V");
    }

    static void swingHand(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_swingHand();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_requestRespawn() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("fW", "respawn", "method_7331", "requestRespawn", "m_7583_"), "()V");
    }

    static void requestRespawn(const jobject& obj) {
                
       const auto methodID = methodID_requestRespawn();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_applyDamage() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "actuallyHurt", "method_6074", "applyDamage", "m_6475_"), "(Lbrk;F)V");
    }

    static void applyDamage(const jobject& obj, const jobject& arg0, const jfloat& arg1) {
                
       const auto methodID = methodID_applyDamage();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_closeHandledScreen() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("s", "closeContainer", "method_7346", "closeHandledScreen", "m_6915_"), "()V");
    }

    static void closeHandledScreen(const jobject& obj) {
                
       const auto methodID = methodID_closeHandledScreen();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_closeScreen() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "clientSideCloseContainer", "method_3137", "closeScreen", "m_108763_"), "()V");
    }

    static void closeScreen(const jobject& obj) {
                
       const auto methodID = methodID_closeScreen();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_updateHealth() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("H", "hurtTo", "method_3138", "updateHealth", "m_108760_"), "(F)V");
    }

    static void updateHealth(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_updateHealth();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_sendAbilitiesUpdate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("z", "onUpdateAbilities", "method_7355", "sendAbilitiesUpdate", "m_6885_"), "()V");
    }

    static void sendAbilitiesUpdate(const jobject& obj) {
                
       const auto methodID = methodID_sendAbilitiesUpdate();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_isMainPlayer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "isLocalPlayer", "method_7340", "isMainPlayer", "m_7578_"), "()Z");
    }

    static jboolean isMainPlayer(const jobject& obj) {
                
       const auto methodID = methodID_isMainPlayer();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isHoldingOntoLadder() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("fz", "isSuppressingSlidingDownLadder", "method_21754", "isHoldingOntoLadder", "m_5791_"), "()Z");
    }

    static jboolean isHoldingOntoLadder(const jobject& obj) {
                
       const auto methodID = methodID_isHoldingOntoLadder();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_shouldSpawnSprintingParticles() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("br", "canSpawnSprintParticle", "method_27298", "shouldSpawnSprintingParticles", "m_5843_"), "()Z");
    }

    static jboolean shouldSpawnSprintingParticles(const jobject& obj) {
                
       const auto methodID = methodID_shouldSpawnSprintingParticles();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_startRidingJump() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "sendRidingJump", "method_3133", "startRidingJump", "m_108765_"), "()V");
    }

    static void startRidingJump(const jobject& obj) {
                
       const auto methodID = methodID_startRidingJump();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_openRidingInventory() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "sendOpenInventory", "method_3132", "openRidingInventory", "m_108628_"), "()V");
    }

    static void openRidingInventory(const jobject& obj) {
                
       const auto methodID = methodID_openRidingInventory();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getStatHandler() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "getStats", "method_3143", "getStatHandler", "m_108630_"), "()Lawa;");
    }

    static jobject getStatHandler(const jobject& obj) {
                
       const auto methodID = methodID_getStatHandler();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getRecipeBook() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("m", "getRecipeBook", "method_3130", "getRecipeBook", "m_108631_"), "()Lfga;");
    }

    static jobject getRecipeBook(const jobject& obj) {
                
       const auto methodID = methodID_getRecipeBook();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_onRecipeDisplayed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "removeRecipeHighlight", "method_3141", "onRecipeDisplayed", "m_108675_"), "(Lczb;)V");
    }

    static void onRecipeDisplayed(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onRecipeDisplayed();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getPermissionLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("G", "getPermissionLevel", "method_5691", "getPermissionLevel", "m_8088_"), "()I");
    }

    static jint getPermissionLevel(const jobject& obj) {
                
       const auto methodID = methodID_getPermissionLevel();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_setClientPermissionLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setPermissionLevel", "method_3147", "setClientPermissionLevel", "m_108648_"), "(I)V");
    }

    static void setClientPermissionLevel(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_setClientPermissionLevel();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_sendMessage() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "displayClientMessage", "method_7353", "sendMessage", "m_5661_"), "(Lwz;Z)V");
    }

    static void sendMessage(const jobject& obj, const jobject& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_sendMessage();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_pushOutOfBlocks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "moveTowardsClosestSpace", "method_30673", "pushOutOfBlocks", "m_108704_"), "(DD)V");
    }

    static void pushOutOfBlocks(const jobject& obj, const jdouble& arg0, const jdouble& arg1) {
                
       const auto methodID = methodID_pushOutOfBlocks();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_wouldCollideAt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "suffocatesAt", "method_30674", "wouldCollideAt", "m_108746_"), "(Ljd;)Z");
    }

    static jboolean wouldCollideAt(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_wouldCollideAt();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setExperience() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setExperienceValues", "method_3145", "setExperience", "m_108644_"), "(FII)V");
    }

    static void setExperience(const jobject& obj, const jfloat& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_setExperience();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__sendMessage() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "sendSystemMessage", "method_43496", "sendMessage", "m_213846_"), "(Lwz;)V");
    }

    static void _sendMessage(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__sendMessage();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_handleStatus() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "handleEntityEvent", "method_5711", "handleStatus", "m_7822_"), "(B)V");
    }

    static void handleStatus(const jobject& obj, const jbyte& arg0) {
                
       const auto methodID = methodID_handleStatus();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setShowsDeathScreen() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setShowDeathScreen", "method_22420", "setShowsDeathScreen", "m_108711_"), "(Z)V");
    }

    static void setShowsDeathScreen(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setShowsDeathScreen();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__showsDeathScreen() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("o", "shouldShowDeathScreen", "method_22419", "showsDeathScreen", "m_108632_"), "()Z");
    }

    static jboolean _showsDeathScreen(const jobject& obj) {
                
       const auto methodID = methodID__showsDeathScreen();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setLimitedCraftingEnabled() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("x", "setDoLimitedCrafting", "method_53848", "setLimitedCraftingEnabled", "m_294300_"), "(Z)V");
    }

    static void setLimitedCraftingEnabled(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setLimitedCraftingEnabled();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isLimitedCraftingEnabled() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("p", "getDoLimitedCrafting", "method_53847", "isLimitedCraftingEnabled", "m_295166_"), "()Z");
    }

    static jboolean isLimitedCraftingEnabled(const jobject& obj) {
                
       const auto methodID = methodID_isLimitedCraftingEnabled();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_playSound() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "playSound", "method_5783", "playSound", "m_5496_"), "(Lavo;FF)V");
    }

    static void playSound(const jobject& obj, const jobject& arg0, const jfloat& arg1, const jfloat& arg2) {
                
       const auto methodID = methodID_playSound();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_playSoundToPlayer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "playNotifySound", "method_17356", "playSoundToPlayer", "m_6330_"), "(Lavo;Lavq;FF)V");
    }

    static void playSoundToPlayer(const jobject& obj, const jobject& arg0, const jobject& arg1, const jfloat& arg2, const jfloat& arg3) {
                
       const auto methodID = methodID_playSoundToPlayer();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_canMoveVoluntarily() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("db", "isEffectiveAi", "method_6034", "canMoveVoluntarily", "m_21515_"), "()Z");
    }

    static jboolean canMoveVoluntarily(const jobject& obj) {
                
       const auto methodID = methodID_canMoveVoluntarily();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setCurrentHand() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "startUsingItem", "method_6019", "setCurrentHand", "m_6672_"), "(Lbqq;)V");
    }

    static void setCurrentHand(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setCurrentHand();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isUsingItem() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("fr", "isUsingItem", "method_6115", "isUsingItem", "m_6117_"), "()Z");
    }

    static jboolean isUsingItem(const jobject& obj) {
                
       const auto methodID = methodID_isUsingItem();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_clearActiveItem() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("fx", "stopUsingItem", "method_6021", "clearActiveItem", "m_5810_"), "()V");
    }

    static void clearActiveItem(const jobject& obj) {
                
       const auto methodID = methodID_clearActiveItem();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getActiveHand() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("fs", "getUsedItemHand", "method_6058", "getActiveHand", "m_7655_"), "()Lbqq;");
    }

    static jobject getActiveHand(const jobject& obj) {
                
       const auto methodID = methodID_getActiveHand();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_onTrackedDataSet() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onSyncedDataUpdated", "method_5674", "onTrackedDataSet", "m_7350_"), "(Lajw;)V");
    }

    static void onTrackedDataSet(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onTrackedDataSet();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getJumpingMount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("q", "jumpableVehicle", "method_45773", "getJumpingMount", "m_245714_"), "()Lbty;");
    }

    static jobject getJumpingMount(const jobject& obj) {
                
       const auto methodID = methodID_getJumpingMount();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getMountJumpStrength() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("v", "getJumpRidingScale", "method_3151", "getMountJumpStrength", "m_108634_"), "()F");
    }

    static jfloat getMountJumpStrength(const jobject& obj) {
                
       const auto methodID = methodID_getMountJumpStrength();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_shouldFilterText() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("Z", "isTextFilteringEnabled", "method_33793", "shouldFilterText", "m_143387_"), "()Z");
    }

    static jboolean shouldFilterText(const jobject& obj) {
                
       const auto methodID = methodID_shouldFilterText();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_openEditSignScreen() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "openTextEdit", "method_7311", "openEditSignScreen", "m_7739_"), "(Ldrs;Z)V");
    }

    static void openEditSignScreen(const jobject& obj, const jobject& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_openEditSignScreen();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_openCommandBlockMinecartScreen() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "openMinecartCommandBlock", "method_7257", "openCommandBlockMinecartScreen", "m_7907_"), "(Ldbx;)V");
    }

    static void openCommandBlockMinecartScreen(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_openCommandBlockMinecartScreen();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_openCommandBlockScreen() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "openCommandBlock", "method_7323", "openCommandBlockScreen", "m_7698_"), "(Ldqr;)V");
    }

    static void openCommandBlockScreen(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_openCommandBlockScreen();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_openStructureBlockScreen() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "openStructureBlock", "method_7303", "openStructureBlockScreen", "m_5966_"), "(Ldrx;)V");
    }

    static void openStructureBlockScreen(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_openStructureBlockScreen();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_openJigsawScreen() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "openJigsawBlock", "method_16354", "openJigsawScreen", "m_7569_"), "(Ldri;)V");
    }

    static void openJigsawScreen(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_openJigsawScreen();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_useBook() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "openItemGui", "method_7315", "useBook", "m_6986_"), "(Lcuq;Lbqq;)V");
    }

    static void useBook(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_useBook();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_addCritParticles() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "crit", "method_7277", "addCritParticles", "m_5704_"), "(Lbsr;)V");
    }

    static void addCritParticles(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addCritParticles();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_addEnchantedHitParticles() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "magicCrit", "method_7304", "addEnchantedHitParticles", "m_5700_"), "(Lbsr;)V");
    }

    static void addEnchantedHitParticles(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addEnchantedHitParticles();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isSneaking() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bW", "isShiftKeyDown", "method_5715", "isSneaking", "m_6144_"), "()Z");
    }

    static jboolean isSneaking(const jobject& obj) {
                
       const auto methodID = methodID_isSneaking();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isInSneakingPose() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("cb", "isCrouching", "method_18276", "isInSneakingPose", "m_6047_"), "()Z");
    }

    static jboolean isInSneakingPose(const jobject& obj) {
                
       const auto methodID = methodID_isInSneakingPose();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_shouldSlowDown() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("w", "isMovingSlowly", "method_20303", "shouldSlowDown", "m_108635_"), "()Z");
    }

    static jboolean shouldSlowDown(const jobject& obj) {
                
       const auto methodID = methodID_shouldSlowDown();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_tickNewAi() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("fm", "serverAiStep", "method_6023", "tickNewAi", "m_6140_"), "()V");
    }

    static void tickNewAi(const jobject& obj) {
                
       const auto methodID = methodID_tickNewAi();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_isCamera() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("x", "isControlledCamera", "method_3134", "isCamera", "m_108636_"), "()Z");
    }

    static jboolean isCamera(const jobject& obj) {
                
       const auto methodID = methodID_isCamera();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_init() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("y", "resetPos", "method_33689", "init", "m_172530_"), "()V");
    }

    static void init(const jobject& obj) {
                
       const auto methodID = methodID_init();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_tickMovement() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("m_", "aiStep", "method_6007", "tickMovement", "m_8107_"), "()V");
    }

    static void tickMovement(const jobject& obj) {
                
       const auto methodID = methodID_tickMovement();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getCurrentPortalEffect() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("A", "getActivePortalLocalTransition", "method_60886", "getCurrentPortalEffect", "m_339624_"), "()Ldlr$a;");
    }

    static jobject getCurrentPortalEffect(const jobject& obj) {
                
       const auto methodID = methodID_getCurrentPortalEffect();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_updatePostDeath() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("ed", "tickDeath", "method_6108", "updatePostDeath", "m_6153_"), "()V");
    }

    static void updatePostDeath(const jobject& obj) {
                
       const auto methodID = methodID_updatePostDeath();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_tickNausea() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("y", "handleConfusionTransitionEffect", "method_60887", "tickNausea", "m_340509_"), "(Z)V");
    }

    static void tickNausea(const jobject& obj, const jboolean& arg0) {
       const auto methodID = methodID_tickNausea();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_tickRiding() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("u", "rideTick", "method_5842", "tickRiding", "m_6083_"), "()V");
    }

    static void tickRiding(const jobject& obj) {
                
       const auto methodID = methodID_tickRiding();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_isRiding() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("B", "isHandsBusy", "method_3144", "isRiding", "m_108637_"), "()Z");
    }

    static jboolean isRiding(const jobject& obj) {
                
       const auto methodID = methodID_isRiding();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_removeStatusEffectInternal() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "removeEffectNoUpdate", "method_6111", "removeStatusEffectInternal", "m_6234_"), "(Ljm;)Lbrz;");
    }

    static jobject removeStatusEffectInternal(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_removeStatusEffectInternal();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_move() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "move", "method_5784", "move", "m_6478_"), "(Lbts;Lexc;)V");
    }

    static void move(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_move();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isAutoJumpEnabled() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("C", "isAutoJumpEnabled", "method_3149", "isAutoJumpEnabled", "m_108638_"), "()Z");
    }

    static jboolean isAutoJumpEnabled(const jobject& obj) {
                
       const auto methodID = methodID_isAutoJumpEnabled();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_autoJump() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "updateAutoJump", "method_3148", "autoJump", "m_108743_"), "(FF)V");
    }

    static void autoJump(const jobject& obj, const jfloat& arg0, const jfloat& arg1) {
                
       const auto methodID = methodID_autoJump();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_hasCollidedSoftly() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "isHorizontalCollisionMinor", "method_39759", "hasCollidedSoftly", "m_196406_"), "(Lexc;)Z");
    }

    static jboolean hasCollidedSoftly(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_hasCollidedSoftly();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_shouldAutoJump() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("H", "canAutoJump", "method_22119", "shouldAutoJump", "m_108731_"), "()Z");
    }

    static jboolean shouldAutoJump(const jobject& obj) {
                
       const auto methodID = methodID_shouldAutoJump();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasMovementInput() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("I", "isMoving", "method_22120", "hasMovementInput", "m_108732_"), "()Z");
    }

    static jboolean hasMovementInput(const jobject& obj) {
                
       const auto methodID = methodID_hasMovementInput();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_canStartSprinting() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("J", "canStartSprinting", "method_48300", "canStartSprinting", "m_264082_"), "()Z");
    }

    static jboolean canStartSprinting(const jobject& obj) {
                
       const auto methodID = methodID_canStartSprinting();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_canVehicleSprint() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "vehicleCanSprint", "method_48301", "canVehicleSprint", "m_264231_"), "(Lbsr;)Z");
    }

    static jboolean canVehicleSprint(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_canVehicleSprint();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isWalking() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("L", "hasEnoughImpulseToStartSprinting", "method_20623", "isWalking", "m_108733_"), "()Z");
    }

    static jboolean isWalking(const jobject& obj) {
                
       const auto methodID = methodID_isWalking();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_canSprint() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("N", "hasEnoughFoodToStartSprinting", "method_46743", "canSprint", "m_255269_"), "()Z");
    }

    static jboolean canSprint(const jobject& obj) {
                
       const auto methodID = methodID_canSprint();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getUnderwaterVisibility() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("D", "getWaterVision", "method_3140", "getUnderwaterVisibility", "m_108639_"), "()F");
    }

    static jfloat getUnderwaterVisibility(const jobject& obj) {
                
       const auto methodID = methodID_getUnderwaterVisibility();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_onGameModeChanged() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onGameModeChanged", "method_51889", "onGameModeChanged", "m_287171_"), "(Ldct;)V");
    }

    static void onGameModeChanged(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onGameModeChanged();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isSubmergedInWater() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bk", "isUnderWater", "method_5869", "isSubmergedInWater", "m_5842_"), "()Z");
    }

    static jboolean isSubmergedInWater(const jobject& obj) {
                
       const auto methodID = methodID_isSubmergedInWater();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_updateWaterSubmersionState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("fQ", "updateIsUnderwater", "method_7295", "updateWaterSubmersionState", "m_7602_"), "()Z");
    }

    static jboolean updateWaterSubmersionState(const jobject& obj) {
                
       const auto methodID = methodID_updateWaterSubmersionState();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getLeashPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("s", "getRopeHoldPosition", "method_30951", "getLeashPos", "m_7398_"), "(F)Lexc;");
    }

    static jobject getLeashPos(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_getLeashPos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onPickupSlotClick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateTutorialInventoryAction", "method_33592", "onPickupSlotClick", "m_141945_"), "(Lcuq;Lcuq;Lcqd;)V");
    }

    static void onPickupSlotClick(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_onPickupSlotClick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getBodyYaw() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("dF", "getVisualRotationYInDegrees", "method_43078", "getBodyYaw", "m_213816_"), "()F");
    }

    static jfloat getBodyYaw(const jobject& obj) {
                
       const auto methodID = methodID_getBodyYaw();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_NETWORK_CLIENTPLAYERENTITY_HPP