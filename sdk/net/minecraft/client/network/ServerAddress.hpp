// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_NETWORK_SERVERADDRESS_HPP
#define NET_MINECRAFT_CLIENT_NETWORK_SERVERADDRESS_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.network.ServerAddress
 * Remapped: gax
 */
namespace ServerAddress {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("gax", "net/minecraft/client/multiplayer/resolver/ServerAddress", "net/minecraft/class_639", "net/minecraft/client/network/ServerAddress", "net/minecraft/src/C_141678_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.client.network.ServerAddress#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_33416", "LOGGER", "f_171854_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ServerAddress#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_33416", "LOGGER", "f_171854_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ServerAddress#hostAndPort
    static jobject get_field_hostAndPort(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "hostAndPort", "field_33417", "hostAndPort", "f_171855_"), "Lcom/google/common/net/HostAndPort;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ServerAddress#hostAndPort
    static void set_field_hostAndPort(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "hostAndPort", "field_33417", "hostAndPort", "f_171855_"), "Lcom/google/common/net/HostAndPort;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for static private field net.minecraft.client.network.ServerAddress#INVALID
    [[maybe_unused]] static jobject get_field_INVALID() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "INVALID", "field_33418", "INVALID", "f_171856_"), "Lgax;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ServerAddress#INVALID
    [[maybe_unused]] static void set_field_INVALID(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "INVALID", "field_33418", "INVALID", "f_171856_"), "Lgax;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_getAddress() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getHost", "method_2952", "getAddress", "m_171863_"), "()Ljava/lang/String;");
    }

    static jobject getAddress(const jobject& obj) {
                
       const auto methodID = methodID_getAddress();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getPort() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getPort", "method_2954", "getPort", "m_171866_"), "()I");
    }

    static jint getPort(const jobject& obj) {
                
       const auto methodID = methodID_getPort();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_parse() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "parseString", "method_2950", "parse", "m_171864_"), "(Ljava/lang/String;)Lgax;");
    }

    static jobject parse(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_parse();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_isValid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "isValidAddress", "method_36224", "isValid", "m_171867_"), "(Ljava/lang/String;)Z");
    }

    static jboolean isValid(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_isValid();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_portOrDefault() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "parsePort", "method_2951", "portOrDefault", "m_171869_"), "(Ljava/lang/String;)I");
    }

    static jint portOrDefault(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_portOrDefault();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_NETWORK_SERVERADDRESS_HPP