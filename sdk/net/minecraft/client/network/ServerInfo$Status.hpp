// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_NETWORK_SERVERINFO$STATUS_HPP
#define NET_MINECRAFT_CLIENT_NETWORK_SERVERINFO$STATUS_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.network.ServerInfo$Status
 * Remapped: fzt$b
 */
namespace ServerInfo$Status {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("fzt$b", "net/minecraft/client/multiplayer/ServerData$State", "net/minecraft/class_642$class_9083", "net/minecraft/client/network/ServerInfo$Status", "net/minecraft/src/C_3908_$C_313599_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.client.network.ServerInfo$Status#INITIAL
    [[maybe_unused]] static jobject get_field_INITIAL() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "INITIAL", "field_47880", "INITIAL", "INITIAL"), "Lfzt$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.network.ServerInfo$Status#INITIAL
    [[maybe_unused]] static void set_field_INITIAL(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "INITIAL", "field_47880", "INITIAL", "INITIAL"), "Lfzt$b;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.client.network.ServerInfo$Status#PINGING
    [[maybe_unused]] static jobject get_field_PINGING() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "PINGING", "field_47881", "PINGING", "PINGING"), "Lfzt$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.network.ServerInfo$Status#PINGING
    [[maybe_unused]] static void set_field_PINGING(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "PINGING", "field_47881", "PINGING", "PINGING"), "Lfzt$b;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.client.network.ServerInfo$Status#UNREACHABLE
    [[maybe_unused]] static jobject get_field_UNREACHABLE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "UNREACHABLE", "field_47882", "UNREACHABLE", "UNREACHABLE"), "Lfzt$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.network.ServerInfo$Status#UNREACHABLE
    [[maybe_unused]] static void set_field_UNREACHABLE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "UNREACHABLE", "field_47882", "UNREACHABLE", "UNREACHABLE"), "Lfzt$b;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.client.network.ServerInfo$Status#INCOMPATIBLE
    [[maybe_unused]] static jobject get_field_INCOMPATIBLE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "INCOMPATIBLE", "field_47883", "INCOMPATIBLE", "INCOMPATIBLE"), "Lfzt$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.network.ServerInfo$Status#INCOMPATIBLE
    [[maybe_unused]] static void set_field_INCOMPATIBLE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "INCOMPATIBLE", "field_47883", "INCOMPATIBLE", "INCOMPATIBLE"), "Lfzt$b;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.client.network.ServerInfo$Status#SUCCESSFUL
    [[maybe_unused]] static jobject get_field_SUCCESSFUL() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "SUCCESSFUL", "field_47884", "SUCCESSFUL", "SUCCESSFUL"), "Lfzt$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.network.ServerInfo$Status#SUCCESSFUL
    [[maybe_unused]] static void set_field_SUCCESSFUL(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "SUCCESSFUL", "field_47884", "SUCCESSFUL", "SUCCESSFUL"), "Lfzt$b;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_values() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("values", "values", "values", "values", "values"), "()[Lfzt$b;");
    }

    static jobject values() {
       const auto clazz = self();
       const auto methodID = methodID_values();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_valueOf() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("valueOf", "valueOf", "valueOf", "valueOf", "valueOf"), "(Ljava/lang/String;)Lfzt$b;");
    }

    static jobject valueOf(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_valueOf();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_NETWORK_SERVERINFO$STATUS_HPP