// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_NETWORK_PENDINGUPDATEMANAGER_HPP
#define NET_MINECRAFT_CLIENT_NETWORK_PENDINGUPDATEMANAGER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.network.PendingUpdateManager
 * Remapped: gas
 */
namespace PendingUpdateManager {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("gas", "net/minecraft/client/multiplayer/prediction/BlockStatePredictionHandler", "net/minecraft/class_7202", "net/minecraft/client/network/PendingUpdateManager", "net/minecraft/src/C_213404_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.client.network.PendingUpdateManager#blockPosToPendingUpdate
    static jobject get_field_blockPosToPendingUpdate(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "serverVerifiedStates", "field_37953", "blockPosToPendingUpdate", "f_233851_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectOpenHashMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.PendingUpdateManager#blockPosToPendingUpdate
    static void set_field_blockPosToPendingUpdate(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "serverVerifiedStates", "field_37953", "blockPosToPendingUpdate", "f_233851_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectOpenHashMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.PendingUpdateManager#sequence
    static jint get_field_sequence(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "currentSequenceNr", "field_37954", "sequence", "f_233852_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.PendingUpdateManager#sequence
    static void set_field_sequence(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "currentSequenceNr", "field_37954", "sequence", "f_233852_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.PendingUpdateManager#pendingSequence
    static jboolean get_field_pendingSequence(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "isPredicting", "field_37955", "pendingSequence", "f_233853_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.PendingUpdateManager#pendingSequence
    static void set_field_pendingSequence(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "isPredicting", "field_37955", "pendingSequence", "f_233853_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    static jmethodID methodID_addPendingUpdate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "retainKnownServerState", "method_41941", "addPendingUpdate", "m_233867_"), "(Ljd;Ldtc;Lgeb;)V");
    }

    static void addPendingUpdate(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_addPendingUpdate();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_hasPendingUpdate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateKnownServerState", "method_41940", "hasPendingUpdate", "m_233864_"), "(Ljd;Ldtc;)Z");
    }

    static jboolean hasPendingUpdate(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_hasPendingUpdate();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_processPendingUpdates() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "endPredictionsUpTo", "method_41938", "processPendingUpdates", "m_233856_"), "(ILfzf;)V");
    }

    static void processPendingUpdates(const jobject& obj, const jint& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_processPendingUpdates();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_incrementSequence() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "startPredicting", "method_41937", "incrementSequence", "m_233855_"), "()Lgas;");
    }

    static jobject incrementSequence(const jobject& obj) {
                
       const auto methodID = methodID_incrementSequence();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_close() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("close", "close", "", "", "close"), "()V");
    }

    static void close(const jobject& obj) {
                
       const auto methodID = methodID_close();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getSequence() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "currentSequence", "method_41942", "getSequence", "m_233871_"), "()I");
    }

    static jint getSequence(const jobject& obj) {
                
       const auto methodID = methodID_getSequence();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasPendingSequence() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "isPredicting", "method_41943", "hasPendingSequence", "m_233872_"), "()Z");
    }

    static jboolean hasPendingSequence(const jobject& obj) {
                
       const auto methodID = methodID_hasPendingSequence();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_NETWORK_PENDINGUPDATEMANAGER_HPP