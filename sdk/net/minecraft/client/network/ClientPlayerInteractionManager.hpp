// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_NETWORK_CLIENTPLAYERINTERACTIONMANAGER_HPP
#define NET_MINECRAFT_CLIENT_NETWORK_CLIENTPLAYERINTERACTIONMANAGER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.network.ClientPlayerInteractionManager
 * Remapped: fzo
 */
namespace ClientPlayerInteractionManager {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("fzo", "net/minecraft/client/multiplayer/MultiPlayerGameMode", "net/minecraft/class_636", "net/minecraft/client/network/ClientPlayerInteractionManager", "net/minecraft/src/C_3905_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.client.network.ClientPlayerInteractionManager#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_20316", "LOGGER", "f_105188_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerInteractionManager#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_20316", "LOGGER", "f_105188_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerInteractionManager#client
    static jobject get_field_client(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "minecraft", "field_3712", "client", "f_105189_"), "Lfgo;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerInteractionManager#client
    static void set_field_client(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "minecraft", "field_3712", "client", "f_105189_"), "Lfgo;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerInteractionManager#networkHandler
    static jobject get_field_networkHandler(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "connection", "field_3720", "networkHandler", "f_105190_"), "Lfzg;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerInteractionManager#networkHandler
    static void set_field_networkHandler(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "connection", "field_3720", "networkHandler", "f_105190_"), "Lfzg;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerInteractionManager#currentBreakingPos
    static jobject get_field_currentBreakingPos(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "destroyBlockPos", "field_3714", "currentBreakingPos", "f_105191_"), "Ljd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerInteractionManager#currentBreakingPos
    static void set_field_currentBreakingPos(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "destroyBlockPos", "field_3714", "currentBreakingPos", "f_105191_"), "Ljd;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerInteractionManager#selectedStack
    static jobject get_field_selectedStack(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "destroyingItem", "field_3718", "selectedStack", "f_105192_"), "Lcuq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerInteractionManager#selectedStack
    static void set_field_selectedStack(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "destroyingItem", "field_3718", "selectedStack", "f_105192_"), "Lcuq;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerInteractionManager#currentBreakingProgress
    static jfloat get_field_currentBreakingProgress(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "destroyProgress", "field_3715", "currentBreakingProgress", "f_105193_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerInteractionManager#currentBreakingProgress
    static void set_field_currentBreakingProgress(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "destroyProgress", "field_3715", "currentBreakingProgress", "f_105193_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerInteractionManager#blockBreakingSoundCooldown
    static jfloat get_field_blockBreakingSoundCooldown(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "destroyTicks", "field_3713", "blockBreakingSoundCooldown", "f_105194_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerInteractionManager#blockBreakingSoundCooldown
    static void set_field_blockBreakingSoundCooldown(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "destroyTicks", "field_3713", "blockBreakingSoundCooldown", "f_105194_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerInteractionManager#blockBreakingCooldown
    static jint get_field_blockBreakingCooldown(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "destroyDelay", "field_3716", "blockBreakingCooldown", "f_105195_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerInteractionManager#blockBreakingCooldown
    static void set_field_blockBreakingCooldown(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "destroyDelay", "field_3716", "blockBreakingCooldown", "f_105195_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerInteractionManager#breakingBlock
    static jboolean get_field_breakingBlock(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "isDestroying", "field_3717", "breakingBlock", "f_105196_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerInteractionManager#breakingBlock
    static void set_field_breakingBlock(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "isDestroying", "field_3717", "breakingBlock", "f_105196_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerInteractionManager#gameMode
    static jobject get_field_gameMode(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "localPlayerMode", "field_3719", "gameMode", "f_105197_"), "Ldct;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerInteractionManager#gameMode
    static void set_field_gameMode(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "localPlayerMode", "field_3719", "gameMode", "f_105197_"), "Ldct;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerInteractionManager#previousGameMode
    static jobject get_field_previousGameMode(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "previousLocalPlayerMode", "field_24608", "previousGameMode", "f_105198_"), "Ldct;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerInteractionManager#previousGameMode
    static void set_field_previousGameMode(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "previousLocalPlayerMode", "field_24608", "previousGameMode", "f_105198_"), "Ldct;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.network.ClientPlayerInteractionManager#lastSelectedSlot
    static jint get_field_lastSelectedSlot(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "carriedIndex", "field_3721", "lastSelectedSlot", "f_105200_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.network.ClientPlayerInteractionManager#lastSelectedSlot
    static void set_field_lastSelectedSlot(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "carriedIndex", "field_3721", "lastSelectedSlot", "f_105200_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    static jmethodID methodID_copyAbilities() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "adjustPlayer", "method_2903", "copyAbilities", "m_105221_"), "(Lcmx;)V");
    }

    static void copyAbilities(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_copyAbilities();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setGameModes() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setLocalMode", "method_32790", "setGameModes", "m_171805_"), "(Ldct;Ldct;)V");
    }

    static void setGameModes(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_setGameModes();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_setGameMode() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setLocalMode", "method_2907", "setGameMode", "m_105279_"), "(Ldct;)V");
    }

    static void setGameMode(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setGameMode();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_hasStatusBars() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "canHurtPlayer", "method_2908", "hasStatusBars", "m_105205_"), "()Z");
    }

    static jboolean hasStatusBars(const jobject& obj) {
                
       const auto methodID = methodID_hasStatusBars();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_breakBlock() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "destroyBlock", "method_2899", "breakBlock", "m_105267_"), "(Ljd;)Z");
    }

    static jboolean breakBlock(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_breakBlock();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_attackBlock() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "startDestroyBlock", "method_2910", "attackBlock", "m_105269_"), "(Ljd;Lji;)Z");
    }

    static jboolean attackBlock(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_attackBlock();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_cancelBlockBreaking() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "stopDestroyBlock", "method_2925", "cancelBlockBreaking", "m_105276_"), "()V");
    }

    static void cancelBlockBreaking(const jobject& obj) {
                
       const auto methodID = methodID_cancelBlockBreaking();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_updateBlockBreakingProgress() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "continueDestroyBlock", "method_2902", "updateBlockBreakingProgress", "m_105283_"), "(Ljd;Lji;)Z");
    }

    static jboolean updateBlockBreakingProgress(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_updateBlockBreakingProgress();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_sendSequencedPacket() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "startPrediction", "method_41931", "sendSequencedPacket", "m_233729_"), "(Lfzf;Lgat;)V");
    }

    static void sendSequencedPacket(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_sendSequencedPacket();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "tick", "method_2927", "tick", "m_105287_"), "()V");
    }

    static void tick(const jobject& obj) {
                
       const auto methodID = methodID_tick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_isCurrentlyBreaking() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "sameDestroyTarget", "method_2922", "isCurrentlyBreaking", "m_105281_"), "(Ljd;)Z");
    }

    static jboolean isCurrentlyBreaking(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isCurrentlyBreaking();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_syncSelectedSlot() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("m", "ensureHasSentCarriedItem", "method_2911", "syncSelectedSlot", "m_105297_"), "()V");
    }

    static void syncSelectedSlot(const jobject& obj) {
                
       const auto methodID = methodID_syncSelectedSlot();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_interactBlock() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "useItemOn", "method_2896", "interactBlock", "m_233732_"), "(Lgeb;Lbqq;Lewy;)Lbqr;");
    }

    static jobject interactBlock(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_interactBlock();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_interactBlockInternal() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "performUseItemOn", "method_41934", "interactBlockInternal", "m_233746_"), "(Lgeb;Lbqq;Lewy;)Lbqr;");
    }

    static jobject interactBlockInternal(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_interactBlockInternal();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_interactItem() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "useItem", "method_2919", "interactItem", "m_233721_"), "(Lcmx;Lbqq;)Lbqr;");
    }

    static jobject interactItem(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_interactItem();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_createPlayer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "createPlayer", "method_29357", "createPlayer", "m_105246_"), "(Lfzf;Lawa;Lfga;)Lgeb;");
    }

    static jobject createPlayer(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_createPlayer();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__createPlayer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "createPlayer", "method_2901", "createPlayer", "m_105250_"), "(Lfzf;Lawa;Lfga;ZZ)Lgeb;");
    }

    static jobject _createPlayer(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jboolean& arg3, const jboolean& arg4) {
                
       const auto methodID = methodID__createPlayer();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_attackEntity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "attack", "method_2918", "attackEntity", "m_105223_"), "(Lcmx;Lbsr;)V");
    }

    static void attackEntity(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_attackEntity();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_interactEntity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "interact", "method_2905", "interactEntity", "m_105226_"), "(Lcmx;Lbsr;Lbqq;)Lbqr;");
    }

    static jobject interactEntity(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_interactEntity();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_interactEntityAtLocation() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "interactAt", "method_2917", "interactEntityAtLocation", "m_105230_"), "(Lcmx;Lbsr;Lewz;Lbqq;)Lbqr;");
    }

    static jobject interactEntityAtLocation(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_interactEntityAtLocation();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_clickSlot() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleInventoryMouseClick", "method_2906", "clickSlot", "m_171799_"), "(IIILcqe;Lcmx;)V");
    }

    static void clickSlot(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2, const jobject& arg3, const jobject& arg4) {
                
       const auto methodID = methodID_clickSlot();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_clickRecipe() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handlePlaceRecipe", "method_2912", "clickRecipe", "m_105217_"), "(ILczb;Z)V");
    }

    static void clickRecipe(const jobject& obj, const jint& arg0, const jobject& arg1, const jboolean& arg2) {
                
       const auto methodID = methodID_clickRecipe();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_clickButton() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleInventoryButtonClick", "method_2900", "clickButton", "m_105208_"), "(II)V");
    }

    static void clickButton(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_clickButton();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_clickCreativeStack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleCreativeModeItemAdd", "method_2909", "clickCreativeStack", "m_105241_"), "(Lcuq;I)V");
    }

    static void clickCreativeStack(const jobject& obj, const jobject& arg0, const jint& arg1) {
                
       const auto methodID = methodID_clickCreativeStack();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_dropCreativeStack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleCreativeModeItemDrop", "method_2915", "dropCreativeStack", "m_105239_"), "(Lcuq;)V");
    }

    static void dropCreativeStack(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_dropCreativeStack();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_stopUsingItem() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "releaseUsingItem", "method_2897", "stopUsingItem", "m_105277_"), "(Lcmx;)V");
    }

    static void stopUsingItem(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_stopUsingItem();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_hasExperienceBar() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "hasExperience", "method_2913", "hasExperienceBar", "m_105288_"), "()Z");
    }

    static jboolean hasExperienceBar(const jobject& obj) {
                
       const auto methodID = methodID_hasExperienceBar();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasLimitedAttackSpeed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "hasMissTime", "method_2924", "hasLimitedAttackSpeed", "m_105289_"), "()Z");
    }

    static jboolean hasLimitedAttackSpeed(const jobject& obj) {
                
       const auto methodID = methodID_hasLimitedAttackSpeed();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasCreativeInventory() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "hasInfiniteItems", "method_2914", "hasCreativeInventory", "m_105290_"), "()Z");
    }

    static jboolean hasCreativeInventory(const jobject& obj) {
                
       const auto methodID = methodID_hasCreativeInventory();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasRidingInventory() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "isServerControlledInventory", "method_2895", "hasRidingInventory", "m_105292_"), "()Z");
    }

    static jboolean hasRidingInventory(const jobject& obj) {
                
       const auto methodID = methodID_hasRidingInventory();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isFlyingLocked() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "isAlwaysFlying", "method_2928", "isFlyingLocked", "m_105293_"), "()Z");
    }

    static jboolean isFlyingLocked(const jobject& obj) {
                
       const auto methodID = methodID_isFlyingLocked();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getPreviousGameMode() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "getPreviousPlayerMode", "method_28107", "getPreviousGameMode", "m_105294_"), "()Ldct;");
    }

    static jobject getPreviousGameMode(const jobject& obj) {
                
       const auto methodID = methodID_getPreviousGameMode();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getCurrentGameMode() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "getPlayerMode", "method_2920", "getCurrentGameMode", "m_105295_"), "()Ldct;");
    }

    static jobject getCurrentGameMode(const jobject& obj) {
                
       const auto methodID = methodID_getCurrentGameMode();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_isBreakingBlock() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "isDestroying", "method_2923", "isBreakingBlock", "m_105296_"), "()Z");
    }

    static jboolean isBreakingBlock(const jobject& obj) {
                
       const auto methodID = methodID_isBreakingBlock();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getBlockBreakingProgress() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "getDestroyStage", "method_51888", "getBlockBreakingProgress", "m_287167_"), "()I");
    }

    static jint getBlockBreakingProgress(const jobject& obj) {
                
       const auto methodID = methodID_getBlockBreakingProgress();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_pickFromInventory() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handlePickItem", "method_2916", "pickFromInventory", "m_105206_"), "(I)V");
    }

    static void pickFromInventory(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_pickFromInventory();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_slotChangedState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleSlotStateChanged", "method_54634", "slotChangedState", "m_307403_"), "(IIZ)V");
    }

    static void slotChangedState(const jobject& obj, const jint& arg0, const jint& arg1, const jboolean& arg2) {
                
       const auto methodID = methodID_slotChangedState();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_NETWORK_CLIENTPLAYERINTERACTIONMANAGER_HPP