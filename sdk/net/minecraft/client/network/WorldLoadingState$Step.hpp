// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_NETWORK_WORLDLOADINGSTATE$STEP_HPP
#define NET_MINECRAFT_CLIENT_NETWORK_WORLDLOADINGSTATE$STEP_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.network.WorldLoadingState$Step
 * Remapped: fzn$a
 */
namespace WorldLoadingState$Step {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("fzn$a", "net/minecraft/client/multiplayer/LevelLoadStatusManager$Status", "net/minecraft/class_8819$class_8820", "net/minecraft/client/network/WorldLoadingState$Step", "net/minecraft/src/C_301930_$C_302134_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.client.network.WorldLoadingState$Step#WAITING_FOR_SERVER
    [[maybe_unused]] static jobject get_field_WAITING_FOR_SERVER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "WAITING_FOR_SERVER", "field_46584", "WAITING_FOR_SERVER", "WAITING_FOR_SERVER"), "Lfzn$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.network.WorldLoadingState$Step#WAITING_FOR_SERVER
    [[maybe_unused]] static void set_field_WAITING_FOR_SERVER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "WAITING_FOR_SERVER", "field_46584", "WAITING_FOR_SERVER", "WAITING_FOR_SERVER"), "Lfzn$a;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.client.network.WorldLoadingState$Step#WAITING_FOR_PLAYER_CHUNK
    [[maybe_unused]] static jobject get_field_WAITING_FOR_PLAYER_CHUNK() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "WAITING_FOR_PLAYER_CHUNK", "field_46585", "WAITING_FOR_PLAYER_CHUNK", "WAITING_FOR_PLAYER_CHUNK"), "Lfzn$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.network.WorldLoadingState$Step#WAITING_FOR_PLAYER_CHUNK
    [[maybe_unused]] static void set_field_WAITING_FOR_PLAYER_CHUNK(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "WAITING_FOR_PLAYER_CHUNK", "field_46585", "WAITING_FOR_PLAYER_CHUNK", "WAITING_FOR_PLAYER_CHUNK"), "Lfzn$a;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.client.network.WorldLoadingState$Step#LEVEL_READY
    [[maybe_unused]] static jobject get_field_LEVEL_READY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "LEVEL_READY", "field_46586", "LEVEL_READY", "LEVEL_READY"), "Lfzn$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.client.network.WorldLoadingState$Step#LEVEL_READY
    [[maybe_unused]] static void set_field_LEVEL_READY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "LEVEL_READY", "field_46586", "LEVEL_READY", "LEVEL_READY"), "Lfzn$a;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_values() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("values", "values", "values", "values", "values"), "()[Lfzn$a;");
    }

    static jobject values() {
       const auto clazz = self();
       const auto methodID = methodID_values();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_valueOf() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("valueOf", "valueOf", "valueOf", "valueOf", "valueOf"), "(Ljava/lang/String;)Lfzn$a;");
    }

    static jobject valueOf(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_valueOf();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_NETWORK_WORLDLOADINGSTATE$STEP_HPP