// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_WORLD_BIOMECOLORCACHE_HPP
#define NET_MINECRAFT_CLIENT_WORLD_BIOMECOLORCACHE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.world.BiomeColorCache
 * Remapped: fhr
 */
namespace BiomeColorCache {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("fhr", "net/minecraft/client/color/block/BlockTintCache", "net/minecraft/class_4700", "net/minecraft/client/world/BiomeColorCache", "net/minecraft/src/C_3424_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.client.world.BiomeColorCache#MAX_ENTRY_SIZE
    [[maybe_unused]] static jint get_field_MAX_ENTRY_SIZE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "MAX_CACHE_ENTRIES", "field_32164", "MAX_ENTRY_SIZE", "f_168641_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.world.BiomeColorCache#MAX_ENTRY_SIZE
    [[maybe_unused]] static void set_field_MAX_ENTRY_SIZE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "MAX_CACHE_ENTRIES", "field_32164", "MAX_ENTRY_SIZE", "f_168641_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.client.world.BiomeColorCache#last
    static jobject get_field_last(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "latestChunkOnThread", "field_21519", "last", "f_92650_"), "Ljava/lang/ThreadLocal;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.world.BiomeColorCache#last
    static void set_field_last(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "latestChunkOnThread", "field_21519", "last", "f_92650_"), "Ljava/lang/ThreadLocal;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.world.BiomeColorCache#colors
    static jobject get_field_colors(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "cache", "field_21520", "colors", "f_92651_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectLinkedOpenHashMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.world.BiomeColorCache#colors
    static void set_field_colors(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "cache", "field_21520", "colors", "f_92651_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectLinkedOpenHashMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.world.BiomeColorCache#lock
    static jobject get_field_lock(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "lock", "field_21521", "lock", "f_92652_"), "Ljava/util/concurrent/locks/ReentrantReadWriteLock;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.world.BiomeColorCache#lock
    static void set_field_lock(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "lock", "field_21521", "lock", "f_92652_"), "Ljava/util/concurrent/locks/ReentrantReadWriteLock;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.world.BiomeColorCache#colorFactory
    static jobject get_field_colorFactory(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "source", "field_34795", "colorFactory", "f_193809_"), "Ljava/util/function/ToIntFunction;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.world.BiomeColorCache#colorFactory
    static void set_field_colorFactory(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "source", "field_34795", "colorFactory", "f_193809_"), "Ljava/util/function/ToIntFunction;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_getBiomeColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getColor", "method_23770", "getBiomeColor", "m_193812_"), "(Ljd;)I");
    }

    static jint getBiomeColor(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getBiomeColor();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_reset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "invalidateForChunk", "method_23769", "reset", "m_92655_"), "(II)V");
    }

    static void reset(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_reset();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__reset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "invalidateAll", "method_23768", "reset", "m_92654_"), "()V");
    }

    static void _reset(const jobject& obj) {
                
       const auto methodID = methodID__reset();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getColorArray() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "findOrCreateChunkCache", "method_23772", "getColorArray", "m_193814_"), "(II)Lfhr$a;");
    }

    static jobject getColorArray(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_getColorArray();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_WORLD_BIOMECOLORCACHE_HPP