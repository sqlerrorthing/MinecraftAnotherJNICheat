// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_WORLD_CLIENTWORLD_HPP
#define NET_MINECRAFT_CLIENT_WORLD_CLIENTWORLD_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.world.ClientWorld
 * Remapped: fzf
 */
namespace ClientWorld {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("fzf", "net/minecraft/client/multiplayer/ClientLevel", "net/minecraft/class_638", "net/minecraft/client/world/ClientWorld", "net/minecraft/src/C_3899_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.client.world.ClientWorld#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_37952", "LOGGER", "f_233600_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.world.ClientWorld#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_37952", "LOGGER", "f_233600_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.world.ClientWorld#PARTICLE_Y_OFFSET
    [[maybe_unused]] static jdouble get_field_PARTICLE_Y_OFFSET() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "FLUID_PARTICLE_SPAWN_OFFSET", "field_32641", "PARTICLE_Y_OFFSET", "f_171629_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.world.ClientWorld#PARTICLE_Y_OFFSET
    [[maybe_unused]] static void set_field_PARTICLE_Y_OFFSET(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "FLUID_PARTICLE_SPAWN_OFFSET", "field_32641", "PARTICLE_Y_OFFSET", "f_171629_"), "D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.world.ClientWorld#field_34805
    [[maybe_unused]] static jint get_field_field_34805() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "NORMAL_LIGHT_UPDATES_PER_FRAME", "field_34805", "field_34805", "f_194125_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.world.ClientWorld#field_34805
    [[maybe_unused]] static void set_field_field_34805(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "NORMAL_LIGHT_UPDATES_PER_FRAME", "field_34805", "field_34805", "f_194125_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.client.world.ClientWorld#field_34806
    [[maybe_unused]] static jint get_field_field_34806() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "LIGHT_UPDATE_QUEUE_SIZE_THRESHOLD", "field_34806", "field_34806", "f_194126_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.world.ClientWorld#field_34806
    [[maybe_unused]] static void set_field_field_34806(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "LIGHT_UPDATE_QUEUE_SIZE_THRESHOLD", "field_34806", "field_34806", "f_194126_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for default field net.minecraft.client.world.ClientWorld#entityList
    static jobject get_field_entityList(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "tickingEntities", "field_27733", "entityList", "f_171630_"), "Ldxm;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.client.world.ClientWorld#entityList
    static void set_field_entityList(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "tickingEntities", "field_27733", "entityList", "f_171630_"), "Ldxm;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.world.ClientWorld#entityManager
    static jobject get_field_entityManager(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "entityStorage", "field_27734", "entityManager", "f_171631_"), "Ldxs;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.world.ClientWorld#entityManager
    static void set_field_entityManager(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "entityStorage", "field_27734", "entityManager", "f_171631_"), "Ldxs;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.world.ClientWorld#networkHandler
    static jobject get_field_networkHandler(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("D", "connection", "field_3727", "networkHandler", "f_104561_"), "Lfzg;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.world.ClientWorld#networkHandler
    static void set_field_networkHandler(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("D", "connection", "field_3727", "networkHandler", "f_104561_"), "Lfzg;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.world.ClientWorld#worldRenderer
    static jobject get_field_worldRenderer(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("E", "levelRenderer", "field_17780", "worldRenderer", "f_104562_"), "Lgex;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.world.ClientWorld#worldRenderer
    static void set_field_worldRenderer(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("E", "levelRenderer", "field_17780", "worldRenderer", "f_104562_"), "Lgex;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.world.ClientWorld#clientWorldProperties
    static jobject get_field_clientWorldProperties(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("F", "clientLevelData", "field_24430", "clientWorldProperties", "f_104563_"), "Lfzf$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.world.ClientWorld#clientWorldProperties
    static void set_field_clientWorldProperties(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("F", "clientLevelData", "field_24430", "clientWorldProperties", "f_104563_"), "Lfzf$a;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.world.ClientWorld#dimensionEffects
    static jobject get_field_dimensionEffects(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("G", "effects", "field_24606", "dimensionEffects", "f_104564_"), "Lgeo;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.world.ClientWorld#dimensionEffects
    static void set_field_dimensionEffects(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("G", "effects", "field_24606", "dimensionEffects", "f_104564_"), "Lgeo;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.world.ClientWorld#tickManager
    static jobject get_field_tickManager(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("H", "tickRateManager", "field_47129", "tickManager", "f_303463_"), "Lbrc;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.world.ClientWorld#tickManager
    static void set_field_tickManager(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("H", "tickRateManager", "field_47129", "tickManager", "f_303463_"), "Lbrc;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.world.ClientWorld#client
    static jobject get_field_client(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("I", "minecraft", "field_3729", "client", "f_104565_"), "Lfgo;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.world.ClientWorld#client
    static void set_field_client(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("I", "minecraft", "field_3729", "client", "f_104565_"), "Lfgo;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.client.world.ClientWorld#players
    static jobject get_field_players(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("J", "players", "field_18226", "players", "f_104566_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.client.world.ClientWorld#players
    static void set_field_players(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("J", "players", "field_18226", "players", "f_104566_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.world.ClientWorld#mapStates
    static jobject get_field_mapStates(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("K", "mapData", "field_17675", "mapStates", "f_104556_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.world.ClientWorld#mapStates
    static void set_field_mapStates(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("K", "mapData", "field_17675", "mapStates", "f_104556_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for static private field net.minecraft.client.world.ClientWorld#field_32640
    [[maybe_unused]] static jlong get_field_field_32640() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("L", "CLOUD_COLOR", "field_32640", "field_32640", "f_171628_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticLongField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.world.ClientWorld#field_32640
    [[maybe_unused]] static void set_field_field_32640(const jlong &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("L", "CLOUD_COLOR", "field_32640", "field_32640", "f_171628_"), "J");
        return MinecraftSDK::env->SetStaticLongField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.client.world.ClientWorld#lightningTicksLeft
    static jint get_field_lightningTicksLeft(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("M", "skyFlashTime", "field_21526", "lightningTicksLeft", "f_104557_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.world.ClientWorld#lightningTicksLeft
    static void set_field_lightningTicksLeft(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("M", "skyFlashTime", "field_21526", "lightningTicksLeft", "f_104557_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.world.ClientWorld#colorCache
    static jobject get_field_colorCache(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("N", "tintCaches", "field_21527", "colorCache", "f_104558_"), "Lit/unimi/dsi/fastutil/objects/Object2ObjectArrayMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.world.ClientWorld#colorCache
    static void set_field_colorCache(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("N", "tintCaches", "field_21527", "colorCache", "f_104558_"), "Lit/unimi/dsi/fastutil/objects/Object2ObjectArrayMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.world.ClientWorld#chunkManager
    static jobject get_field_chunkManager(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("O", "chunkSource", "field_24605", "chunkManager", "f_104559_"), "Lfzb;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.world.ClientWorld#chunkManager
    static void set_field_chunkManager(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("O", "chunkSource", "field_24605", "chunkManager", "f_104559_"), "Lfzb;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.world.ClientWorld#chunkUpdaters
    static jobject get_field_chunkUpdaters(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("P", "lightUpdateQueue", "field_34804", "chunkUpdaters", "f_194122_"), "Ljava/util/Deque;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.world.ClientWorld#chunkUpdaters
    static void set_field_chunkUpdaters(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("P", "lightUpdateQueue", "field_34804", "chunkUpdaters", "f_194122_"), "Ljava/util/Deque;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.world.ClientWorld#simulationDistance
    static jint get_field_simulationDistance(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("Q", "serverSimulationDistance", "field_35163", "simulationDistance", "f_194123_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.world.ClientWorld#simulationDistance
    static void set_field_simulationDistance(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("Q", "serverSimulationDistance", "field_35163", "simulationDistance", "f_194123_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.world.ClientWorld#pendingUpdateManager
    static jobject get_field_pendingUpdateManager(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("R", "blockStatePredictionHandler", "field_37951", "pendingUpdateManager", "f_233599_"), "Lgas;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.world.ClientWorld#pendingUpdateManager
    static void set_field_pendingUpdateManager(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("R", "blockStatePredictionHandler", "field_37951", "pendingUpdateManager", "f_233599_"), "Lgas;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for static private field net.minecraft.client.world.ClientWorld#BLOCK_MARKER_ITEMS
    [[maybe_unused]] static jobject get_field_BLOCK_MARKER_ITEMS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("S", "MARKER_PARTICLE_ITEMS", "field_35432", "BLOCK_MARKER_ITEMS", "f_194124_"), "Ljava/util/Set;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.world.ClientWorld#BLOCK_MARKER_ITEMS
    [[maybe_unused]] static void set_field_BLOCK_MARKER_ITEMS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("S", "MARKER_PARTICLE_ITEMS", "field_35432", "BLOCK_MARKER_ITEMS", "f_194124_"), "Ljava/util/Set;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_handlePlayerActionResponse() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "handleBlockChangedAck", "method_41927", "handlePlayerActionResponse", "m_233651_"), "(I)V");
    }

    static void handlePlayerActionResponse(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_handlePlayerActionResponse();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_handleBlockUpdate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setServerVerifiedBlockState", "method_41928", "handleBlockUpdate", "m_233653_"), "(Ljd;Ldtc;I)V");
    }

    static void handleBlockUpdate(const jobject& obj, const jobject& arg0, const jobject& arg1, const jint& arg2) {
                
       const auto methodID = methodID_handleBlockUpdate();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_processPendingUpdate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "syncBlockState", "method_41926", "processPendingUpdate", "m_233647_"), "(Ljd;Ldtc;Lexc;)V");
    }

    static void processPendingUpdate(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_processPendingUpdate();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getPendingUpdateManager() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getBlockStatePredictionHandler", "method_41925", "getPendingUpdateManager", "m_233601_"), "()Lgas;");
    }

    static jobject getPendingUpdateManager(const jobject& obj) {
                
       const auto methodID = methodID_getPendingUpdateManager();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_setBlockState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setBlock", "method_30092", "setBlockState", "m_6933_"), "(Ljd;Ldtc;II)Z");
    }

    static jboolean setBlockState(const jobject& obj, const jobject& arg0, const jobject& arg1, const jint& arg2, const jint& arg3) {
                
       const auto methodID = methodID_setBlockState();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_enqueueChunkUpdate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "queueLightUpdate", "method_38536", "enqueueChunkUpdate", "m_194171_"), "(Ljava/lang/Runnable;)V");
    }

    static void enqueueChunkUpdate(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_enqueueChunkUpdate();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_runQueuedChunkUpdates() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "pollLightUpdates", "method_38534", "runQueuedChunkUpdates", "m_194141_"), "()V");
    }

    static void runQueuedChunkUpdates(const jobject& obj) {
                
       const auto methodID = methodID_runQueuedChunkUpdates();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasNoChunkUpdaters() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "isLightUpdateQueueEmpty", "method_38743", "hasNoChunkUpdaters", "m_194173_"), "()Z");
    }

    static jboolean hasNoChunkUpdaters(const jobject& obj) {
                
       const auto methodID = methodID_hasNoChunkUpdaters();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getDimensionEffects() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "effects", "method_28103", "getDimensionEffects", "m_104583_"), "()Lgeo;");
    }

    static jobject getDimensionEffects(const jobject& obj) {
                
       const auto methodID = methodID_getDimensionEffects();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "tick", "method_8441", "tick", "m_104726_"), "(Ljava/util/function/BooleanSupplier;)V");
    }

    static void tick(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_tick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_tickTime() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("n", "tickTime", "method_29090", "tickTime", "m_104826_"), "()V");
    }

    static void tickTime(const jobject& obj) {
                
       const auto methodID = methodID_tickTime();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_setTime() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setGameTime", "method_29089", "setTime", "m_104637_"), "(J)V");
    }

    static void setTime(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_setTime();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setTimeOfDay() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "setDayTime", "method_8435", "setTimeOfDay", "m_104746_"), "(J)V");
    }

    static void setTimeOfDay(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_setTimeOfDay();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getEntities() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "entitiesForRendering", "method_18112", "getEntities", "m_104735_"), "()Ljava/lang/Iterable;");
    }

    static jobject getEntities(const jobject& obj) {
                
       const auto methodID = methodID_getEntities();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_tickEntities() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "tickEntities", "method_18116", "tickEntities", "m_104804_"), "()V");
    }

    static void tickEntities(const jobject& obj) {
                
       const auto methodID = methodID_tickEntities();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_shouldUpdatePostDeath() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "shouldTickDeath", "method_38989", "shouldUpdatePostDeath", "m_183599_"), "(Lbsr;)Z");
    }

    static jboolean shouldUpdatePostDeath(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_shouldUpdatePostDeath();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_tickEntity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "tickNonPassenger", "method_18646", "tickEntity", "m_104639_"), "(Lbsr;)V");
    }

    static void tickEntity(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_tickEntity();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_tickPassenger() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "tickPassenger", "method_18647", "tickPassenger", "m_104641_"), "(Lbsr;Lbsr;)V");
    }

    static void tickPassenger(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_tickPassenger();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_unloadBlockEntities() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "unload", "method_18110", "unloadBlockEntities", "m_104665_"), "(Ldvi;)V");
    }

    static void unloadBlockEntities(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_unloadBlockEntities();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_resetChunkColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onChunkLoaded", "method_23782", "resetChunkColor", "m_171649_"), "(Ldcd;)V");
    }

    static void resetChunkColor(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_resetChunkColor();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_reloadColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "clearTintCaches", "method_23784", "reloadColor", "m_104810_"), "()V");
    }

    static void reloadColor(const jobject& obj) {
                
       const auto methodID = methodID_reloadColor();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_isChunkLoaded() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "hasChunk", "method_8393", "isChunkLoaded", "m_7232_"), "(II)Z");
    }

    static jboolean isChunkLoaded(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_isChunkLoaded();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getRegularEntityCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "getEntityCount", "method_18120", "getRegularEntityCount", "m_104813_"), "()I");
    }

    static jint getRegularEntityCount(const jobject& obj) {
                
       const auto methodID = methodID_getRegularEntityCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_addEntity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "addEntity", "method_53875", "addEntity", "m_104739_"), "(Lbsr;)V");
    }

    static void addEntity(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addEntity();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_removeEntity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "removeEntity", "method_2945", "removeEntity", "m_171642_"), "(ILbsr$c;)V");
    }

    static void removeEntity(const jobject& obj, const jint& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_removeEntity();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getEntityById() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getEntity", "method_8469", "getEntityById", "m_6815_"), "(I)Lbsr;");
    }

    static jobject getEntityById(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_getEntityById();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_disconnect() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("Y", "disconnect", "method_8525", "disconnect", "m_7462_"), "()V");
    }

    static void disconnect(const jobject& obj) {
                
       const auto methodID = methodID_disconnect();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_doRandomBlockDisplayTicks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "animateTick", "method_2941", "doRandomBlockDisplayTicks", "m_104784_"), "(III)V");
    }

    static void doRandomBlockDisplayTicks(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_doRandomBlockDisplayTicks();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getBlockParticle() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("p", "getMarkerParticleTarget", "method_35752", "getBlockParticle", "m_194187_"), "()Ldfy;");
    }

    static jobject getBlockParticle(const jobject& obj) {
                
       const auto methodID = methodID_getBlockParticle();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_randomBlockDisplayTick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "doAnimateTick", "method_2943", "randomBlockDisplayTick", "m_233612_"), "(IIIILayw;Ldfy;Ljd$a;)V");
    }

    static void randomBlockDisplayTick(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2, const jint& arg3, const jobject& arg4, const jobject& arg5, const jobject& arg6) {
                
       const auto methodID = methodID_randomBlockDisplayTick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    };
    
    static jmethodID methodID_addParticle() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "trySpawnDripParticles", "method_2938", "addParticle", "m_104689_"), "(Ljd;Ldtc;Llk;Z)V");
    }

    static void addParticle(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jboolean& arg3) {
                
       const auto methodID = methodID_addParticle();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID__addParticle() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "spawnParticle", "method_2948", "addParticle", "m_104694_"), "(Ljd;Llk;Lexv;D)V");
    }

    static void _addParticle(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jdouble& arg3) {
                
       const auto methodID = methodID__addParticle();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID___addParticle() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "spawnFluidParticle", "method_2932", "addParticle", "m_104592_"), "(DDDDDLlk;)V");
    }

    static void __addParticle(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2, const jdouble& arg3, const jdouble& arg4, const jobject& arg5) {
                
       const auto methodID = methodID___addParticle();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
    static jmethodID methodID_addDetailsToCrashReport() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "fillReportDetails", "method_8538", "addDetailsToCrashReport", "m_6026_"), "(Lo;)Lp;");
    }

    static jobject addDetailsToCrashReport(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addDetailsToCrashReport();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_playSound() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "playSeededSound", "method_8465", "playSound", "m_262808_"), "(Lcmx;DDDLjm;Lavq;FFJ)V");
    }

    static void playSound(const jobject& obj, const jobject& arg0, const jdouble& arg1, const jdouble& arg2, const jdouble& arg3, const jobject& arg4, const jobject& arg5, const jfloat& arg6, const jfloat& arg7, const jlong& arg8) {
                
       const auto methodID = methodID_playSound();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    };
    
    static jmethodID methodID_playSoundFromEntity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "playSeededSound", "method_8449", "playSoundFromEntity", "m_213890_"), "(Lcmx;Lbsr;Ljm;Lavq;FFJ)V");
    }

    static void playSoundFromEntity(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jfloat& arg4, const jfloat& arg5, const jlong& arg6) {
                
       const auto methodID = methodID_playSoundFromEntity();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    };
    
    static jmethodID methodID__playSoundFromEntity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "playLocalSound", "method_55116", "playSoundFromEntity", "m_307553_"), "(Lbsr;Lavo;Lavq;FF)V");
    }

    static void _playSoundFromEntity(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jfloat& arg3, const jfloat& arg4) {
                
       const auto methodID = methodID__playSoundFromEntity();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID__playSound() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "playLocalSound", "method_8486", "playSound", "m_7785_"), "(DDDLavo;Lavq;FFZ)V");
    }

    static void _playSound(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2, const jobject& arg3, const jobject& arg4, const jfloat& arg5, const jfloat& arg6, const jboolean& arg7) {
                
       const auto methodID = methodID__playSound();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    };
    
    static jmethodID methodID___playSound() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "playSound", "method_43207", "playSound", "m_233602_"), "(DDDLavo;Lavq;FFZJ)V");
    }

    static void __playSound(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2, const jobject& arg3, const jobject& arg4, const jfloat& arg5, const jfloat& arg6, const jboolean& arg7, const jlong& arg8) {
                
       const auto methodID = methodID___playSound();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    };
    
    static jmethodID methodID_addFireworkParticle() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "createFireworks", "method_8547", "addFireworkParticle", "m_7228_"), "(DDDDDDLjava/util/List;)V");
    }

    static void addFireworkParticle(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2, const jdouble& arg3, const jdouble& arg4, const jdouble& arg5, const jobject& arg6) {
                
       const auto methodID = methodID_addFireworkParticle();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    };
    
    static jmethodID methodID_sendPacket() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "sendPacketToServer", "method_8522", "sendPacket", "m_5503_"), "(Lzg;)V");
    }

    static void sendPacket(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_sendPacket();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getRecipeManager() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("r", "getRecipeManager", "method_8433", "getRecipeManager", "m_7465_"), "()Lczd;");
    }

    static jobject getRecipeManager(const jobject& obj) {
                
       const auto methodID = methodID_getRecipeManager();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getTickManager() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("s", "tickRateManager", "method_54719", "getTickManager", "m_304826_"), "()Lbrc;");
    }

    static jobject getTickManager(const jobject& obj) {
                
       const auto methodID = methodID_getTickManager();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getBlockTickScheduler() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("P", "getBlockTicks", "method_8397", "getBlockTickScheduler", "m_183326_"), "()Leyp;");
    }

    static jobject getBlockTickScheduler(const jobject& obj) {
                
       const auto methodID = methodID_getBlockTickScheduler();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getFluidTickScheduler() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("O", "getFluidTicks", "method_8405", "getFluidTickScheduler", "m_183324_"), "()Leyp;");
    }

    static jobject getFluidTickScheduler(const jobject& obj) {
                
       const auto methodID = methodID_getFluidTickScheduler();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getChunkManager() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "getChunkSource", "method_2935", "getChunkManager", "m_7726_"), "()Lfzb;");
    }

    static jobject getChunkManager(const jobject& obj) {
                
       const auto methodID = methodID_getChunkManager();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getMapState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getMapData", "method_17891", "getMapState", "m_7489_"), "(Leqr;)Leqt;");
    }

    static jobject getMapState(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getMapState();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_putClientsideMapState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "overrideMapData", "method_47437", "putClientsideMapState", "m_257583_"), "(Leqr;Leqt;)V");
    }

    static void putClientsideMapState(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_putClientsideMapState();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_putMapState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setMapData", "method_17890", "putMapState", "m_142325_"), "(Leqr;Leqt;)V");
    }

    static void putMapState(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_putMapState();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_increaseAndGetMapId() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("v", "getFreeMapId", "method_17889", "increaseAndGetMapId", "m_7354_"), "()Leqr;");
    }

    static jobject increaseAndGetMapId(const jobject& obj) {
                
       const auto methodID = methodID_increaseAndGetMapId();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getScoreboard() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("M", "getScoreboard", "method_8428", "getScoreboard", "m_6188_"), "()Leyg;");
    }

    static jobject getScoreboard(const jobject& obj) {
                
       const auto methodID = methodID_getScoreboard();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_updateListeners() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "sendBlockUpdated", "method_8413", "updateListeners", "m_7260_"), "(Ljd;Ldtc;Ldtc;I)V");
    }

    static void updateListeners(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jint& arg3) {
                
       const auto methodID = methodID_updateListeners();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_scheduleBlockRerenderIfNeeded() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setBlocksDirty", "method_16109", "scheduleBlockRerenderIfNeeded", "m_6550_"), "(Ljd;Ldtc;Ldtc;)V");
    }

    static void scheduleBlockRerenderIfNeeded(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_scheduleBlockRerenderIfNeeded();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_scheduleBlockRenders() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "setSectionDirtyWithNeighbors", "method_18113", "scheduleBlockRenders", "m_104793_"), "(III)V");
    }

    static void scheduleBlockRenders(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_scheduleBlockRenders();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_setBlockBreakingInfo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "destroyBlockProgress", "method_8517", "setBlockBreakingInfo", "m_6801_"), "(ILjd;I)V");
    }

    static void setBlockBreakingInfo(const jobject& obj, const jint& arg0, const jobject& arg1, const jint& arg2) {
                
       const auto methodID = methodID_setBlockBreakingInfo();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_syncGlobalEvent() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "globalLevelEvent", "method_8474", "syncGlobalEvent", "m_6798_"), "(ILjd;I)V");
    }

    static void syncGlobalEvent(const jobject& obj, const jint& arg0, const jobject& arg1, const jint& arg2) {
                
       const auto methodID = methodID_syncGlobalEvent();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_syncWorldEvent() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "levelEvent", "method_8444", "syncWorldEvent", "m_5898_"), "(Lcmx;ILjd;I)V");
    }

    static void syncWorldEvent(const jobject& obj, const jobject& arg0, const jint& arg1, const jobject& arg2, const jint& arg3) {
                
       const auto methodID = methodID_syncWorldEvent();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID____addParticle() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addParticle", "method_8406", "addParticle", "m_7106_"), "(Llk;DDDDDD)V");
    }

    static void ___addParticle(const jobject& obj, const jobject& arg0, const jdouble& arg1, const jdouble& arg2, const jdouble& arg3, const jdouble& arg4, const jdouble& arg5, const jdouble& arg6) {
                
       const auto methodID = methodID____addParticle();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    };
    
    static jmethodID methodID_____addParticle() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addParticle", "method_8466", "addParticle", "m_6493_"), "(Llk;ZDDDDDD)V");
    }

    static void ____addParticle(const jobject& obj, const jobject& arg0, const jboolean& arg1, const jdouble& arg2, const jdouble& arg3, const jdouble& arg4, const jdouble& arg5, const jdouble& arg6, const jdouble& arg7) {
                
       const auto methodID = methodID_____addParticle();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    };
    
    static jmethodID methodID_addImportantParticle() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "addAlwaysVisibleParticle", "method_8494", "addImportantParticle", "m_7107_"), "(Llk;DDDDDD)V");
    }

    static void addImportantParticle(const jobject& obj, const jobject& arg0, const jdouble& arg1, const jdouble& arg2, const jdouble& arg3, const jdouble& arg4, const jdouble& arg5, const jdouble& arg6) {
                
       const auto methodID = methodID_addImportantParticle();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    };
    
    static jmethodID methodID__addImportantParticle() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "addAlwaysVisibleParticle", "method_17452", "addImportantParticle", "m_6485_"), "(Llk;ZDDDDDD)V");
    }

    static void _addImportantParticle(const jobject& obj, const jobject& arg0, const jboolean& arg1, const jdouble& arg2, const jdouble& arg3, const jdouble& arg4, const jdouble& arg5, const jdouble& arg6, const jdouble& arg7) {
                
       const auto methodID = methodID__addImportantParticle();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    };
    
    static jmethodID methodID_getPlayers() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("x", "players", "method_18456", "getPlayers", "m_6907_"), "()Ljava/util/List;");
    }

    static jobject getPlayers(const jobject& obj) {
                
       const auto methodID = methodID_getPlayers();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getGeneratorStoredBiome() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getUncachedNoiseBiome", "method_22387", "getGeneratorStoredBiome", "m_203675_"), "(III)Ljm;");
    }

    static jobject getGeneratorStoredBiome(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_getGeneratorStoredBiome();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getSkyBrightness() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "getSkyDarken", "method_23783", "getSkyBrightness", "m_104805_"), "(F)F");
    }

    static jfloat getSkyBrightness(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_getSkyBrightness();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getSkyColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getSkyColor", "method_23777", "getSkyColor", "m_171660_"), "(Lexc;F)Lexc;");
    }

    static jobject getSkyColor(const jobject& obj, const jobject& arg0, const jfloat& arg1) {
                
       const auto methodID = methodID_getSkyColor();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getCloudsColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "getCloudColor", "method_23785", "getCloudsColor", "m_104808_"), "(F)Lexc;");
    }

    static jobject getCloudsColor(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_getCloudsColor();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getStarBrightness() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "getStarBrightness", "method_23787", "getStarBrightness", "m_104811_"), "(F)F");
    }

    static jfloat getStarBrightness(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_getStarBrightness();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getLightningTicksLeft() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "getSkyFlashTime", "method_23789", "getLightningTicksLeft", "m_104819_"), "()I");
    }

    static jint getLightningTicksLeft(const jobject& obj) {
                
       const auto methodID = methodID_getLightningTicksLeft();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_setLightningTicksLeft() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "setSkyFlashTime", "method_8509", "setLightningTicksLeft", "m_6580_"), "(I)V");
    }

    static void setLightningTicksLeft(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_setLightningTicksLeft();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getBrightness() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getShade", "method_24852", "getBrightness", "m_7717_"), "(Lji;Z)F");
    }

    static jfloat getBrightness(const jobject& obj, const jobject& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_getBrightness();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getBlockTint", "method_23752", "getColor", "m_6171_"), "(Ljd;Ldch;)I");
    }

    static jint getColor(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_getColor();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_calculateColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "calculateBlockTint", "method_23780", "calculateColor", "m_104762_"), "(Ljd;Ldch;)I");
    }

    static jint calculateColor(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_calculateColor();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_setSpawnPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setDefaultSpawnPos", "method_27873", "setSpawnPos", "m_104752_"), "(Ljd;F)V");
    }

    static void setSpawnPos(const jobject& obj, const jobject& arg0, const jfloat& arg1) {
                
       const auto methodID = methodID_setSpawnPos();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getLevelProperties() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "getLevelData", "method_28104", "getLevelProperties", "m_6106_"), "()Lfzf$a;");
    }

    static jobject getLevelProperties(const jobject& obj) {
                
       const auto methodID = methodID_getLevelProperties();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_emitGameEvent() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "gameEvent", "method_32888", "emitGameEvent", "m_214171_"), "(Ljm;Lexc;Ldxz$a;)V");
    }

    static void emitGameEvent(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_emitGameEvent();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getMapStates() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "getAllMapData", "method_35754", "getMapStates", "m_171684_"), "()Ljava/util/Map;");
    }

    static jobject getMapStates(const jobject& obj) {
                
       const auto methodID = methodID_getMapStates();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_putMapStates() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addMapData", "method_35753", "putMapStates", "m_171672_"), "(Ljava/util/Map;)V");
    }

    static void putMapStates(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_putMapStates();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getEntityLookup() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("G", "getEntities", "method_31592", "getEntityLookup", "m_142646_"), "()Ldxp;");
    }

    static jobject getEntityLookup(const jobject& obj) {
                
       const auto methodID = methodID_getEntityLookup();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_asString() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("I", "gatherChunkSourceStats", "method_31419", "asString", "m_46464_"), "()Ljava/lang/String;");
    }

    static jobject asString(const jobject& obj) {
                
       const auto methodID = methodID_asString();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_addBlockBreakParticles() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addDestroyBlockEffect", "method_31595", "addBlockBreakParticles", "m_142052_"), "(Ljd;Ldtc;)V");
    }

    static void addBlockBreakParticles(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_addBlockBreakParticles();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_setSimulationDistance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "setServerSimulationDistance", "method_39023", "setSimulationDistance", "m_194174_"), "(I)V");
    }

    static void setSimulationDistance(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_setSimulationDistance();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getSimulationDistance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("m", "getServerSimulationDistance", "method_39024", "getSimulationDistance", "m_194186_"), "()I");
    }

    static jint getSimulationDistance(const jobject& obj) {
                
       const auto methodID = methodID_getSimulationDistance();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getEnabledFeatures() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("J", "enabledFeatures", "method_45162", "getEnabledFeatures", "m_246046_"), "()Lcpl;");
    }

    static jobject getEnabledFeatures(const jobject& obj) {
                
       const auto methodID = methodID_getEnabledFeatures();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getBrewingRecipeRegistry() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("K", "potionBrewing", "method_59547", "getBrewingRecipeRegistry", "m_319308_"), "()Lcwt;");
    }

    static jobject getBrewingRecipeRegistry(const jobject& obj) {
                
       const auto methodID = methodID_getBrewingRecipeRegistry();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_WORLD_CLIENTWORLD_HPP