// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_WORLD_CLIENTCHUNKMANAGER_HPP
#define NET_MINECRAFT_CLIENT_WORLD_CLIENTCHUNKMANAGER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.world.ClientChunkManager
 * Remapped: fzb
 */
namespace ClientChunkManager {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("fzb", "net/minecraft/client/multiplayer/ClientChunkCache", "net/minecraft/class_631", "net/minecraft/client/world/ClientChunkManager", "net/minecraft/src/C_3895_"));
        }
        return cachedClass;
    };

    // getter for static default field net.minecraft.client.world.ClientChunkManager#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_3679", "LOGGER", "f_104407_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.client.world.ClientChunkManager#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_3679", "LOGGER", "f_104407_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.client.world.ClientChunkManager#emptyChunk
    static jobject get_field_emptyChunk(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "emptyChunk", "field_3676", "emptyChunk", "f_104408_"), "Ldvi;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.world.ClientChunkManager#emptyChunk
    static void set_field_emptyChunk(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "emptyChunk", "field_3676", "emptyChunk", "f_104408_"), "Ldvi;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.world.ClientChunkManager#lightingProvider
    static jobject get_field_lightingProvider(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "lightEngine", "field_3677", "lightingProvider", "f_104409_"), "Leot;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.world.ClientChunkManager#lightingProvider
    static void set_field_lightingProvider(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "lightEngine", "field_3677", "lightingProvider", "f_104409_"), "Leot;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.client.world.ClientChunkManager#chunks
    static jobject get_field_chunks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "storage", "field_16246", "chunks", "f_104410_"), "Lfzb$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.client.world.ClientChunkManager#chunks
    static void set_field_chunks(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "storage", "field_16246", "chunks", "f_104410_"), "Lfzb$a;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.client.world.ClientChunkManager#world
    static jobject get_field_world(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "level", "field_16525", "world", "f_104411_"), "Lfzf;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.client.world.ClientChunkManager#world
    static void set_field_world(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "level", "field_16525", "world", "f_104411_"), "Lfzf;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_getLightingProvider() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("p", "getLightEngine", "method_12130", "getLightingProvider", "m_7827_"), "()Leot;");
    }

    static jobject getLightingProvider(const jobject& obj) {
                
       const auto methodID = methodID_getLightingProvider();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_positionEquals() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "isValidChunk", "method_20181", "positionEquals", "m_104438_"), "(Ldvi;II)Z");
    }

    static jboolean positionEquals(const jobject& arg0, const jint& arg1, const jint& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_positionEquals();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_unload() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "drop", "method_2859", "unload", "m_104455_"), "(Ldcd;)V");
    }

    static void unload(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_unload();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getChunk() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getChunk", "method_2857", "getChunk", "m_7587_"), "(IILdvz;Z)Ldvi;");
    }

    static jobject getChunk(const jobject& obj, const jint& arg0, const jint& arg1, const jobject& arg2, const jboolean& arg3) {
                
       const auto methodID = methodID_getChunk();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_getWorld() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("q", "getLevel", "method_16399", "getWorld", "m_7653_"), "()Ldcc;");
    }

    static jobject getWorld(const jobject& obj) {
                
       const auto methodID = methodID_getWorld();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_onChunkBiomeData() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "replaceBiomes", "method_49630", "onChunkBiomeData", "m_274444_"), "(IILvw;)V");
    }

    static void onChunkBiomeData(const jobject& obj, const jint& arg0, const jint& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_onChunkBiomeData();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_loadChunkFromPacket() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "replaceWithPacketData", "method_16020", "loadChunkFromPacket", "m_194116_"), "(IILvw;Lub;Ljava/util/function/Consumer;)Ldvi;");
    }

    static jobject loadChunkFromPacket(const jobject& obj, const jint& arg0, const jint& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4) {
                
       const auto methodID = methodID_loadChunkFromPacket();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "tick", "method_12127", "tick", "m_201698_"), "(Ljava/util/function/BooleanSupplier;Z)V");
    }

    static void tick(const jobject& obj, const jobject& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_tick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_setChunkMapCenter() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "updateViewCenter", "method_20317", "setChunkMapCenter", "m_104459_"), "(II)V");
    }

    static void setChunkMapCenter(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_setChunkMapCenter();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_updateLoadDistance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateViewRadius", "method_20180", "updateLoadDistance", "m_104416_"), "(I)V");
    }

    static void updateLoadDistance(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_updateLoadDistance();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getChunkMapRadius() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "calculateStorageRange", "method_20230", "getChunkMapRadius", "m_104448_"), "(I)I");
    }

    static jint getChunkMapRadius(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getChunkMapRadius();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getDebugString() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "gatherStats", "method_12122", "getDebugString", "m_6754_"), "()Ljava/lang/String;");
    }

    static jobject getDebugString(const jobject& obj) {
                
       const auto methodID = methodID_getDebugString();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getLoadedChunkCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "getLoadedChunksCount", "method_14151", "getLoadedChunkCount", "m_8482_"), "()I");
    }

    static jint getLoadedChunkCount(const jobject& obj) {
                
       const auto methodID = methodID_getLoadedChunkCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_onLightUpdate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onLightUpdate", "method_12247", "onLightUpdate", "m_6506_"), "(Lddf;Lkf;)V");
    }

    static void onLightUpdate(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_onLightUpdate();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_WORLD_CLIENTCHUNKMANAGER_HPP