// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_WORLD_BIOMECOLORCACHE$COLORS_HPP
#define NET_MINECRAFT_CLIENT_WORLD_BIOMECOLORCACHE$COLORS_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.world.BiomeColorCache$Colors
 * Remapped: fhr$a
 */
namespace BiomeColorCache$Colors {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("fhr$a", "net/minecraft/client/color/block/BlockTintCache$CacheData", "net/minecraft/class_4700$class_6598", "net/minecraft/client/world/BiomeColorCache$Colors", "net/minecraft/src/C_3424_$C_183060_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.client.world.BiomeColorCache$Colors#colors
    static jobject get_field_colors(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "cache", "field_34796", "colors", "f_193817_"), "Lit/unimi/dsi/fastutil/ints/Int2ObjectArrayMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.world.BiomeColorCache$Colors#colors
    static void set_field_colors(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "cache", "field_34796", "colors", "f_193817_"), "Lit/unimi/dsi/fastutil/ints/Int2ObjectArrayMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.world.BiomeColorCache$Colors#lock
    static jobject get_field_lock(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "lock", "field_34797", "lock", "f_193818_"), "Ljava/util/concurrent/locks/ReentrantReadWriteLock;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.world.BiomeColorCache$Colors#lock
    static void set_field_lock(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "lock", "field_34797", "lock", "f_193818_"), "Ljava/util/concurrent/locks/ReentrantReadWriteLock;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for static private field net.minecraft.client.world.BiomeColorCache$Colors#XZ_COLORS_SIZE
    [[maybe_unused]] static jint get_field_XZ_COLORS_SIZE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "BLOCKS_PER_LAYER", "field_34798", "XZ_COLORS_SIZE", "f_193819_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.world.BiomeColorCache$Colors#XZ_COLORS_SIZE
    [[maybe_unused]] static void set_field_XZ_COLORS_SIZE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "BLOCKS_PER_LAYER", "field_34798", "XZ_COLORS_SIZE", "f_193819_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.client.world.BiomeColorCache$Colors#needsCacheRefresh
    static jboolean get_field_needsCacheRefresh(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "invalidated", "field_41610", "needsCacheRefresh", "f_262289_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.world.BiomeColorCache$Colors#needsCacheRefresh
    static void set_field_needsCacheRefresh(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "invalidated", "field_41610", "needsCacheRefresh", "f_262289_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    static jmethodID methodID_get() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getLayer", "method_38528", "get", "m_193823_"), "(I)[I");
    }

    static jint get(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_get();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_createDefault() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "allocateLayer", "method_38527", "createDefault", "m_193822_"), "()[I");
    }

    static jint createDefault(const jobject& obj) {
                
       const auto methodID = methodID_createDefault();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID__needsCacheRefresh() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isInvalidated", "method_47894", "needsCacheRefresh", "m_262488_"), "()Z");
    }

    static jboolean _needsCacheRefresh(const jobject& obj) {
                
       const auto methodID = methodID__needsCacheRefresh();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setNeedsCacheRefresh() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "invalidate", "method_47895", "setNeedsCacheRefresh", "m_262378_"), "()V");
    }

    static void setNeedsCacheRefresh(const jobject& obj) {
                
       const auto methodID = methodID_setNeedsCacheRefresh();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_WORLD_BIOMECOLORCACHE$COLORS_HPP