// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_CLIENT_RESOURCE_LANGUAGE_TRANSLATIONSTORAGE_HPP
#define NET_MINECRAFT_CLIENT_RESOURCE_LANGUAGE_TRANSLATIONSTORAGE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.client.resource.language.TranslationStorage
 * Remapped: grp
 */
namespace TranslationStorage {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("grp", "net/minecraft/client/resources/language/ClientLanguage", "net/minecraft/class_1078", "net/minecraft/client/resource/language/TranslationStorage", "net/minecraft/src/C_4511_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.client.resource.language.TranslationStorage#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "LOGGER", "field_5332", "LOGGER", "f_118909_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.client.resource.language.TranslationStorage#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "LOGGER", "field_5332", "LOGGER", "f_118909_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.client.resource.language.TranslationStorage#translations
    static jobject get_field_translations(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "storage", "field_5330", "translations", "f_118910_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.resource.language.TranslationStorage#translations
    static void set_field_translations(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "storage", "field_5330", "translations", "f_118910_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.client.resource.language.TranslationStorage#rightToLeft
    static jboolean get_field_rightToLeft(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "defaultRightToLeft", "field_25289", "rightToLeft", "f_118911_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.client.resource.language.TranslationStorage#rightToLeft
    static void set_field_rightToLeft(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "defaultRightToLeft", "field_25289", "rightToLeft", "f_118911_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    static jmethodID methodID_load() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "loadFrom", "method_4675", "load", "m_264420_"), "(Laue;Ljava/util/List;Z)Lgrp;");
    }

    static jobject load(const jobject& arg0, const jobject& arg1, const jboolean& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_load();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__load() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "appendFrom", "method_4676", "load", "m_235035_"), "(Ljava/lang/String;Ljava/util/List;Ljava/util/Map;)V");
    }

    static void _load(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID__load();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_get() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getOrDefault", "method_4679", "get", "m_118919_"), "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
    }

    static jobject get(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_get();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_hasTranslation() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "has", "method_4678", "hasTranslation", "m_6722_"), "(Ljava/lang/String;)Z");
    }

    static jboolean hasTranslation(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_hasTranslation();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isRightToLeft() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "isDefaultRightToLeft", "method_29428", "isRightToLeft", "m_6627_"), "()Z");
    }

    static jboolean isRightToLeft(const jobject& obj) {
                
       const auto methodID = methodID_isRightToLeft();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_reorder() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getVisualOrder", "method_30934", "reorder", "m_5536_"), "(Lxe;)Laya;");
    }

    static jobject reorder(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_reorder();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_CLIENT_RESOURCE_LANGUAGE_TRANSLATIONSTORAGE_HPP