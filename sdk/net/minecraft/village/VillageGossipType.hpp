// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_VILLAGE_VILLAGEGOSSIPTYPE_HPP
#define NET_MINECRAFT_VILLAGE_VILLAGEGOSSIPTYPE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.village.VillageGossipType
 * Remapped: ccp
 */
namespace VillageGossipType {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("ccp", "net/minecraft/world/entity/ai/gossip/GossipType", "net/minecraft/class_4139", "net/minecraft/village/VillageGossipType", "net/minecraft/src/C_751_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.village.VillageGossipType#MAJOR_NEGATIVE
    [[maybe_unused]] static jobject get_field_MAJOR_NEGATIVE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "MAJOR_NEGATIVE", "field_18424", "MAJOR_NEGATIVE", "MAJOR_NEGATIVE"), "Lccp;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.village.VillageGossipType#MAJOR_NEGATIVE
    [[maybe_unused]] static void set_field_MAJOR_NEGATIVE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "MAJOR_NEGATIVE", "field_18424", "MAJOR_NEGATIVE", "MAJOR_NEGATIVE"), "Lccp;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.village.VillageGossipType#MINOR_NEGATIVE
    [[maybe_unused]] static jobject get_field_MINOR_NEGATIVE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "MINOR_NEGATIVE", "field_18425", "MINOR_NEGATIVE", "MINOR_NEGATIVE"), "Lccp;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.village.VillageGossipType#MINOR_NEGATIVE
    [[maybe_unused]] static void set_field_MINOR_NEGATIVE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "MINOR_NEGATIVE", "field_18425", "MINOR_NEGATIVE", "MINOR_NEGATIVE"), "Lccp;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.village.VillageGossipType#MINOR_POSITIVE
    [[maybe_unused]] static jobject get_field_MINOR_POSITIVE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "MINOR_POSITIVE", "field_18426", "MINOR_POSITIVE", "MINOR_POSITIVE"), "Lccp;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.village.VillageGossipType#MINOR_POSITIVE
    [[maybe_unused]] static void set_field_MINOR_POSITIVE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "MINOR_POSITIVE", "field_18426", "MINOR_POSITIVE", "MINOR_POSITIVE"), "Lccp;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.village.VillageGossipType#MAJOR_POSITIVE
    [[maybe_unused]] static jobject get_field_MAJOR_POSITIVE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "MAJOR_POSITIVE", "field_18427", "MAJOR_POSITIVE", "MAJOR_POSITIVE"), "Lccp;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.village.VillageGossipType#MAJOR_POSITIVE
    [[maybe_unused]] static void set_field_MAJOR_POSITIVE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "MAJOR_POSITIVE", "field_18427", "MAJOR_POSITIVE", "MAJOR_POSITIVE"), "Lccp;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.village.VillageGossipType#TRADING
    [[maybe_unused]] static jobject get_field_TRADING() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "TRADING", "field_18428", "TRADING", "TRADING"), "Lccp;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.village.VillageGossipType#TRADING
    [[maybe_unused]] static void set_field_TRADING(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "TRADING", "field_18428", "TRADING", "TRADING"), "Lccp;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.village.VillageGossipType#MAX_TRADING_REPUTATION
    [[maybe_unused]] static jint get_field_MAX_TRADING_REPUTATION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "REPUTATION_CHANGE_PER_EVENT", "field_30240", "MAX_TRADING_REPUTATION", "f_148182_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.village.VillageGossipType#MAX_TRADING_REPUTATION
    [[maybe_unused]] static void set_field_MAX_TRADING_REPUTATION(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "REPUTATION_CHANGE_PER_EVENT", "field_30240", "MAX_TRADING_REPUTATION", "f_148182_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.village.VillageGossipType#TRADING_GOSSIP_SHARE_DECREMENT
    [[maybe_unused]] static jint get_field_TRADING_GOSSIP_SHARE_DECREMENT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "REPUTATION_CHANGE_PER_EVERLASTING_MEMORY", "field_30241", "TRADING_GOSSIP_SHARE_DECREMENT", "f_148183_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.village.VillageGossipType#TRADING_GOSSIP_SHARE_DECREMENT
    [[maybe_unused]] static void set_field_TRADING_GOSSIP_SHARE_DECREMENT(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "REPUTATION_CHANGE_PER_EVERLASTING_MEMORY", "field_30241", "TRADING_GOSSIP_SHARE_DECREMENT", "f_148183_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.village.VillageGossipType#TRADING_GOSSIP_DECAY
    [[maybe_unused]] static jint get_field_TRADING_GOSSIP_DECAY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "REPUTATION_CHANGE_PER_TRADE", "field_30242", "TRADING_GOSSIP_DECAY", "f_148184_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.village.VillageGossipType#TRADING_GOSSIP_DECAY
    [[maybe_unused]] static void set_field_TRADING_GOSSIP_DECAY(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "REPUTATION_CHANGE_PER_TRADE", "field_30242", "TRADING_GOSSIP_DECAY", "f_148184_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for public field net.minecraft.village.VillageGossipType#key
    static jobject get_field_key(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "id", "field_18430", "key", "f_26273_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static public field net.minecraft.village.VillageGossipType#key
    static void set_field_key(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "id", "field_18430", "key", "f_26273_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.village.VillageGossipType#multiplier
    static jint get_field_multiplier(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "weight", "field_18431", "multiplier", "f_26274_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static public field net.minecraft.village.VillageGossipType#multiplier
    static void set_field_multiplier(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "weight", "field_18431", "multiplier", "f_26274_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.village.VillageGossipType#maxValue
    static jint get_field_maxValue(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "max", "field_18432", "maxValue", "f_26275_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static public field net.minecraft.village.VillageGossipType#maxValue
    static void set_field_maxValue(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "max", "field_18432", "maxValue", "f_26275_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.village.VillageGossipType#decay
    static jint get_field_decay(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "decayPerDay", "field_19354", "decay", "f_26276_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static public field net.minecraft.village.VillageGossipType#decay
    static void set_field_decay(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "decayPerDay", "field_19354", "decay", "f_26276_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.village.VillageGossipType#shareDecrement
    static jint get_field_shareDecrement(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "decayPerTransfer", "field_18434", "shareDecrement", "f_26277_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static public field net.minecraft.village.VillageGossipType#shareDecrement
    static void set_field_shareDecrement(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "decayPerTransfer", "field_18434", "shareDecrement", "f_26277_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for static public field net.minecraft.village.VillageGossipType#CODEC
    [[maybe_unused]] static jobject get_field_CODEC() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "CODEC", "field_41672", "CODEC", "f_262726_"), "Lcom/mojang/serialization/Codec;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.village.VillageGossipType#CODEC
    [[maybe_unused]] static void set_field_CODEC(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "CODEC", "field_41672", "CODEC", "f_262726_"), "Lcom/mojang/serialization/Codec;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_values() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("values", "values", "values", "values", "values"), "()[Lccp;");
    }

    static jobject values() {
       const auto clazz = self();
       const auto methodID = methodID_values();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_valueOf() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("valueOf", "valueOf", "valueOf", "valueOf", "valueOf"), "(Ljava/lang/String;)Lccp;");
    }

    static jobject valueOf(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_valueOf();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_asString() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getSerializedName", "method_15434", "asString", "m_7912_"), "()Ljava/lang/String;");
    }

    static jobject asString(const jobject& obj) {
                
       const auto methodID = methodID_asString();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_VILLAGE_VILLAGEGOSSIPTYPE_HPP