// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_VILLAGE_RAID_RAID_HPP
#define NET_MINECRAFT_VILLAGE_RAID_RAID_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.village.raid.Raid
 * Remapped: coi
 */
namespace Raid {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("coi", "net/minecraft/world/entity/raid/Raid", "net/minecraft/class_3765", "net/minecraft/village/raid/Raid", "net/minecraft/src/C_1185_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.village.raid.Raid#field_30676
    [[maybe_unused]] static jint get_field_field_30676() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "SECTION_RADIUS_FOR_FINDING_NEW_VILLAGE_CENTER", "field_30676", "field_30676", "f_150204_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#field_30676
    [[maybe_unused]] static void set_field_field_30676(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "SECTION_RADIUS_FOR_FINDING_NEW_VILLAGE_CENTER", "field_30676", "field_30676", "f_150204_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.village.raid.Raid#field_30677
    [[maybe_unused]] static jint get_field_field_30677() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "ATTEMPT_RAID_FARTHEST", "field_30677", "field_30677", "f_150205_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#field_30677
    [[maybe_unused]] static void set_field_field_30677(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "ATTEMPT_RAID_FARTHEST", "field_30677", "field_30677", "f_150205_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.village.raid.Raid#field_30678
    [[maybe_unused]] static jint get_field_field_30678() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "ATTEMPT_RAID_CLOSE", "field_30678", "field_30678", "f_150206_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#field_30678
    [[maybe_unused]] static void set_field_field_30678(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "ATTEMPT_RAID_CLOSE", "field_30678", "field_30678", "f_150206_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.village.raid.Raid#field_30679
    [[maybe_unused]] static jint get_field_field_30679() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "ATTEMPT_RAID_INSIDE", "field_30679", "field_30679", "f_150207_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#field_30679
    [[maybe_unused]] static void set_field_field_30679(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "ATTEMPT_RAID_INSIDE", "field_30679", "field_30679", "f_150207_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.village.raid.Raid#field_30680
    [[maybe_unused]] static jint get_field_field_30680() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "VILLAGE_SEARCH_RADIUS", "field_30680", "field_30680", "f_150208_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#field_30680
    [[maybe_unused]] static void set_field_field_30680(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "VILLAGE_SEARCH_RADIUS", "field_30680", "field_30680", "f_150208_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.village.raid.Raid#field_30681
    [[maybe_unused]] static jint get_field_field_30681() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "RAID_TIMEOUT_TICKS", "field_30681", "field_30681", "f_150209_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#field_30681
    [[maybe_unused]] static void set_field_field_30681(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "RAID_TIMEOUT_TICKS", "field_30681", "field_30681", "f_150209_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.village.raid.Raid#field_30682
    [[maybe_unused]] static jint get_field_field_30682() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "NUM_SPAWN_ATTEMPTS", "field_30682", "field_30682", "f_150210_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#field_30682
    [[maybe_unused]] static void set_field_field_30682(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "NUM_SPAWN_ATTEMPTS", "field_30682", "field_30682", "f_150210_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.village.raid.Raid#OMINOUS_BANNER_TRANSLATION_KEY
    [[maybe_unused]] static jobject get_field_OMINOUS_BANNER_TRANSLATION_KEY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "OMINOUS_BANNER_PATTERN_NAME", "field_30683", "OMINOUS_BANNER_TRANSLATION_KEY", "f_150211_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#OMINOUS_BANNER_TRANSLATION_KEY
    [[maybe_unused]] static void set_field_OMINOUS_BANNER_TRANSLATION_KEY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "OMINOUS_BANNER_PATTERN_NAME", "field_30683", "OMINOUS_BANNER_TRANSLATION_KEY", "f_150211_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.village.raid.Raid#RAIDERS_REMAINING_TRANSLATION_KEY
    [[maybe_unused]] static jobject get_field_RAIDERS_REMAINING_TRANSLATION_KEY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("p", "RAIDERS_REMAINING", "field_30684", "RAIDERS_REMAINING_TRANSLATION_KEY", "f_150212_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#RAIDERS_REMAINING_TRANSLATION_KEY
    [[maybe_unused]] static void set_field_RAIDERS_REMAINING_TRANSLATION_KEY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("p", "RAIDERS_REMAINING", "field_30684", "RAIDERS_REMAINING_TRANSLATION_KEY", "f_150212_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.village.raid.Raid#field_30669
    [[maybe_unused]] static jint get_field_field_30669() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "VILLAGE_RADIUS_BUFFER", "field_30669", "field_30669", "f_150197_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.village.raid.Raid#field_30669
    [[maybe_unused]] static void set_field_field_30669(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "VILLAGE_RADIUS_BUFFER", "field_30669", "field_30669", "f_150197_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.village.raid.Raid#field_30685
    [[maybe_unused]] static jint get_field_field_30685() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("q", "POST_RAID_TICK_LIMIT", "field_30685", "field_30685", "f_150213_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#field_30685
    [[maybe_unused]] static void set_field_field_30685(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("q", "POST_RAID_TICK_LIMIT", "field_30685", "field_30685", "f_150213_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.village.raid.Raid#DEFAULT_PRE_RAID_TICKS
    [[maybe_unused]] static jint get_field_DEFAULT_PRE_RAID_TICKS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("r", "DEFAULT_PRE_RAID_TICKS", "field_30686", "DEFAULT_PRE_RAID_TICKS", "f_150214_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#DEFAULT_PRE_RAID_TICKS
    [[maybe_unused]] static void set_field_DEFAULT_PRE_RAID_TICKS(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("r", "DEFAULT_PRE_RAID_TICKS", "field_30686", "DEFAULT_PRE_RAID_TICKS", "f_150214_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.village.raid.Raid#MAX_DESPAWN_COUNTER
    [[maybe_unused]] static jint get_field_MAX_DESPAWN_COUNTER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "MAX_NO_ACTION_TIME", "field_30670", "MAX_DESPAWN_COUNTER", "f_150198_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.village.raid.Raid#MAX_DESPAWN_COUNTER
    [[maybe_unused]] static void set_field_MAX_DESPAWN_COUNTER(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "MAX_NO_ACTION_TIME", "field_30670", "MAX_DESPAWN_COUNTER", "f_150198_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.village.raid.Raid#field_30671
    [[maybe_unused]] static jint get_field_field_30671() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "MAX_CELEBRATION_TICKS", "field_30671", "field_30671", "f_150199_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.village.raid.Raid#field_30671
    [[maybe_unused]] static void set_field_field_30671(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "MAX_CELEBRATION_TICKS", "field_30671", "field_30671", "f_150199_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.village.raid.Raid#field_30687
    [[maybe_unused]] static jint get_field_field_30687() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("s", "OUTSIDE_RAID_BOUNDS_TIMEOUT", "field_30687", "field_30687", "f_150215_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#field_30687
    [[maybe_unused]] static void set_field_field_30687(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("s", "OUTSIDE_RAID_BOUNDS_TIMEOUT", "field_30687", "field_30687", "f_150215_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.village.raid.Raid#field_30672
    [[maybe_unused]] static jint get_field_field_30672() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "TICKS_PER_DAY", "field_30672", "field_30672", "f_150200_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.village.raid.Raid#field_30672
    [[maybe_unused]] static void set_field_field_30672(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "TICKS_PER_DAY", "field_30672", "field_30672", "f_150200_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.village.raid.Raid#field_30673
    [[maybe_unused]] static jint get_field_field_30673() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "DEFAULT_MAX_RAID_OMEN_LEVEL", "field_30673", "field_30673", "f_316707_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.village.raid.Raid#field_30673
    [[maybe_unused]] static void set_field_field_30673(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "DEFAULT_MAX_RAID_OMEN_LEVEL", "field_30673", "field_30673", "f_316707_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.village.raid.Raid#field_30688
    [[maybe_unused]] static jint get_field_field_30688() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("t", "LOW_MOB_THRESHOLD", "field_30688", "field_30688", "f_150216_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#field_30688
    [[maybe_unused]] static void set_field_field_30688(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("t", "LOW_MOB_THRESHOLD", "field_30688", "field_30688", "f_150216_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.village.raid.Raid#EVENT_TEXT
    [[maybe_unused]] static jobject get_field_EVENT_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("u", "RAID_NAME_COMPONENT", "field_19016", "EVENT_TEXT", "f_37665_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#EVENT_TEXT
    [[maybe_unused]] static void set_field_EVENT_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("u", "RAID_NAME_COMPONENT", "field_19016", "EVENT_TEXT", "f_37665_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.village.raid.Raid#VICTORY_TITLE
    [[maybe_unused]] static jobject get_field_VICTORY_TITLE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("v", "RAID_BAR_VICTORY_COMPONENT", "field_19019", "VICTORY_TITLE", "f_37668_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#VICTORY_TITLE
    [[maybe_unused]] static void set_field_VICTORY_TITLE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("v", "RAID_BAR_VICTORY_COMPONENT", "field_19019", "VICTORY_TITLE", "f_37668_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.village.raid.Raid#DEFEAT_TITLE
    [[maybe_unused]] static jobject get_field_DEFEAT_TITLE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("w", "RAID_BAR_DEFEAT_COMPONENT", "field_19020", "DEFEAT_TITLE", "f_37669_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#DEFEAT_TITLE
    [[maybe_unused]] static void set_field_DEFEAT_TITLE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("w", "RAID_BAR_DEFEAT_COMPONENT", "field_19020", "DEFEAT_TITLE", "f_37669_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.village.raid.Raid#MAX_ACTIVE_TICKS
    [[maybe_unused]] static jint get_field_MAX_ACTIVE_TICKS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("x", "HERO_OF_THE_VILLAGE_DURATION", "field_30689", "MAX_ACTIVE_TICKS", "f_150217_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#MAX_ACTIVE_TICKS
    [[maybe_unused]] static void set_field_MAX_ACTIVE_TICKS(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("x", "HERO_OF_THE_VILLAGE_DURATION", "field_30689", "MAX_ACTIVE_TICKS", "f_150217_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.village.raid.Raid#field_30674
    [[maybe_unused]] static jint get_field_field_30674() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "VALID_RAID_RADIUS_SQR", "field_30674", "field_30674", "f_150202_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.village.raid.Raid#field_30674
    [[maybe_unused]] static void set_field_field_30674(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "VALID_RAID_RADIUS_SQR", "field_30674", "field_30674", "f_150202_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.village.raid.Raid#SQUARED_MAX_RAIDER_DISTANCE
    [[maybe_unused]] static jint get_field_SQUARED_MAX_RAIDER_DISTANCE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "RAID_REMOVAL_THRESHOLD_SQR", "field_30675", "SQUARED_MAX_RAIDER_DISTANCE", "f_150203_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.village.raid.Raid#SQUARED_MAX_RAIDER_DISTANCE
    [[maybe_unused]] static void set_field_SQUARED_MAX_RAIDER_DISTANCE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "RAID_REMOVAL_THRESHOLD_SQR", "field_30675", "SQUARED_MAX_RAIDER_DISTANCE", "f_150203_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.village.raid.Raid#waveToCaptain
    static jobject get_field_waveToCaptain(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("y", "groupToLeaderMap", "field_16615", "waveToCaptain", "f_37670_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#waveToCaptain
    static void set_field_waveToCaptain(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("y", "groupToLeaderMap", "field_16615", "waveToCaptain", "f_37670_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.village.raid.Raid#waveToRaiders
    static jobject get_field_waveToRaiders(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("z", "groupRaiderMap", "field_16618", "waveToRaiders", "f_37671_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#waveToRaiders
    static void set_field_waveToRaiders(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("z", "groupRaiderMap", "field_16618", "waveToRaiders", "f_37671_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.village.raid.Raid#heroesOfTheVillage
    static jobject get_field_heroesOfTheVillage(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("A", "heroesOfTheVillage", "field_19021", "heroesOfTheVillage", "f_37672_"), "Ljava/util/Set;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#heroesOfTheVillage
    static void set_field_heroesOfTheVillage(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("A", "heroesOfTheVillage", "field_19021", "heroesOfTheVillage", "f_37672_"), "Ljava/util/Set;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.village.raid.Raid#ticksActive
    static jlong get_field_ticksActive(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("B", "ticksActive", "field_16605", "ticksActive", "f_37673_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#ticksActive
    static void set_field_ticksActive(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("B", "ticksActive", "field_16605", "ticksActive", "f_37673_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.village.raid.Raid#center
    static jobject get_field_center(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("C", "center", "field_16613", "center", "f_37674_"), "Ljd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#center
    static void set_field_center(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("C", "center", "field_16613", "center", "f_37674_"), "Ljd;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.village.raid.Raid#world
    static jobject get_field_world(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("D", "level", "field_16619", "world", "f_37675_"), "Laqu;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#world
    static void set_field_world(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("D", "level", "field_16619", "world", "f_37675_"), "Laqu;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.village.raid.Raid#started
    static jboolean get_field_started(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("E", "started", "field_16611", "started", "f_37676_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#started
    static void set_field_started(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("E", "started", "field_16611", "started", "f_37676_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.village.raid.Raid#id
    static jint get_field_id(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("F", "id", "field_16625", "id", "f_37677_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#id
    static void set_field_id(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("F", "id", "field_16625", "id", "f_37677_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.village.raid.Raid#totalHealth
    static jfloat get_field_totalHealth(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("G", "totalHealth", "field_16620", "totalHealth", "f_37678_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#totalHealth
    static void set_field_totalHealth(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("G", "totalHealth", "field_16620", "totalHealth", "f_37678_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.village.raid.Raid#badOmenLevel
    static jint get_field_badOmenLevel(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("H", "raidOmenLevel", "field_16623", "badOmenLevel", "f_316894_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#badOmenLevel
    static void set_field_badOmenLevel(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("H", "raidOmenLevel", "field_16623", "badOmenLevel", "f_316894_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.village.raid.Raid#active
    static jboolean get_field_active(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("I", "active", "field_16606", "active", "f_37680_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#active
    static void set_field_active(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("I", "active", "field_16606", "active", "f_37680_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.village.raid.Raid#wavesSpawned
    static jint get_field_wavesSpawned(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("J", "groupsSpawned", "field_16621", "wavesSpawned", "f_37681_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#wavesSpawned
    static void set_field_wavesSpawned(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("J", "groupsSpawned", "field_16621", "wavesSpawned", "f_37681_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.village.raid.Raid#bar
    static jobject get_field_bar(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("K", "raidEvent", "field_16607", "bar", "f_37682_"), "Laqr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#bar
    static void set_field_bar(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("K", "raidEvent", "field_16607", "bar", "f_37682_"), "Laqr;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.village.raid.Raid#postRaidTicks
    static jint get_field_postRaidTicks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("L", "postRaidTicks", "field_16616", "postRaidTicks", "f_37683_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#postRaidTicks
    static void set_field_postRaidTicks(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("L", "postRaidTicks", "field_16616", "postRaidTicks", "f_37683_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.village.raid.Raid#preRaidTicks
    static jint get_field_preRaidTicks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("M", "raidCooldownTicks", "field_16614", "preRaidTicks", "f_37684_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#preRaidTicks
    static void set_field_preRaidTicks(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("M", "raidCooldownTicks", "field_16614", "preRaidTicks", "f_37684_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.village.raid.Raid#random
    static jobject get_field_random(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("N", "random", "field_16608", "random", "f_37685_"), "Layw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#random
    static void set_field_random(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("N", "random", "field_16608", "random", "f_37685_"), "Layw;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.village.raid.Raid#waveCount
    static jint get_field_waveCount(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("O", "numGroups", "field_19022", "waveCount", "f_37686_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#waveCount
    static void set_field_waveCount(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("O", "numGroups", "field_19022", "waveCount", "f_37686_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.village.raid.Raid#status
    static jobject get_field_status(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("P", "status", "field_19023", "status", "f_37687_"), "Lcoi$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#status
    static void set_field_status(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("P", "status", "field_19023", "status", "f_37687_"), "Lcoi$a;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.village.raid.Raid#finishCooldown
    static jint get_field_finishCooldown(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("Q", "celebrationTicks", "field_19024", "finishCooldown", "f_37688_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#finishCooldown
    static void set_field_finishCooldown(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("Q", "celebrationTicks", "field_19024", "finishCooldown", "f_37688_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.village.raid.Raid#preCalculatedRavagerSpawnLocation
    static jobject get_field_preCalculatedRavagerSpawnLocation(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("R", "waveSpawnPos", "field_19172", "preCalculatedRavagerSpawnLocation", "f_37689_"), "Ljava/util/Optional;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.Raid#preCalculatedRavagerSpawnLocation
    static void set_field_preCalculatedRavagerSpawnLocation(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("R", "waveSpawnPos", "field_19172", "preCalculatedRavagerSpawnLocation", "f_37689_"), "Ljava/util/Optional;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_isFinished() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isOver", "method_16832", "isFinished", "m_37706_"), "()Z");
    }

    static jboolean isFinished(const jobject& obj) {
                
       const auto methodID = methodID_isFinished();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isPreRaid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "isBetweenWaves", "method_20020", "isPreRaid", "m_37749_"), "()Z");
    }

    static jboolean isPreRaid(const jobject& obj) {
                
       const auto methodID = methodID_isPreRaid();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasSpawned() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "hasFirstWaveSpawned", "method_20021", "hasSpawned", "m_37757_"), "()Z");
    }

    static jboolean hasSpawned(const jobject& obj) {
                
       const auto methodID = methodID_hasSpawned();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasStopped() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "isStopped", "method_20022", "hasStopped", "m_37762_"), "()Z");
    }

    static jboolean hasStopped(const jobject& obj) {
                
       const auto methodID = methodID_hasStopped();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasWon() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "isVictory", "method_20023", "hasWon", "m_37767_"), "()Z");
    }

    static jboolean hasWon(const jobject& obj) {
                
       const auto methodID = methodID_hasWon();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasLost() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "isLoss", "method_20024", "hasLost", "m_37768_"), "()Z");
    }

    static jboolean hasLost(const jobject& obj) {
                
       const auto methodID = methodID_hasLost();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getTotalHealth() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "getTotalHealth", "method_35212", "getTotalHealth", "m_150220_"), "()F");
    }

    static jfloat getTotalHealth(const jobject& obj) {
                
       const auto methodID = methodID_getTotalHealth();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_getAllRaiders() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "getAllRaiders", "method_35213", "getAllRaiders", "m_150221_"), "()Ljava/util/Set;");
    }

    static jobject getAllRaiders(const jobject& obj) {
                
       const auto methodID = methodID_getAllRaiders();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getWorld() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "getLevel", "method_16831", "getWorld", "m_37769_"), "()Ldcw;");
    }

    static jobject getWorld(const jobject& obj) {
                
       const auto methodID = methodID_getWorld();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasStarted() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "isStarted", "method_16524", "hasStarted", "m_37770_"), "()Z");
    }

    static jboolean hasStarted(const jobject& obj) {
                
       const auto methodID = methodID_hasStarted();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getGroupsSpawned() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "getGroupsSpawned", "method_16490", "getGroupsSpawned", "m_37771_"), "()I");
    }

    static jint getGroupsSpawned(const jobject& obj) {
                
       const auto methodID = methodID_getGroupsSpawned();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_isInRaidDistance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("w", "validPlayer", "method_16501", "isInRaidDistance", "m_37784_"), "()Ljava/util/function/Predicate;");
    }

    static jobject isInRaidDistance(const jobject& obj) {
                
       const auto methodID = methodID_isInRaidDistance();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_updateBarToPlayers() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("x", "updatePlayers", "method_16499", "updateBarToPlayers", "m_37785_"), "()V");
    }

    static void updateBarToPlayers(const jobject& obj) {
                
       const auto methodID = methodID_updateBarToPlayers();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getMaxAcceptableBadOmenLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "getMaxRaidOmenLevel", "method_16514", "getMaxAcceptableBadOmenLevel", "m_37772_"), "()I");
    }

    static jint getMaxAcceptableBadOmenLevel(const jobject& obj) {
                
       const auto methodID = methodID_getMaxAcceptableBadOmenLevel();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getBadOmenLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("m", "getRaidOmenLevel", "method_16493", "getBadOmenLevel", "m_322744_"), "()I");
    }

    static jint getBadOmenLevel(const jobject& obj) {
                
       const auto methodID = methodID_getBadOmenLevel();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_setBadOmenLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setRaidOmenLevel", "method_35211", "setBadOmenLevel", "m_319881_"), "(I)V");
    }

    static void setBadOmenLevel(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_setBadOmenLevel();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_start() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "absorbRaidOmen", "method_16518", "start", "m_321520_"), "(Laqv;)Z");
    }

    static jboolean start(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_start();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_invalidate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("n", "stop", "method_16506", "invalidate", "m_37774_"), "()V");
    }

    static void invalidate(const jobject& obj) {
                
       const auto methodID = methodID_invalidate();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("o", "tick", "method_16509", "tick", "m_37775_"), "()V");
    }

    static void tick(const jobject& obj) {
                
       const auto methodID = methodID_tick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_moveRaidCenter() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("y", "moveRaidCenterToNearbyVillageSection", "method_20511", "moveRaidCenter", "m_37786_"), "()V");
    }

    static void moveRaidCenter(const jobject& obj) {
                
       const auto methodID = methodID_moveRaidCenter();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_preCalculateRavagerSpawnLocation() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getValidSpawnPos", "method_20267", "preCalculateRavagerSpawnLocation", "m_37763_"), "(I)Ljava/util/Optional;");
    }

    static jobject preCalculateRavagerSpawnLocation(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_preCalculateRavagerSpawnLocation();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_shouldSpawnMoreGroups() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("z", "hasMoreWaves", "method_16833", "shouldSpawnMoreGroups", "m_37698_"), "()Z");
    }

    static jboolean shouldSpawnMoreGroups(const jobject& obj) {
                
       const auto methodID = methodID_shouldSpawnMoreGroups();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasSpawnedFinalWave() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("A", "isFinalWave", "method_20012", "hasSpawnedFinalWave", "m_37699_"), "()Z");
    }

    static jboolean hasSpawnedFinalWave(const jobject& obj) {
                
       const auto methodID = methodID_hasSpawnedFinalWave();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasExtraWave() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("B", "hasBonusWave", "method_20013", "hasExtraWave", "m_37700_"), "()Z");
    }

    static jboolean hasExtraWave(const jobject& obj) {
                
       const auto methodID = methodID_hasExtraWave();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasSpawnedExtraWave() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("C", "hasSpawnedBonusWave", "method_20014", "hasSpawnedExtraWave", "m_37701_"), "()Z");
    }

    static jboolean hasSpawnedExtraWave(const jobject& obj) {
                
       const auto methodID = methodID_hasSpawnedExtraWave();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isSpawningExtraWave() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("D", "shouldSpawnBonusGroup", "method_20015", "isSpawningExtraWave", "m_37702_"), "()Z");
    }

    static jboolean isSpawningExtraWave(const jobject& obj) {
                
       const auto methodID = methodID_isSpawningExtraWave();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_removeObsoleteRaiders() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("E", "updateRaiders", "method_16834", "removeObsoleteRaiders", "m_37703_"), "()V");
    }

    static void removeObsoleteRaiders(const jobject& obj) {
                
       const auto methodID = methodID_removeObsoleteRaiders();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_playRaidHorn() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "playSound", "method_16521", "playRaidHorn", "m_37743_"), "(Ljd;)V");
    }

    static void playRaidHorn(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_playRaidHorn();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_spawnNextWave() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "spawnGroup", "method_16522", "spawnNextWave", "m_37755_"), "(Ljd;)V");
    }

    static void spawnNextWave(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_spawnNextWave();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_addRaider() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "joinRaid", "method_16516", "addRaider", "m_37713_"), "(ILcoj;Ljd;Z)V");
    }

    static void addRaider(const jobject& obj, const jint& arg0, const jobject& arg1, const jobject& arg2, const jboolean& arg3) {
                
       const auto methodID = methodID_addRaider();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_updateBar() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("p", "updateBossbar", "method_16523", "updateBar", "m_37776_"), "()V");
    }

    static void updateBar(const jobject& obj) {
                
       const auto methodID = methodID_updateBar();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getCurrentRaiderHealth() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("q", "getHealthOfLivingRaiders", "method_16513", "getCurrentRaiderHealth", "m_37777_"), "()F");
    }

    static jfloat getCurrentRaiderHealth(const jobject& obj) {
                
       const auto methodID = methodID_getCurrentRaiderHealth();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_canSpawnRaiders() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("F", "shouldSpawnGroup", "method_16519", "canSpawnRaiders", "m_37704_"), "()Z");
    }

    static jboolean canSpawnRaiders(const jobject& obj) {
                
       const auto methodID = methodID_canSpawnRaiders();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getRaiderCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("r", "getTotalRaidersAlive", "method_16517", "getRaiderCount", "m_37778_"), "()I");
    }

    static jint getRaiderCount(const jobject& obj) {
                
       const auto methodID = methodID_getRaiderCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_removeFromWave() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "removeFromRaid", "method_16510", "removeFromWave", "m_37740_"), "(Lcoj;Z)V");
    }

    static void removeFromWave(const jobject& obj, const jobject& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_removeFromWave();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_markDirty() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("G", "setDirty", "method_16520", "markDirty", "m_37705_"), "()V");
    }

    static void markDirty(const jobject& obj) {
                
       const auto methodID = methodID_markDirty();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getOminousBanner() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getLeaderBannerInstance", "method_16515", "getOminousBanner", "m_37779_"), "(Ljn;)Lcuq;");
    }

    static jobject getOminousBanner(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getOminousBanner();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getCaptain() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getLeader", "method_16496", "getCaptain", "m_37750_"), "(I)Lcoj;");
    }

    static jobject getCaptain(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_getCaptain();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getRavagerSpawnLocation() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "findRandomSpawnPos", "method_16525", "getRavagerSpawnLocation", "m_37707_"), "(II)Ljd;");
    }

    static jobject getRavagerSpawnLocation(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_getRavagerSpawnLocation();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_addToWave() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "addWaveMob", "method_16505", "addToWave", "m_37752_"), "(ILcoj;)Z");
    }

    static jboolean addToWave(const jobject& obj, const jint& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_addToWave();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__addToWave() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addWaveMob", "method_16487", "addToWave", "m_37718_"), "(ILcoj;Z)Z");
    }

    static jboolean _addToWave(const jobject& obj, const jint& arg0, const jobject& arg1, const jboolean& arg2) {
                
       const auto methodID = methodID__addToWave();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_setWaveCaptain() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setLeader", "method_16491", "setWaveCaptain", "m_37710_"), "(ILcoj;)V");
    }

    static void setWaveCaptain(const jobject& obj, const jint& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_setWaveCaptain();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_removeLeader() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "removeLeader", "method_16500", "removeLeader", "m_37758_"), "(I)V");
    }

    static void removeLeader(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_removeLeader();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getCenter() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("s", "getCenter", "method_16495", "getCenter", "m_37780_"), "()Ljd;");
    }

    static jobject getCenter(const jobject& obj) {
                
       const auto methodID = methodID_getCenter();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_setCenter() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "setCenter", "method_20509", "setCenter", "m_37760_"), "(Ljd;)V");
    }

    static void setCenter(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setCenter();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getRaidId() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("t", "getId", "method_16494", "getRaidId", "m_37781_"), "()I");
    }

    static jint getRaidId(const jobject& obj) {
                
       const auto methodID = methodID_getRaidId();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getDefaultNumSpawns", "method_20018", "getCount", "m_37730_"), "(Lcoi$b;IZ)I");
    }

    static jint getCount(const jobject& obj, const jobject& arg0, const jint& arg1, const jboolean& arg2) {
                
       const auto methodID = methodID_getCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getBonusCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getPotentialBonusSpawns", "method_20019", "getBonusCount", "m_219828_"), "(Lcoi$b;Layw;ILbqp;Z)I");
    }

    static jint getBonusCount(const jobject& obj, const jobject& arg0, const jobject& arg1, const jint& arg2, const jobject& arg3, const jboolean& arg4) {
                
       const auto methodID = methodID_getBonusCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_isActive() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("u", "isActive", "method_16504", "isActive", "m_37782_"), "()Z");
    }

    static jboolean isActive(const jobject& obj) {
                
       const auto methodID = methodID_isActive();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_writeNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "save", "method_16502", "writeNbt", "m_37747_"), "(Lub;)Lub;");
    }

    static jobject writeNbt(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_writeNbt();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getMaxWaves() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getNumGroups", "method_20016", "getMaxWaves", "m_37724_"), "(Lbqo;)I");
    }

    static jint getMaxWaves(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getMaxWaves();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getEnchantmentChance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("v", "getEnchantOdds", "method_20025", "getEnchantmentChance", "m_37783_"), "()F");
    }

    static jfloat getEnchantmentChance(const jobject& obj) {
                
       const auto methodID = methodID_getEnchantmentChance();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_addHero() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addHeroOfTheVillage", "method_20017", "addHero", "m_37726_"), "(Lbsr;)V");
    }

    static void addHero(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addHero();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_VILLAGE_RAID_RAID_HPP