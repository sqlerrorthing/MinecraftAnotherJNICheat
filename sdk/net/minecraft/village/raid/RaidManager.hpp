// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_VILLAGE_RAID_RAIDMANAGER_HPP
#define NET_MINECRAFT_VILLAGE_RAID_RAIDMANAGER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.village.raid.RaidManager
 * Remapped: cok
 */
namespace RaidManager {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("cok", "net/minecraft/world/entity/raid/Raids", "net/minecraft/class_3767", "net/minecraft/village/raid/RaidManager", "net/minecraft/src/C_1194_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.village.raid.RaidManager#RAIDS
    [[maybe_unused]] static jobject get_field_RAIDS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "RAID_FILE_ID", "field_30690", "RAIDS", "f_150234_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.RaidManager#RAIDS
    [[maybe_unused]] static void set_field_RAIDS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "RAID_FILE_ID", "field_30690", "RAIDS", "f_150234_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.village.raid.RaidManager#raids
    static jobject get_field_raids(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "raidMap", "field_16639", "raids", "f_37951_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.RaidManager#raids
    static void set_field_raids(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "raidMap", "field_16639", "raids", "f_37951_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.village.raid.RaidManager#world
    static jobject get_field_world(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "level", "field_16641", "world", "f_37952_"), "Laqu;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.RaidManager#world
    static void set_field_world(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "level", "field_16641", "world", "f_37952_"), "Laqu;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.village.raid.RaidManager#nextAvailableId
    static jint get_field_nextAvailableId(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "nextAvailableID", "field_16638", "nextAvailableId", "f_37953_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.RaidManager#nextAvailableId
    static void set_field_nextAvailableId(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "nextAvailableID", "field_16638", "nextAvailableId", "f_37953_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.village.raid.RaidManager#currentTime
    static jint get_field_currentTime(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "tick", "field_16637", "currentTime", "f_37954_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.village.raid.RaidManager#currentTime
    static void set_field_currentTime(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "tick", "field_16637", "currentTime", "f_37954_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    static jmethodID methodID_getPersistentStateType() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "factory", "method_52559", "getPersistentStateType", "m_293001_"), "(Laqu;)Leql$a;");
    }

    static jobject getPersistentStateType(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getPersistentStateType();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getRaid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "get", "method_16541", "getRaid", "m_37958_"), "(I)Lcoi;");
    }

    static jobject getRaid(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_getRaid();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "tick", "method_16539", "tick", "m_37957_"), "()V");
    }

    static void tick(const jobject& obj) {
                
       const auto methodID = methodID_tick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_isValidRaiderFor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "canJoinRaid", "method_16838", "isValidRaiderFor", "m_37965_"), "(Lcoj;Lcoi;)Z");
    }

    static jboolean isValidRaiderFor(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_isValidRaiderFor();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_startRaid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "createOrExtendRaid", "method_16540", "startRaid", "m_37963_"), "(Laqv;Ljd;)Lcoi;");
    }

    static jobject startRaid(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_startRaid();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getOrCreateRaid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getOrCreateRaid", "method_16532", "getOrCreateRaid", "m_37960_"), "(Laqu;Ljd;)Lcoi;");
    }

    static jobject getOrCreateRaid(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_getOrCreateRaid();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_fromNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "load", "method_77", "fromNbt", "m_150235_"), "(Laqu;Lub;)Lcok;");
    }

    static jobject fromNbt(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_fromNbt();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_writeNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "save", "method_75", "writeNbt", "m_7176_"), "(Lub;Ljo$a;)Lub;");
    }

    static jobject writeNbt(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_writeNbt();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_nameFor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getFileId", "method_16533", "nameFor", "m_211596_"), "(Ljm;)Ljava/lang/String;");
    }

    static jobject nameFor(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_nameFor();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_nextId() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getUniqueId", "method_16534", "nextId", "m_37977_"), "()I");
    }

    static jint nextId(const jobject& obj) {
                
       const auto methodID = methodID_nextId();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getRaidAt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getNearbyRaid", "method_19209", "getRaidAt", "m_37970_"), "(Ljd;I)Lcoi;");
    }

    static jobject getRaidAt(const jobject& obj, const jobject& arg0, const jint& arg1) {
                
       const auto methodID = methodID_getRaidAt();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_VILLAGE_RAID_RAIDMANAGER_HPP