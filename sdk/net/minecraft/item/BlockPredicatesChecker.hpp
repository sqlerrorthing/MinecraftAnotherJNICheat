// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ITEM_BLOCKPREDICATESCHECKER_HPP
#define NET_MINECRAFT_ITEM_BLOCKPREDICATESCHECKER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.item.BlockPredicatesChecker
 * Remapped: csc
 */
namespace BlockPredicatesChecker {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("csc", "net/minecraft/world/item/AdventureModePredicate", "net/minecraft/class_6538", "net/minecraft/item/BlockPredicatesChecker", "net/minecraft/src/C_313672_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.item.BlockPredicatesChecker#SINGLE_CODEC
    [[maybe_unused]] static jobject get_field_SINGLE_CODEC() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "SIMPLE_CODEC", "field_49249", "SINGLE_CODEC", "f_316464_"), "Lcom/mojang/serialization/Codec;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.item.BlockPredicatesChecker#SINGLE_CODEC
    [[maybe_unused]] static void set_field_SINGLE_CODEC(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "SIMPLE_CODEC", "field_49249", "SINGLE_CODEC", "f_316464_"), "Lcom/mojang/serialization/Codec;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.item.BlockPredicatesChecker#FULL_CODEC
    [[maybe_unused]] static jobject get_field_FULL_CODEC() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "FULL_CODEC", "field_49250", "FULL_CODEC", "f_316127_"), "Lcom/mojang/serialization/Codec;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.item.BlockPredicatesChecker#FULL_CODEC
    [[maybe_unused]] static void set_field_FULL_CODEC(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "FULL_CODEC", "field_49250", "FULL_CODEC", "f_316127_"), "Lcom/mojang/serialization/Codec;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.item.BlockPredicatesChecker#CODEC
    [[maybe_unused]] static jobject get_field_CODEC() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CODEC", "field_49245", "CODEC", "f_314196_"), "Lcom/mojang/serialization/Codec;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.item.BlockPredicatesChecker#CODEC
    [[maybe_unused]] static void set_field_CODEC(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CODEC", "field_49245", "CODEC", "f_314196_"), "Lcom/mojang/serialization/Codec;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.item.BlockPredicatesChecker#PACKET_CODEC
    [[maybe_unused]] static jobject get_field_PACKET_CODEC() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "STREAM_CODEC", "field_49246", "PACKET_CODEC", "f_315519_"), "Lyx;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.item.BlockPredicatesChecker#PACKET_CODEC
    [[maybe_unused]] static void set_field_PACKET_CODEC(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "STREAM_CODEC", "field_49246", "PACKET_CODEC", "f_315519_"), "Lyx;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.item.BlockPredicatesChecker#CAN_BREAK_TEXT
    [[maybe_unused]] static jobject get_field_CAN_BREAK_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "CAN_BREAK_HEADER", "field_49247", "CAN_BREAK_TEXT", "f_315565_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.item.BlockPredicatesChecker#CAN_BREAK_TEXT
    [[maybe_unused]] static void set_field_CAN_BREAK_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "CAN_BREAK_HEADER", "field_49247", "CAN_BREAK_TEXT", "f_315565_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.item.BlockPredicatesChecker#CAN_PLACE_TEXT
    [[maybe_unused]] static jobject get_field_CAN_PLACE_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "CAN_PLACE_HEADER", "field_49248", "CAN_PLACE_TEXT", "f_314797_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.item.BlockPredicatesChecker#CAN_PLACE_TEXT
    [[maybe_unused]] static void set_field_CAN_PLACE_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "CAN_PLACE_HEADER", "field_49248", "CAN_PLACE_TEXT", "f_314797_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.item.BlockPredicatesChecker#CAN_USE_UNKNOWN_TEXT
    [[maybe_unused]] static jobject get_field_CAN_USE_UNKNOWN_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "UNKNOWN_USE", "field_49251", "CAN_USE_UNKNOWN_TEXT", "f_314193_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.item.BlockPredicatesChecker#CAN_USE_UNKNOWN_TEXT
    [[maybe_unused]] static void set_field_CAN_USE_UNKNOWN_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "UNKNOWN_USE", "field_49251", "CAN_USE_UNKNOWN_TEXT", "f_314193_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.item.BlockPredicatesChecker#predicates
    static jobject get_field_predicates(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "predicates", "field_49252", "predicates", "f_316891_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.item.BlockPredicatesChecker#predicates
    static void set_field_predicates(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "predicates", "field_49252", "predicates", "f_316891_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.item.BlockPredicatesChecker#showInTooltip
    static jboolean get_field_showInTooltip(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "showInTooltip", "field_49253", "showInTooltip", "f_316745_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.item.BlockPredicatesChecker#showInTooltip
    static void set_field_showInTooltip(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "showInTooltip", "field_49253", "showInTooltip", "f_316745_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.item.BlockPredicatesChecker#tooltipText
    static jobject get_field_tooltipText(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "tooltip", "field_49254", "tooltipText", "f_314142_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.item.BlockPredicatesChecker#tooltipText
    static void set_field_tooltipText(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "tooltip", "field_49254", "tooltipText", "f_314142_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.item.BlockPredicatesChecker#cachedPos
    static jobject get_field_cachedPos(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "lastCheckedBlock", "field_34450", "cachedPos", "f_314808_"), "Ldtg;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.item.BlockPredicatesChecker#cachedPos
    static void set_field_cachedPos(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "lastCheckedBlock", "field_34450", "cachedPos", "f_314808_"), "Ldtg;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.item.BlockPredicatesChecker#lastResult
    static jboolean get_field_lastResult(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "lastResult", "field_34451", "lastResult", "f_316657_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.item.BlockPredicatesChecker#lastResult
    static void set_field_lastResult(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "lastResult", "field_34451", "lastResult", "f_316657_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.item.BlockPredicatesChecker#nbtAware
    static jboolean get_field_nbtAware(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "checksBlockEntity", "field_34452", "nbtAware", "f_314757_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.item.BlockPredicatesChecker#nbtAware
    static void set_field_nbtAware(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "checksBlockEntity", "field_34452", "nbtAware", "f_314757_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    static jmethodID methodID_canUseCache() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "areSameBlocks", "method_38071", "canUseCache", "m_323601_"), "(Ldtg;Ldtg;Z)Z");
    }

    static jboolean canUseCache(const jobject& arg0, const jobject& arg1, const jboolean& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_canUseCache();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_check() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "test", "method_38070", "check", "m_322201_"), "(Ldtg;)Z");
    }

    static jboolean check(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_check();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_addTooltips() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addToTooltip", "method_57330", "addTooltips", "m_318685_"), "(Ljava/util/function/Consumer;)V");
    }

    static void addTooltips(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addTooltips();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_withShowInTooltip() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "withTooltip", "method_58402", "withShowInTooltip", "m_322095_"), "(Z)Lcsc;");
    }

    static jobject withShowInTooltip(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_withShowInTooltip();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getTooltipText() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "computeTooltip", "method_57329", "getTooltipText", "m_322824_"), "(Ljava/util/List;)Ljava/util/List;");
    }

    static jobject getTooltipText(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getTooltipText();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID__showInTooltip() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "showInTooltip", "method_57324", "showInTooltip", "m_324667_"), "()Z");
    }

    static jboolean _showInTooltip(const jobject& obj) {
                
       const auto methodID = methodID__showInTooltip();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_ITEM_BLOCKPREDICATESCHECKER_HPP