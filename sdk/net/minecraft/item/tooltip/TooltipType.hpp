// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ITEM_TOOLTIP_TOOLTIPTYPE_HPP
#define NET_MINECRAFT_ITEM_TOOLTIP_TOOLTIPTYPE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.item.tooltip.TooltipType
 * Remapped: cwm
 */
namespace TooltipType {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("cwm", "net/minecraft/world/item/TooltipFlag", "net/minecraft/class_1836", "net/minecraft/item/tooltip/TooltipType", "net/minecraft/src/C_1431_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.item.tooltip.TooltipType#BASIC
    [[maybe_unused]] static jobject get_field_BASIC() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "NORMAL", "field_41070", "BASIC", "f_256752_"), "Lcwm$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.item.tooltip.TooltipType#BASIC
    [[maybe_unused]] static void set_field_BASIC(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "NORMAL", "field_41070", "BASIC", "f_256752_"), "Lcwm$a;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.item.tooltip.TooltipType#ADVANCED
    [[maybe_unused]] static jobject get_field_ADVANCED() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ADVANCED", "field_41071", "ADVANCED", "f_256730_"), "Lcwm$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.item.tooltip.TooltipType#ADVANCED
    [[maybe_unused]] static void set_field_ADVANCED(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ADVANCED", "field_41071", "ADVANCED", "f_256730_"), "Lcwm$a;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_isAdvanced() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isAdvanced", "method_8035", "isAdvanced", "m_7050_"), "()Z");
    }

    static jboolean isAdvanced(const jobject& obj) {
                
       const auto methodID = methodID_isAdvanced();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isCreative() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "isCreative", "method_47370", "isCreative", "m_257552_"), "()Z");
    }

    static jboolean isCreative(const jobject& obj) {
                
       const auto methodID = methodID_isCreative();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_ITEM_TOOLTIP_TOOLTIPTYPE_HPP