// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ITEM_CROSSBOWITEM_HPP
#define NET_MINECRAFT_ITEM_CROSSBOWITEM_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.item.CrossbowItem
 * Remapped: ctc
 */
namespace CrossbowItem {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("ctc", "net/minecraft/world/item/CrossbowItem", "net/minecraft/class_1764", "net/minecraft/item/CrossbowItem", "net/minecraft/src/C_1349_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.item.CrossbowItem#DEFAULT_PULL_TIME
    [[maybe_unused]] static jfloat get_field_DEFAULT_PULL_TIME() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "MAX_CHARGE_DURATION", "field_30866", "DEFAULT_PULL_TIME", "f_150792_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.item.CrossbowItem#DEFAULT_PULL_TIME
    [[maybe_unused]] static void set_field_DEFAULT_PULL_TIME(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "MAX_CHARGE_DURATION", "field_30866", "DEFAULT_PULL_TIME", "f_150792_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.item.CrossbowItem#RANGE
    [[maybe_unused]] static jint get_field_RANGE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "DEFAULT_RANGE", "field_30863", "RANGE", "f_150789_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.item.CrossbowItem#RANGE
    [[maybe_unused]] static void set_field_RANGE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "DEFAULT_RANGE", "field_30863", "RANGE", "f_150789_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.item.CrossbowItem#charged
    static jboolean get_field_charged(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "startSoundPlayed", "field_7937", "charged", "f_40847_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.item.CrossbowItem#charged
    static void set_field_charged(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "startSoundPlayed", "field_7937", "charged", "f_40847_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.item.CrossbowItem#loaded
    static jboolean get_field_loaded(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "midLoadSoundPlayed", "field_7936", "loaded", "f_40848_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.item.CrossbowItem#loaded
    static void set_field_loaded(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "midLoadSoundPlayed", "field_7936", "loaded", "f_40848_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for static private field net.minecraft.item.CrossbowItem#CHARGE_PROGRESS
    [[maybe_unused]] static jfloat get_field_CHARGE_PROGRESS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "START_SOUND_PERCENT", "field_30867", "CHARGE_PROGRESS", "f_150793_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.item.CrossbowItem#CHARGE_PROGRESS
    [[maybe_unused]] static void set_field_CHARGE_PROGRESS(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "START_SOUND_PERCENT", "field_30867", "CHARGE_PROGRESS", "f_150793_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.item.CrossbowItem#LOAD_PROGRESS
    [[maybe_unused]] static jfloat get_field_LOAD_PROGRESS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "MID_SOUND_PERCENT", "field_30868", "LOAD_PROGRESS", "f_150794_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.item.CrossbowItem#LOAD_PROGRESS
    [[maybe_unused]] static void set_field_LOAD_PROGRESS(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "MID_SOUND_PERCENT", "field_30868", "LOAD_PROGRESS", "f_150794_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.item.CrossbowItem#DEFAULT_SPEED
    [[maybe_unused]] static jfloat get_field_DEFAULT_SPEED() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("p", "ARROW_POWER", "field_30869", "DEFAULT_SPEED", "f_150795_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.item.CrossbowItem#DEFAULT_SPEED
    [[maybe_unused]] static void set_field_DEFAULT_SPEED(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("p", "ARROW_POWER", "field_30869", "DEFAULT_SPEED", "f_150795_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.item.CrossbowItem#FIREWORK_ROCKET_SPEED
    [[maybe_unused]] static jfloat get_field_FIREWORK_ROCKET_SPEED() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("q", "FIREWORK_POWER", "field_30870", "FIREWORK_ROCKET_SPEED", "f_150796_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.item.CrossbowItem#FIREWORK_ROCKET_SPEED
    [[maybe_unused]] static void set_field_FIREWORK_ROCKET_SPEED(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("q", "FIREWORK_POWER", "field_30870", "FIREWORK_ROCKET_SPEED", "f_150796_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.item.CrossbowItem#field_49258
    [[maybe_unused]] static jfloat get_field_field_49258() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "MOB_ARROW_POWER", "field_49258", "field_49258", "f_316815_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.item.CrossbowItem#field_49258
    [[maybe_unused]] static void set_field_field_49258(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "MOB_ARROW_POWER", "field_49258", "field_49258", "f_316815_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.item.CrossbowItem#DEFAULT_LOADING_SOUNDS
    [[maybe_unused]] static jobject get_field_DEFAULT_LOADING_SOUNDS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("r", "DEFAULT_SOUNDS", "field_51626", "DEFAULT_LOADING_SOUNDS", "f_337601_"), "Lctc$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.item.CrossbowItem#DEFAULT_LOADING_SOUNDS
    [[maybe_unused]] static void set_field_DEFAULT_LOADING_SOUNDS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("r", "DEFAULT_SOUNDS", "field_51626", "DEFAULT_LOADING_SOUNDS", "f_337601_"), "Lctc$a;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_getHeldProjectiles() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getSupportedHeldProjectiles", "method_20310", "getHeldProjectiles", "m_6442_"), "()Ljava/util/function/Predicate;");
    }

    static jobject getHeldProjectiles(const jobject& obj) {
                
       const auto methodID = methodID_getHeldProjectiles();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getProjectiles() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getAllSupportedProjectiles", "method_19268", "getProjectiles", "m_6437_"), "()Ljava/util/function/Predicate;");
    }

    static jobject getProjectiles(const jobject& obj) {
                
       const auto methodID = methodID_getProjectiles();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_use() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "use", "method_7836", "use", "m_7203_"), "(Ldcw;Lcmx;Lbqq;)Lbqs;");
    }

    static jobject use(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_use();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getSpeed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getShootingPower", "method_20309", "getSpeed", "m_40945_"), "(Lcxg;)F");
    }

    static jfloat getSpeed(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getSpeed();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_onStoppedUsing() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "releaseUsing", "method_7840", "onStoppedUsing", "m_5551_"), "(Lcuq;Ldcw;Lbtn;I)V");
    }

    static void onStoppedUsing(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jint& arg3) {
                
       const auto methodID = methodID_onStoppedUsing();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_loadProjectiles() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "tryLoadProjectiles", "method_7767", "loadProjectiles", "m_40859_"), "(Lbtn;Lcuq;)Z");
    }

    static jboolean loadProjectiles(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_loadProjectiles();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isCharged() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("i", "isCharged", "method_7781", "isCharged", "m_40932_"), "(Lcuq;)Z");
    }

    static jboolean isCharged(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_isCharged();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_shoot() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "shootProjectile", "method_7763", "shoot", "m_40894_"), "(Lbtn;Lcnp;IFFFLbtn;)V");
    }

    static void shoot(const jobject& obj, const jobject& arg0, const jobject& arg1, const jint& arg2, const jfloat& arg3, const jfloat& arg4, const jfloat& arg5, const jobject& arg6) {
                
       const auto methodID = methodID_shoot();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    };
    
    static jmethodID methodID_calcVelocity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getProjectileShotVector", "method_57343", "calcVelocity", "m_323098_"), "(Lbtn;Lexc;F)Lorg/joml/Vector3f;");
    }

    static jobject calcVelocity(const jobject& arg0, const jobject& arg1, const jfloat& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_calcVelocity();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_createArrowEntity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "createProjectile", "method_57344", "createArrowEntity", "m_40862_"), "(Ldcw;Lbtn;Lcuq;Lcuq;Z)Lcnp;");
    }

    static jobject createArrowEntity(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jboolean& arg4) {
                
       const auto methodID = methodID_createArrowEntity();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_getWeaponStackDamage() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "getDurabilityUse", "method_57345", "getWeaponStackDamage", "m_319432_"), "(Lcuq;)I");
    }

    static jint getWeaponStackDamage(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getWeaponStackDamage();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_shootAll() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "performShooting", "method_7777", "shootAll", "m_40887_"), "(Ldcw;Lbtn;Lbqq;Lcuq;FFLbtn;)V");
    }

    static void shootAll(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jfloat& arg4, const jfloat& arg5, const jobject& arg6) {
                
       const auto methodID = methodID_shootAll();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    };
    
    static jmethodID methodID_getSoundPitch() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getShotPitch", "method_57342", "getSoundPitch", "m_321899_"), "(Layw;I)F");
    }

    static jfloat getSoundPitch(const jobject& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_getSoundPitch();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__getSoundPitch() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getRandomShotPitch", "method_7784", "getSoundPitch", "m_220025_"), "(ZLayw;)F");
    }

    static jfloat _getSoundPitch(const jboolean& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID__getSoundPitch();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_usageTick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onUseTick", "method_7852", "usageTick", "m_5929_"), "(Ldcw;Lbtn;Lcuq;I)V");
    }

    static void usageTick(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jint& arg3) {
                
       const auto methodID = methodID_usageTick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_getMaxUseTime() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getUseDuration", "method_7881", "getMaxUseTime", "m_8105_"), "(Lcuq;Lbtn;)I");
    }

    static jint getMaxUseTime(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_getMaxUseTime();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getPullTime() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "getChargeDuration", "method_7775", "getPullTime", "m_40939_"), "(Lcuq;Lbtn;)I");
    }

    static jint getPullTime(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_getPullTime();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getUseAction() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getUseAnimation", "method_7853", "getUseAction", "m_6164_"), "(Lcuq;)Lcwo;");
    }

    static jobject getUseAction(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getUseAction();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getLoadingSounds() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "getChargingSounds", "method_59976", "getLoadingSounds", "m_340184_"), "(Lcuq;)Lctc$a;");
    }

    static jobject getLoadingSounds(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getLoadingSounds();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getPullProgress() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getPowerForTime", "method_7770", "getPullProgress", "m_40853_"), "(ILcuq;Lbtn;)F");
    }

    static jfloat getPullProgress(const jint& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_getPullProgress();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_appendTooltip() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "appendHoverText", "method_7851", "appendTooltip", "m_7373_"), "(Lcuq;Lcul$b;Ljava/util/List;Lcwm;)V");
    }

    static void appendTooltip(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_appendTooltip();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_isUsedOnRelease() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "useOnRelease", "method_7838", "isUsedOnRelease", "m_41463_"), "(Lcuq;)Z");
    }

    static jboolean isUsedOnRelease(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isUsedOnRelease();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getRange() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getDefaultProjectileRange", "method_24792", "getRange", "m_6615_"), "()I");
    }

    static jint getRange(const jobject& obj) {
                
       const auto methodID = methodID_getRange();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_ITEM_CROSSBOWITEM_HPP