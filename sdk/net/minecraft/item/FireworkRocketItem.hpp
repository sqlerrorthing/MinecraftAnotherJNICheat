// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ITEM_FIREWORKROCKETITEM_HPP
#define NET_MINECRAFT_ITEM_FIREWORKROCKETITEM_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.item.FireworkRocketItem
 * Remapped: ctv
 */
namespace FireworkRocketItem {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("ctv", "net/minecraft/world/item/FireworkRocketItem", "net/minecraft/class_1781", "net/minecraft/item/FireworkRocketItem", "net/minecraft/src/C_1369_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.item.FireworkRocketItem#FLIGHT_VALUES
    [[maybe_unused]] static jbyte get_field_FLIGHT_VALUES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CRAFTABLE_DURATIONS", "field_41064", "FLIGHT_VALUES", "f_256994_"), "[B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticByteField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.item.FireworkRocketItem#FLIGHT_VALUES
    [[maybe_unused]] static void set_field_FLIGHT_VALUES(const jbyte &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CRAFTABLE_DURATIONS", "field_41064", "FLIGHT_VALUES", "f_256994_"), "[B");
        return MinecraftSDK::env->SetStaticByteField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.item.FireworkRocketItem#OFFSET_POS_MULTIPLIER
    [[maybe_unused]] static jdouble get_field_OFFSET_POS_MULTIPLIER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ROCKET_PLACEMENT_OFFSET", "field_30884", "OFFSET_POS_MULTIPLIER", "f_150840_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.item.FireworkRocketItem#OFFSET_POS_MULTIPLIER
    [[maybe_unused]] static void set_field_OFFSET_POS_MULTIPLIER(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ROCKET_PLACEMENT_OFFSET", "field_30884", "OFFSET_POS_MULTIPLIER", "f_150840_"), "D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    static jmethodID methodID_useOnBlock() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "useOn", "method_7884", "useOnBlock", "m_6225_"), "(Lcyf;)Lbqr;");
    }

    static jobject useOnBlock(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_useOnBlock();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_use() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "use", "method_7836", "use", "m_7203_"), "(Ldcw;Lcmx;Lbqq;)Lbqs;");
    }

    static jobject use(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_use();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_appendTooltip() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "appendHoverText", "method_7851", "appendTooltip", "m_7373_"), "(Lcuq;Lcul$b;Ljava/util/List;Lcwm;)V");
    }

    static void appendTooltip(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_appendTooltip();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_createEntity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "asProjectile", "method_58648", "createEntity", "m_319847_"), "(Ldcw;Ljw;Lcuq;Lji;)Lcnp;");
    }

    static jobject createEntity(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_createEntity();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_getProjectileSettings() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "createDispenseConfig", "method_58653", "getProjectileSettings", "m_320420_"), "()Lcvm$a;");
    }

    static jobject getProjectileSettings(const jobject& obj) {
                
       const auto methodID = methodID_getProjectileSettings();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_position() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getEntityPokingOutOfBlockPos", "method_58656", "position", "m_318884_"), "(Lku;Lji;)Lexc;");
    }

    static jobject position(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_position();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_ITEM_FIREWORKROCKETITEM_HPP