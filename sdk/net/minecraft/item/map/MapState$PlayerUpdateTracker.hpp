// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ITEM_MAP_MAPSTATE$PLAYERUPDATETRACKER_HPP
#define NET_MINECRAFT_ITEM_MAP_MAPSTATE$PLAYERUPDATETRACKER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.item.map.MapState$PlayerUpdateTracker
 * Remapped: eqt$a
 */
namespace MapState$PlayerUpdateTracker {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("eqt$a", "net/minecraft/world/level/saveddata/maps/MapItemSavedData$HoldingPlayer", "net/minecraft/class_22$class_23", "net/minecraft/item/map/MapState$PlayerUpdateTracker", "net/minecraft/src/C_2771_$C_2772_"));
        }
        return cachedClass;
    };

    // getter for public field net.minecraft.item.map.MapState$PlayerUpdateTracker#player
    static jobject get_field_player(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "player", "field_125", "player", "f_77959_"), "Lcmx;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static public field net.minecraft.item.map.MapState$PlayerUpdateTracker#player
    static void set_field_player(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "player", "field_125", "player", "f_77959_"), "Lcmx;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.item.map.MapState$PlayerUpdateTracker#dirty
    static jboolean get_field_dirty(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "dirtyData", "field_130", "dirty", "f_77962_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.item.map.MapState$PlayerUpdateTracker#dirty
    static void set_field_dirty(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "dirtyData", "field_130", "dirty", "f_77962_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.item.map.MapState$PlayerUpdateTracker#startX
    static jint get_field_startX(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "minDirtyX", "field_129", "startX", "f_77963_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.item.map.MapState$PlayerUpdateTracker#startX
    static void set_field_startX(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "minDirtyX", "field_129", "startX", "f_77963_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.item.map.MapState$PlayerUpdateTracker#startZ
    static jint get_field_startZ(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "minDirtyY", "field_128", "startZ", "f_77964_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.item.map.MapState$PlayerUpdateTracker#startZ
    static void set_field_startZ(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "minDirtyY", "field_128", "startZ", "f_77964_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.item.map.MapState$PlayerUpdateTracker#endX
    static jint get_field_endX(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "maxDirtyX", "field_127", "endX", "f_77965_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.item.map.MapState$PlayerUpdateTracker#endX
    static void set_field_endX(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "maxDirtyX", "field_127", "endX", "f_77965_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.item.map.MapState$PlayerUpdateTracker#endZ
    static jint get_field_endZ(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "maxDirtyY", "field_126", "endZ", "f_77966_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.item.map.MapState$PlayerUpdateTracker#endZ
    static void set_field_endZ(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "maxDirtyY", "field_126", "endZ", "f_77966_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.item.map.MapState$PlayerUpdateTracker#decorationsDirty
    static jboolean get_field_decorationsDirty(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "dirtyDecorations", "field_27891", "decorationsDirty", "f_164813_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.item.map.MapState$PlayerUpdateTracker#decorationsDirty
    static void set_field_decorationsDirty(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "dirtyDecorations", "field_27891", "decorationsDirty", "f_164813_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.item.map.MapState$PlayerUpdateTracker#emptyPacketsRequested
    static jint get_field_emptyPacketsRequested(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "tick", "field_124", "emptyPacketsRequested", "f_77967_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.item.map.MapState$PlayerUpdateTracker#emptyPacketsRequested
    static void set_field_emptyPacketsRequested(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "tick", "field_124", "emptyPacketsRequested", "f_77967_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.item.map.MapState$PlayerUpdateTracker#field_131
    static jint get_field_field_131(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "step", "field_131", "field_131", "f_77960_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static public field net.minecraft.item.map.MapState$PlayerUpdateTracker#field_131
    static void set_field_field_131(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "step", "field_131", "field_131", "f_77960_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    static jmethodID methodID_getMapUpdateData() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "createPatch", "method_32375", "getMapUpdateData", "m_164814_"), "()Leqt$b;");
    }

    static jobject getMapUpdateData(const jobject& obj) {
                
       const auto methodID = methodID_getMapUpdateData();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getPacket() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "nextUpdatePacket", "method_112", "getPacket", "m_164815_"), "(Leqr;)Lzg;");
    }

    static jobject getPacket(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getPacket();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_markDirty() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "markColorsDirty", "method_111", "markDirty", "m_164817_"), "(II)V");
    }

    static void markDirty(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_markDirty();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_markDecorationsDirty() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "markDecorationsDirty", "method_32379", "markDecorationsDirty", "m_164820_"), "()V");
    }

    static void markDecorationsDirty(const jobject& obj) {
                
       const auto methodID = methodID_markDecorationsDirty();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_ITEM_MAP_MAPSTATE$PLAYERUPDATETRACKER_HPP