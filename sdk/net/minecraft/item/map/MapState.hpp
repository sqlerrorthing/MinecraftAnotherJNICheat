// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ITEM_MAP_MAPSTATE_HPP
#define NET_MINECRAFT_ITEM_MAP_MAPSTATE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.item.map.MapState
 * Remapped: eqt
 */
namespace MapState {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("eqt", "net/minecraft/world/level/saveddata/maps/MapItemSavedData", "net/minecraft/class_22", "net/minecraft/item/map/MapState", "net/minecraft/src/C_2771_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.item.map.MapState#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "LOGGER", "field_25019", "LOGGER", "f_77895_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.item.map.MapState#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "LOGGER", "field_25019", "LOGGER", "f_77895_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.item.map.MapState#SIZE
    [[maybe_unused]] static jint get_field_SIZE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "MAP_SIZE", "field_31832", "SIZE", "f_164765_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.item.map.MapState#SIZE
    [[maybe_unused]] static void set_field_SIZE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "MAP_SIZE", "field_31832", "SIZE", "f_164765_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.item.map.MapState#SIZE_HALF
    [[maybe_unused]] static jint get_field_SIZE_HALF() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "HALF_MAP_SIZE", "field_31833", "SIZE_HALF", "f_164766_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.item.map.MapState#SIZE_HALF
    [[maybe_unused]] static void set_field_SIZE_HALF(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "HALF_MAP_SIZE", "field_31833", "SIZE_HALF", "f_164766_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.item.map.MapState#MAX_SCALE
    [[maybe_unused]] static jint get_field_MAX_SCALE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "MAX_SCALE", "field_31831", "MAX_SCALE", "f_164764_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.item.map.MapState#MAX_SCALE
    [[maybe_unused]] static void set_field_MAX_SCALE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "MAX_SCALE", "field_31831", "MAX_SCALE", "f_164764_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.item.map.MapState#MAX_DECORATIONS
    [[maybe_unused]] static jint get_field_MAX_DECORATIONS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "TRACKED_DECORATION_LIMIT", "field_33991", "MAX_DECORATIONS", "f_181307_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.item.map.MapState#MAX_DECORATIONS
    [[maybe_unused]] static void set_field_MAX_DECORATIONS(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "TRACKED_DECORATION_LIMIT", "field_33991", "MAX_DECORATIONS", "f_181307_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.item.map.MapState#FRAME_PREFIX
    [[maybe_unused]] static jobject get_field_FRAME_PREFIX() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "FRAME_PREFIX", "field_52316", "FRAME_PREFIX", "f_336663_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.item.map.MapState#FRAME_PREFIX
    [[maybe_unused]] static void set_field_FRAME_PREFIX(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "FRAME_PREFIX", "field_52316", "FRAME_PREFIX", "f_336663_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for public field net.minecraft.item.map.MapState#centerX
    static jint get_field_centerX(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "centerX", "field_116", "centerX", "f_256718_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static public field net.minecraft.item.map.MapState#centerX
    static void set_field_centerX(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "centerX", "field_116", "centerX", "f_256718_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.item.map.MapState#centerZ
    static jint get_field_centerZ(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "centerZ", "field_115", "centerZ", "f_256789_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static public field net.minecraft.item.map.MapState#centerZ
    static void set_field_centerZ(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "centerZ", "field_115", "centerZ", "f_256789_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.item.map.MapState#dimension
    static jobject get_field_dimension(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "dimension", "field_118", "dimension", "f_77887_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static public field net.minecraft.item.map.MapState#dimension
    static void set_field_dimension(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "dimension", "field_118", "dimension", "f_77887_"), "Lakq;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.item.map.MapState#showDecorations
    static jboolean get_field_showDecorations(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "trackingPosition", "field_114", "showDecorations", "f_77888_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.item.map.MapState#showDecorations
    static void set_field_showDecorations(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "trackingPosition", "field_114", "showDecorations", "f_77888_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.item.map.MapState#unlimitedTracking
    static jboolean get_field_unlimitedTracking(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "unlimitedTracking", "field_113", "unlimitedTracking", "f_77889_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.item.map.MapState#unlimitedTracking
    static void set_field_unlimitedTracking(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "unlimitedTracking", "field_113", "unlimitedTracking", "f_77889_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.item.map.MapState#scale
    static jbyte get_field_scale(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "scale", "field_119", "scale", "f_77890_"), "B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetByteField(obj, fieldID);
    };

    // setter for static public field net.minecraft.item.map.MapState#scale
    static void set_field_scale(const jobject &obj, const jbyte &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "scale", "field_119", "scale", "f_77890_"), "B");
        return MinecraftSDK::env->SetByteField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.item.map.MapState#colors
    static jbyte get_field_colors(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "colors", "field_122", "colors", "f_77891_"), "[B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetByteField(obj, fieldID);
    };

    // setter for static public field net.minecraft.item.map.MapState#colors
    static void set_field_colors(const jobject &obj, const jbyte &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "colors", "field_122", "colors", "f_77891_"), "[B");
        return MinecraftSDK::env->SetByteField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.item.map.MapState#locked
    static jboolean get_field_locked(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "locked", "field_17403", "locked", "f_77892_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static public field net.minecraft.item.map.MapState#locked
    static void set_field_locked(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "locked", "field_17403", "locked", "f_77892_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.item.map.MapState#updateTrackers
    static jobject get_field_updateTrackers(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "carriedBy", "field_112", "updateTrackers", "f_77893_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.item.map.MapState#updateTrackers
    static void set_field_updateTrackers(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "carriedBy", "field_112", "updateTrackers", "f_77893_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.item.map.MapState#updateTrackersByPlayer
    static jobject get_field_updateTrackersByPlayer(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "carriedByPlayers", "field_120", "updateTrackersByPlayer", "f_77896_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.item.map.MapState#updateTrackersByPlayer
    static void set_field_updateTrackersByPlayer(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "carriedByPlayers", "field_120", "updateTrackersByPlayer", "f_77896_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.item.map.MapState#banners
    static jobject get_field_banners(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "bannerMarkers", "field_123", "banners", "f_77897_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.item.map.MapState#banners
    static void set_field_banners(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "bannerMarkers", "field_123", "banners", "f_77897_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.item.map.MapState#decorations
    static jobject get_field_decorations(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "decorations", "field_117", "decorations", "f_77894_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.item.map.MapState#decorations
    static void set_field_decorations(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "decorations", "field_117", "decorations", "f_77894_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.item.map.MapState#frames
    static jobject get_field_frames(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "frameMarkers", "field_121", "frames", "f_77898_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.item.map.MapState#frames
    static void set_field_frames(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "frameMarkers", "field_121", "frames", "f_77898_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.item.map.MapState#decorationCount
    static jint get_field_decorationCount(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "trackedDecorationCount", "field_33992", "decorationCount", "f_181308_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.item.map.MapState#decorationCount
    static void set_field_decorationCount(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "trackedDecorationCount", "field_33992", "decorationCount", "f_181308_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    static jmethodID methodID_getPersistentStateType() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "factory", "method_52611", "getPersistentStateType", "m_295558_"), "()Leql$a;");
    }

    static jobject getPersistentStateType() {
       const auto clazz = self();
       const auto methodID = methodID_getPersistentStateType();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_of() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "createFresh", "method_32363", "of", "m_164780_"), "(DDBZZLakq;)Leqt;");
    }

    static jobject of(const jdouble& arg0, const jdouble& arg1, const jbyte& arg2, const jboolean& arg3, const jboolean& arg4, const jobject& arg5) {
       const auto clazz = self();
       const auto methodID = methodID_of();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
    static jmethodID methodID__of() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "createForClient", "method_32362", "of", "m_164776_"), "(BZLakq;)Leqt;");
    }

    static jobject _of(const jbyte& arg0, const jboolean& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID__of();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_fromNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "load", "method_32371", "fromNbt", "m_164807_"), "(Lub;Ljo$a;)Leqt;");
    }

    static jobject fromNbt(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_fromNbt();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_writeNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "save", "method_75", "writeNbt", "m_7176_"), "(Lub;Ljo$a;)Lub;");
    }

    static jobject writeNbt(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_writeNbt();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_copy() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "locked", "method_32361", "copy", "m_164775_"), "()Leqt;");
    }

    static jobject copy(const jobject& obj) {
                
       const auto methodID = methodID_copy();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_zoomOut() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "scaled", "method_32364", "zoomOut", "m_164787_"), "()Leqt;");
    }

    static jobject zoomOut(const jobject& obj) {
                
       const auto methodID = methodID_zoomOut();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getEqualPredicate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "mapMatcher", "method_55784", "getEqualPredicate", "m_322359_"), "(Lcuq;)Ljava/util/function/Predicate;");
    }

    static jobject getEqualPredicate(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getEqualPredicate();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_update() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "tickCarriedBy", "method_102", "update", "m_77918_"), "(Lcmx;Lcuq;)V");
    }

    static void update(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_update();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_removeDecoration() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "removeDecoration", "method_32368", "removeDecoration", "m_164799_"), "(Ljava/lang/String;)V");
    }

    static void removeDecoration(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_removeDecoration();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_addDecorationsNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "addTargetDecoration", "method_110", "addDecorationsNbt", "m_77925_"), "(Lcuq;Ljd;Ljava/lang/String;Ljm;)V");
    }

    static void addDecorationsNbt(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_addDecorationsNbt();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_addDecoration() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addDecoration", "method_107", "addDecoration", "m_77937_"), "(Ljm;Ldcx;Ljava/lang/String;DDDLwz;)V");
    }

    static void addDecoration(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jdouble& arg3, const jdouble& arg4, const jdouble& arg5, const jobject& arg6) {
                
       const auto methodID = methodID_addDecoration();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    };
    
    static jmethodID methodID_getPlayerMarkerPacket() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getUpdatePacket", "method_100", "getPlayerMarkerPacket", "m_164796_"), "(Leqr;Lcmx;)Lzg;");
    }

    static jobject getPlayerMarkerPacket(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_getPlayerMarkerPacket();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_markDirty() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setColorsDirty", "method_103", "markDirty", "m_164789_"), "(II)V");
    }

    static void markDirty(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_markDirty();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_markDecorationsDirty() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "setDecorationsDirty", "method_32374", "markDecorationsDirty", "m_164812_"), "()V");
    }

    static void markDecorationsDirty(const jobject& obj) {
                
       const auto methodID = methodID_markDecorationsDirty();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getPlayerSyncData() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getHoldingPlayer", "method_101", "getPlayerSyncData", "m_77916_"), "(Lcmx;)Leqt$a;");
    }

    static jobject getPlayerSyncData(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getPlayerSyncData();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_addBanner() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "toggleBanner", "method_108", "addBanner", "m_77934_"), "(Ldcx;Ljd;)Z");
    }

    static jboolean addBanner(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_addBanner();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_removeBanner() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "checkBanners", "method_109", "removeBanner", "m_77930_"), "(Ldcc;II)V");
    }

    static void removeBanner(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_removeBanner();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getBanners() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "getBanners", "method_35503", "getBanners", "m_164809_"), "()Ljava/util/Collection;");
    }

    static jobject getBanners(const jobject& obj) {
                
       const auto methodID = methodID_getBanners();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_removeFrame() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "removedFromFrame", "method_104", "removeFrame", "m_77947_"), "(Ljd;I)V");
    }

    static void removeFrame(const jobject& obj, const jobject& arg0, const jint& arg1) {
                
       const auto methodID = methodID_removeFrame();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_putColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateColor", "method_32365", "putColor", "m_164792_"), "(IIB)Z");
    }

    static jboolean putColor(const jobject& obj, const jint& arg0, const jint& arg1, const jbyte& arg2) {
                
       const auto methodID = methodID_putColor();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_setColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setColor", "method_32370", "setColor", "m_164803_"), "(IIB)V");
    }

    static void setColor(const jobject& obj, const jint& arg0, const jint& arg1, const jbyte& arg2) {
                
       const auto methodID = methodID_setColor();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_hasExplorationMapDecoration() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "isExplorationMap", "method_32372", "hasExplorationMapDecoration", "m_164810_"), "()Z");
    }

    static jboolean hasExplorationMapDecoration(const jobject& obj) {
                
       const auto methodID = methodID_hasExplorationMapDecoration();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_replaceDecorations() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addClientSideDecorations", "method_32369", "replaceDecorations", "m_164801_"), "(Ljava/util/List;)V");
    }

    static void replaceDecorations(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_replaceDecorations();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getDecorations() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "getDecorations", "method_32373", "getDecorations", "m_164811_"), "()Ljava/lang/Iterable;");
    }

    static jobject getDecorations(const jobject& obj) {
                
       const auto methodID = methodID_getDecorations();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_decorationCountNotLessThan() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isTrackedCountOverLimit", "method_37343", "decorationCountNotLessThan", "m_181312_"), "(I)Z");
    }

    static jboolean decorationCountNotLessThan(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_decorationCountNotLessThan();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getFrameDecorationKey() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "getFrameKey", "method_61169", "getFrameDecorationKey", "m_339532_"), "(I)Ljava/lang/String;");
    }

    static jobject getFrameDecorationKey(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getFrameDecorationKey();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_ITEM_MAP_MAPSTATE_HPP