// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_DATAFIXER_FIX_CHUNKHEIGHTANDBIOMEFIX_HPP
#define NET_MINECRAFT_DATAFIXER_FIX_CHUNKHEIGHTANDBIOMEFIX_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix
 * Remapped: bbr
 */
namespace ChunkHeightAndBiomeFix {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("bbr", "net/minecraft/util/datafix/fixes/ChunkHeightAndBiomeFix", "net/minecraft/class_6637", "net/minecraft/datafixer/fix/ChunkHeightAndBiomeFix", "net/minecraft/src/C_182794_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#CONTEXT
    [[maybe_unused]] static jobject get_field_CONTEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "DATAFIXER_CONTEXT_TAG", "field_35444", "CONTEXT", "f_184843_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#CONTEXT
    [[maybe_unused]] static void set_field_CONTEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "DATAFIXER_CONTEXT_TAG", "field_35444", "CONTEXT", "f_184843_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#NAME
    [[maybe_unused]] static jobject get_field_NAME() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "NAME", "field_35017", "NAME", "f_184845_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#NAME
    [[maybe_unused]] static void set_field_NAME(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "NAME", "field_35017", "NAME", "f_184845_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#CHUNK_SECTIONS_IN_OLD_CHUNK
    [[maybe_unused]] static jint get_field_CHUNK_SECTIONS_IN_OLD_CHUNK() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "OLD_SECTION_COUNT", "field_35018", "CHUNK_SECTIONS_IN_OLD_CHUNK", "f_184846_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#CHUNK_SECTIONS_IN_OLD_CHUNK
    [[maybe_unused]] static void set_field_CHUNK_SECTIONS_IN_OLD_CHUNK(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "OLD_SECTION_COUNT", "field_35018", "CHUNK_SECTIONS_IN_OLD_CHUNK", "f_184846_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#CHUNK_SECTIONS_IN_NEW_CHUNK
    [[maybe_unused]] static jint get_field_CHUNK_SECTIONS_IN_NEW_CHUNK() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "NEW_SECTION_COUNT", "field_35019", "CHUNK_SECTIONS_IN_NEW_CHUNK", "f_184847_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#CHUNK_SECTIONS_IN_NEW_CHUNK
    [[maybe_unused]] static void set_field_CHUNK_SECTIONS_IN_NEW_CHUNK(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "NEW_SECTION_COUNT", "field_35019", "CHUNK_SECTIONS_IN_NEW_CHUNK", "f_184847_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#MIN_CHUNK_SECTION_Y
    [[maybe_unused]] static jint get_field_MIN_CHUNK_SECTION_Y() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "NEW_MIN_SECTION_Y", "field_35020", "MIN_CHUNK_SECTION_Y", "f_184848_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#MIN_CHUNK_SECTION_Y
    [[maybe_unused]] static void set_field_MIN_CHUNK_SECTION_Y(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "NEW_MIN_SECTION_Y", "field_35020", "MIN_CHUNK_SECTION_Y", "f_184848_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#field_36214
    [[maybe_unused]] static jint get_field_field_36214() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "BLOCKS_PER_SECTION", "field_36214", "field_36214", "f_196581_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#field_36214
    [[maybe_unused]] static void set_field_field_36214(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "BLOCKS_PER_SECTION", "field_36214", "field_36214", "f_196581_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#field_36215
    [[maybe_unused]] static jint get_field_field_36215() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "LONGS_PER_SECTION", "field_36215", "field_36215", "f_196582_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#field_36215
    [[maybe_unused]] static void set_field_field_36215(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "LONGS_PER_SECTION", "field_36215", "field_36215", "f_196582_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#field_35022
    [[maybe_unused]] static jint get_field_field_35022() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "HEIGHTMAP_BITS", "field_35022", "field_35022", "f_184850_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#field_35022
    [[maybe_unused]] static void set_field_field_35022(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "HEIGHTMAP_BITS", "field_35022", "field_35022", "f_184850_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#field_35023
    [[maybe_unused]] static jlong get_field_field_35023() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "HEIGHTMAP_MASK", "field_35023", "field_35023", "f_184851_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticLongField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#field_35023
    [[maybe_unused]] static void set_field_field_35023(const jlong &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "HEIGHTMAP_MASK", "field_35023", "field_35023", "f_184851_"), "J");
        return MinecraftSDK::env->SetStaticLongField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#field_35024
    [[maybe_unused]] static jint get_field_field_35024() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "HEIGHTMAP_OFFSET", "field_35024", "field_35024", "f_184852_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#field_35024
    [[maybe_unused]] static void set_field_field_35024(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "HEIGHTMAP_OFFSET", "field_35024", "field_35024", "f_184852_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#HEIGHTMAP_KEYS
    [[maybe_unused]] static jobject get_field_HEIGHTMAP_KEYS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "HEIGHTMAP_TYPES", "field_35025", "HEIGHTMAP_KEYS", "f_184853_"), "[Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#HEIGHTMAP_KEYS
    [[maybe_unused]] static void set_field_HEIGHTMAP_KEYS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "HEIGHTMAP_TYPES", "field_35025", "HEIGHTMAP_KEYS", "f_184853_"), "[Ljava/lang/String;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#STATUSES_TO_SKIP_UPDATE
    [[maybe_unused]] static jobject get_field_STATUSES_TO_SKIP_UPDATE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "STATUS_IS_OR_AFTER_SURFACE", "field_35667", "STATUSES_TO_SKIP_UPDATE", "f_184854_"), "Ljava/util/Set;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#STATUSES_TO_SKIP_UPDATE
    [[maybe_unused]] static void set_field_STATUSES_TO_SKIP_UPDATE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "STATUS_IS_OR_AFTER_SURFACE", "field_35667", "STATUSES_TO_SKIP_UPDATE", "f_184854_"), "Ljava/util/Set;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#field_35668
    [[maybe_unused]] static jobject get_field_field_35668() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "STATUS_IS_OR_AFTER_NOISE", "field_35668", "field_35668", "f_184855_"), "Ljava/util/Set;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#field_35668
    [[maybe_unused]] static void set_field_field_35668(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "STATUS_IS_OR_AFTER_NOISE", "field_35668", "field_35668", "f_184855_"), "Ljava/util/Set;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#SURFACE_BLOCKS
    [[maybe_unused]] static jobject get_field_SURFACE_BLOCKS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "BLOCKS_BEFORE_FEATURE_STATUS", "field_35669", "SURFACE_BLOCKS", "f_184856_"), "Ljava/util/Set;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#SURFACE_BLOCKS
    [[maybe_unused]] static void set_field_SURFACE_BLOCKS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "BLOCKS_BEFORE_FEATURE_STATUS", "field_35669", "SURFACE_BLOCKS", "f_184856_"), "Ljava/util/Set;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#field_35026
    [[maybe_unused]] static jint get_field_field_35026() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("p", "BIOME_CONTAINER_LAYER_SIZE", "field_35026", "field_35026", "f_184857_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#field_35026
    [[maybe_unused]] static void set_field_field_35026(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("p", "BIOME_CONTAINER_LAYER_SIZE", "field_35026", "field_35026", "f_184857_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#field_35027
    [[maybe_unused]] static jint get_field_field_35027() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("q", "BIOME_CONTAINER_SIZE", "field_35027", "field_35027", "f_184858_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#field_35027
    [[maybe_unused]] static void set_field_field_35027(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("q", "BIOME_CONTAINER_SIZE", "field_35027", "field_35027", "f_184858_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#field_35028
    [[maybe_unused]] static jint get_field_field_35028() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("r", "BIOME_CONTAINER_TOP_LAYER_OFFSET", "field_35028", "field_35028", "f_184859_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#field_35028
    [[maybe_unused]] static void set_field_field_35028(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("r", "BIOME_CONTAINER_TOP_LAYER_OFFSET", "field_35028", "field_35028", "f_184859_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#PLAINS_ID
    [[maybe_unused]] static jobject get_field_PLAINS_ID() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "DEFAULT_BIOME", "field_35016", "PLAINS_ID", "f_184844_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#PLAINS_ID
    [[maybe_unused]] static void set_field_PLAINS_ID(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "DEFAULT_BIOME", "field_35016", "PLAINS_ID", "f_184844_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#RAW_BIOME_IDS
    [[maybe_unused]] static jobject get_field_RAW_BIOME_IDS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("s", "BIOMES_BY_ID", "field_35029", "RAW_BIOME_IDS", "f_184860_"), "Lit/unimi/dsi/fastutil/ints/Int2ObjectMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.datafixer.fix.ChunkHeightAndBiomeFix#RAW_BIOME_IDS
    [[maybe_unused]] static void set_field_RAW_BIOME_IDS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("s", "BIOMES_BY_ID", "field_35029", "RAW_BIOME_IDS", "f_184860_"), "Lit/unimi/dsi/fastutil/ints/Int2ObjectMap;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_makeRule() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("makeRule", "makeRule", "", "", "makeRule"), "()Lcom/mojang/datafixers/TypeRewriteRule;");
    }

    static jobject makeRule(const jobject& obj) {
                
       const auto methodID = methodID_makeRule();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_fixStatus() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "predictChunkStatusBeforeSurface", "method_39517", "fixStatus", "m_184903_"), "(Lcom/mojang/serialization/Dynamic;Ljava/util/Set;)Lcom/mojang/serialization/Dynamic;");
    }

    static jobject fixStatus(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_fixStatus();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_fixBiomes() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getBiomeContainers", "method_38806", "fixBiomes", "m_184906_"), "(Lcom/mojang/serialization/Dynamic;ZILorg/apache/commons/lang3/mutable/MutableBoolean;)[Lcom/mojang/serialization/Dynamic;");
    }

    static jobject fixBiomes(const jobject& arg0, const jboolean& arg1, const jint& arg2, const jobject& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_fixBiomes();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_getClamped() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getOldBiome", "method_39519", "getClamped", "m_184948_"), "([II)I");
    }

    static jint getClamped(const jarray& arg0, const jint& arg1, const jint& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_getClamped();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_fixLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "updateChunkTag", "method_38807", "fixLevel", "m_184911_"), "(Lcom/mojang/serialization/Dynamic;ZZZLjava/util/function/Supplier;)Lcom/mojang/serialization/Dynamic;");
    }

    static jobject fixLevel(const jobject& arg0, const jboolean& arg1, const jboolean& arg2, const jboolean& arg3, const jobject& arg4) {
       const auto clazz = self();
       const auto methodID = methodID_fixLevel();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_fixUpgradeData() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "shiftUpgradeData", "method_39754", "fixUpgradeData", "m_196590_"), "(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;");
    }

    static jobject fixUpgradeData(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_fixUpgradeData();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_fixCarvingMasks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "updateCarvingMasks", "method_38799", "fixCarvingMasks", "m_184887_"), "(Lcom/mojang/serialization/Dynamic;II)Lcom/mojang/serialization/Dynamic;");
    }

    static jobject fixCarvingMasks(const jobject& arg0, const jint& arg1, const jint& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_fixCarvingMasks();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_fixChunkSectionList() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "addPaddingEntries", "method_38805", "fixChunkSectionList", "m_184900_"), "(Lcom/mojang/serialization/Dynamic;Ljava/lang/String;)Lcom/mojang/serialization/Dynamic;");
    }

    static jobject fixChunkSectionList(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_fixChunkSectionList();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_fixHeightmaps() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "updateHeightmaps", "method_38798", "fixHeightmaps", "m_184885_"), "(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;");
    }

    static jobject fixHeightmaps(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_fixHeightmaps();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_fixHeightmap() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "getFixedHeightmap", "method_38812", "fixHeightmap", "m_184956_"), "(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;");
    }

    static jobject fixHeightmap(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_fixHeightmap();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID__fixBiomes() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "makeBiomeContainer", "method_38803", "fixBiomes", "m_184894_"), "(Lcom/mojang/serialization/Dynamic;Lit/unimi/dsi/fastutil/ints/Int2IntFunction;)Lcom/mojang/serialization/Dynamic;");
    }

    static jobject _fixBiomes(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID__fixBiomes();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_fixPalette() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("d", "makePalettedContainer", "method_38816", "fixPalette", "m_184969_"), "(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;");
    }

    static jobject fixPalette(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_fixPalette();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_fixPaletteWithData() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "makePalettedContainer", "method_38802", "fixPaletteWithData", "m_184891_"), "(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;");
    }

    static jobject fixPaletteWithData(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_fixPaletteWithData();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__fixPalette() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "makeOptimizedPalettedContainer", "method_38813", "fixPalette", "m_184958_"), "(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;");
    }

    static jobject _fixPalette(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID__fixPalette();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_method_39781() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "padPaletteEntries", "method_39781", "method_39781", "m_196592_"), "(Lcom/mojang/serialization/Dynamic;Lcom/mojang/serialization/Dynamic;Ljava/util/List;)Lcom/mojang/serialization/Dynamic;");
    }

    static jobject method_39781(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_method_39781();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_ceilLog2() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "ceillog2", "method_38793", "ceilLog2", "m_184865_"), "(I)I");
    }

    static jint ceilLog2(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_ceilLog2();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_DATAFIXER_FIX_CHUNKHEIGHTANDBIOMEFIX_HPP