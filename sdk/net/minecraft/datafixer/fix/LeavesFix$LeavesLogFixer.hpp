// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_DATAFIXER_FIX_LEAVESFIX$LEAVESLOGFIXER_HPP
#define NET_MINECRAFT_DATAFIXER_FIX_LEAVESFIX$LEAVESLOGFIXER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.datafixer.fix.LeavesFix$LeavesLogFixer
 * Remapped: bfa$a
 */
namespace LeavesFix$LeavesLogFixer {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("bfa$a", "net/minecraft/util/datafix/fixes/LeavesFix$LeavesSection", "net/minecraft/class_1191$class_1192", "net/minecraft/datafixer/fix/LeavesFix$LeavesLogFixer", "net/minecraft/src/C_313_$C_314_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.datafixer.fix.LeavesFix$LeavesLogFixer#PERSISTENT
    [[maybe_unused]] static jobject get_field_PERSISTENT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "PERSISTENT", "field_29897", "PERSISTENT", "f_145474_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.datafixer.fix.LeavesFix$LeavesLogFixer#PERSISTENT
    [[maybe_unused]] static void set_field_PERSISTENT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "PERSISTENT", "field_29897", "PERSISTENT", "f_145474_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.datafixer.fix.LeavesFix$LeavesLogFixer#DECAYABLE
    [[maybe_unused]] static jobject get_field_DECAYABLE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "DECAYABLE", "field_29898", "DECAYABLE", "f_145475_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.datafixer.fix.LeavesFix$LeavesLogFixer#DECAYABLE
    [[maybe_unused]] static void set_field_DECAYABLE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "DECAYABLE", "field_29898", "DECAYABLE", "f_145475_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.datafixer.fix.LeavesFix$LeavesLogFixer#DISTANCE
    [[maybe_unused]] static jobject get_field_DISTANCE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "DISTANCE", "field_29899", "DISTANCE", "f_145476_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.datafixer.fix.LeavesFix$LeavesLogFixer#DISTANCE
    [[maybe_unused]] static void set_field_DISTANCE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "DISTANCE", "field_29899", "DISTANCE", "f_145476_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.datafixer.fix.LeavesFix$LeavesLogFixer#leafIndices
    static jobject get_field_leafIndices(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "leaveIds", "field_5689", "leafIndices", "f_16250_"), "Lit/unimi/dsi/fastutil/ints/IntSet;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.datafixer.fix.LeavesFix$LeavesLogFixer#leafIndices
    static void set_field_leafIndices(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "leaveIds", "field_5689", "leafIndices", "f_16250_"), "Lit/unimi/dsi/fastutil/ints/IntSet;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.datafixer.fix.LeavesFix$LeavesLogFixer#logIndices
    static jobject get_field_logIndices(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "logIds", "field_5691", "logIndices", "f_16251_"), "Lit/unimi/dsi/fastutil/ints/IntSet;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.datafixer.fix.LeavesFix$LeavesLogFixer#logIndices
    static void set_field_logIndices(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "logIds", "field_5691", "logIndices", "f_16251_"), "Lit/unimi/dsi/fastutil/ints/IntSet;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.datafixer.fix.LeavesFix$LeavesLogFixer#leafStates
    static jobject get_field_leafStates(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "stateToIdMap", "field_5690", "leafStates", "f_16252_"), "Lit/unimi/dsi/fastutil/ints/Int2IntMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.datafixer.fix.LeavesFix$LeavesLogFixer#leafStates
    static void set_field_leafStates(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "stateToIdMap", "field_5690", "leafStates", "f_16252_"), "Lit/unimi/dsi/fastutil/ints/Int2IntMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_computeIsFixed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "skippable", "method_5076", "computeIsFixed", "m_7969_"), "()Z");
    }

    static jboolean computeIsFixed(const jobject& obj) {
                
       const auto methodID = methodID_computeIsFixed();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_createLeafProperties() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "makeLeafTag", "method_5072", "createLeafProperties", "m_16271_"), "(Lcom/mojang/serialization/Dynamic;Ljava/lang/String;ZI)Lcom/mojang/serialization/Dynamic;");
    }

    static jobject createLeafProperties(const jobject& obj, const jobject& arg0, const jobject& arg1, const jboolean& arg2, const jint& arg3) {
                
       const auto methodID = methodID_createLeafProperties();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_isLog() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isLog", "method_5068", "isLog", "m_16257_"), "(I)Z");
    }

    static jboolean isLog(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_isLog();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isLeaf() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "isLeaf", "method_5071", "isLeaf", "m_16276_"), "(I)Z");
    }

    static jboolean isLeaf(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_isLeaf();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getDistanceToLog() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getDistance", "method_5065", "getDistanceToLog", "m_16278_"), "(I)I");
    }

    static jint getDistanceToLog(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_getDistanceToLog();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_computeLeafStates() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setDistance", "method_5070", "computeLeafStates", "m_16259_"), "(III)V");
    }

    static void computeLeafStates(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_computeLeafStates();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
};

#endif // NET_MINECRAFT_DATAFIXER_FIX_LEAVESFIX$LEAVESLOGFIXER_HPP