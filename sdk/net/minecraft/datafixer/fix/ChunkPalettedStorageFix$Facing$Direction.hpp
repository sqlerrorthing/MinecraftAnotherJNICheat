// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_DATAFIXER_FIX_CHUNKPALETTEDSTORAGEFIX$FACING$DIRECTION_HPP
#define NET_MINECRAFT_DATAFIXER_FIX_CHUNKPALETTEDSTORAGEFIX$FACING$DIRECTION_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.datafixer.fix.ChunkPalettedStorageFix$Facing$Direction
 * Remapped: bbt$b$b
 */
namespace ChunkPalettedStorageFix$Facing$Direction {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("bbt$b$b", "net/minecraft/util/datafix/fixes/ChunkPalettedStorageFix$Direction$AxisDirection", "net/minecraft/class_3582$class_3584$class_3586", "net/minecraft/datafixer/fix/ChunkPalettedStorageFix$Facing$Direction", "net/minecraft/src/C_242_$C_245_$C_247_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.datafixer.fix.ChunkPalettedStorageFix$Facing$Direction#POSITIVE
    [[maybe_unused]] static jobject get_field_POSITIVE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "POSITIVE", "field_15873", "POSITIVE", "POSITIVE"), "Lbbt$b$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.datafixer.fix.ChunkPalettedStorageFix$Facing$Direction#POSITIVE
    [[maybe_unused]] static void set_field_POSITIVE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "POSITIVE", "field_15873", "POSITIVE", "POSITIVE"), "Lbbt$b$b;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.datafixer.fix.ChunkPalettedStorageFix$Facing$Direction#NEGATIVE
    [[maybe_unused]] static jobject get_field_NEGATIVE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "NEGATIVE", "field_15870", "NEGATIVE", "NEGATIVE"), "Lbbt$b$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.datafixer.fix.ChunkPalettedStorageFix$Facing$Direction#NEGATIVE
    [[maybe_unused]] static void set_field_NEGATIVE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "NEGATIVE", "field_15870", "NEGATIVE", "NEGATIVE"), "Lbbt$b$b;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.datafixer.fix.ChunkPalettedStorageFix$Facing$Direction#offset
    static jint get_field_offset(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "step", "field_15872", "offset", "f_15174_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.datafixer.fix.ChunkPalettedStorageFix$Facing$Direction#offset
    static void set_field_offset(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "step", "field_15872", "offset", "f_15174_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    static jmethodID methodID_values() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("values", "values", "values", "values", "values"), "()[Lbbt$b$b;");
    }

    static jobject values() {
       const auto clazz = self();
       const auto methodID = methodID_values();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_valueOf() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("valueOf", "valueOf", "valueOf", "valueOf", "valueOf"), "(Ljava/lang/String;)Lbbt$b$b;");
    }

    static jobject valueOf(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_valueOf();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getOffset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getStep", "method_15645", "getOffset", "m_15181_"), "()I");
    }

    static jint getOffset(const jobject& obj) {
                
       const auto methodID = methodID_getOffset();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_DATAFIXER_FIX_CHUNKPALETTEDSTORAGEFIX$FACING$DIRECTION_HPP