// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_DATAFIXER_FIX_VILLAGERFOLLOWRANGEFIX_HPP
#define NET_MINECRAFT_DATAFIXER_FIX_VILLAGERFOLLOWRANGEFIX_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.datafixer.fix.VillagerFollowRangeFix
 * Remapped: bhr
 */
namespace VillagerFollowRangeFix {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("bhr", "net/minecraft/util/datafix/fixes/VillagerFollowRangeFix", "net/minecraft/class_5273", "net/minecraft/datafixer/fix/VillagerFollowRangeFix", "net/minecraft/src/C_361_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.datafixer.fix.VillagerFollowRangeFix#OLD_RANGE
    [[maybe_unused]] static jdouble get_field_OLD_RANGE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "ORIGINAL_VALUE", "field_29912", "OLD_RANGE", "f_145757_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.datafixer.fix.VillagerFollowRangeFix#OLD_RANGE
    [[maybe_unused]] static void set_field_OLD_RANGE(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "ORIGINAL_VALUE", "field_29912", "OLD_RANGE", "f_145757_"), "D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.datafixer.fix.VillagerFollowRangeFix#NEW_RANGE
    [[maybe_unused]] static jdouble get_field_NEW_RANGE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "NEW_BASE_VALUE", "field_29913", "NEW_RANGE", "f_145758_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.datafixer.fix.VillagerFollowRangeFix#NEW_RANGE
    [[maybe_unused]] static void set_field_NEW_RANGE(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "NEW_BASE_VALUE", "field_29913", "NEW_RANGE", "f_145758_"), "D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    static jmethodID methodID_transform() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "fix", "method_5105", "transform", "m_7504_"), "(Lcom/mojang/datafixers/Typed;)Lcom/mojang/datafixers/Typed;");
    }

    static jobject transform(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_transform();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_fix() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "fixValue", "method_27914", "fix", "m_17067_"), "(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/Dynamic;");
    }

    static jobject fix(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_fix();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_DATAFIXER_FIX_VILLAGERFOLLOWRANGEFIX_HPP