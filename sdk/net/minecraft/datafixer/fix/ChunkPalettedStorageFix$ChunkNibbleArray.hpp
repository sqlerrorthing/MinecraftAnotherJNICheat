// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_DATAFIXER_FIX_CHUNKPALETTEDSTORAGEFIX$CHUNKNIBBLEARRAY_HPP
#define NET_MINECRAFT_DATAFIXER_FIX_CHUNKPALETTEDSTORAGEFIX$CHUNKNIBBLEARRAY_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.datafixer.fix.ChunkPalettedStorageFix$ChunkNibbleArray
 * Remapped: bbt$a
 */
namespace ChunkPalettedStorageFix$ChunkNibbleArray {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("bbt$a", "net/minecraft/util/datafix/fixes/ChunkPalettedStorageFix$DataLayer", "net/minecraft/class_3582$class_3583", "net/minecraft/datafixer/fix/ChunkPalettedStorageFix$ChunkNibbleArray", "net/minecraft/src/C_242_$C_244_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.datafixer.fix.ChunkPalettedStorageFix$ChunkNibbleArray#CONTENTS_LENGTH
    [[maybe_unused]] static jint get_field_CONTENTS_LENGTH() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "SIZE", "field_29879", "CONTENTS_LENGTH", "f_145220_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.datafixer.fix.ChunkPalettedStorageFix$ChunkNibbleArray#CONTENTS_LENGTH
    [[maybe_unused]] static void set_field_CONTENTS_LENGTH(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "SIZE", "field_29879", "CONTENTS_LENGTH", "f_145220_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.datafixer.fix.ChunkPalettedStorageFix$ChunkNibbleArray#field_29880
    [[maybe_unused]] static jint get_field_field_29880() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "NIBBLE_SIZE", "field_29880", "field_29880", "f_145221_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.datafixer.fix.ChunkPalettedStorageFix$ChunkNibbleArray#field_29880
    [[maybe_unused]] static void set_field_field_29880(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "NIBBLE_SIZE", "field_29880", "field_29880", "f_145221_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.datafixer.fix.ChunkPalettedStorageFix$ChunkNibbleArray#contents
    static jbyte get_field_contents(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "data", "field_15855", "contents", "f_15129_"), "[B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetByteField(obj, fieldID);
    };

    // setter for static private field net.minecraft.datafixer.fix.ChunkPalettedStorageFix$ChunkNibbleArray#contents
    static void set_field_contents(const jobject &obj, const jbyte &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "data", "field_15855", "contents", "f_15129_"), "[B");
        return MinecraftSDK::env->SetByteField(obj, fieldID, value);
    };

    static jmethodID methodID_get() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "get", "method_15640", "get", "m_15135_"), "(III)I");
    }

    static jint get(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_get();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_usesLowNibble() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isFirst", "method_15641", "usesLowNibble", "m_15133_"), "(I)Z");
    }

    static jboolean usesLowNibble(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_usesLowNibble();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getRawIndex() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getPosition", "method_15642", "getRawIndex", "m_15139_"), "(I)I");
    }

    static jint getRawIndex(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_getRawIndex();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_DATAFIXER_FIX_CHUNKPALETTEDSTORAGEFIX$CHUNKNIBBLEARRAY_HPP