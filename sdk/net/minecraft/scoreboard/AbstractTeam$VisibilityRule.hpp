// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SCOREBOARD_ABSTRACTTEAM$VISIBILITYRULE_HPP
#define NET_MINECRAFT_SCOREBOARD_ABSTRACTTEAM$VISIBILITYRULE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.scoreboard.AbstractTeam$VisibilityRule
 * Remapped: eyi$b
 */
namespace AbstractTeam$VisibilityRule {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("eyi$b", "net/minecraft/world/scores/Team$Visibility", "net/minecraft/class_270$class_272", "net/minecraft/scoreboard/AbstractTeam$VisibilityRule", "net/minecraft/src/C_3078_$C_3080_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.scoreboard.AbstractTeam$VisibilityRule#ALWAYS
    [[maybe_unused]] static jobject get_field_ALWAYS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "ALWAYS", "field_1442", "ALWAYS", "ALWAYS"), "Leyi$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.scoreboard.AbstractTeam$VisibilityRule#ALWAYS
    [[maybe_unused]] static void set_field_ALWAYS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "ALWAYS", "field_1442", "ALWAYS", "ALWAYS"), "Leyi$b;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.scoreboard.AbstractTeam$VisibilityRule#NEVER
    [[maybe_unused]] static jobject get_field_NEVER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "NEVER", "field_1443", "NEVER", "NEVER"), "Leyi$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.scoreboard.AbstractTeam$VisibilityRule#NEVER
    [[maybe_unused]] static void set_field_NEVER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "NEVER", "field_1443", "NEVER", "NEVER"), "Leyi$b;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.scoreboard.AbstractTeam$VisibilityRule#HIDE_FOR_OTHER_TEAMS
    [[maybe_unused]] static jobject get_field_HIDE_FOR_OTHER_TEAMS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "HIDE_FOR_OTHER_TEAMS", "field_1444", "HIDE_FOR_OTHER_TEAMS", "HIDE_FOR_OTHER_TEAMS"), "Leyi$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.scoreboard.AbstractTeam$VisibilityRule#HIDE_FOR_OTHER_TEAMS
    [[maybe_unused]] static void set_field_HIDE_FOR_OTHER_TEAMS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "HIDE_FOR_OTHER_TEAMS", "field_1444", "HIDE_FOR_OTHER_TEAMS", "HIDE_FOR_OTHER_TEAMS"), "Leyi$b;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.scoreboard.AbstractTeam$VisibilityRule#HIDE_FOR_OWN_TEAM
    [[maybe_unused]] static jobject get_field_HIDE_FOR_OWN_TEAM() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "HIDE_FOR_OWN_TEAM", "field_1446", "HIDE_FOR_OWN_TEAM", "HIDE_FOR_OWN_TEAM"), "Leyi$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.scoreboard.AbstractTeam$VisibilityRule#HIDE_FOR_OWN_TEAM
    [[maybe_unused]] static void set_field_HIDE_FOR_OWN_TEAM(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "HIDE_FOR_OWN_TEAM", "field_1446", "HIDE_FOR_OWN_TEAM", "HIDE_FOR_OWN_TEAM"), "Leyi$b;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.scoreboard.AbstractTeam$VisibilityRule#VISIBILITY_RULES
    [[maybe_unused]] static jobject get_field_VISIBILITY_RULES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "BY_NAME", "field_1447", "VISIBILITY_RULES", "f_83569_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.scoreboard.AbstractTeam$VisibilityRule#VISIBILITY_RULES
    [[maybe_unused]] static void set_field_VISIBILITY_RULES(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "BY_NAME", "field_1447", "VISIBILITY_RULES", "f_83569_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for public field net.minecraft.scoreboard.AbstractTeam$VisibilityRule#name
    static jobject get_field_name(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "name", "field_1445", "name", "f_83567_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static public field net.minecraft.scoreboard.AbstractTeam$VisibilityRule#name
    static void set_field_name(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "name", "field_1445", "name", "f_83567_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.scoreboard.AbstractTeam$VisibilityRule#value
    static jint get_field_value(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "id", "field_1441", "value", "f_83568_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static public field net.minecraft.scoreboard.AbstractTeam$VisibilityRule#value
    static void set_field_value(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "id", "field_1441", "value", "f_83568_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    static jmethodID methodID_values() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("values", "values", "values", "values", "values"), "()[Leyi$b;");
    }

    static jobject values() {
       const auto clazz = self();
       const auto methodID = methodID_values();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_valueOf() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("valueOf", "valueOf", "valueOf", "valueOf", "valueOf"), "(Ljava/lang/String;)Leyi$b;");
    }

    static jobject valueOf(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_valueOf();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getKeys() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getAllNames", "method_35595", "getKeys", "m_166105_"), "()[Ljava/lang/String;");
    }

    static jobject getKeys() {
       const auto clazz = self();
       const auto methodID = methodID_getKeys();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_getRule() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "byName", "method_1213", "getRule", "m_83579_"), "(Ljava/lang/String;)Leyi$b;");
    }

    static jobject getRule(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getRule();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getDisplayName() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getDisplayName", "method_1214", "getDisplayName", "m_83581_"), "()Lwz;");
    }

    static jobject getDisplayName(const jobject& obj) {
                
       const auto methodID = methodID_getDisplayName();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_SCOREBOARD_ABSTRACTTEAM$VISIBILITYRULE_HPP