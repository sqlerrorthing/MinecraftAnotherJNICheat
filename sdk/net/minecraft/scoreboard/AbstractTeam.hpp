// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SCOREBOARD_ABSTRACTTEAM_HPP
#define NET_MINECRAFT_SCOREBOARD_ABSTRACTTEAM_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.scoreboard.AbstractTeam
 * Remapped: eyi
 */
namespace AbstractTeam {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("eyi", "net/minecraft/world/scores/Team", "net/minecraft/class_270", "net/minecraft/scoreboard/AbstractTeam", "net/minecraft/src/C_3078_"));
        }
        return cachedClass;
    };

    static jmethodID methodID_isEqual() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isAlliedTo", "method_1206", "isEqual", "m_83536_"), "(Leyi;)Z");
    }

    static jboolean isEqual(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isEqual();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getName() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getName", "method_1197", "getName", "m_5758_"), "()Ljava/lang/String;");
    }

    static jobject getName(const jobject& obj) {
                
       const auto methodID = methodID_getName();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_decorateName() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getFormattedName", "method_1198", "decorateName", "m_6870_"), "(Lwz;)Lxn;");
    }

    static jobject decorateName(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_decorateName();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_shouldShowFriendlyInvisibles() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "canSeeFriendlyInvisibles", "method_1199", "shouldShowFriendlyInvisibles", "m_6259_"), "()Z");
    }

    static jboolean shouldShowFriendlyInvisibles(const jobject& obj) {
                
       const auto methodID = methodID_shouldShowFriendlyInvisibles();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isFriendlyFireAllowed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "isAllowFriendlyFire", "method_1205", "isFriendlyFireAllowed", "m_6260_"), "()Z");
    }

    static jboolean isFriendlyFireAllowed(const jobject& obj) {
                
       const auto methodID = methodID_isFriendlyFireAllowed();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getNameTagVisibilityRule() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "getNameTagVisibility", "method_1201", "getNameTagVisibilityRule", "m_7470_"), "()Leyi$b;");
    }

    static jobject getNameTagVisibilityRule(const jobject& obj) {
                
       const auto methodID = methodID_getNameTagVisibilityRule();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("n", "getColor", "method_1202", "getColor", "m_7414_"), "()Ln;");
    }

    static jobject getColor(const jobject& obj) {
                
       const auto methodID = methodID_getColor();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getPlayerList() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "getPlayers", "method_1204", "getPlayerList", "m_6809_"), "()Ljava/util/Collection;");
    }

    static jobject getPlayerList(const jobject& obj) {
                
       const auto methodID = methodID_getPlayerList();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getDeathMessageVisibilityRule() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "getDeathMessageVisibility", "method_1200", "getDeathMessageVisibilityRule", "m_7468_"), "()Leyi$b;");
    }

    static jobject getDeathMessageVisibilityRule(const jobject& obj) {
                
       const auto methodID = methodID_getDeathMessageVisibilityRule();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getCollisionRule() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "getCollisionRule", "method_1203", "getCollisionRule", "m_7156_"), "()Leyi$a;");
    }

    static jobject getCollisionRule(const jobject& obj) {
                
       const auto methodID = methodID_getCollisionRule();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_SCOREBOARD_ABSTRACTTEAM_HPP