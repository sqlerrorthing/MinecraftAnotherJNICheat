// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_NETWORK_PACKET_S2C_PLAY_CHUNKDATA_HPP
#define NET_MINECRAFT_NETWORK_PACKET_S2C_PLAY_CHUNKDATA_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.network.packet.s2c.play.ChunkData
 * Remapped: adf
 */
namespace ChunkData {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("adf", "net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData", "net/minecraft/class_6603", "net/minecraft/network/packet/s2c/play/ChunkData", "net/minecraft/src/C_183117_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.network.packet.s2c.play.ChunkData#MAX_SECTIONS_DATA_SIZE
    [[maybe_unused]] static jint get_field_MAX_SECTIONS_DATA_SIZE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "TWO_MEGABYTES", "field_34862", "MAX_SECTIONS_DATA_SIZE", "f_195646_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.network.packet.s2c.play.ChunkData#MAX_SECTIONS_DATA_SIZE
    [[maybe_unused]] static void set_field_MAX_SECTIONS_DATA_SIZE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "TWO_MEGABYTES", "field_34862", "MAX_SECTIONS_DATA_SIZE", "f_195646_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.network.packet.s2c.play.ChunkData#heightmap
    static jobject get_field_heightmap(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "heightmaps", "field_34863", "heightmap", "f_195647_"), "Lub;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.network.packet.s2c.play.ChunkData#heightmap
    static void set_field_heightmap(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "heightmaps", "field_34863", "heightmap", "f_195647_"), "Lub;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.network.packet.s2c.play.ChunkData#sectionsData
    static jbyte get_field_sectionsData(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "buffer", "field_34864", "sectionsData", "f_195648_"), "[B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetByteField(obj, fieldID);
    };

    // setter for static private field net.minecraft.network.packet.s2c.play.ChunkData#sectionsData
    static void set_field_sectionsData(const jobject &obj, const jbyte &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "buffer", "field_34864", "sectionsData", "f_195648_"), "[B");
        return MinecraftSDK::env->SetByteField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.network.packet.s2c.play.ChunkData#blockEntities
    static jobject get_field_blockEntities(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "blockEntitiesData", "field_34865", "blockEntities", "f_195649_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.network.packet.s2c.play.ChunkData#blockEntities
    static void set_field_blockEntities(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "blockEntitiesData", "field_34865", "blockEntities", "f_195649_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_write() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "write", "method_38590", "write", "m_195666_"), "(Lwk;)V");
    }

    static void write(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_write();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getSectionsPacketSize() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "calculateChunkSize", "method_38589", "getSectionsPacketSize", "m_195664_"), "(Ldvi;)I");
    }

    static jint getSectionsPacketSize(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getSectionsPacketSize();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getWritableSectionsDataBuf() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getWriteBuffer", "method_38595", "getWritableSectionsDataBuf", "m_195679_"), "()Lio/netty/buffer/ByteBuf;");
    }

    static jobject getWritableSectionsDataBuf(const jobject& obj) {
                
       const auto methodID = methodID_getWritableSectionsDataBuf();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_writeSections() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "extractChunkData", "method_38591", "writeSections", "m_195668_"), "(Lvw;Ldvi;)V");
    }

    static void writeSections(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_writeSections();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getBlockEntities() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getBlockEntitiesTagsConsumer", "method_38587", "getBlockEntities", "m_195657_"), "(II)Ljava/util/function/Consumer;");
    }

    static jobject getBlockEntities(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_getBlockEntities();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_iterateBlockEntities() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getBlockEntitiesTags", "method_38593", "iterateBlockEntities", "m_195674_"), "(Ladf$b;II)V");
    }

    static void iterateBlockEntities(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_iterateBlockEntities();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getSectionsDataBuf() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getReadBuffer", "method_38586", "getSectionsDataBuf", "m_195656_"), "()Lvw;");
    }

    static jobject getSectionsDataBuf(const jobject& obj) {
                
       const auto methodID = methodID_getSectionsDataBuf();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getHeightmap() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getHeightmaps", "method_38594", "getHeightmap", "m_195678_"), "()Lub;");
    }

    static jobject getHeightmap(const jobject& obj) {
                
       const auto methodID = methodID_getHeightmap();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_NETWORK_PACKET_S2C_PLAY_CHUNKDATA_HPP