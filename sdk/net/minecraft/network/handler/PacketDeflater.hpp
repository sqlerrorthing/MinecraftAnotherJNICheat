// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_NETWORK_HANDLER_PACKETDEFLATER_HPP
#define NET_MINECRAFT_NETWORK_HANDLER_PACKETDEFLATER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.network.handler.PacketDeflater
 * Remapped: vs
 */
namespace PacketDeflater {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("vs", "net/minecraft/network/CompressionEncoder", "net/minecraft/class_2534", "net/minecraft/network/handler/PacketDeflater", "net/minecraft/src/C_4960_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.network.handler.PacketDeflater#deflateBuffer
    static jbyte get_field_deflateBuffer(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "encodeBuf", "field_11637", "deflateBuffer", "f_129444_"), "[B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetByteField(obj, fieldID);
    };

    // setter for static private field net.minecraft.network.handler.PacketDeflater#deflateBuffer
    static void set_field_deflateBuffer(const jobject &obj, const jbyte &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "encodeBuf", "field_11637", "deflateBuffer", "f_129444_"), "[B");
        return MinecraftSDK::env->SetByteField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.network.handler.PacketDeflater#deflater
    static jobject get_field_deflater(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "deflater", "field_11638", "deflater", "f_129445_"), "Ljava/util/zip/Deflater;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.network.handler.PacketDeflater#deflater
    static void set_field_deflater(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "deflater", "field_11638", "deflater", "f_129445_"), "Ljava/util/zip/Deflater;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.network.handler.PacketDeflater#compressionThreshold
    static jint get_field_compressionThreshold(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "threshold", "field_11636", "compressionThreshold", "f_129446_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.network.handler.PacketDeflater#compressionThreshold
    static void set_field_compressionThreshold(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "threshold", "field_11636", "compressionThreshold", "f_129446_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    static jmethodID methodID_encode() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "encode", "method_10741", "encode", "encode"), "(Lio/netty/channel/ChannelHandlerContext;Lio/netty/buffer/ByteBuf;Lio/netty/buffer/ByteBuf;)V");
    }

    static void encode(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_encode();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getCompressionThreshold() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getThreshold", "method_36120", "getCompressionThreshold", "m_178298_"), "()I");
    }

    static jint getCompressionThreshold(const jobject& obj) {
                
       const auto methodID = methodID_getCompressionThreshold();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_setCompressionThreshold() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setThreshold", "method_10742", "setCompressionThreshold", "m_129449_"), "(I)V");
    }

    static void setCompressionThreshold(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_setCompressionThreshold();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_NETWORK_HANDLER_PACKETDEFLATER_HPP