// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_NETWORK_HANDLER_SPLITTERHANDLER_HPP
#define NET_MINECRAFT_NETWORK_HANDLER_SPLITTERHANDLER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.network.handler.SplitterHandler
 * Remapped: ws
 */
namespace SplitterHandler {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("ws", "net/minecraft/network/Varint21FrameDecoder", "net/minecraft/class_2550", "net/minecraft/network/handler/SplitterHandler", "net/minecraft/src/C_4989_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.network.handler.SplitterHandler#LENGTH_BYTES
    [[maybe_unused]] static jint get_field_LENGTH_BYTES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "MAX_VARINT21_BYTES", "field_45690", "LENGTH_BYTES", "f_291870_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.network.handler.SplitterHandler#LENGTH_BYTES
    [[maybe_unused]] static void set_field_LENGTH_BYTES(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "MAX_VARINT21_BYTES", "field_45690", "LENGTH_BYTES", "f_291870_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.network.handler.SplitterHandler#reusableBuf
    static jobject get_field_reusableBuf(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "helperBuf", "field_45691", "reusableBuf", "f_291254_"), "Lio/netty/buffer/ByteBuf;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.network.handler.SplitterHandler#reusableBuf
    static void set_field_reusableBuf(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "helperBuf", "field_45691", "reusableBuf", "f_291254_"), "Lio/netty/buffer/ByteBuf;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.network.handler.SplitterHandler#packetSizeLogger
    static jobject get_field_packetSizeLogger(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "monitor", "field_45956", "packetSizeLogger", "f_290873_"), "Lvm;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.network.handler.SplitterHandler#packetSizeLogger
    static void set_field_packetSizeLogger(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "monitor", "field_45956", "packetSizeLogger", "f_290873_"), "Lvm;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_handlerRemoved0() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("handlerRemoved0", "handlerRemoved0", "handlerRemoved0", "handlerRemoved0", "handlerRemoved0"), "(Lio/netty/channel/ChannelHandlerContext;)V");
    }

    static void handlerRemoved0(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_handlerRemoved0();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_shouldSplit() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "copyVarint", "method_53022", "shouldSplit", "m_295212_"), "(Lio/netty/buffer/ByteBuf;Lio/netty/buffer/ByteBuf;)Z");
    }

    static jboolean shouldSplit(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_shouldSplit();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_decode() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("decode", "decode", "decode", "decode", "decode"), "(Lio/netty/channel/ChannelHandlerContext;Lio/netty/buffer/ByteBuf;Ljava/util/List;)V");
    }

    static void decode(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_decode();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
};

#endif // NET_MINECRAFT_NETWORK_HANDLER_SPLITTERHANDLER_HPP