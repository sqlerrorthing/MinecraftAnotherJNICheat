// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_NETWORK_ENCRYPTION_PLAYERPUBLICKEY_HPP
#define NET_MINECRAFT_NETWORK_ENCRYPTION_PLAYERPUBLICKEY_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.network.encryption.PlayerPublicKey
 * Remapped: cna
 */
namespace PlayerPublicKey {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("cna", "net/minecraft/world/entity/player/ProfilePublicKey", "net/minecraft/class_7428", "net/minecraft/network/encryption/PlayerPublicKey", "net/minecraft/src/C_213070_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.network.encryption.PlayerPublicKey#data
    static jobject get_field_data(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "data", "comp_767", "data", "f_219781_"), "Lcna$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.network.encryption.PlayerPublicKey#data
    static void set_field_data(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "data", "comp_767", "data", "f_219781_"), "Lcna$a;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for static public field net.minecraft.network.encryption.PlayerPublicKey#EXPIRED_PUBLIC_KEY_TEXT
    [[maybe_unused]] static jobject get_field_EXPIRED_PUBLIC_KEY_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "EXPIRED_PROFILE_PUBLIC_KEY", "field_39954", "EXPIRED_PUBLIC_KEY_TEXT", "f_243346_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.network.encryption.PlayerPublicKey#EXPIRED_PUBLIC_KEY_TEXT
    [[maybe_unused]] static void set_field_EXPIRED_PUBLIC_KEY_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "EXPIRED_PROFILE_PUBLIC_KEY", "field_39954", "EXPIRED_PUBLIC_KEY_TEXT", "f_243346_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.network.encryption.PlayerPublicKey#INVALID_PUBLIC_KEY_SIGNATURE_TEXT
    [[maybe_unused]] static jobject get_field_INVALID_PUBLIC_KEY_SIGNATURE_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "INVALID_SIGNATURE", "field_39956", "INVALID_PUBLIC_KEY_SIGNATURE_TEXT", "f_243345_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.network.encryption.PlayerPublicKey#INVALID_PUBLIC_KEY_SIGNATURE_TEXT
    [[maybe_unused]] static void set_field_INVALID_PUBLIC_KEY_SIGNATURE_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "INVALID_SIGNATURE", "field_39956", "INVALID_PUBLIC_KEY_SIGNATURE_TEXT", "f_243345_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.network.encryption.PlayerPublicKey#EXPIRATION_GRACE_PERIOD
    [[maybe_unused]] static jobject get_field_EXPIRATION_GRACE_PERIOD() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "EXPIRY_GRACE_PERIOD", "field_39955", "EXPIRATION_GRACE_PERIOD", "f_243350_"), "Ljava/time/Duration;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.network.encryption.PlayerPublicKey#EXPIRATION_GRACE_PERIOD
    [[maybe_unused]] static void set_field_EXPIRATION_GRACE_PERIOD(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "EXPIRY_GRACE_PERIOD", "field_39955", "EXPIRATION_GRACE_PERIOD", "f_243350_"), "Ljava/time/Duration;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.network.encryption.PlayerPublicKey#CODEC
    [[maybe_unused]] static jobject get_field_CODEC() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "TRUSTED_CODEC", "field_39050", "CODEC", "f_219780_"), "Lcom/mojang/serialization/Codec;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.network.encryption.PlayerPublicKey#CODEC
    [[maybe_unused]] static void set_field_CODEC(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "TRUSTED_CODEC", "field_39050", "CODEC", "f_219780_"), "Lcom/mojang/serialization/Codec;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_verifyAndDecode() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "createValidated", "method_43550", "verifyAndDecode", "m_243358_"), "(Lazb;Ljava/util/UUID;Lcna$a;)Lcna;");
    }

    static jobject verifyAndDecode(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_verifyAndDecode();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_createSignatureInstance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "createSignatureValidator", "method_43697", "createSignatureInstance", "m_219785_"), "()Lazb;");
    }

    static jobject createSignatureInstance(const jobject& obj) {
                
       const auto methodID = methodID_createSignatureInstance();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__data() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "data", "comp_767", "data", "f_219781_"), "()Lcna$a;");
    }

    static jobject _data(const jobject& obj) {
                
       const auto methodID = methodID__data();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_NETWORK_ENCRYPTION_PLAYERPUBLICKEY_HPP