// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_NETWORK_ENCRYPTION_PLAYERPUBLICKEY$PUBLICKEYDATA_HPP
#define NET_MINECRAFT_NETWORK_ENCRYPTION_PLAYERPUBLICKEY$PUBLICKEYDATA_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.network.encryption.PlayerPublicKey$PublicKeyData
 * Remapped: cna$a
 */
namespace PlayerPublicKey$PublicKeyData {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("cna$a", "net/minecraft/world/entity/player/ProfilePublicKey$Data", "net/minecraft/class_7428$class_7443", "net/minecraft/network/encryption/PlayerPublicKey$PublicKeyData", "net/minecraft/src/C_213070_$C_213071_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.network.encryption.PlayerPublicKey$PublicKeyData#expiresAt
    static jobject get_field_expiresAt(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "expiresAt", "comp_769", "expiresAt", "f_219799_"), "Ljava/time/Instant;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.network.encryption.PlayerPublicKey$PublicKeyData#expiresAt
    static void set_field_expiresAt(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "expiresAt", "comp_769", "expiresAt", "f_219799_"), "Ljava/time/Instant;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.network.encryption.PlayerPublicKey$PublicKeyData#key
    static jobject get_field_key(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "key", "comp_770", "key", "f_219800_"), "Ljava/security/PublicKey;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.network.encryption.PlayerPublicKey$PublicKeyData#key
    static void set_field_key(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "key", "comp_770", "key", "f_219800_"), "Ljava/security/PublicKey;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.network.encryption.PlayerPublicKey$PublicKeyData#keySignature
    static jbyte get_field_keySignature(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "keySignature", "comp_771", "keySignature", "f_219801_"), "[B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetByteField(obj, fieldID);
    };

    // setter for static private field net.minecraft.network.encryption.PlayerPublicKey$PublicKeyData#keySignature
    static void set_field_keySignature(const jobject &obj, const jbyte &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "keySignature", "comp_771", "keySignature", "f_219801_"), "[B");
        return MinecraftSDK::env->SetByteField(obj, fieldID, value);
    };

    // getter for static private field net.minecraft.network.encryption.PlayerPublicKey$PublicKeyData#KEY_SIGNATURE_MAX_SIZE
    [[maybe_unused]] static jint get_field_KEY_SIGNATURE_MAX_SIZE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "MAX_KEY_SIGNATURE_SIZE", "field_39309", "KEY_SIGNATURE_MAX_SIZE", "f_219802_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.network.encryption.PlayerPublicKey$PublicKeyData#KEY_SIGNATURE_MAX_SIZE
    [[maybe_unused]] static void set_field_KEY_SIGNATURE_MAX_SIZE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "MAX_KEY_SIGNATURE_SIZE", "field_39309", "KEY_SIGNATURE_MAX_SIZE", "f_219802_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.network.encryption.PlayerPublicKey$PublicKeyData#CODEC
    [[maybe_unused]] static jobject get_field_CODEC() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CODEC", "field_39119", "CODEC", "f_219798_"), "Lcom/mojang/serialization/Codec;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.network.encryption.PlayerPublicKey$PublicKeyData#CODEC
    [[maybe_unused]] static void set_field_CODEC(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CODEC", "field_39119", "CODEC", "f_219798_"), "Lcom/mojang/serialization/Codec;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_write() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "write", "method_44011", "write", "m_219815_"), "(Lvw;)V");
    }

    static void write(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_write();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_verifyKey() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "validateSignature", "method_44205", "verifyKey", "m_240295_"), "(Lazb;Ljava/util/UUID;)Z");
    }

    static jboolean verifyKey(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_verifyKey();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_toSerializedString() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "signedPayload", "method_43702", "toSerializedString", "m_240266_"), "(Ljava/util/UUID;)[B");
    }

    static jbyte toSerializedString(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_toSerializedString();
       return MinecraftSDK::env->CallByteMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isExpired() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "hasExpired", "method_43704", "isExpired", "m_219810_"), "()Z");
    }

    static jboolean isExpired(const jobject& obj) {
                
       const auto methodID = methodID_isExpired();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID__isExpired() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "hasExpired", "method_45103", "isExpired", "m_243357_"), "(Ljava/time/Duration;)Z");
    }

    static jboolean _isExpired(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__isExpired();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__expiresAt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "expiresAt", "comp_769", "expiresAt", "f_219799_"), "()Ljava/time/Instant;");
    }

    static jobject _expiresAt(const jobject& obj) {
                
       const auto methodID = methodID__expiresAt();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__key() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "key", "comp_770", "key", "f_219800_"), "()Ljava/security/PublicKey;");
    }

    static jobject _key(const jobject& obj) {
                
       const auto methodID = methodID__key();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__keySignature() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "keySignature", "comp_771", "keySignature", "f_219801_"), "()[B");
    }

    static jbyte _keySignature(const jobject& obj) {
                
       const auto methodID = methodID__keySignature();
       return MinecraftSDK::env->CallByteMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_NETWORK_ENCRYPTION_PLAYERPUBLICKEY$PUBLICKEYDATA_HPP