// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_NETWORK_ENCRYPTION_NETWORKENCRYPTIONUTILS$SIGNATUREDATA_HPP
#define NET_MINECRAFT_NETWORK_ENCRYPTION_NETWORKENCRYPTIONUTILS$SIGNATUREDATA_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.network.encryption.NetworkEncryptionUtils$SignatureData
 * Remapped: axl$b
 */
namespace NetworkEncryptionUtils$SignatureData {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("axl$b", "net/minecraft/util/Crypt$SaltSignaturePair", "net/minecraft/class_3515$class_7425", "net/minecraft/network/encryption/NetworkEncryptionUtils$SignatureData", "net/minecraft/src/C_166_$C_212968_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.network.encryption.NetworkEncryptionUtils$SignatureData#salt
    static jlong get_field_salt(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "salt", "comp_739", "salt", "f_216091_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.network.encryption.NetworkEncryptionUtils$SignatureData#salt
    static void set_field_salt(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "salt", "comp_739", "salt", "f_216091_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.network.encryption.NetworkEncryptionUtils$SignatureData#signature
    static jbyte get_field_signature(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "signature", "comp_740", "signature", "f_216092_"), "[B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetByteField(obj, fieldID);
    };

    // setter for static private field net.minecraft.network.encryption.NetworkEncryptionUtils$SignatureData#signature
    static void set_field_signature(const jobject &obj, const jbyte &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "signature", "comp_740", "signature", "f_216092_"), "[B");
        return MinecraftSDK::env->SetByteField(obj, fieldID, value);
    };

    // getter for static public field net.minecraft.network.encryption.NetworkEncryptionUtils$SignatureData#NONE
    [[maybe_unused]] static jobject get_field_NONE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "EMPTY", "field_39040", "NONE", "f_216090_"), "Laxl$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.network.encryption.NetworkEncryptionUtils$SignatureData#NONE
    [[maybe_unused]] static void set_field_NONE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "EMPTY", "field_39040", "NONE", "f_216090_"), "Laxl$b;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_isSignaturePresent() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isValid", "method_43528", "isSignaturePresent", "m_216099_"), "()Z");
    }

    static jboolean isSignaturePresent(const jobject& obj) {
                
       const auto methodID = methodID_isSignaturePresent();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_write() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "write", "method_43529", "write", "m_216100_"), "(Lvw;Laxl$b;)V");
    }

    static void write(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_write();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getSalt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "saltAsBytes", "method_43530", "getSalt", "m_216103_"), "()[B");
    }

    static jbyte getSalt(const jobject& obj) {
                
       const auto methodID = methodID_getSalt();
       return MinecraftSDK::env->CallByteMethod(obj, methodID);
    };
    
    static jmethodID methodID__salt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "salt", "comp_739", "salt", "f_216091_"), "()J");
    }

    static jlong _salt(const jobject& obj) {
                
       const auto methodID = methodID__salt();
       return MinecraftSDK::env->CallLongMethod(obj, methodID);
    };
    
    static jmethodID methodID__signature() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "signature", "comp_740", "signature", "f_216092_"), "()[B");
    }

    static jbyte _signature(const jobject& obj) {
                
       const auto methodID = methodID__signature();
       return MinecraftSDK::env->CallByteMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_NETWORK_ENCRYPTION_NETWORKENCRYPTIONUTILS$SIGNATUREDATA_HPP