// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_STRUCTURE_STRUCTUREPIECESGENERATOR$CONTEXT_HPP
#define NET_MINECRAFT_STRUCTURE_STRUCTUREPIECESGENERATOR$CONTEXT_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.structure.StructurePiecesGenerator$Context
 * Remapped: eke$a
 */
namespace StructurePiecesGenerator$Context {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("eke$a", "net/minecraft/world/level/levelgen/structure/pieces/PieceGenerator$Context", "net/minecraft/class_6622$class_6623", "net/minecraft/structure/StructurePiecesGenerator$Context", "net/minecraft/src/C_183026_$C_183027_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.structure.StructurePiecesGenerator$Context#config
    static jobject get_field_config(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "config", "comp_305", "config", "f_197328_"), "Leei;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.structure.StructurePiecesGenerator$Context#config
    static void set_field_config(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "config", "comp_305", "config", "f_197328_"), "Leei;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.structure.StructurePiecesGenerator$Context#chunkGenerator
    static jobject get_field_chunkGenerator(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "chunkGenerator", "comp_125", "chunkGenerator", "f_192703_"), "Lduz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.structure.StructurePiecesGenerator$Context#chunkGenerator
    static void set_field_chunkGenerator(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "chunkGenerator", "comp_125", "chunkGenerator", "f_192703_"), "Lduz;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.structure.StructurePiecesGenerator$Context#structureTemplateManager
    static jobject get_field_structureTemplateManager(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "structureTemplateManager", "comp_126", "structureTemplateManager", "f_226931_"), "Lenu;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.structure.StructurePiecesGenerator$Context#structureTemplateManager
    static void set_field_structureTemplateManager(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "structureTemplateManager", "comp_126", "structureTemplateManager", "f_226931_"), "Lenu;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.structure.StructurePiecesGenerator$Context#chunkPos
    static jobject get_field_chunkPos(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "chunkPos", "comp_127", "chunkPos", "f_192705_"), "Ldcd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.structure.StructurePiecesGenerator$Context#chunkPos
    static void set_field_chunkPos(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "chunkPos", "comp_127", "chunkPos", "f_192705_"), "Ldcd;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.structure.StructurePiecesGenerator$Context#world
    static jobject get_field_world(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "heightAccessor", "comp_129", "world", "f_192707_"), "Ldcy;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.structure.StructurePiecesGenerator$Context#world
    static void set_field_world(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "heightAccessor", "comp_129", "world", "f_192707_"), "Ldcy;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.structure.StructurePiecesGenerator$Context#random
    static jobject get_field_random(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "random", "comp_130", "random", "f_192708_"), "Ldzx;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.structure.StructurePiecesGenerator$Context#random
    static void set_field_random(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "random", "comp_130", "random", "f_192708_"), "Ldzx;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.structure.StructurePiecesGenerator$Context#seed
    static jlong get_field_seed(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "seed", "comp_131", "seed", "f_192709_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.structure.StructurePiecesGenerator$Context#seed
    static void set_field_seed(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "seed", "comp_131", "seed", "f_192709_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    static jmethodID methodID__config() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "config", "comp_305", "config", "f_197328_"), "()Leei;");
    }

    static jobject _config(const jobject& obj) {
                
       const auto methodID = methodID__config();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__chunkGenerator() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "chunkGenerator", "comp_125", "chunkGenerator", "f_192703_"), "()Lduz;");
    }

    static jobject _chunkGenerator(const jobject& obj) {
                
       const auto methodID = methodID__chunkGenerator();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__structureTemplateManager() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "structureTemplateManager", "comp_126", "structureTemplateManager", "f_226931_"), "()Lenu;");
    }

    static jobject _structureTemplateManager(const jobject& obj) {
                
       const auto methodID = methodID__structureTemplateManager();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__chunkPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "chunkPos", "comp_127", "chunkPos", "f_192705_"), "()Ldcd;");
    }

    static jobject _chunkPos(const jobject& obj) {
                
       const auto methodID = methodID__chunkPos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__world() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "heightAccessor", "comp_129", "world", "f_192707_"), "()Ldcy;");
    }

    static jobject _world(const jobject& obj) {
                
       const auto methodID = methodID__world();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__random() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "random", "comp_130", "random", "f_192708_"), "()Ldzx;");
    }

    static jobject _random(const jobject& obj) {
                
       const auto methodID = methodID__random();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__seed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "seed", "comp_131", "seed", "f_192709_"), "()J");
    }

    static jlong _seed(const jobject& obj) {
                
       const auto methodID = methodID__seed();
       return MinecraftSDK::env->CallLongMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_STRUCTURE_STRUCTUREPIECESGENERATOR$CONTEXT_HPP