// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_STRUCTURE_RULE_RULETESTTYPE_HPP
#define NET_MINECRAFT_STRUCTURE_RULE_RULETESTTYPE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.structure.rule.RuleTestType
 * Remapped: eno
 */
namespace RuleTestType {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("eno", "net/minecraft/world/level/levelgen/structure/templatesystem/RuleTestType", "net/minecraft/class_3827", "net/minecraft/structure/rule/RuleTestType", "net/minecraft/src/C_2626_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.structure.rule.RuleTestType#ALWAYS_TRUE
    [[maybe_unused]] static jobject get_field_ALWAYS_TRUE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "ALWAYS_TRUE_TEST", "field_16982", "ALWAYS_TRUE", "f_74312_"), "Leno;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.structure.rule.RuleTestType#ALWAYS_TRUE
    [[maybe_unused]] static void set_field_ALWAYS_TRUE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "ALWAYS_TRUE_TEST", "field_16982", "ALWAYS_TRUE", "f_74312_"), "Leno;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.structure.rule.RuleTestType#BLOCK_MATCH
    [[maybe_unused]] static jobject get_field_BLOCK_MATCH() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "BLOCK_TEST", "field_16981", "BLOCK_MATCH", "f_74313_"), "Leno;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.structure.rule.RuleTestType#BLOCK_MATCH
    [[maybe_unused]] static void set_field_BLOCK_MATCH(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "BLOCK_TEST", "field_16981", "BLOCK_MATCH", "f_74313_"), "Leno;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.structure.rule.RuleTestType#BLOCKSTATE_MATCH
    [[maybe_unused]] static jobject get_field_BLOCKSTATE_MATCH() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "BLOCKSTATE_TEST", "field_16985", "BLOCKSTATE_MATCH", "f_74314_"), "Leno;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.structure.rule.RuleTestType#BLOCKSTATE_MATCH
    [[maybe_unused]] static void set_field_BLOCKSTATE_MATCH(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "BLOCKSTATE_TEST", "field_16985", "BLOCKSTATE_MATCH", "f_74314_"), "Leno;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.structure.rule.RuleTestType#TAG_MATCH
    [[maybe_unused]] static jobject get_field_TAG_MATCH() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "TAG_TEST", "field_16983", "TAG_MATCH", "f_74315_"), "Leno;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.structure.rule.RuleTestType#TAG_MATCH
    [[maybe_unused]] static void set_field_TAG_MATCH(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "TAG_TEST", "field_16983", "TAG_MATCH", "f_74315_"), "Leno;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.structure.rule.RuleTestType#RANDOM_BLOCK_MATCH
    [[maybe_unused]] static jobject get_field_RANDOM_BLOCK_MATCH() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "RANDOM_BLOCK_TEST", "field_16980", "RANDOM_BLOCK_MATCH", "f_74316_"), "Leno;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.structure.rule.RuleTestType#RANDOM_BLOCK_MATCH
    [[maybe_unused]] static void set_field_RANDOM_BLOCK_MATCH(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "RANDOM_BLOCK_TEST", "field_16980", "RANDOM_BLOCK_MATCH", "f_74316_"), "Leno;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.structure.rule.RuleTestType#RANDOM_BLOCKSTATE_MATCH
    [[maybe_unused]] static jobject get_field_RANDOM_BLOCKSTATE_MATCH() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "RANDOM_BLOCKSTATE_TEST", "field_16984", "RANDOM_BLOCKSTATE_MATCH", "f_74317_"), "Leno;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.structure.rule.RuleTestType#RANDOM_BLOCKSTATE_MATCH
    [[maybe_unused]] static void set_field_RANDOM_BLOCKSTATE_MATCH(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "RANDOM_BLOCKSTATE_TEST", "field_16984", "RANDOM_BLOCKSTATE_MATCH", "f_74317_"), "Leno;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_codec() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("codec", "codec", "", "", "m_74324_"), "()Lcom/mojang/serialization/MapCodec;");
    }

    static jobject codec(const jobject& obj) {
                
       const auto methodID = methodID_codec();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_register() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "register", "method_16821", "register", "m_74321_"), "(Ljava/lang/String;Lcom/mojang/serialization/MapCodec;)Leno;");
    }

    static jobject register(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_register();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_STRUCTURE_RULE_RULETESTTYPE_HPP