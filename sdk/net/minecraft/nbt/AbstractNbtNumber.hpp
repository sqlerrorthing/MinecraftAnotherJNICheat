// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_NBT_ABSTRACTNBTNUMBER_HPP
#define NET_MINECRAFT_NBT_ABSTRACTNBTNUMBER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.nbt.AbstractNbtNumber
 * Remapped: ur
 */
namespace AbstractNbtNumber {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("ur", "net/minecraft/nbt/NumericTag", "net/minecraft/class_2514", "net/minecraft/nbt/AbstractNbtNumber", "net/minecraft/src/C_4944_"));
        }
        return cachedClass;
    };

    static jmethodID methodID_longValue() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "getAsLong", "method_10699", "longValue", "m_7046_"), "()J");
    }

    static jlong longValue(const jobject& obj) {
                
       const auto methodID = methodID_longValue();
       return MinecraftSDK::env->CallLongMethod(obj, methodID);
    };
    
    static jmethodID methodID_intValue() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "getAsInt", "method_10701", "intValue", "m_7047_"), "()I");
    }

    static jint intValue(const jobject& obj) {
                
       const auto methodID = methodID_intValue();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_shortValue() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "getAsShort", "method_10696", "shortValue", "m_7053_"), "()S");
    }

    static jshort shortValue(const jobject& obj) {
                
       const auto methodID = methodID_shortValue();
       return MinecraftSDK::env->CallShortMethod(obj, methodID);
    };
    
    static jmethodID methodID_byteValue() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "getAsByte", "method_10698", "byteValue", "m_7063_"), "()B");
    }

    static jbyte byteValue(const jobject& obj) {
                
       const auto methodID = methodID_byteValue();
       return MinecraftSDK::env->CallByteMethod(obj, methodID);
    };
    
    static jmethodID methodID_doubleValue() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "getAsDouble", "method_10697", "doubleValue", "m_7061_"), "()D");
    }

    static jdouble doubleValue(const jobject& obj) {
                
       const auto methodID = methodID_doubleValue();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_floatValue() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "getAsFloat", "method_10700", "floatValue", "m_7057_"), "()F");
    }

    static jfloat floatValue(const jobject& obj) {
                
       const auto methodID = methodID_floatValue();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_numberValue() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "getAsNumber", "method_10702", "numberValue", "m_8103_"), "()Ljava/lang/Number;");
    }

    static jobject numberValue(const jobject& obj) {
                
       const auto methodID = methodID_numberValue();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_NBT_ABSTRACTNBTNUMBER_HPP