// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_NBT_SCANNER_NBTTREENODE_HPP
#define NET_MINECRAFT_NBT_SCANNER_NBTTREENODE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.nbt.scanner.NbtTreeNode
 * Remapped: vi
 */
namespace NbtTreeNode {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("vi", "net/minecraft/nbt/visitors/FieldTree", "net/minecraft/class_6842", "net/minecraft/nbt/scanner/NbtTreeNode", "net/minecraft/src/C_201413_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.nbt.scanner.NbtTreeNode#depth
    static jint get_field_depth(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "depth", "comp_315", "depth", "f_202523_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.nbt.scanner.NbtTreeNode#depth
    static void set_field_depth(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "depth", "comp_315", "depth", "f_202523_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.nbt.scanner.NbtTreeNode#selectedFields
    static jobject get_field_selectedFields(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "selectedFields", "comp_323", "selectedFields", "f_202524_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.nbt.scanner.NbtTreeNode#selectedFields
    static void set_field_selectedFields(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "selectedFields", "comp_323", "selectedFields", "f_202524_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.nbt.scanner.NbtTreeNode#fieldsToRecurse
    static jobject get_field_fieldsToRecurse(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "fieldsToRecurse", "comp_317", "fieldsToRecurse", "f_202525_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.nbt.scanner.NbtTreeNode#fieldsToRecurse
    static void set_field_fieldsToRecurse(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "fieldsToRecurse", "comp_317", "fieldsToRecurse", "f_202525_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_createRoot() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "createRoot", "method_40060", "createRoot", "m_202532_"), "()Lvi;");
    }

    static jobject createRoot() {
       const auto clazz = self();
       const auto methodID = methodID_createRoot();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_add() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addEntry", "method_39881", "add", "m_202538_"), "(Lvh;)V");
    }

    static void add(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_add();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isTypeEqual() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isSelected", "method_40061", "isTypeEqual", "m_202535_"), "(Lva;Ljava/lang/String;)Z");
    }

    static jboolean isTypeEqual(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_isTypeEqual();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__depth() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "depth", "comp_315", "depth", "f_202523_"), "()I");
    }

    static jint _depth(const jobject& obj) {
                
       const auto methodID = methodID__depth();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID__selectedFields() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "selectedFields", "comp_323", "selectedFields", "f_202524_"), "()Ljava/util/Map;");
    }

    static jobject _selectedFields(const jobject& obj) {
                
       const auto methodID = methodID__selectedFields();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__fieldsToRecurse() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "fieldsToRecurse", "comp_317", "fieldsToRecurse", "f_202525_"), "()Ljava/util/Map;");
    }

    static jobject _fieldsToRecurse(const jobject& obj) {
                
       const auto methodID = methodID__fieldsToRecurse();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_NBT_SCANNER_NBTTREENODE_HPP