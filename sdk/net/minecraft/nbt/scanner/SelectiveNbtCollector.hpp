// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_NBT_SCANNER_SELECTIVENBTCOLLECTOR_HPP
#define NET_MINECRAFT_NBT_SCANNER_SELECTIVENBTCOLLECTOR_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.nbt.scanner.SelectiveNbtCollector
 * Remapped: vf
 */
namespace SelectiveNbtCollector {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("vf", "net/minecraft/nbt/visitors/CollectFields", "net/minecraft/class_6841", "net/minecraft/nbt/scanner/SelectiveNbtCollector", "net/minecraft/src/C_196127_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.nbt.scanner.SelectiveNbtCollector#queriesLeft
    static jint get_field_queriesLeft(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "fieldsToGetCount", "field_36258", "queriesLeft", "f_197602_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.nbt.scanner.SelectiveNbtCollector#queriesLeft
    static void set_field_queriesLeft(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "fieldsToGetCount", "field_36258", "queriesLeft", "f_197602_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.nbt.scanner.SelectiveNbtCollector#allPossibleTypes
    static jobject get_field_allPossibleTypes(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "wantedTypes", "field_36259", "allPossibleTypes", "f_197603_"), "Ljava/util/Set;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.nbt.scanner.SelectiveNbtCollector#allPossibleTypes
    static void set_field_allPossibleTypes(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "wantedTypes", "field_36259", "allPossibleTypes", "f_197603_"), "Ljava/util/Set;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.nbt.scanner.SelectiveNbtCollector#selectionStack
    static jobject get_field_selectionStack(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "stack", "field_36260", "selectionStack", "f_197604_"), "Ljava/util/Deque;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.nbt.scanner.SelectiveNbtCollector#selectionStack
    static void set_field_selectionStack(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "stack", "field_36260", "selectionStack", "f_197604_"), "Ljava/util/Deque;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_start() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "visitRootEntry", "method_39871", "start", "m_196213_"), "(Lva;)Luv$b;");
    }

    static jobject start(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_start();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_visitSubNbtType() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "visitEntry", "method_39863", "visitSubNbtType", "m_196214_"), "(Lva;)Luv$a;");
    }

    static jobject visitSubNbtType(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_visitSubNbtType();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_startSubNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "visitEntry", "method_39865", "startSubNbt", "m_196425_"), "(Lva;Ljava/lang/String;)Luv$a;");
    }

    static jobject startSubNbt(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_startSubNbt();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_endNested() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "visitContainerEnd", "method_39870", "endNested", "m_196527_"), "()Luv$b;");
    }

    static jobject endNested(const jobject& obj) {
                
       const auto methodID = methodID_endNested();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getQueriesLeft() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getMissingFieldCount", "method_39879", "getQueriesLeft", "m_197615_"), "()I");
    }

    static jint getQueriesLeft(const jobject& obj) {
                
       const auto methodID = methodID_getQueriesLeft();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_NBT_SCANNER_SELECTIVENBTCOLLECTOR_HPP