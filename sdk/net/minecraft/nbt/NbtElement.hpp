// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_NBT_NBTELEMENT_HPP
#define NET_MINECRAFT_NBT_NBTELEMENT_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.nbt.NbtElement
 * Remapped: uy
 */
namespace NbtElement {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("uy", "net/minecraft/nbt/Tag", "net/minecraft/class_2520", "net/minecraft/nbt/NbtElement", "net/minecraft/src/C_4950_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.nbt.NbtElement#field_33246
    [[maybe_unused]] static jint get_field_field_33246() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "OBJECT_HEADER", "field_33246", "field_33246", "f_178189_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.nbt.NbtElement#field_33246
    [[maybe_unused]] static void set_field_field_33246(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "OBJECT_HEADER", "field_33246", "field_33246", "f_178189_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.nbt.NbtElement#field_33247
    [[maybe_unused]] static jint get_field_field_33247() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "ARRAY_HEADER", "field_33247", "field_33247", "f_178190_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.nbt.NbtElement#field_33247
    [[maybe_unused]] static void set_field_field_33247(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "ARRAY_HEADER", "field_33247", "field_33247", "f_178190_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.nbt.NbtElement#field_33248
    [[maybe_unused]] static jint get_field_field_33248() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "OBJECT_REFERENCE", "field_33248", "field_33248", "f_178191_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.nbt.NbtElement#field_33248
    [[maybe_unused]] static void set_field_field_33248(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "OBJECT_REFERENCE", "field_33248", "field_33248", "f_178191_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.nbt.NbtElement#field_33249
    [[maybe_unused]] static jint get_field_field_33249() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "STRING_SIZE", "field_33249", "field_33249", "f_178192_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.nbt.NbtElement#field_33249
    [[maybe_unused]] static void set_field_field_33249(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "STRING_SIZE", "field_33249", "field_33249", "f_178192_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.nbt.NbtElement#END_TYPE
    [[maybe_unused]] static jbyte get_field_END_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "TAG_END", "field_33250", "END_TYPE", "f_178193_"), "B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticByteField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.nbt.NbtElement#END_TYPE
    [[maybe_unused]] static void set_field_END_TYPE(const jbyte &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "TAG_END", "field_33250", "END_TYPE", "f_178193_"), "B");
        return MinecraftSDK::env->SetStaticByteField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.nbt.NbtElement#BYTE_TYPE
    [[maybe_unused]] static jbyte get_field_BYTE_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "TAG_BYTE", "field_33251", "BYTE_TYPE", "f_178194_"), "B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticByteField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.nbt.NbtElement#BYTE_TYPE
    [[maybe_unused]] static void set_field_BYTE_TYPE(const jbyte &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "TAG_BYTE", "field_33251", "BYTE_TYPE", "f_178194_"), "B");
        return MinecraftSDK::env->SetStaticByteField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.nbt.NbtElement#SHORT_TYPE
    [[maybe_unused]] static jbyte get_field_SHORT_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "TAG_SHORT", "field_33252", "SHORT_TYPE", "f_178195_"), "B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticByteField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.nbt.NbtElement#SHORT_TYPE
    [[maybe_unused]] static void set_field_SHORT_TYPE(const jbyte &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "TAG_SHORT", "field_33252", "SHORT_TYPE", "f_178195_"), "B");
        return MinecraftSDK::env->SetStaticByteField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.nbt.NbtElement#INT_TYPE
    [[maybe_unused]] static jbyte get_field_INT_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "TAG_INT", "field_33253", "INT_TYPE", "f_178196_"), "B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticByteField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.nbt.NbtElement#INT_TYPE
    [[maybe_unused]] static void set_field_INT_TYPE(const jbyte &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "TAG_INT", "field_33253", "INT_TYPE", "f_178196_"), "B");
        return MinecraftSDK::env->SetStaticByteField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.nbt.NbtElement#LONG_TYPE
    [[maybe_unused]] static jbyte get_field_LONG_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "TAG_LONG", "field_33254", "LONG_TYPE", "f_178197_"), "B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticByteField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.nbt.NbtElement#LONG_TYPE
    [[maybe_unused]] static void set_field_LONG_TYPE(const jbyte &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "TAG_LONG", "field_33254", "LONG_TYPE", "f_178197_"), "B");
        return MinecraftSDK::env->SetStaticByteField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.nbt.NbtElement#FLOAT_TYPE
    [[maybe_unused]] static jbyte get_field_FLOAT_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "TAG_FLOAT", "field_33255", "FLOAT_TYPE", "f_178198_"), "B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticByteField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.nbt.NbtElement#FLOAT_TYPE
    [[maybe_unused]] static void set_field_FLOAT_TYPE(const jbyte &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "TAG_FLOAT", "field_33255", "FLOAT_TYPE", "f_178198_"), "B");
        return MinecraftSDK::env->SetStaticByteField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.nbt.NbtElement#DOUBLE_TYPE
    [[maybe_unused]] static jbyte get_field_DOUBLE_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "TAG_DOUBLE", "field_33256", "DOUBLE_TYPE", "f_178199_"), "B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticByteField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.nbt.NbtElement#DOUBLE_TYPE
    [[maybe_unused]] static void set_field_DOUBLE_TYPE(const jbyte &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "TAG_DOUBLE", "field_33256", "DOUBLE_TYPE", "f_178199_"), "B");
        return MinecraftSDK::env->SetStaticByteField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.nbt.NbtElement#BYTE_ARRAY_TYPE
    [[maybe_unused]] static jbyte get_field_BYTE_ARRAY_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "TAG_BYTE_ARRAY", "field_33257", "BYTE_ARRAY_TYPE", "f_178200_"), "B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticByteField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.nbt.NbtElement#BYTE_ARRAY_TYPE
    [[maybe_unused]] static void set_field_BYTE_ARRAY_TYPE(const jbyte &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "TAG_BYTE_ARRAY", "field_33257", "BYTE_ARRAY_TYPE", "f_178200_"), "B");
        return MinecraftSDK::env->SetStaticByteField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.nbt.NbtElement#STRING_TYPE
    [[maybe_unused]] static jbyte get_field_STRING_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("p", "TAG_STRING", "field_33258", "STRING_TYPE", "f_178201_"), "B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticByteField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.nbt.NbtElement#STRING_TYPE
    [[maybe_unused]] static void set_field_STRING_TYPE(const jbyte &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("p", "TAG_STRING", "field_33258", "STRING_TYPE", "f_178201_"), "B");
        return MinecraftSDK::env->SetStaticByteField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.nbt.NbtElement#LIST_TYPE
    [[maybe_unused]] static jbyte get_field_LIST_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("q", "TAG_LIST", "field_33259", "LIST_TYPE", "f_178202_"), "B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticByteField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.nbt.NbtElement#LIST_TYPE
    [[maybe_unused]] static void set_field_LIST_TYPE(const jbyte &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("q", "TAG_LIST", "field_33259", "LIST_TYPE", "f_178202_"), "B");
        return MinecraftSDK::env->SetStaticByteField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.nbt.NbtElement#COMPOUND_TYPE
    [[maybe_unused]] static jbyte get_field_COMPOUND_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("r", "TAG_COMPOUND", "field_33260", "COMPOUND_TYPE", "f_178203_"), "B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticByteField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.nbt.NbtElement#COMPOUND_TYPE
    [[maybe_unused]] static void set_field_COMPOUND_TYPE(const jbyte &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("r", "TAG_COMPOUND", "field_33260", "COMPOUND_TYPE", "f_178203_"), "B");
        return MinecraftSDK::env->SetStaticByteField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.nbt.NbtElement#INT_ARRAY_TYPE
    [[maybe_unused]] static jbyte get_field_INT_ARRAY_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("s", "TAG_INT_ARRAY", "field_33261", "INT_ARRAY_TYPE", "f_178204_"), "B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticByteField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.nbt.NbtElement#INT_ARRAY_TYPE
    [[maybe_unused]] static void set_field_INT_ARRAY_TYPE(const jbyte &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("s", "TAG_INT_ARRAY", "field_33261", "INT_ARRAY_TYPE", "f_178204_"), "B");
        return MinecraftSDK::env->SetStaticByteField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.nbt.NbtElement#LONG_ARRAY_TYPE
    [[maybe_unused]] static jbyte get_field_LONG_ARRAY_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("t", "TAG_LONG_ARRAY", "field_33262", "LONG_ARRAY_TYPE", "f_178205_"), "B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticByteField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.nbt.NbtElement#LONG_ARRAY_TYPE
    [[maybe_unused]] static void set_field_LONG_ARRAY_TYPE(const jbyte &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("t", "TAG_LONG_ARRAY", "field_33262", "LONG_ARRAY_TYPE", "f_178205_"), "B");
        return MinecraftSDK::env->SetStaticByteField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.nbt.NbtElement#NUMBER_TYPE
    [[maybe_unused]] static jbyte get_field_NUMBER_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("u", "TAG_ANY_NUMERIC", "field_33263", "NUMBER_TYPE", "f_178206_"), "B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticByteField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.nbt.NbtElement#NUMBER_TYPE
    [[maybe_unused]] static void set_field_NUMBER_TYPE(const jbyte &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("u", "TAG_ANY_NUMERIC", "field_33263", "NUMBER_TYPE", "f_178206_"), "B");
        return MinecraftSDK::env->SetStaticByteField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.nbt.NbtElement#MAX_DEPTH
    [[maybe_unused]] static jint get_field_MAX_DEPTH() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("v", "MAX_DEPTH", "field_33264", "MAX_DEPTH", "f_178207_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.nbt.NbtElement#MAX_DEPTH
    [[maybe_unused]] static void set_field_MAX_DEPTH(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("v", "MAX_DEPTH", "field_33264", "MAX_DEPTH", "f_178207_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    static jmethodID methodID_write() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "write", "method_10713", "write", "m_6434_"), "(Ljava/io/DataOutput;)V");
    }

    static void write(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_write();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getType() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getId", "method_10711", "getType", "m_7060_"), "()B");
    }

    static jbyte getType(const jobject& obj) {
                
       const auto methodID = methodID_getType();
       return MinecraftSDK::env->CallByteMethod(obj, methodID);
    };
    
    static jmethodID methodID_getNbtType() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getType", "method_23258", "getNbtType", "m_6458_"), "()Lva;");
    }

    static jobject getNbtType(const jobject& obj) {
                
       const auto methodID = methodID_getNbtType();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_copy() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "copy", "method_10707", "copy", "m_6426_"), "()Luy;");
    }

    static jobject copy(const jobject& obj) {
                
       const auto methodID = methodID_copy();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getSizeInBytes() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "sizeInBytes", "method_47988", "getSizeInBytes", "m_263179_"), "()I");
    }

    static jint getSizeInBytes(const jobject& obj) {
                
       const auto methodID = methodID_getSizeInBytes();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_asString() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("s_", "getAsString", "method_10714", "asString", "m_7916_"), "()Ljava/lang/String;");
    }

    static jobject asString(const jobject& obj) {
                
       const auto methodID = methodID_asString();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_accept() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "accept", "method_32289", "accept", "m_142327_"), "(Lvc;)V");
    }

    static void accept(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_accept();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_doAccept() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "accept", "method_39850", "doAccept", "m_196533_"), "(Luv;)Luv$b;");
    }

    static jobject doAccept(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_doAccept();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__accept() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "acceptAsRoot", "method_39876", "accept", "m_197573_"), "(Luv;)V");
    }

    static void _accept(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__accept();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_NBT_NBTELEMENT_HPP