// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_NBT_NBTSIZETRACKER_HPP
#define NET_MINECRAFT_NBT_NBTSIZETRACKER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.nbt.NbtSizeTracker
 * Remapped: uk
 */
namespace NbtSizeTracker {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("uk", "net/minecraft/nbt/NbtAccounter", "net/minecraft/class_2505", "net/minecraft/nbt/NbtSizeTracker", "net/minecraft/src/C_4937_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.nbt.NbtSizeTracker#DEFAULT_MAX_DEPTH
    [[maybe_unused]] static jint get_field_DEFAULT_MAX_DEPTH() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "MAX_STACK_DEPTH", "field_46208", "DEFAULT_MAX_DEPTH", "f_301619_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.nbt.NbtSizeTracker#DEFAULT_MAX_DEPTH
    [[maybe_unused]] static void set_field_DEFAULT_MAX_DEPTH(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "MAX_STACK_DEPTH", "field_46208", "DEFAULT_MAX_DEPTH", "f_301619_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.nbt.NbtSizeTracker#maxBytes
    static jlong get_field_maxBytes(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "quota", "field_11557", "maxBytes", "f_128918_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.nbt.NbtSizeTracker#maxBytes
    static void set_field_maxBytes(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "quota", "field_11557", "maxBytes", "f_128918_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.nbt.NbtSizeTracker#allocatedBytes
    static jlong get_field_allocatedBytes(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "usage", "field_11555", "allocatedBytes", "f_128919_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.nbt.NbtSizeTracker#allocatedBytes
    static void set_field_allocatedBytes(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "usage", "field_11555", "allocatedBytes", "f_128919_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.nbt.NbtSizeTracker#maxDepth
    static jint get_field_maxDepth(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "maxDepth", "field_46209", "maxDepth", "f_301621_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.nbt.NbtSizeTracker#maxDepth
    static void set_field_maxDepth(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "maxDepth", "field_46209", "maxDepth", "f_301621_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.nbt.NbtSizeTracker#depth
    static jint get_field_depth(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "depth", "field_46210", "depth", "f_301623_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.nbt.NbtSizeTracker#depth
    static void set_field_depth(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "depth", "field_46210", "depth", "f_301623_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    static jmethodID methodID_of() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "create", "method_53899", "of", "m_301677_"), "(J)Luk;");
    }

    static jobject of(const jlong& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_of();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_ofUnlimitedBytes() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "unlimitedHeap", "method_53898", "ofUnlimitedBytes", "m_301669_"), "()Luk;");
    }

    static jobject ofUnlimitedBytes() {
       const auto clazz = self();
       const auto methodID = methodID_ofUnlimitedBytes();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_add() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "accountBytes", "method_53908", "add", "m_301853_"), "(JJ)V");
    }

    static void add(const jobject& obj, const jlong& arg0, const jlong& arg1) {
                
       const auto methodID = methodID_add();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__add() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "accountBytes", "method_48004", "add", "m_263468_"), "(J)V");
    }

    static void _add(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID__add();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_pushStack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "pushDepth", "method_53900", "pushStack", "m_301672_"), "()V");
    }

    static void pushStack(const jobject& obj) {
                
       const auto methodID = methodID_pushStack();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_popStack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "popDepth", "method_53901", "popStack", "m_301650_"), "()V");
    }

    static void popStack(const jobject& obj) {
                
       const auto methodID = methodID_popStack();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getAllocatedBytes() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getUsage", "method_47987", "getAllocatedBytes", "m_263225_"), "()J");
    }

    static jlong getAllocatedBytes(const jobject& obj) {
                
       const auto methodID = methodID_getAllocatedBytes();
       return MinecraftSDK::env->CallLongMethod(obj, methodID);
    };
    
    static jmethodID methodID_getDepth() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "getDepth", "method_53902", "getDepth", "m_301664_"), "()I");
    }

    static jint getDepth(const jobject& obj) {
                
       const auto methodID = methodID_getDepth();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_NBT_NBTSIZETRACKER_HPP