// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SCREEN_CRAFTERSCREENHANDLER_HPP
#define NET_MINECRAFT_SCREEN_CRAFTERSCREENHANDLER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.screen.CrafterScreenHandler
 * Remapped: cqj
 */
namespace CrafterScreenHandler {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("cqj", "net/minecraft/world/inventory/CrafterMenu", "net/minecraft/class_8881", "net/minecraft/screen/CrafterScreenHandler", "net/minecraft/src/C_302018_"));
        }
        return cachedClass;
    };

    // getter for static protected field net.minecraft.screen.CrafterScreenHandler#field_46781
    [[maybe_unused]] static jint get_field_field_46781() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "SLOT_COUNT", "field_46781", "field_46781", "f_302535_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static protected field net.minecraft.screen.CrafterScreenHandler#field_46781
    [[maybe_unused]] static void set_field_field_46781(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "SLOT_COUNT", "field_46781", "field_46781", "f_302535_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.screen.CrafterScreenHandler#field_46782
    [[maybe_unused]] static jint get_field_field_46782() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "INV_SLOT_START", "field_46782", "field_46782", "f_303567_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.screen.CrafterScreenHandler#field_46782
    [[maybe_unused]] static void set_field_field_46782(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "INV_SLOT_START", "field_46782", "field_46782", "f_303567_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.screen.CrafterScreenHandler#field_46783
    [[maybe_unused]] static jint get_field_field_46783() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "INV_SLOT_END", "field_46783", "field_46783", "f_302593_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.screen.CrafterScreenHandler#field_46783
    [[maybe_unused]] static void set_field_field_46783(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "INV_SLOT_END", "field_46783", "field_46783", "f_302593_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.screen.CrafterScreenHandler#field_46784
    [[maybe_unused]] static jint get_field_field_46784() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "USE_ROW_SLOT_START", "field_46784", "field_46784", "f_302352_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.screen.CrafterScreenHandler#field_46784
    [[maybe_unused]] static void set_field_field_46784(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "USE_ROW_SLOT_START", "field_46784", "field_46784", "f_302352_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.screen.CrafterScreenHandler#field_46785
    [[maybe_unused]] static jint get_field_field_46785() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "USE_ROW_SLOT_END", "field_46785", "field_46785", "f_303379_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.screen.CrafterScreenHandler#field_46785
    [[maybe_unused]] static void set_field_field_46785(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "USE_ROW_SLOT_END", "field_46785", "field_46785", "f_303379_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.screen.CrafterScreenHandler#resultInventory
    static jobject get_field_resultInventory(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "resultContainer", "field_46780", "resultInventory", "f_302757_"), "Lcrl;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.screen.CrafterScreenHandler#resultInventory
    static void set_field_resultInventory(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "resultContainer", "field_46780", "resultInventory", "f_302757_"), "Lcrl;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.screen.CrafterScreenHandler#propertyDelegate
    static jobject get_field_propertyDelegate(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "containerData", "field_46786", "propertyDelegate", "f_302713_"), "Lcqf;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.screen.CrafterScreenHandler#propertyDelegate
    static void set_field_propertyDelegate(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "containerData", "field_46786", "propertyDelegate", "f_302713_"), "Lcqf;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.screen.CrafterScreenHandler#player
    static jobject get_field_player(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "player", "field_46787", "player", "f_303686_"), "Lcmx;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.screen.CrafterScreenHandler#player
    static void set_field_player(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "player", "field_46787", "player", "f_303686_"), "Lcmx;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.screen.CrafterScreenHandler#inputInventory
    static jobject get_field_inputInventory(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "container", "field_46788", "inputInventory", "f_303456_"), "Lcql;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.screen.CrafterScreenHandler#inputInventory
    static void set_field_inputInventory(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "container", "field_46788", "inputInventory", "f_303456_"), "Lcql;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_addSlots() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addSlots", "method_54459", "addSlots", "m_305799_"), "(Lcmw;)V");
    }

    static void addSlots(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addSlots();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setSlotEnabled() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setSlotState", "method_54458", "setSlotEnabled", "m_305921_"), "(IZ)V");
    }

    static void setSlotEnabled(const jobject& obj, const jint& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_setSlotEnabled();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isSlotDisabled() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "isSlotDisabled", "method_54461", "isSlotDisabled", "m_305638_"), "(I)Z");
    }

    static jboolean isSlotDisabled(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_isSlotDisabled();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isTriggered() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "isPowered", "method_54462", "isTriggered", "m_305504_"), "()Z");
    }

    static jboolean isTriggered(const jobject& obj) {
                
       const auto methodID = methodID_isTriggered();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_quickMove() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "quickMoveStack", "method_7601", "quickMove", "m_7648_"), "(Lcmx;I)Lcuq;");
    }

    static jobject quickMove(const jobject& obj, const jobject& arg0, const jint& arg1) {
                
       const auto methodID = methodID_quickMove();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_canUse() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "stillValid", "method_7597", "canUse", "m_6875_"), "(Lcmx;)Z");
    }

    static jboolean canUse(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_canUse();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_updateResult() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("n", "refreshRecipeResult", "method_54464", "updateResult", "m_305871_"), "()V");
    }

    static void updateResult(const jobject& obj) {
                
       const auto methodID = methodID_updateResult();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getInputInventory() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("m", "getContainer", "method_54463", "getInputInventory", "m_306655_"), "()Lbqk;");
    }

    static jobject getInputInventory(const jobject& obj) {
                
       const auto methodID = methodID_getInputInventory();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_onSlotUpdate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "slotChanged", "method_7635", "onSlotUpdate", "m_7934_"), "(Lcpu;ILcuq;)V");
    }

    static void onSlotUpdate(const jobject& obj, const jobject& arg0, const jint& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_onSlotUpdate();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_onPropertyUpdate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "dataChanged", "method_7633", "onPropertyUpdate", "m_142153_"), "(Lcpu;II)V");
    }

    static void onPropertyUpdate(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_onPropertyUpdate();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
};

#endif // NET_MINECRAFT_SCREEN_CRAFTERSCREENHANDLER_HPP