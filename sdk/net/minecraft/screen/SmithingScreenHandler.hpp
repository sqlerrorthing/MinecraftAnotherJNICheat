// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SCREEN_SMITHINGSCREENHANDLER_HPP
#define NET_MINECRAFT_SCREEN_SMITHINGSCREENHANDLER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.screen.SmithingScreenHandler
 * Remapped: crt
 */
namespace SmithingScreenHandler {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("crt", "net/minecraft/world/inventory/SmithingMenu", "net/minecraft/class_4862", "net/minecraft/screen/SmithingScreenHandler", "net/minecraft/src/C_1306_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.screen.SmithingScreenHandler#TEMPLATE_ID
    [[maybe_unused]] static jint get_field_TEMPLATE_ID() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "TEMPLATE_SLOT", "field_41924", "TEMPLATE_ID", "f_266015_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.SmithingScreenHandler#TEMPLATE_ID
    [[maybe_unused]] static void set_field_TEMPLATE_ID(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "TEMPLATE_SLOT", "field_41924", "TEMPLATE_ID", "f_266015_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.screen.SmithingScreenHandler#EQUIPMENT_ID
    [[maybe_unused]] static jint get_field_EQUIPMENT_ID() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "BASE_SLOT", "field_41925", "EQUIPMENT_ID", "f_266035_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.SmithingScreenHandler#EQUIPMENT_ID
    [[maybe_unused]] static void set_field_EQUIPMENT_ID(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "BASE_SLOT", "field_41925", "EQUIPMENT_ID", "f_266035_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.screen.SmithingScreenHandler#MATERIAL_ID
    [[maybe_unused]] static jint get_field_MATERIAL_ID() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "ADDITIONAL_SLOT", "field_41926", "MATERIAL_ID", "f_265928_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.SmithingScreenHandler#MATERIAL_ID
    [[maybe_unused]] static void set_field_MATERIAL_ID(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "ADDITIONAL_SLOT", "field_41926", "MATERIAL_ID", "f_265928_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.screen.SmithingScreenHandler#OUTPUT_ID
    [[maybe_unused]] static jint get_field_OUTPUT_ID() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "RESULT_SLOT", "field_41927", "OUTPUT_ID", "f_266024_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.SmithingScreenHandler#OUTPUT_ID
    [[maybe_unused]] static void set_field_OUTPUT_ID(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "RESULT_SLOT", "field_41927", "OUTPUT_ID", "f_266024_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.screen.SmithingScreenHandler#TEMPLATE_X
    [[maybe_unused]] static jint get_field_TEMPLATE_X() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("s", "TEMPLATE_SLOT_X_PLACEMENT", "field_41928", "TEMPLATE_X", "f_265913_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.SmithingScreenHandler#TEMPLATE_X
    [[maybe_unused]] static void set_field_TEMPLATE_X(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("s", "TEMPLATE_SLOT_X_PLACEMENT", "field_41928", "TEMPLATE_X", "f_265913_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.screen.SmithingScreenHandler#EQUIPMENT_X
    [[maybe_unused]] static jint get_field_EQUIPMENT_X() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("t", "BASE_SLOT_X_PLACEMENT", "field_41929", "EQUIPMENT_X", "f_266041_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.SmithingScreenHandler#EQUIPMENT_X
    [[maybe_unused]] static void set_field_EQUIPMENT_X(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("t", "BASE_SLOT_X_PLACEMENT", "field_41929", "EQUIPMENT_X", "f_266041_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.screen.SmithingScreenHandler#MATERIAL_X
    [[maybe_unused]] static jint get_field_MATERIAL_X() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("u", "ADDITIONAL_SLOT_X_PLACEMENT", "field_41930", "MATERIAL_X", "f_265899_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.SmithingScreenHandler#MATERIAL_X
    [[maybe_unused]] static void set_field_MATERIAL_X(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("u", "ADDITIONAL_SLOT_X_PLACEMENT", "field_41930", "MATERIAL_X", "f_265899_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.screen.SmithingScreenHandler#OUTPUT_X
    [[maybe_unused]] static jint get_field_OUTPUT_X() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("w", "RESULT_SLOT_X_PLACEMENT", "field_41932", "OUTPUT_X", "f_265851_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.screen.SmithingScreenHandler#OUTPUT_X
    [[maybe_unused]] static void set_field_OUTPUT_X(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("w", "RESULT_SLOT_X_PLACEMENT", "field_41932", "OUTPUT_X", "f_265851_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.screen.SmithingScreenHandler#SLOT_Y
    [[maybe_unused]] static jint get_field_SLOT_Y() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("v", "SLOT_Y_PLACEMENT", "field_41931", "SLOT_Y", "f_266111_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.SmithingScreenHandler#SLOT_Y
    [[maybe_unused]] static void set_field_SLOT_Y(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("v", "SLOT_Y_PLACEMENT", "field_41931", "SLOT_Y", "f_266111_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.screen.SmithingScreenHandler#world
    static jobject get_field_world(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("x", "level", "field_25385", "world", "f_40241_"), "Ldcw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.screen.SmithingScreenHandler#world
    static void set_field_world(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("x", "level", "field_25385", "world", "f_40241_"), "Ldcw;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.screen.SmithingScreenHandler#currentRecipe
    static jobject get_field_currentRecipe(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("y", "selectedRecipe", "field_25386", "currentRecipe", "f_40242_"), "Lczb;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.screen.SmithingScreenHandler#currentRecipe
    static void set_field_currentRecipe(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("y", "selectedRecipe", "field_25386", "currentRecipe", "f_40242_"), "Lczb;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.screen.SmithingScreenHandler#recipes
    static jobject get_field_recipes(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("z", "recipes", "field_25668", "recipes", "f_40243_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.screen.SmithingScreenHandler#recipes
    static void set_field_recipes(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("z", "recipes", "field_25668", "recipes", "f_40243_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_getForgingSlotsManager() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "createInputSlotDefinitions", "method_48352", "getForgingSlotsManager", "m_266183_"), "()Lcqy;");
    }

    static jobject getForgingSlotsManager(const jobject& obj) {
                
       const auto methodID = methodID_getForgingSlotsManager();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_canUse() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isValidBlock", "method_24925", "canUse", "m_8039_"), "(Ldtc;)Z");
    }

    static jboolean canUse(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_canUse();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_canTakeOutput() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "mayPickup", "method_24927", "canTakeOutput", "m_6560_"), "(Lcmx;Z)Z");
    }

    static jboolean canTakeOutput(const jobject& obj, const jobject& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_canTakeOutput();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_onTakeOutput() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onTake", "method_24923", "onTakeOutput", "m_142365_"), "(Lcmx;Lcuq;)V");
    }

    static void onTakeOutput(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_onTakeOutput();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getInputStacks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("n", "getRelevantItems", "method_51307", "getInputStacks", "m_280632_"), "()Ljava/util/List;");
    }

    static jobject getInputStacks(const jobject& obj) {
                
       const auto methodID = methodID_getInputStacks();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_createRecipeInput() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("p", "createRecipeInput", "method_59965", "createRecipeInput", "m_339052_"), "()Lczs;");
    }

    static jobject createRecipeInput(const jobject& obj) {
                
       const auto methodID = methodID_createRecipeInput();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_decrementStack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "shrinkStackInSlot", "method_29539", "decrementStack", "m_40270_"), "(I)V");
    }

    static void decrementStack(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_decrementStack();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_updateResult() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("m", "createResult", "method_24928", "updateResult", "m_6640_"), "()V");
    }

    static void updateResult(const jobject& obj) {
                
       const auto methodID = methodID_updateResult();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getSlotFor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getSlotToQuickMoveTo", "method_48357", "getSlotFor", "m_266159_"), "(Lcuq;)I");
    }

    static jint getSlotFor(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getSlotFor();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getQuickMoveSlot() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "findSlotMatchingIngredient", "method_48389", "getQuickMoveSlot", "m_266320_"), "(Lczr;Lcuq;)Ljava/util/OptionalInt;");
    }

    static jobject getQuickMoveSlot(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_getQuickMoveSlot();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_canInsertIntoSlot() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "canTakeItemForPickAll", "method_7613", "canInsertIntoSlot", "m_5882_"), "(Lcuq;Lcrq;)Z");
    }

    static jboolean canInsertIntoSlot(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_canInsertIntoSlot();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isValidIngredient() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "canMoveIntoInputSlots", "method_48356", "isValidIngredient", "m_5861_"), "(Lcuq;)Z");
    }

    static jboolean isValidIngredient(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isValidIngredient();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__getQuickMoveSlot() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "findSlotToQuickMoveTo", "method_52563", "getQuickMoveSlot", "m_294173_"), "(Lcuq;)Ljava/util/OptionalInt;");
    }

    static jobject _getQuickMoveSlot(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__getQuickMoveSlot();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_SCREEN_SMITHINGSCREENHANDLER_HPP