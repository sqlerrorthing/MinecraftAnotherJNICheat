// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SCREEN_SCREENHANDLER_HPP
#define NET_MINECRAFT_SCREEN_SCREENHANDLER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.screen.ScreenHandler
 * Remapped: cpu
 */
namespace ScreenHandler {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("cpu", "net/minecraft/world/inventory/AbstractContainerMenu", "net/minecraft/class_1703", "net/minecraft/screen/ScreenHandler", "net/minecraft/src/C_1226_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.screen.ScreenHandler#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "LOGGER", "field_36534", "LOGGER", "f_207773_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.screen.ScreenHandler#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "LOGGER", "field_36534", "LOGGER", "f_207773_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.screen.ScreenHandler#EMPTY_SPACE_SLOT_INDEX
    [[maybe_unused]] static jint get_field_EMPTY_SPACE_SLOT_INDEX() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "SLOT_CLICKED_OUTSIDE", "field_30730", "EMPTY_SPACE_SLOT_INDEX", "f_150385_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.ScreenHandler#EMPTY_SPACE_SLOT_INDEX
    [[maybe_unused]] static void set_field_EMPTY_SPACE_SLOT_INDEX(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "SLOT_CLICKED_OUTSIDE", "field_30730", "EMPTY_SPACE_SLOT_INDEX", "f_150385_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.screen.ScreenHandler#field_30731
    [[maybe_unused]] static jint get_field_field_30731() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "QUICKCRAFT_TYPE_CHARITABLE", "field_30731", "field_30731", "f_150386_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.ScreenHandler#field_30731
    [[maybe_unused]] static void set_field_field_30731(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "QUICKCRAFT_TYPE_CHARITABLE", "field_30731", "field_30731", "f_150386_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.screen.ScreenHandler#field_30732
    [[maybe_unused]] static jint get_field_field_30732() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "QUICKCRAFT_TYPE_GREEDY", "field_30732", "field_30732", "f_150387_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.ScreenHandler#field_30732
    [[maybe_unused]] static void set_field_field_30732(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "QUICKCRAFT_TYPE_GREEDY", "field_30732", "field_30732", "f_150387_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.screen.ScreenHandler#field_30733
    [[maybe_unused]] static jint get_field_field_30733() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "QUICKCRAFT_TYPE_CLONE", "field_30733", "field_30733", "f_150388_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.ScreenHandler#field_30733
    [[maybe_unused]] static void set_field_field_30733(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "QUICKCRAFT_TYPE_CLONE", "field_30733", "field_30733", "f_150388_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.screen.ScreenHandler#field_30734
    [[maybe_unused]] static jint get_field_field_30734() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "QUICKCRAFT_HEADER_START", "field_30734", "field_30734", "f_150389_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.ScreenHandler#field_30734
    [[maybe_unused]] static void set_field_field_30734(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "QUICKCRAFT_HEADER_START", "field_30734", "field_30734", "f_150389_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.screen.ScreenHandler#field_30735
    [[maybe_unused]] static jint get_field_field_30735() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "QUICKCRAFT_HEADER_CONTINUE", "field_30735", "field_30735", "f_150390_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.ScreenHandler#field_30735
    [[maybe_unused]] static void set_field_field_30735(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "QUICKCRAFT_HEADER_CONTINUE", "field_30735", "field_30735", "f_150390_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.screen.ScreenHandler#field_30736
    [[maybe_unused]] static jint get_field_field_30736() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "QUICKCRAFT_HEADER_END", "field_30736", "field_30736", "f_150391_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.ScreenHandler#field_30736
    [[maybe_unused]] static void set_field_field_30736(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "QUICKCRAFT_HEADER_END", "field_30736", "field_30736", "f_150391_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.screen.ScreenHandler#field_30737
    [[maybe_unused]] static jint get_field_field_30737() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "CARRIED_SLOT_SIZE", "field_30737", "field_30737", "f_150392_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.ScreenHandler#field_30737
    [[maybe_unused]] static void set_field_field_30737(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "CARRIED_SLOT_SIZE", "field_30737", "field_30737", "f_150392_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.screen.ScreenHandler#trackedStacks
    static jobject get_field_trackedStacks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "lastSlots", "field_7764", "trackedStacks", "f_38841_"), "Ljv;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.screen.ScreenHandler#trackedStacks
    static void set_field_trackedStacks(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "lastSlots", "field_7764", "trackedStacks", "f_38841_"), "Ljv;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.screen.ScreenHandler#slots
    static jobject get_field_slots(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "slots", "field_7761", "slots", "f_38839_"), "Ljv;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static public field net.minecraft.screen.ScreenHandler#slots
    static void set_field_slots(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "slots", "field_7761", "slots", "f_38839_"), "Ljv;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.screen.ScreenHandler#properties
    static jobject get_field_properties(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "dataSlots", "field_17285", "properties", "f_38842_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.screen.ScreenHandler#properties
    static void set_field_properties(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "dataSlots", "field_17285", "properties", "f_38842_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.screen.ScreenHandler#cursorStack
    static jobject get_field_cursorStack(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "carried", "field_29205", "cursorStack", "f_150393_"), "Lcuq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.screen.ScreenHandler#cursorStack
    static void set_field_cursorStack(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "carried", "field_29205", "cursorStack", "f_150393_"), "Lcuq;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.screen.ScreenHandler#previousTrackedStacks
    static jobject get_field_previousTrackedStacks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "remoteSlots", "field_29206", "previousTrackedStacks", "f_150394_"), "Ljv;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.screen.ScreenHandler#previousTrackedStacks
    static void set_field_previousTrackedStacks(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "remoteSlots", "field_29206", "previousTrackedStacks", "f_150394_"), "Ljv;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.screen.ScreenHandler#trackedPropertyValues
    static jobject get_field_trackedPropertyValues(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "remoteDataSlots", "field_29559", "trackedPropertyValues", "f_150395_"), "Lit/unimi/dsi/fastutil/ints/IntList;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.screen.ScreenHandler#trackedPropertyValues
    static void set_field_trackedPropertyValues(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "remoteDataSlots", "field_29559", "trackedPropertyValues", "f_150395_"), "Lit/unimi/dsi/fastutil/ints/IntList;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.screen.ScreenHandler#previousCursorStack
    static jobject get_field_previousCursorStack(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "remoteCarried", "field_29207", "previousCursorStack", "f_150396_"), "Lcuq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.screen.ScreenHandler#previousCursorStack
    static void set_field_previousCursorStack(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "remoteCarried", "field_29207", "previousCursorStack", "f_150396_"), "Lcuq;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.screen.ScreenHandler#revision
    static jint get_field_revision(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "stateId", "field_34024", "revision", "f_182405_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.screen.ScreenHandler#revision
    static void set_field_revision(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "stateId", "field_34024", "revision", "f_182405_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.screen.ScreenHandler#type
    static jobject get_field_type(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "menuType", "field_17493", "type", "f_38843_"), "Lcrc;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.screen.ScreenHandler#type
    static void set_field_type(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "menuType", "field_17493", "type", "f_38843_"), "Lcrc;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.screen.ScreenHandler#syncId
    static jint get_field_syncId(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "containerId", "field_7763", "syncId", "f_38840_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static public field net.minecraft.screen.ScreenHandler#syncId
    static void set_field_syncId(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "containerId", "field_7763", "syncId", "f_38840_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.screen.ScreenHandler#quickCraftButton
    static jint get_field_quickCraftButton(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "quickcraftType", "field_7762", "quickCraftButton", "f_38845_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.screen.ScreenHandler#quickCraftButton
    static void set_field_quickCraftButton(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "quickcraftType", "field_7762", "quickCraftButton", "f_38845_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.screen.ScreenHandler#quickCraftStage
    static jint get_field_quickCraftStage(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "quickcraftStatus", "field_7759", "quickCraftStage", "f_38846_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.screen.ScreenHandler#quickCraftStage
    static void set_field_quickCraftStage(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "quickcraftStatus", "field_7759", "quickCraftStage", "f_38846_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.screen.ScreenHandler#quickCraftSlots
    static jobject get_field_quickCraftSlots(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "quickcraftSlots", "field_7757", "quickCraftSlots", "f_38847_"), "Ljava/util/Set;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.screen.ScreenHandler#quickCraftSlots
    static void set_field_quickCraftSlots(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "quickcraftSlots", "field_7757", "quickCraftSlots", "f_38847_"), "Ljava/util/Set;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.screen.ScreenHandler#listeners
    static jobject get_field_listeners(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("w", "containerListeners", "field_7765", "listeners", "f_38848_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.screen.ScreenHandler#listeners
    static void set_field_listeners(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("w", "containerListeners", "field_7765", "listeners", "f_38848_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.screen.ScreenHandler#syncHandler
    static jobject get_field_syncHandler(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("x", "synchronizer", "field_29208", "syncHandler", "f_150397_"), "Lcqi;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.screen.ScreenHandler#syncHandler
    static void set_field_syncHandler(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("x", "synchronizer", "field_29208", "syncHandler", "f_150397_"), "Lcqi;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.screen.ScreenHandler#disableSync
    static jboolean get_field_disableSync(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("y", "suppressRemoteUpdates", "field_29209", "disableSync", "f_150398_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.screen.ScreenHandler#disableSync
    static void set_field_disableSync(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("y", "suppressRemoteUpdates", "field_29209", "disableSync", "f_150398_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    static jmethodID methodID_canUse() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "stillValid", "method_17695", "canUse", "m_38889_"), "(Lcqg;Lcmx;Ldfy;)Z");
    }

    static jboolean canUse(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_canUse();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getType() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getType", "method_17358", "getType", "m_6772_"), "()Lcrc;");
    }

    static jobject getType(const jobject& obj) {
                
       const auto methodID = methodID_getType();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_checkSize() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "checkContainerSize", "method_17359", "checkSize", "m_38869_"), "(Lbqk;I)V");
    }

    static void checkSize(const jobject& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_checkSize();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_checkDataCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "checkContainerDataCount", "method_17361", "checkDataCount", "m_38886_"), "(Lcqf;I)V");
    }

    static void checkDataCount(const jobject& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_checkDataCount();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isValid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isValidSlotIndex", "method_40442", "isValid", "m_207775_"), "(I)Z");
    }

    static jboolean isValid(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_isValid();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_addSlot() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addSlot", "method_7621", "addSlot", "m_38897_"), "(Lcrq;)Lcrq;");
    }

    static jobject addSlot(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addSlot();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_addProperty() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addDataSlot", "method_17362", "addProperty", "m_38895_"), "(Lcqn;)Lcqn;");
    }

    static jobject addProperty(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addProperty();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_addProperties() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addDataSlots", "method_17360", "addProperties", "m_38884_"), "(Lcqf;)V");
    }

    static void addProperties(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addProperties();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_addListener() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addSlotListener", "method_7596", "addListener", "m_38893_"), "(Lcqh;)V");
    }

    static void addListener(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addListener();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_updateSyncHandler() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setSynchronizer", "method_34248", "updateSyncHandler", "m_150416_"), "(Lcqi;)V");
    }

    static void updateSyncHandler(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_updateSyncHandler();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_syncState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "sendAllDataToRemote", "method_34252", "syncState", "m_150429_"), "()V");
    }

    static void syncState(const jobject& obj) {
                
       const auto methodID = methodID_syncState();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_removeListener() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "removeSlotListener", "method_7603", "removeListener", "m_38943_"), "(Lcqh;)V");
    }

    static void removeListener(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_removeListener();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getStacks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getItems", "method_7602", "getStacks", "m_38927_"), "()Ljv;");
    }

    static jobject getStacks(const jobject& obj) {
                
       const auto methodID = methodID_getStacks();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_sendContentUpdates() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "broadcastChanges", "method_7623", "sendContentUpdates", "m_38946_"), "()V");
    }

    static void sendContentUpdates(const jobject& obj) {
                
       const auto methodID = methodID_sendContentUpdates();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_updateToClient() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "broadcastFullState", "method_37420", "updateToClient", "m_182423_"), "()V");
    }

    static void updateToClient(const jobject& obj) {
                
       const auto methodID = methodID_updateToClient();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_notifyPropertyUpdate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "updateDataSlotListeners", "method_37419", "notifyPropertyUpdate", "m_182420_"), "(II)V");
    }

    static void notifyPropertyUpdate(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_notifyPropertyUpdate();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_updateTrackedSlot() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "triggerSlotListeners", "method_34246", "updateTrackedSlot", "m_150407_"), "(ILcuq;Ljava/util/function/Supplier;)V");
    }

    static void updateTrackedSlot(const jobject& obj, const jint& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_updateTrackedSlot();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_checkSlotUpdates() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "synchronizeSlotToRemote", "method_34253", "checkSlotUpdates", "m_150435_"), "(ILcuq;Ljava/util/function/Supplier;)V");
    }

    static void checkSlotUpdates(const jobject& obj, const jint& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_checkSlotUpdates();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_checkPropertyUpdates() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "synchronizeDataSlotToRemote", "method_34715", "checkPropertyUpdates", "m_150440_"), "(II)V");
    }

    static void checkPropertyUpdates(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_checkPropertyUpdates();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_checkCursorStackUpdates() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "synchronizeCarriedToRemote", "method_34258", "checkCursorStackUpdates", "m_150445_"), "()V");
    }

    static void checkCursorStackUpdates(const jobject& obj) {
                
       const auto methodID = methodID_checkCursorStackUpdates();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_setPreviousTrackedSlot() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setRemoteSlot", "method_34245", "setPreviousTrackedSlot", "m_150404_"), "(ILcuq;)V");
    }

    static void setPreviousTrackedSlot(const jobject& obj, const jint& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_setPreviousTrackedSlot();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_setPreviousTrackedSlotMutable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setRemoteSlotNoCopy", "method_37449", "setPreviousTrackedSlotMutable", "m_182414_"), "(ILcuq;)V");
    }

    static void setPreviousTrackedSlotMutable(const jobject& obj, const jint& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_setPreviousTrackedSlotMutable();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_setPreviousCursorStack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setRemoteCarried", "method_34250", "setPreviousCursorStack", "m_150422_"), "(Lcuq;)V");
    }

    static void setPreviousCursorStack(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setPreviousCursorStack();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onButtonClick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "clickMenuButton", "method_7604", "onButtonClick", "m_6366_"), "(Lcmx;I)Z");
    }

    static jboolean onButtonClick(const jobject& obj, const jobject& arg0, const jint& arg1) {
                
       const auto methodID = methodID_onButtonClick();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getSlot() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getSlot", "method_7611", "getSlot", "m_38853_"), "(I)Lcrq;");
    }

    static jobject getSlot(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_getSlot();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_quickMove() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "quickMoveStack", "method_7601", "quickMove", "m_7648_"), "(Lcmx;I)Lcuq;");
    }

    static jobject quickMove(const jobject& obj, const jobject& arg0, const jint& arg1) {
                
       const auto methodID = methodID_quickMove();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_onSlotClick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "clicked", "method_7593", "onSlotClick", "m_150399_"), "(IILcqe;Lcmx;)V");
    }

    static void onSlotClick(const jobject& obj, const jint& arg0, const jint& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_onSlotClick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_internalOnSlotClick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "doClick", "method_30010", "internalOnSlotClick", "m_150430_"), "(IILcqe;Lcmx;)V");
    }

    static void internalOnSlotClick(const jobject& obj, const jint& arg0, const jint& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_internalOnSlotClick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_handleSlotClick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "tryItemClickBehaviourOverride", "method_45409", "handleSlotClick", "m_246200_"), "(Lcmx;Lcqd;Lcrq;Lcuq;Lcuq;)Z");
    }

    static jboolean handleSlotClick(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4) {
                
       const auto methodID = methodID_handleSlotClick();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_getCursorStackReference() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("m", "createCarriedSlotAccess", "method_34259", "getCursorStackReference", "m_150446_"), "()Lbug;");
    }

    static jobject getCursorStackReference(const jobject& obj) {
                
       const auto methodID = methodID_getCursorStackReference();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_canInsertIntoSlot() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "canTakeItemForPickAll", "method_7613", "canInsertIntoSlot", "m_5882_"), "(Lcuq;Lcrq;)Z");
    }

    static jboolean canInsertIntoSlot(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_canInsertIntoSlot();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_onClosed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "removed", "method_7595", "onClosed", "m_6877_"), "(Lcmx;)V");
    }

    static void onClosed(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onClosed();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_dropInventory() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "clearContainer", "method_7607", "dropInventory", "m_150411_"), "(Lcmx;Lbqk;)V");
    }

    static void dropInventory(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_dropInventory();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_onContentChanged() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "slotsChanged", "method_7609", "onContentChanged", "m_6199_"), "(Lbqk;)V");
    }

    static void onContentChanged(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onContentChanged();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setStackInSlot() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setItem", "method_7619", "setStackInSlot", "m_182406_"), "(IILcuq;)V");
    }

    static void setStackInSlot(const jobject& obj, const jint& arg0, const jint& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_setStackInSlot();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_updateSlotStacks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "initializeContents", "method_7610", "updateSlotStacks", "m_182410_"), "(ILjava/util/List;Lcuq;)V");
    }

    static void updateSlotStacks(const jobject& obj, const jint& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_updateSlotStacks();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_setProperty() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setData", "method_7606", "setProperty", "m_7511_"), "(II)V");
    }

    static void setProperty(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_setProperty();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__canUse() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "stillValid", "method_7597", "canUse", "m_6875_"), "(Lcmx;)Z");
    }

    static jboolean _canUse(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__canUse();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_insertItem() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "moveItemStackTo", "method_7616", "insertItem", "m_38903_"), "(Lcuq;IIZ)Z");
    }

    static jboolean insertItem(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2, const jboolean& arg3) {
                
       const auto methodID = methodID_insertItem();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_unpackQuickCraftButton() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "getQuickcraftType", "method_7620", "unpackQuickCraftButton", "m_38928_"), "(I)I");
    }

    static jint unpackQuickCraftButton(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_unpackQuickCraftButton();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_unpackQuickCraftStage() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("d", "getQuickcraftHeader", "method_7594", "unpackQuickCraftStage", "m_38947_"), "(I)I");
    }

    static jint unpackQuickCraftStage(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_unpackQuickCraftStage();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_packQuickCraftData() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "getQuickcraftMask", "method_7591", "packQuickCraftData", "m_38930_"), "(II)I");
    }

    static jint packQuickCraftData(const jint& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_packQuickCraftData();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_shouldQuickCraftContinue() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "isValidQuickcraftType", "method_7600", "shouldQuickCraftContinue", "m_38862_"), "(ILcmx;)Z");
    }

    static jboolean shouldQuickCraftContinue(const jint& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_shouldQuickCraftContinue();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_endQuickCraft() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "resetQuickCraft", "method_7605", "endQuickCraft", "m_38951_"), "()V");
    }

    static void endQuickCraft(const jobject& obj) {
                
       const auto methodID = methodID_endQuickCraft();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_canInsertItemIntoSlot() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "canItemQuickReplace", "method_7592", "canInsertItemIntoSlot", "m_38899_"), "(Lcrq;Lcuq;Z)Z");
    }

    static jboolean canInsertItemIntoSlot(const jobject& arg0, const jobject& arg1, const jboolean& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_canInsertItemIntoSlot();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_calculateStackSize() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getQuickCraftPlaceCount", "method_7617", "calculateStackSize", "m_278794_"), "(Ljava/util/Set;ILcuq;)I");
    }

    static jint calculateStackSize(const jobject& arg0, const jint& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_calculateStackSize();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__canInsertIntoSlot() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "canDragTo", "method_7615", "canInsertIntoSlot", "m_5622_"), "(Lcrq;)Z");
    }

    static jboolean _canInsertIntoSlot(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__canInsertIntoSlot();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_calculateComparatorOutput() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getRedstoneSignalFromBlockEntity", "method_7608", "calculateComparatorOutput", "m_38918_"), "(Ldqh;)I");
    }

    static jint calculateComparatorOutput(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_calculateComparatorOutput();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID__calculateComparatorOutput() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "getRedstoneSignalFromContainer", "method_7618", "calculateComparatorOutput", "m_38938_"), "(Lbqk;)I");
    }

    static jint _calculateComparatorOutput(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID__calculateComparatorOutput();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_setCursorStack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setCarried", "method_34254", "setCursorStack", "m_142503_"), "(Lcuq;)V");
    }

    static void setCursorStack(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setCursorStack();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getCursorStack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "getCarried", "method_34255", "getCursorStack", "m_142621_"), "()Lcuq;");
    }

    static jobject getCursorStack(const jobject& obj) {
                
       const auto methodID = methodID_getCursorStack();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_disableSyncing() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "suppressRemoteUpdates", "method_34256", "disableSyncing", "m_150443_"), "()V");
    }

    static void disableSyncing(const jobject& obj) {
                
       const auto methodID = methodID_disableSyncing();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_enableSyncing() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "resumeRemoteUpdates", "method_34257", "enableSyncing", "m_150444_"), "()V");
    }

    static void enableSyncing(const jobject& obj) {
                
       const auto methodID = methodID_enableSyncing();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_copySharedSlots() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "transferState", "method_34247", "copySharedSlots", "m_150414_"), "(Lcpu;)V");
    }

    static void copySharedSlots(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_copySharedSlots();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getSlotIndex() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "findSlot", "method_37418", "getSlotIndex", "m_182417_"), "(Lbqk;I)Ljava/util/OptionalInt;");
    }

    static jobject getSlotIndex(const jobject& obj, const jobject& arg0, const jint& arg1) {
                
       const auto methodID = methodID_getSlotIndex();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getRevision() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "getStateId", "method_37421", "getRevision", "m_182424_"), "()I");
    }

    static jint getRevision(const jobject& obj) {
                
       const auto methodID = methodID_getRevision();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_nextRevision() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "incrementStateId", "method_37422", "nextRevision", "m_182425_"), "()I");
    }

    static jint nextRevision(const jobject& obj) {
                
       const auto methodID = methodID_nextRevision();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_SCREEN_SCREENHANDLER_HPP