// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SCREEN_GENERIC3X3CONTAINERSCREENHANDLER_HPP
#define NET_MINECRAFT_SCREEN_GENERIC3X3CONTAINERSCREENHANDLER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.screen.Generic3x3ContainerScreenHandler
 * Remapped: cqo
 */
namespace Generic3x3ContainerScreenHandler {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("cqo", "net/minecraft/world/inventory/DispenserMenu", "net/minecraft/class_1716", "net/minecraft/screen/Generic3x3ContainerScreenHandler", "net/minecraft/src/C_1257_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.screen.Generic3x3ContainerScreenHandler#CONTAINER_SIZE
    [[maybe_unused]] static jint get_field_CONTAINER_SIZE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "SLOT_COUNT", "field_30788", "CONTAINER_SIZE", "f_150557_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.screen.Generic3x3ContainerScreenHandler#CONTAINER_SIZE
    [[maybe_unused]] static void set_field_CONTAINER_SIZE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "SLOT_COUNT", "field_30788", "CONTAINER_SIZE", "f_150557_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.screen.Generic3x3ContainerScreenHandler#INVENTORY_START
    [[maybe_unused]] static jint get_field_INVENTORY_START() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "INV_SLOT_START", "field_30789", "INVENTORY_START", "f_150558_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.screen.Generic3x3ContainerScreenHandler#INVENTORY_START
    [[maybe_unused]] static void set_field_INVENTORY_START(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "INV_SLOT_START", "field_30789", "INVENTORY_START", "f_150558_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.screen.Generic3x3ContainerScreenHandler#INVENTORY_END
    [[maybe_unused]] static jint get_field_INVENTORY_END() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "INV_SLOT_END", "field_30790", "INVENTORY_END", "f_150559_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.screen.Generic3x3ContainerScreenHandler#INVENTORY_END
    [[maybe_unused]] static void set_field_INVENTORY_END(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "INV_SLOT_END", "field_30790", "INVENTORY_END", "f_150559_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.screen.Generic3x3ContainerScreenHandler#HOTBAR_START
    [[maybe_unused]] static jint get_field_HOTBAR_START() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "USE_ROW_SLOT_START", "field_30791", "HOTBAR_START", "f_150560_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.screen.Generic3x3ContainerScreenHandler#HOTBAR_START
    [[maybe_unused]] static void set_field_HOTBAR_START(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "USE_ROW_SLOT_START", "field_30791", "HOTBAR_START", "f_150560_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.screen.Generic3x3ContainerScreenHandler#HOTBAR_END
    [[maybe_unused]] static jint get_field_HOTBAR_END() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "USE_ROW_SLOT_END", "field_30792", "HOTBAR_END", "f_150561_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.screen.Generic3x3ContainerScreenHandler#HOTBAR_END
    [[maybe_unused]] static void set_field_HOTBAR_END(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "USE_ROW_SLOT_END", "field_30792", "HOTBAR_END", "f_150561_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.screen.Generic3x3ContainerScreenHandler#inventory
    static jobject get_field_inventory(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "dispenser", "field_7806", "inventory", "f_39431_"), "Lbqk;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.screen.Generic3x3ContainerScreenHandler#inventory
    static void set_field_inventory(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "dispenser", "field_7806", "inventory", "f_39431_"), "Lbqk;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_canUse() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "stillValid", "method_7597", "canUse", "m_6875_"), "(Lcmx;)Z");
    }

    static jboolean canUse(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_canUse();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_quickMove() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "quickMoveStack", "method_7601", "quickMove", "m_7648_"), "(Lcmx;I)Lcuq;");
    }

    static jobject quickMove(const jobject& obj, const jobject& arg0, const jint& arg1) {
                
       const auto methodID = methodID_quickMove();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_onClosed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "removed", "method_7595", "onClosed", "m_6877_"), "(Lcmx;)V");
    }

    static void onClosed(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onClosed();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_SCREEN_GENERIC3X3CONTAINERSCREENHANDLER_HPP