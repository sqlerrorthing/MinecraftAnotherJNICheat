// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SCREEN_SLOT_CRAFTEROUTPUTSLOT_HPP
#define NET_MINECRAFT_SCREEN_SLOT_CRAFTEROUTPUTSLOT_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.screen.slot.CrafterOutputSlot
 * Remapped: crg
 */
namespace CrafterOutputSlot {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("crg", "net/minecraft/world/inventory/NonInteractiveResultSlot", "net/minecraft/class_8883", "net/minecraft/screen/slot/CrafterOutputSlot", "net/minecraft/src/C_302089_"));
        }
        return cachedClass;
    };

    static jmethodID methodID_onQuickTransfer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "onQuickCraft", "method_7670", "onQuickTransfer", "m_40234_"), "(Lcuq;Lcuq;)V");
    }

    static void onQuickTransfer(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_onQuickTransfer();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_canTakeItems() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "mayPickup", "method_7674", "canTakeItems", "m_8010_"), "(Lcmx;)Z");
    }

    static jboolean canTakeItems(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_canTakeItems();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_tryTakeStackRange() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "tryRemove", "method_34264", "tryTakeStackRange", "m_150641_"), "(IILcmx;)Ljava/util/Optional;");
    }

    static jobject tryTakeStackRange(const jobject& obj, const jint& arg0, const jint& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_tryTakeStackRange();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_takeStackRange() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "safeTake", "method_32753", "takeStackRange", "m_150647_"), "(IILcmx;)Lcuq;");
    }

    static jobject takeStackRange(const jobject& obj, const jint& arg0, const jint& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_takeStackRange();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_insertStack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "safeInsert", "method_32756", "insertStack", "m_150659_"), "(Lcuq;)Lcuq;");
    }

    static jobject insertStack(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_insertStack();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__insertStack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "safeInsert", "method_32755", "insertStack", "m_150656_"), "(Lcuq;I)Lcuq;");
    }

    static jobject _insertStack(const jobject& obj, const jobject& arg0, const jint& arg1) {
                
       const auto methodID = methodID__insertStack();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_canTakePartial() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "allowModification", "method_32754", "canTakePartial", "m_150651_"), "(Lcmx;)Z");
    }

    static jboolean canTakePartial(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_canTakePartial();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_canInsert() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "mayPlace", "method_7680", "canInsert", "m_5857_"), "(Lcuq;)Z");
    }

    static jboolean canInsert(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_canInsert();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_takeStack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "remove", "method_7671", "takeStack", "m_6201_"), "(I)Lcuq;");
    }

    static jobject takeStack(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_takeStack();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onTakeItem() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onTake", "method_7667", "onTakeItem", "m_142406_"), "(Lcmx;Lcuq;)V");
    }

    static void onTakeItem(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_onTakeItem();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_canBeHighlighted() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "isHighlightable", "method_51306", "canBeHighlighted", "m_280329_"), "()Z");
    }

    static jboolean canBeHighlighted(const jobject& obj) {
                
       const auto methodID = methodID_canBeHighlighted();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_disablesDynamicDisplay() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "isFake", "method_55059", "disablesDynamicDisplay", "m_305540_"), "()Z");
    }

    static jboolean disablesDynamicDisplay(const jobject& obj) {
                
       const auto methodID = methodID_disablesDynamicDisplay();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_SCREEN_SLOT_CRAFTEROUTPUTSLOT_HPP