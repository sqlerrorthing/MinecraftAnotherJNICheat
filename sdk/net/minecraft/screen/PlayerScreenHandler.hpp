// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SCREEN_PLAYERSCREENHANDLER_HPP
#define NET_MINECRAFT_SCREEN_PLAYERSCREENHANDLER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.screen.PlayerScreenHandler
 * Remapped: cqw
 */
namespace PlayerScreenHandler {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("cqw", "net/minecraft/world/inventory/InventoryMenu", "net/minecraft/class_1723", "net/minecraft/screen/PlayerScreenHandler", "net/minecraft/src/C_1274_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.screen.PlayerScreenHandler#field_30802
    [[maybe_unused]] static jint get_field_field_30802() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "CONTAINER_ID", "field_30802", "field_30802", "f_150579_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.PlayerScreenHandler#field_30802
    [[maybe_unused]] static void set_field_field_30802(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "CONTAINER_ID", "field_30802", "field_30802", "f_150579_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.screen.PlayerScreenHandler#CRAFTING_RESULT_ID
    [[maybe_unused]] static jint get_field_CRAFTING_RESULT_ID() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "RESULT_SLOT", "field_30803", "CRAFTING_RESULT_ID", "f_150580_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.PlayerScreenHandler#CRAFTING_RESULT_ID
    [[maybe_unused]] static void set_field_CRAFTING_RESULT_ID(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "RESULT_SLOT", "field_30803", "CRAFTING_RESULT_ID", "f_150580_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.screen.PlayerScreenHandler#CRAFTING_INPUT_START
    [[maybe_unused]] static jint get_field_CRAFTING_INPUT_START() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "CRAFT_SLOT_START", "field_30804", "CRAFTING_INPUT_START", "f_150581_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.PlayerScreenHandler#CRAFTING_INPUT_START
    [[maybe_unused]] static void set_field_CRAFTING_INPUT_START(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "CRAFT_SLOT_START", "field_30804", "CRAFTING_INPUT_START", "f_150581_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.screen.PlayerScreenHandler#CRAFTING_INPUT_COUNT
    [[maybe_unused]] static jint get_field_CRAFTING_INPUT_COUNT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "CRAFT_SLOT_COUNT", "field_49739", "CRAFTING_INPUT_COUNT", "f_315419_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.PlayerScreenHandler#CRAFTING_INPUT_COUNT
    [[maybe_unused]] static void set_field_CRAFTING_INPUT_COUNT(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "CRAFT_SLOT_COUNT", "field_49739", "CRAFTING_INPUT_COUNT", "f_315419_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.screen.PlayerScreenHandler#CRAFTING_INPUT_END
    [[maybe_unused]] static jint get_field_CRAFTING_INPUT_END() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "CRAFT_SLOT_END", "field_30805", "CRAFTING_INPUT_END", "f_150582_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.PlayerScreenHandler#CRAFTING_INPUT_END
    [[maybe_unused]] static void set_field_CRAFTING_INPUT_END(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "CRAFT_SLOT_END", "field_30805", "CRAFTING_INPUT_END", "f_150582_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.screen.PlayerScreenHandler#EQUIPMENT_START
    [[maybe_unused]] static jint get_field_EQUIPMENT_START() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("p", "ARMOR_SLOT_START", "field_30806", "EQUIPMENT_START", "f_150583_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.PlayerScreenHandler#EQUIPMENT_START
    [[maybe_unused]] static void set_field_EQUIPMENT_START(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("p", "ARMOR_SLOT_START", "field_30806", "EQUIPMENT_START", "f_150583_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.screen.PlayerScreenHandler#EQUIPMENT_COUNT
    [[maybe_unused]] static jint get_field_EQUIPMENT_COUNT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("q", "ARMOR_SLOT_COUNT", "field_49740", "EQUIPMENT_COUNT", "f_315142_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.PlayerScreenHandler#EQUIPMENT_COUNT
    [[maybe_unused]] static void set_field_EQUIPMENT_COUNT(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("q", "ARMOR_SLOT_COUNT", "field_49740", "EQUIPMENT_COUNT", "f_315142_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.screen.PlayerScreenHandler#EQUIPMENT_END
    [[maybe_unused]] static jint get_field_EQUIPMENT_END() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("r", "ARMOR_SLOT_END", "field_30807", "EQUIPMENT_END", "f_150584_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.PlayerScreenHandler#EQUIPMENT_END
    [[maybe_unused]] static void set_field_EQUIPMENT_END(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("r", "ARMOR_SLOT_END", "field_30807", "EQUIPMENT_END", "f_150584_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.screen.PlayerScreenHandler#INVENTORY_START
    [[maybe_unused]] static jint get_field_INVENTORY_START() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("s", "INV_SLOT_START", "field_30808", "INVENTORY_START", "f_150585_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.PlayerScreenHandler#INVENTORY_START
    [[maybe_unused]] static void set_field_INVENTORY_START(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("s", "INV_SLOT_START", "field_30808", "INVENTORY_START", "f_150585_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.screen.PlayerScreenHandler#INVENTORY_END
    [[maybe_unused]] static jint get_field_INVENTORY_END() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("t", "INV_SLOT_END", "field_30809", "INVENTORY_END", "f_150586_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.PlayerScreenHandler#INVENTORY_END
    [[maybe_unused]] static void set_field_INVENTORY_END(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("t", "INV_SLOT_END", "field_30809", "INVENTORY_END", "f_150586_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.screen.PlayerScreenHandler#HOTBAR_START
    [[maybe_unused]] static jint get_field_HOTBAR_START() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("u", "USE_ROW_SLOT_START", "field_30810", "HOTBAR_START", "f_150587_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.PlayerScreenHandler#HOTBAR_START
    [[maybe_unused]] static void set_field_HOTBAR_START(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("u", "USE_ROW_SLOT_START", "field_30810", "HOTBAR_START", "f_150587_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.screen.PlayerScreenHandler#HOTBAR_END
    [[maybe_unused]] static jint get_field_HOTBAR_END() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("v", "USE_ROW_SLOT_END", "field_30811", "HOTBAR_END", "f_150588_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.PlayerScreenHandler#HOTBAR_END
    [[maybe_unused]] static void set_field_HOTBAR_END(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("v", "USE_ROW_SLOT_END", "field_30811", "HOTBAR_END", "f_150588_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.screen.PlayerScreenHandler#OFFHAND_ID
    [[maybe_unused]] static jint get_field_OFFHAND_ID() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("w", "SHIELD_SLOT", "field_30812", "OFFHAND_ID", "f_150589_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.PlayerScreenHandler#OFFHAND_ID
    [[maybe_unused]] static void set_field_OFFHAND_ID(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("w", "SHIELD_SLOT", "field_30812", "OFFHAND_ID", "f_150589_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.screen.PlayerScreenHandler#BLOCK_ATLAS_TEXTURE
    [[maybe_unused]] static jobject get_field_BLOCK_ATLAS_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("x", "BLOCK_ATLAS", "field_21668", "BLOCK_ATLAS_TEXTURE", "f_39692_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.PlayerScreenHandler#BLOCK_ATLAS_TEXTURE
    [[maybe_unused]] static void set_field_BLOCK_ATLAS_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("x", "BLOCK_ATLAS", "field_21668", "BLOCK_ATLAS_TEXTURE", "f_39692_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.screen.PlayerScreenHandler#EMPTY_HELMET_SLOT_TEXTURE
    [[maybe_unused]] static jobject get_field_EMPTY_HELMET_SLOT_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("y", "EMPTY_ARMOR_SLOT_HELMET", "field_21669", "EMPTY_HELMET_SLOT_TEXTURE", "f_39693_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.PlayerScreenHandler#EMPTY_HELMET_SLOT_TEXTURE
    [[maybe_unused]] static void set_field_EMPTY_HELMET_SLOT_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("y", "EMPTY_ARMOR_SLOT_HELMET", "field_21669", "EMPTY_HELMET_SLOT_TEXTURE", "f_39693_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.screen.PlayerScreenHandler#EMPTY_CHESTPLATE_SLOT_TEXTURE
    [[maybe_unused]] static jobject get_field_EMPTY_CHESTPLATE_SLOT_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("z", "EMPTY_ARMOR_SLOT_CHESTPLATE", "field_21670", "EMPTY_CHESTPLATE_SLOT_TEXTURE", "f_39694_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.PlayerScreenHandler#EMPTY_CHESTPLATE_SLOT_TEXTURE
    [[maybe_unused]] static void set_field_EMPTY_CHESTPLATE_SLOT_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("z", "EMPTY_ARMOR_SLOT_CHESTPLATE", "field_21670", "EMPTY_CHESTPLATE_SLOT_TEXTURE", "f_39694_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.screen.PlayerScreenHandler#EMPTY_LEGGINGS_SLOT_TEXTURE
    [[maybe_unused]] static jobject get_field_EMPTY_LEGGINGS_SLOT_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("A", "EMPTY_ARMOR_SLOT_LEGGINGS", "field_21671", "EMPTY_LEGGINGS_SLOT_TEXTURE", "f_39695_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.PlayerScreenHandler#EMPTY_LEGGINGS_SLOT_TEXTURE
    [[maybe_unused]] static void set_field_EMPTY_LEGGINGS_SLOT_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("A", "EMPTY_ARMOR_SLOT_LEGGINGS", "field_21671", "EMPTY_LEGGINGS_SLOT_TEXTURE", "f_39695_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.screen.PlayerScreenHandler#EMPTY_BOOTS_SLOT_TEXTURE
    [[maybe_unused]] static jobject get_field_EMPTY_BOOTS_SLOT_TEXTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("B", "EMPTY_ARMOR_SLOT_BOOTS", "field_21672", "EMPTY_BOOTS_SLOT_TEXTURE", "f_39696_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.PlayerScreenHandler#EMPTY_BOOTS_SLOT_TEXTURE
    [[maybe_unused]] static void set_field_EMPTY_BOOTS_SLOT_TEXTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("B", "EMPTY_ARMOR_SLOT_BOOTS", "field_21672", "EMPTY_BOOTS_SLOT_TEXTURE", "f_39696_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.screen.PlayerScreenHandler#EMPTY_OFFHAND_ARMOR_SLOT
    [[maybe_unused]] static jobject get_field_EMPTY_OFFHAND_ARMOR_SLOT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("C", "EMPTY_ARMOR_SLOT_SHIELD", "field_21673", "EMPTY_OFFHAND_ARMOR_SLOT", "f_39697_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.PlayerScreenHandler#EMPTY_OFFHAND_ARMOR_SLOT
    [[maybe_unused]] static void set_field_EMPTY_OFFHAND_ARMOR_SLOT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("C", "EMPTY_ARMOR_SLOT_SHIELD", "field_21673", "EMPTY_OFFHAND_ARMOR_SLOT", "f_39697_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.screen.PlayerScreenHandler#EMPTY_ARMOR_SLOT_TEXTURES
    [[maybe_unused]] static jobject get_field_EMPTY_ARMOR_SLOT_TEXTURES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("E", "TEXTURE_EMPTY_SLOTS", "field_7829", "EMPTY_ARMOR_SLOT_TEXTURES", "f_39699_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.screen.PlayerScreenHandler#EMPTY_ARMOR_SLOT_TEXTURES
    [[maybe_unused]] static void set_field_EMPTY_ARMOR_SLOT_TEXTURES(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("E", "TEXTURE_EMPTY_SLOTS", "field_7829", "EMPTY_ARMOR_SLOT_TEXTURES", "f_39699_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.screen.PlayerScreenHandler#EQUIPMENT_SLOT_ORDER
    [[maybe_unused]] static jobject get_field_EQUIPMENT_SLOT_ORDER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("F", "SLOT_IDS", "field_7832", "EQUIPMENT_SLOT_ORDER", "f_39700_"), "[Lbsy;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.screen.PlayerScreenHandler#EQUIPMENT_SLOT_ORDER
    [[maybe_unused]] static void set_field_EQUIPMENT_SLOT_ORDER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("F", "SLOT_IDS", "field_7832", "EQUIPMENT_SLOT_ORDER", "f_39700_"), "[Lbsy;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.screen.PlayerScreenHandler#craftingInput
    static jobject get_field_craftingInput(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("G", "craftSlots", "field_7831", "craftingInput", "f_39701_"), "Lcql;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.screen.PlayerScreenHandler#craftingInput
    static void set_field_craftingInput(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("G", "craftSlots", "field_7831", "craftingInput", "f_39701_"), "Lcql;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.screen.PlayerScreenHandler#craftingResult
    static jobject get_field_craftingResult(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("H", "resultSlots", "field_7830", "craftingResult", "f_39702_"), "Lcrl;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.screen.PlayerScreenHandler#craftingResult
    static void set_field_craftingResult(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("H", "resultSlots", "field_7830", "craftingResult", "f_39702_"), "Lcrl;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.screen.PlayerScreenHandler#onServer
    static jboolean get_field_onServer(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("D", "active", "field_7827", "onServer", "f_39698_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static public field net.minecraft.screen.PlayerScreenHandler#onServer
    static void set_field_onServer(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("D", "active", "field_7827", "onServer", "f_39698_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.screen.PlayerScreenHandler#owner
    static jobject get_field_owner(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("I", "owner", "field_7828", "owner", "f_39703_"), "Lcmx;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.screen.PlayerScreenHandler#owner
    static void set_field_owner(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("I", "owner", "field_7828", "owner", "f_39703_"), "Lcmx;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_isInHotbar() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("f", "isHotbarSlot", "method_36211", "isInHotbar", "m_150592_"), "(I)Z");
    }

    static jboolean isInHotbar(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_isInHotbar();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_populateRecipeFinder() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "fillCraftSlotsStackedContents", "method_7654", "populateRecipeFinder", "m_5816_"), "(Lcnb;)V");
    }

    static void populateRecipeFinder(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_populateRecipeFinder();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_clearCraftingSlots() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "clearCraftingContent", "method_7657", "clearCraftingSlots", "m_6650_"), "()V");
    }

    static void clearCraftingSlots(const jobject& obj) {
                
       const auto methodID = methodID_clearCraftingSlots();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_matches() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "recipeMatches", "method_7652", "matches", "m_6032_"), "(Lczb;)Z");
    }

    static jboolean matches(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_matches();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onContentChanged() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "slotsChanged", "method_7609", "onContentChanged", "m_6199_"), "(Lbqk;)V");
    }

    static void onContentChanged(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onContentChanged();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onClosed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "removed", "method_7595", "onClosed", "m_6877_"), "(Lcmx;)V");
    }

    static void onClosed(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onClosed();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_canUse() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "stillValid", "method_7597", "canUse", "m_6875_"), "(Lcmx;)Z");
    }

    static jboolean canUse(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_canUse();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_quickMove() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "quickMoveStack", "method_7601", "quickMove", "m_7648_"), "(Lcmx;I)Lcuq;");
    }

    static jobject quickMove(const jobject& obj, const jobject& arg0, const jint& arg1) {
                
       const auto methodID = methodID_quickMove();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_canInsertIntoSlot() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "canTakeItemForPickAll", "method_7613", "canInsertIntoSlot", "m_5882_"), "(Lcuq;Lcrq;)Z");
    }

    static jboolean canInsertIntoSlot(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_canInsertIntoSlot();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getCraftingResultSlotIndex() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("m", "getResultSlotIndex", "method_7655", "getCraftingResultSlotIndex", "m_6636_"), "()I");
    }

    static jint getCraftingResultSlotIndex(const jobject& obj) {
                
       const auto methodID = methodID_getCraftingResultSlotIndex();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getCraftingWidth() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("n", "getGridWidth", "method_7653", "getCraftingWidth", "m_6635_"), "()I");
    }

    static jint getCraftingWidth(const jobject& obj) {
                
       const auto methodID = methodID_getCraftingWidth();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getCraftingHeight() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("o", "getGridHeight", "method_7656", "getCraftingHeight", "m_6656_"), "()I");
    }

    static jint getCraftingHeight(const jobject& obj) {
                
       const auto methodID = methodID_getCraftingHeight();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getCraftingSlotCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("p", "getSize", "method_7658", "getCraftingSlotCount", "m_6653_"), "()I");
    }

    static jint getCraftingSlotCount(const jobject& obj) {
                
       const auto methodID = methodID_getCraftingSlotCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getCraftingInput() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("r", "getCraftSlots", "method_29281", "getCraftingInput", "m_39730_"), "()Lcql;");
    }

    static jobject getCraftingInput(const jobject& obj) {
                
       const auto methodID = methodID_getCraftingInput();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getCategory() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("t", "getRecipeBookType", "method_30264", "getCategory", "m_5867_"), "()Lcrj;");
    }

    static jobject getCategory(const jobject& obj) {
                
       const auto methodID = methodID_getCategory();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__canInsertIntoSlot() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "shouldMoveToInventory", "method_32339", "canInsertIntoSlot", "m_142157_"), "(I)Z");
    }

    static jboolean _canInsertIntoSlot(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID__canInsertIntoSlot();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_SCREEN_PLAYERSCREENHANDLER_HPP