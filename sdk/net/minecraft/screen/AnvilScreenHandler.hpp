// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SCREEN_ANVILSCREENHANDLER_HPP
#define NET_MINECRAFT_SCREEN_ANVILSCREENHANDLER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.screen.AnvilScreenHandler
 * Remapped: cpw
 */
namespace AnvilScreenHandler {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("cpw", "net/minecraft/world/inventory/AnvilMenu", "net/minecraft/class_1706", "net/minecraft/screen/AnvilScreenHandler", "net/minecraft/src/C_1228_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.screen.AnvilScreenHandler#INPUT_1_ID
    [[maybe_unused]] static jint get_field_INPUT_1_ID() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "INPUT_SLOT", "field_41898", "INPUT_1_ID", "f_265994_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.AnvilScreenHandler#INPUT_1_ID
    [[maybe_unused]] static void set_field_INPUT_1_ID(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "INPUT_SLOT", "field_41898", "INPUT_1_ID", "f_265994_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.screen.AnvilScreenHandler#INPUT_2_ID
    [[maybe_unused]] static jint get_field_INPUT_2_ID() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "ADDITIONAL_SLOT", "field_41899", "INPUT_2_ID", "f_265986_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.AnvilScreenHandler#INPUT_2_ID
    [[maybe_unused]] static void set_field_INPUT_2_ID(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "ADDITIONAL_SLOT", "field_41899", "INPUT_2_ID", "f_265986_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.screen.AnvilScreenHandler#OUTPUT_ID
    [[maybe_unused]] static jint get_field_OUTPUT_ID() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "RESULT_SLOT", "field_41900", "OUTPUT_ID", "f_266102_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.AnvilScreenHandler#OUTPUT_ID
    [[maybe_unused]] static void set_field_OUTPUT_ID(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "RESULT_SLOT", "field_41900", "OUTPUT_ID", "f_266102_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.screen.AnvilScreenHandler#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("s", "LOGGER", "field_7771", "LOGGER", "f_38999_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.screen.AnvilScreenHandler#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("s", "LOGGER", "field_7771", "LOGGER", "f_38999_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.screen.AnvilScreenHandler#field_30752
    [[maybe_unused]] static jboolean get_field_field_30752() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("t", "DEBUG_COST", "field_30752", "field_30752", "f_150469_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticBooleanField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.screen.AnvilScreenHandler#field_30752
    [[maybe_unused]] static void set_field_field_30752(const jboolean &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("t", "DEBUG_COST", "field_30752", "field_30752", "f_150469_"), "Z");
        return MinecraftSDK::env->SetStaticBooleanField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.screen.AnvilScreenHandler#MAX_NAME_LENGTH
    [[maybe_unused]] static jint get_field_MAX_NAME_LENGTH() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "MAX_NAME_LENGTH", "field_30751", "MAX_NAME_LENGTH", "f_150468_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.AnvilScreenHandler#MAX_NAME_LENGTH
    [[maybe_unused]] static void set_field_MAX_NAME_LENGTH(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "MAX_NAME_LENGTH", "field_30751", "MAX_NAME_LENGTH", "f_150468_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.screen.AnvilScreenHandler#repairItemUsage
    static jint get_field_repairItemUsage(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "repairItemCountCost", "field_7776", "repairItemUsage", "f_39000_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.screen.AnvilScreenHandler#repairItemUsage
    static void set_field_repairItemUsage(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "repairItemCountCost", "field_7776", "repairItemUsage", "f_39000_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.screen.AnvilScreenHandler#newItemName
    static jobject get_field_newItemName(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "itemName", "field_7774", "newItemName", "f_39001_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.screen.AnvilScreenHandler#newItemName
    static void set_field_newItemName(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "itemName", "field_7774", "newItemName", "f_39001_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.screen.AnvilScreenHandler#levelCost
    static jobject get_field_levelCost(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("w", "cost", "field_7770", "levelCost", "f_39002_"), "Lcqn;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.screen.AnvilScreenHandler#levelCost
    static void set_field_levelCost(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("w", "cost", "field_7770", "levelCost", "f_39002_"), "Lcqn;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for static private field net.minecraft.screen.AnvilScreenHandler#field_30753
    [[maybe_unused]] static jint get_field_field_30753() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("x", "COST_FAIL", "field_30753", "field_30753", "f_150470_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.screen.AnvilScreenHandler#field_30753
    [[maybe_unused]] static void set_field_field_30753(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("x", "COST_FAIL", "field_30753", "field_30753", "f_150470_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.screen.AnvilScreenHandler#field_30754
    [[maybe_unused]] static jint get_field_field_30754() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("y", "COST_BASE", "field_30754", "field_30754", "f_150471_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.screen.AnvilScreenHandler#field_30754
    [[maybe_unused]] static void set_field_field_30754(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("y", "COST_BASE", "field_30754", "field_30754", "f_150471_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.screen.AnvilScreenHandler#field_30755
    [[maybe_unused]] static jint get_field_field_30755() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("z", "COST_ADDED_BASE", "field_30755", "field_30755", "f_150472_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.screen.AnvilScreenHandler#field_30755
    [[maybe_unused]] static void set_field_field_30755(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("z", "COST_ADDED_BASE", "field_30755", "field_30755", "f_150472_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.screen.AnvilScreenHandler#field_30747
    [[maybe_unused]] static jint get_field_field_30747() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("A", "COST_REPAIR_MATERIAL", "field_30747", "field_30747", "f_150464_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.screen.AnvilScreenHandler#field_30747
    [[maybe_unused]] static void set_field_field_30747(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("A", "COST_REPAIR_MATERIAL", "field_30747", "field_30747", "f_150464_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.screen.AnvilScreenHandler#field_30748
    [[maybe_unused]] static jint get_field_field_30748() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("B", "COST_REPAIR_SACRIFICE", "field_30748", "field_30748", "f_150465_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.screen.AnvilScreenHandler#field_30748
    [[maybe_unused]] static void set_field_field_30748(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("B", "COST_REPAIR_SACRIFICE", "field_30748", "field_30748", "f_150465_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.screen.AnvilScreenHandler#field_30749
    [[maybe_unused]] static jint get_field_field_30749() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("C", "COST_INCOMPATIBLE_PENALTY", "field_30749", "field_30749", "f_150466_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.screen.AnvilScreenHandler#field_30749
    [[maybe_unused]] static void set_field_field_30749(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("C", "COST_INCOMPATIBLE_PENALTY", "field_30749", "field_30749", "f_150466_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.screen.AnvilScreenHandler#field_30750
    [[maybe_unused]] static jint get_field_field_30750() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("D", "COST_RENAME", "field_30750", "field_30750", "f_150467_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.screen.AnvilScreenHandler#field_30750
    [[maybe_unused]] static void set_field_field_30750(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("D", "COST_RENAME", "field_30750", "field_30750", "f_150467_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.screen.AnvilScreenHandler#INPUT_1_X
    [[maybe_unused]] static jint get_field_INPUT_1_X() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("E", "INPUT_SLOT_X_PLACEMENT", "field_41894", "INPUT_1_X", "f_265898_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.screen.AnvilScreenHandler#INPUT_1_X
    [[maybe_unused]] static void set_field_INPUT_1_X(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("E", "INPUT_SLOT_X_PLACEMENT", "field_41894", "INPUT_1_X", "f_265898_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.screen.AnvilScreenHandler#INPUT_2_X
    [[maybe_unused]] static jint get_field_INPUT_2_X() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("F", "ADDITIONAL_SLOT_X_PLACEMENT", "field_41895", "INPUT_2_X", "f_265878_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.screen.AnvilScreenHandler#INPUT_2_X
    [[maybe_unused]] static void set_field_INPUT_2_X(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("F", "ADDITIONAL_SLOT_X_PLACEMENT", "field_41895", "INPUT_2_X", "f_265878_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.screen.AnvilScreenHandler#OUTPUT_X
    [[maybe_unused]] static jint get_field_OUTPUT_X() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("G", "RESULT_SLOT_X_PLACEMENT", "field_41896", "OUTPUT_X", "f_265992_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.screen.AnvilScreenHandler#OUTPUT_X
    [[maybe_unused]] static void set_field_OUTPUT_X(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("G", "RESULT_SLOT_X_PLACEMENT", "field_41896", "OUTPUT_X", "f_265992_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.screen.AnvilScreenHandler#SLOT_Y
    [[maybe_unused]] static jint get_field_SLOT_Y() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("H", "SLOT_Y_PLACEMENT", "field_41897", "SLOT_Y", "f_266013_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.screen.AnvilScreenHandler#SLOT_Y
    [[maybe_unused]] static void set_field_SLOT_Y(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("H", "SLOT_Y_PLACEMENT", "field_41897", "SLOT_Y", "f_266013_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    static jmethodID methodID_getForgingSlotsManager() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "createInputSlotDefinitions", "method_48352", "getForgingSlotsManager", "m_266183_"), "()Lcqy;");
    }

    static jobject getForgingSlotsManager(const jobject& obj) {
                
       const auto methodID = methodID_getForgingSlotsManager();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_canUse() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isValidBlock", "method_24925", "canUse", "m_8039_"), "(Ldtc;)Z");
    }

    static jboolean canUse(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_canUse();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_canTakeOutput() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "mayPickup", "method_24927", "canTakeOutput", "m_6560_"), "(Lcmx;Z)Z");
    }

    static jboolean canTakeOutput(const jobject& obj, const jobject& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_canTakeOutput();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_onTakeOutput() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onTake", "method_24923", "onTakeOutput", "m_142365_"), "(Lcmx;Lcuq;)V");
    }

    static void onTakeOutput(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_onTakeOutput();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_updateResult() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("m", "createResult", "method_24928", "updateResult", "m_6640_"), "()V");
    }

    static void updateResult(const jobject& obj) {
                
       const auto methodID = methodID_updateResult();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getNextCost() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("e", "calculateIncreasedRepairCost", "method_20398", "getNextCost", "m_39025_"), "(I)I");
    }

    static jint getNextCost(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getNextCost();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_setNewItemName() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setItemName", "method_7625", "setNewItemName", "m_39020_"), "(Ljava/lang/String;)Z");
    }

    static jboolean setNewItemName(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setNewItemName();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_sanitize() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "validateName", "method_52176", "sanitize", "m_288226_"), "(Ljava/lang/String;)Ljava/lang/String;");
    }

    static jobject sanitize(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_sanitize();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getLevelCost() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("n", "getCost", "method_17369", "getLevelCost", "m_39028_"), "()I");
    }

    static jint getLevelCost(const jobject& obj) {
                
       const auto methodID = methodID_getLevelCost();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_SCREEN_ANVILSCREENHANDLER_HPP