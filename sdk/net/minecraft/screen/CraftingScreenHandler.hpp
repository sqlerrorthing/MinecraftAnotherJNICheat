// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SCREEN_CRAFTINGSCREENHANDLER_HPP
#define NET_MINECRAFT_SCREEN_CRAFTINGSCREENHANDLER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.screen.CraftingScreenHandler
 * Remapped: cqm
 */
namespace CraftingScreenHandler {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("cqm", "net/minecraft/world/inventory/CraftingMenu", "net/minecraft/class_1714", "net/minecraft/screen/CraftingScreenHandler", "net/minecraft/src/C_1252_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.screen.CraftingScreenHandler#RESULT_ID
    [[maybe_unused]] static jint get_field_RESULT_ID() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "RESULT_SLOT", "field_30781", "RESULT_ID", "f_150539_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.screen.CraftingScreenHandler#RESULT_ID
    [[maybe_unused]] static void set_field_RESULT_ID(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "RESULT_SLOT", "field_30781", "RESULT_ID", "f_150539_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.screen.CraftingScreenHandler#INPUT_START
    [[maybe_unused]] static jint get_field_INPUT_START() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "CRAFT_SLOT_START", "field_30782", "INPUT_START", "f_150540_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.screen.CraftingScreenHandler#INPUT_START
    [[maybe_unused]] static void set_field_INPUT_START(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "CRAFT_SLOT_START", "field_30782", "INPUT_START", "f_150540_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.screen.CraftingScreenHandler#INPUT_END
    [[maybe_unused]] static jint get_field_INPUT_END() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "CRAFT_SLOT_END", "field_30783", "INPUT_END", "f_150541_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.screen.CraftingScreenHandler#INPUT_END
    [[maybe_unused]] static void set_field_INPUT_END(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "CRAFT_SLOT_END", "field_30783", "INPUT_END", "f_150541_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.screen.CraftingScreenHandler#INVENTORY_START
    [[maybe_unused]] static jint get_field_INVENTORY_START() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "INV_SLOT_START", "field_30784", "INVENTORY_START", "f_150542_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.screen.CraftingScreenHandler#INVENTORY_START
    [[maybe_unused]] static void set_field_INVENTORY_START(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "INV_SLOT_START", "field_30784", "INVENTORY_START", "f_150542_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.screen.CraftingScreenHandler#INVENTORY_END
    [[maybe_unused]] static jint get_field_INVENTORY_END() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "INV_SLOT_END", "field_30785", "INVENTORY_END", "f_150543_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.screen.CraftingScreenHandler#INVENTORY_END
    [[maybe_unused]] static void set_field_INVENTORY_END(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "INV_SLOT_END", "field_30785", "INVENTORY_END", "f_150543_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.screen.CraftingScreenHandler#HOTBAR_START
    [[maybe_unused]] static jint get_field_HOTBAR_START() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("p", "USE_ROW_SLOT_START", "field_30786", "HOTBAR_START", "f_150544_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.screen.CraftingScreenHandler#HOTBAR_START
    [[maybe_unused]] static void set_field_HOTBAR_START(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("p", "USE_ROW_SLOT_START", "field_30786", "HOTBAR_START", "f_150544_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.screen.CraftingScreenHandler#HOTBAR_END
    [[maybe_unused]] static jint get_field_HOTBAR_END() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("q", "USE_ROW_SLOT_END", "field_30787", "HOTBAR_END", "f_150545_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.screen.CraftingScreenHandler#HOTBAR_END
    [[maybe_unused]] static void set_field_HOTBAR_END(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("q", "USE_ROW_SLOT_END", "field_30787", "HOTBAR_END", "f_150545_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.screen.CraftingScreenHandler#input
    static jobject get_field_input(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "craftSlots", "field_7801", "input", "f_39348_"), "Lcql;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.screen.CraftingScreenHandler#input
    static void set_field_input(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "craftSlots", "field_7801", "input", "f_39348_"), "Lcql;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.screen.CraftingScreenHandler#result
    static jobject get_field_result(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "resultSlots", "field_7800", "result", "f_39349_"), "Lcrl;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.screen.CraftingScreenHandler#result
    static void set_field_result(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "resultSlots", "field_7800", "result", "f_39349_"), "Lcrl;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.screen.CraftingScreenHandler#context
    static jobject get_field_context(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "access", "field_7799", "context", "f_39350_"), "Lcqg;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.screen.CraftingScreenHandler#context
    static void set_field_context(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "access", "field_7799", "context", "f_39350_"), "Lcqg;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.screen.CraftingScreenHandler#player
    static jobject get_field_player(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "player", "field_7797", "player", "f_39351_"), "Lcmx;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.screen.CraftingScreenHandler#player
    static void set_field_player(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "player", "field_7797", "player", "f_39351_"), "Lcmx;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.screen.CraftingScreenHandler#filling
    static jboolean get_field_filling(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "placingRecipe", "field_51625", "filling", "f_337276_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.screen.CraftingScreenHandler#filling
    static void set_field_filling(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "placingRecipe", "field_51625", "filling", "f_337276_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    static jmethodID methodID_updateResult() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "slotChangedCraftingGrid", "method_17399", "updateResult", "m_150546_"), "(Lcpu;Ldcw;Lcmx;Lcql;Lcrl;Lczb;)V");
    }

    static void updateResult(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4, const jobject& arg5) {
       const auto clazz = self();
       const auto methodID = methodID_updateResult();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
    static jmethodID methodID_onContentChanged() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "slotsChanged", "method_7609", "onContentChanged", "m_6199_"), "(Lbqk;)V");
    }

    static void onContentChanged(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onContentChanged();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onInputSlotFillStart() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("an_", "beginPlacingRecipe", "method_59963", "onInputSlotFillStart", "m_340196_"), "()V");
    }

    static void onInputSlotFillStart(const jobject& obj) {
                
       const auto methodID = methodID_onInputSlotFillStart();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_onInputSlotFillFinish() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "finishPlacingRecipe", "method_59964", "onInputSlotFillFinish", "m_338706_"), "(Lczb;)V");
    }

    static void onInputSlotFillFinish(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onInputSlotFillFinish();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_populateRecipeFinder() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "fillCraftSlotsStackedContents", "method_7654", "populateRecipeFinder", "m_5816_"), "(Lcnb;)V");
    }

    static void populateRecipeFinder(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_populateRecipeFinder();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_clearCraftingSlots() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "clearCraftingContent", "method_7657", "clearCraftingSlots", "m_6650_"), "()V");
    }

    static void clearCraftingSlots(const jobject& obj) {
                
       const auto methodID = methodID_clearCraftingSlots();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_matches() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "recipeMatches", "method_7652", "matches", "m_6032_"), "(Lczb;)Z");
    }

    static jboolean matches(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_matches();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onClosed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "removed", "method_7595", "onClosed", "m_6877_"), "(Lcmx;)V");
    }

    static void onClosed(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onClosed();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_canUse() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "stillValid", "method_7597", "canUse", "m_6875_"), "(Lcmx;)Z");
    }

    static jboolean canUse(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_canUse();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_quickMove() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "quickMoveStack", "method_7601", "quickMove", "m_7648_"), "(Lcmx;I)Lcuq;");
    }

    static jobject quickMove(const jobject& obj, const jobject& arg0, const jint& arg1) {
                
       const auto methodID = methodID_quickMove();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_canInsertIntoSlot() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "canTakeItemForPickAll", "method_7613", "canInsertIntoSlot", "m_5882_"), "(Lcuq;Lcrq;)Z");
    }

    static jboolean canInsertIntoSlot(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_canInsertIntoSlot();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getCraftingResultSlotIndex() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("m", "getResultSlotIndex", "method_7655", "getCraftingResultSlotIndex", "m_6636_"), "()I");
    }

    static jint getCraftingResultSlotIndex(const jobject& obj) {
                
       const auto methodID = methodID_getCraftingResultSlotIndex();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getCraftingWidth() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("n", "getGridWidth", "method_7653", "getCraftingWidth", "m_6635_"), "()I");
    }

    static jint getCraftingWidth(const jobject& obj) {
                
       const auto methodID = methodID_getCraftingWidth();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getCraftingHeight() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("o", "getGridHeight", "method_7656", "getCraftingHeight", "m_6656_"), "()I");
    }

    static jint getCraftingHeight(const jobject& obj) {
                
       const auto methodID = methodID_getCraftingHeight();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getCraftingSlotCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("p", "getSize", "method_7658", "getCraftingSlotCount", "m_6653_"), "()I");
    }

    static jint getCraftingSlotCount(const jobject& obj) {
                
       const auto methodID = methodID_getCraftingSlotCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getCategory() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("t", "getRecipeBookType", "method_30264", "getCategory", "m_5867_"), "()Lcrj;");
    }

    static jobject getCategory(const jobject& obj) {
                
       const auto methodID = methodID_getCategory();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__canInsertIntoSlot() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "shouldMoveToInventory", "method_32339", "canInsertIntoSlot", "m_142157_"), "(I)Z");
    }

    static jboolean _canInsertIntoSlot(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID__canInsertIntoSlot();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_SCREEN_CRAFTINGSCREENHANDLER_HPP