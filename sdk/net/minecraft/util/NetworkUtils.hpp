// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_NETWORKUTILS_HPP
#define NET_MINECRAFT_UTIL_NETWORKUTILS_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.NetworkUtils
 * Remapped: ayf
 */
namespace NetworkUtils {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("ayf", "net/minecraft/util/HttpUtil", "net/minecraft/class_3521", "net/minecraft/util/NetworkUtils", "net/minecraft/src/C_182_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.util.NetworkUtils#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_15665", "LOGGER", "f_13937_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.NetworkUtils#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_15665", "LOGGER", "f_13937_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_download() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "downloadFile", "method_55496", "download", "m_305661_"), "(Ljava/nio/file/Path;Ljava/net/URL;Ljava/util/Map;Lcom/google/common/hash/HashFunction;Lcom/google/common/hash/HashCode;ILjava/net/Proxy;Layf$a;)Ljava/nio/file/Path;");
    }

    static jobject download(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4, const jint& arg5, const jobject& arg6, const jobject& arg7) {
       const auto clazz = self();
       const auto methodID = methodID_download();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    };
    
    static jmethodID methodID_updateModificationTime() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "updateModificationTime", "method_55603", "updateModificationTime", "m_305114_"), "(Ljava/nio/file/Path;)V");
    }

    static void updateModificationTime(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_updateModificationTime();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_hash() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "hashFile", "method_55494", "hash", "m_307527_"), "(Ljava/nio/file/Path;Lcom/google/common/hash/HashFunction;)Lcom/google/common/hash/HashCode;");
    }

    static jobject hash(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_hash();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_validateHash() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "checkExistingFile", "method_55495", "validateHash", "m_306783_"), "(Ljava/nio/file/Path;Lcom/google/common/hash/HashFunction;Lcom/google/common/hash/HashCode;)Z");
    }

    static jboolean validateHash(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_validateHash();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_resolve() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "cachedFilePath", "method_55493", "resolve", "m_306073_"), "(Ljava/nio/file/Path;Lcom/google/common/hash/HashCode;)Ljava/nio/file/Path;");
    }

    static jobject resolve(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_resolve();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_write() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "downloadAndHash", "method_55492", "write", "m_306496_"), "(Lcom/google/common/hash/HashFunction;ILayf$a;Ljava/io/InputStream;Ljava/nio/file/Path;)Lcom/google/common/hash/HashCode;");
    }

    static jobject write(const jobject& arg0, const jint& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4) {
       const auto clazz = self();
       const auto methodID = methodID_write();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_findLocalPort() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getAvailablePort", "method_15302", "findLocalPort", "m_13939_"), "()I");
    }

    static jint findLocalPort() {
       const auto clazz = self();
       const auto methodID = methodID_findLocalPort();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID);
    };
    
    static jmethodID methodID_isPortAvailable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "isPortAvailable", "method_46872", "isPortAvailable", "m_257796_"), "(I)Z");
    }

    static jboolean isPortAvailable(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_isPortAvailable();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_UTIL_NETWORKUTILS_HPP