// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_MATH_SPLINE$IMPLEMENTATION_HPP
#define NET_MINECRAFT_UTIL_MATH_SPLINE$IMPLEMENTATION_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.math.Spline$Implementation
 * Remapped: axp$e
 */
namespace Spline$Implementation {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("axp$e", "net/minecraft/util/CubicSpline$Multipoint", "net/minecraft/class_6492$class_6738", "net/minecraft/util/math/Spline$Implementation", "net/minecraft/src/C_182769_$C_182773_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.util.math.Spline$Implementation#locationFunction
    static jobject get_field_locationFunction(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "coordinate", "comp_229", "locationFunction", "f_184319_"), "Lazq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.Spline$Implementation#locationFunction
    static void set_field_locationFunction(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "coordinate", "comp_229", "locationFunction", "f_184319_"), "Lazq;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.util.math.Spline$Implementation#locations
    static jfloat get_field_locations(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "locations", "comp_230", "locations", "f_184320_"), "[F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static default field net.minecraft.util.math.Spline$Implementation#locations
    static void set_field_locations(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "locations", "comp_230", "locations", "f_184320_"), "[F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.Spline$Implementation#values
    static jobject get_field_values(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "values", "comp_231", "values", "f_184321_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.Spline$Implementation#values
    static void set_field_values(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "values", "comp_231", "values", "f_184321_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.Spline$Implementation#derivatives
    static jfloat get_field_derivatives(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "derivatives", "comp_232", "derivatives", "f_184322_"), "[F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.Spline$Implementation#derivatives
    static void set_field_derivatives(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "derivatives", "comp_232", "derivatives", "f_184322_"), "[F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.Spline$Implementation#min
    static jfloat get_field_min(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "minValue", "comp_532", "min", "f_216124_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.Spline$Implementation#min
    static void set_field_min(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "minValue", "comp_532", "min", "f_216124_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.Spline$Implementation#max
    static jfloat get_field_max(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "maxValue", "comp_533", "max", "f_216125_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.Spline$Implementation#max
    static void set_field_max(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "maxValue", "comp_533", "max", "f_216125_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    static jmethodID methodID_build() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "create", "method_41299", "build", "m_216143_"), "(Lazq;[FLjava/util/List;[F)Laxp$e;");
    }

    static jobject build(const jobject& arg0, const jarray& arg1, const jfloat& arg2, const jobject& arg3, const jarray& arg4, const jfloat& arg5) {
       const auto clazz = self();
       const auto methodID = methodID_build();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
    static jmethodID methodID_sampleOutsideRange() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "linearExtend", "method_41297", "sampleOutsideRange", "m_216133_"), "(F[FF[FI)F");
    }

    static jfloat sampleOutsideRange(const jfloat& arg0, const jarray& arg1, const jfloat& arg2, const jfloat& arg3, const jarray& arg4, const jfloat& arg5, const jint& arg6) {
       const auto clazz = self();
       const auto methodID = methodID_sampleOutsideRange();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    };
    
    static jmethodID methodID_assertParametersValid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "validateSizes", "method_41301", "assertParametersValid", "m_216151_"), "([FLjava/util/List;[F)V");
    }

    static void assertParametersValid(const jarray& arg0, const jfloat& arg1, const jobject& arg2, const jarray& arg3, const jfloat& arg4) {
       const auto clazz = self();
       const auto methodID = methodID_assertParametersValid();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_apply() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "apply", "method_41296", "apply", "m_183321_"), "(Ljava/lang/Object;)F");
    }

    static jfloat apply(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_apply();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_findRangeForLocation() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "findIntervalStart", "method_41300", "findRangeForLocation", "m_216148_"), "([FF)I");
    }

    static jint findRangeForLocation(const jarray& arg0, const jfloat& arg1, const jfloat& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_findRangeForLocation();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getDebugString() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "parityString", "method_39225", "getDebugString", "m_183628_"), "()Ljava/lang/String;");
    }

    static jobject getDebugString(const jobject& obj) {
                
       const auto methodID = methodID_getDebugString();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_format() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "toString", "method_39238", "format", "m_184334_"), "([F)Ljava/lang/String;");
    }

    static jobject format(const jobject& obj, const jarray& arg0, const jfloat& arg1) {
                
       const auto methodID = methodID_format();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__apply() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "mapAll", "method_41187", "apply", "m_211396_"), "(Laxp$d;)Laxp;");
    }

    static jobject _apply(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__apply();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__locationFunction() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "coordinate", "comp_229", "locationFunction", "f_184319_"), "()Lazq;");
    }

    static jobject _locationFunction(const jobject& obj) {
                
       const auto methodID = methodID__locationFunction();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__locations() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "locations", "comp_230", "locations", "f_184320_"), "()[F");
    }

    static jfloat _locations(const jobject& obj) {
                
       const auto methodID = methodID__locations();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID__values() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "values", "comp_231", "values", "f_184321_"), "()Ljava/util/List;");
    }

    static jobject _values(const jobject& obj) {
                
       const auto methodID = methodID__values();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__derivatives() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "derivatives", "comp_232", "derivatives", "f_184322_"), "()[F");
    }

    static jfloat _derivatives(const jobject& obj) {
                
       const auto methodID = methodID__derivatives();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID__min() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "minValue", "comp_532", "min", "m_213850_"), "()F");
    }

    static jfloat _min(const jobject& obj) {
                
       const auto methodID = methodID__min();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID__max() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "maxValue", "comp_533", "max", "m_213849_"), "()F");
    }

    static jfloat _max(const jobject& obj) {
                
       const auto methodID = methodID__max();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_UTIL_MATH_SPLINE$IMPLEMENTATION_HPP