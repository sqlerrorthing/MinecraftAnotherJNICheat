// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_MATH_ROTATIONCALCULATOR_HPP
#define NET_MINECRAFT_UTIL_MATH_ROTATIONCALCULATOR_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.math.RotationCalculator
 * Remapped: ayy
 */
namespace RotationCalculator {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("ayy", "net/minecraft/util/SegmentedAnglePrecision", "net/minecraft/class_8013", "net/minecraft/util/math/RotationCalculator", "net/minecraft/src/C_263625_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.util.math.RotationCalculator#max
    static jint get_field_max(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "mask", "field_41760", "max", "f_263790_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.RotationCalculator#max
    static void set_field_max(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "mask", "field_41760", "max", "f_263790_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.RotationCalculator#precision
    static jint get_field_precision(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "precision", "field_41761", "precision", "f_263801_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.RotationCalculator#precision
    static void set_field_precision(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "precision", "field_41761", "precision", "f_263801_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.RotationCalculator#rotationPerDegrees
    static jfloat get_field_rotationPerDegrees(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "degreeToAngle", "field_41762", "rotationPerDegrees", "f_263695_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.RotationCalculator#rotationPerDegrees
    static void set_field_rotationPerDegrees(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "degreeToAngle", "field_41762", "rotationPerDegrees", "f_263695_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.RotationCalculator#degreesPerRotation
    static jfloat get_field_degreesPerRotation(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "angleToDegree", "field_41763", "degreesPerRotation", "f_263823_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.RotationCalculator#degreesPerRotation
    static void set_field_degreesPerRotation(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "angleToDegree", "field_41763", "degreesPerRotation", "f_263823_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    static jmethodID methodID_areRotationsParallel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isSameAxis", "method_48123", "areRotationsParallel", "m_264207_"), "(II)Z");
    }

    static jboolean areRotationsParallel(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_areRotationsParallel();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_toRotation() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "fromDirection", "method_48124", "toRotation", "m_264060_"), "(Lji;)I");
    }

    static jint toRotation(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_toRotation();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__toRotation() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "fromDegreesWithTurns", "method_48121", "toRotation", "m_264592_"), "(F)I");
    }

    static jint _toRotation(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID__toRotation();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_toClampedRotation() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "fromDegrees", "method_48125", "toClampedRotation", "m_264419_"), "(F)I");
    }

    static jint toClampedRotation(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_toClampedRotation();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_toDegrees() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "toDegreesWithTurns", "method_48122", "toDegrees", "m_264289_"), "(I)F");
    }

    static jfloat toDegrees(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_toDegrees();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_toWrappedDegrees() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "toDegrees", "method_48126", "toWrappedDegrees", "m_264138_"), "(I)F");
    }

    static jfloat toWrappedDegrees(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_toWrappedDegrees();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_clamp() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "normalize", "method_48127", "clamp", "m_264384_"), "(I)I");
    }

    static jint clamp(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_clamp();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getMax() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getMask", "method_48120", "getMax", "m_264451_"), "()I");
    }

    static jint getMax(const jobject& obj) {
                
       const auto methodID = methodID_getMax();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_UTIL_MATH_ROTATIONCALCULATOR_HPP