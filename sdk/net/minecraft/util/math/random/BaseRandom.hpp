// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_MATH_RANDOM_BASERANDOM_HPP
#define NET_MINECRAFT_UTIL_MATH_RANDOM_BASERANDOM_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.math.random.BaseRandom
 * Remapped: dyn
 */
namespace BaseRandom {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dyn", "net/minecraft/world/level/levelgen/BitRandomSource", "net/minecraft/class_6566", "net/minecraft/util/math/random/BaseRandom", "net/minecraft/src/C_182890_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.util.math.random.BaseRandom#FLOAT_MULTIPLIER
    [[maybe_unused]] static jfloat get_field_FLOAT_MULTIPLIER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "FLOAT_MULTIPLIER", "field_34582", "FLOAT_MULTIPLIER", "f_188496_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.util.math.random.BaseRandom#FLOAT_MULTIPLIER
    [[maybe_unused]] static void set_field_FLOAT_MULTIPLIER(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "FLOAT_MULTIPLIER", "field_34582", "FLOAT_MULTIPLIER", "f_188496_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.util.math.random.BaseRandom#DOUBLE_MULTIPLIER
    [[maybe_unused]] static jdouble get_field_DOUBLE_MULTIPLIER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "DOUBLE_MULTIPLIER", "field_34583", "DOUBLE_MULTIPLIER", "f_188497_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.util.math.random.BaseRandom#DOUBLE_MULTIPLIER
    [[maybe_unused]] static void set_field_DOUBLE_MULTIPLIER(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "DOUBLE_MULTIPLIER", "field_34583", "DOUBLE_MULTIPLIER", "f_188497_"), "D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    static jmethodID methodID_next() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "next", "method_43156", "next", "m_64707_"), "(I)I");
    }

    static jint next(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_next();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_nextInt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "nextInt", "method_43054", "nextInt", "m_188502_"), "()I");
    }

    static jint nextInt(const jobject& obj) {
                
       const auto methodID = methodID_nextInt();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID__nextInt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "nextInt", "method_43048", "nextInt", "m_188503_"), "(I)I");
    }

    static jint _nextInt(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID__nextInt();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_nextLong() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "nextLong", "method_43055", "nextLong", "m_188505_"), "()J");
    }

    static jlong nextLong(const jobject& obj) {
                
       const auto methodID = methodID_nextLong();
       return MinecraftSDK::env->CallLongMethod(obj, methodID);
    };
    
    static jmethodID methodID_nextBoolean() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "nextBoolean", "method_43056", "nextBoolean", "m_188499_"), "()Z");
    }

    static jboolean nextBoolean(const jobject& obj) {
                
       const auto methodID = methodID_nextBoolean();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_nextFloat() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "nextFloat", "method_43057", "nextFloat", "m_188501_"), "()F");
    }

    static jfloat nextFloat(const jobject& obj) {
                
       const auto methodID = methodID_nextFloat();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_nextDouble() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "nextDouble", "method_43058", "nextDouble", "m_188500_"), "()D");
    }

    static jdouble nextDouble(const jobject& obj) {
                
       const auto methodID = methodID_nextDouble();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_UTIL_MATH_RANDOM_BASERANDOM_HPP