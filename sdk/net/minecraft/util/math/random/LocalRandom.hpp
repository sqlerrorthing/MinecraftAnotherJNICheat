// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_MATH_RANDOM_LOCALRANDOM_HPP
#define NET_MINECRAFT_UTIL_MATH_RANDOM_LOCALRANDOM_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.math.random.LocalRandom
 * Remapped: dzo
 */
namespace LocalRandom {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dzo", "net/minecraft/world/level/levelgen/SingleThreadedRandomSource", "net/minecraft/class_6575", "net/minecraft/util/math/random/LocalRandom", "net/minecraft/src/C_182909_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.util.math.random.LocalRandom#INT_BITS
    [[maybe_unused]] static jint get_field_INT_BITS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "MODULUS_BITS", "field_34689", "INT_BITS", "f_189346_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.random.LocalRandom#INT_BITS
    [[maybe_unused]] static void set_field_INT_BITS(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "MODULUS_BITS", "field_34689", "INT_BITS", "f_189346_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.math.random.LocalRandom#SEED_MASK
    [[maybe_unused]] static jlong get_field_SEED_MASK() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "MODULUS_MASK", "field_34690", "SEED_MASK", "f_189347_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticLongField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.random.LocalRandom#SEED_MASK
    [[maybe_unused]] static void set_field_SEED_MASK(const jlong &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "MODULUS_MASK", "field_34690", "SEED_MASK", "f_189347_"), "J");
        return MinecraftSDK::env->SetStaticLongField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.math.random.LocalRandom#MULTIPLIER
    [[maybe_unused]] static jlong get_field_MULTIPLIER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "MULTIPLIER", "field_34691", "MULTIPLIER", "f_189348_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticLongField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.random.LocalRandom#MULTIPLIER
    [[maybe_unused]] static void set_field_MULTIPLIER(const jlong &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "MULTIPLIER", "field_34691", "MULTIPLIER", "f_189348_"), "J");
        return MinecraftSDK::env->SetStaticLongField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.math.random.LocalRandom#INCREMENT
    [[maybe_unused]] static jlong get_field_INCREMENT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "INCREMENT", "field_34692", "INCREMENT", "f_189349_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticLongField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.random.LocalRandom#INCREMENT
    [[maybe_unused]] static void set_field_INCREMENT(const jlong &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "INCREMENT", "field_34692", "INCREMENT", "f_189349_"), "J");
        return MinecraftSDK::env->SetStaticLongField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.random.LocalRandom#seed
    static jlong get_field_seed(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "seed", "field_34693", "seed", "f_189350_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.random.LocalRandom#seed
    static void set_field_seed(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "seed", "field_34693", "seed", "f_189350_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.random.LocalRandom#gaussianGenerator
    static jobject get_field_gaussianGenerator(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "gaussianSource", "field_35136", "gaussianGenerator", "f_189351_"), "Ldza;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.random.LocalRandom#gaussianGenerator
    static void set_field_gaussianGenerator(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "gaussianSource", "field_35136", "gaussianGenerator", "f_189351_"), "Ldza;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_split() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "fork", "method_38420", "split", "m_213769_"), "()Layw;");
    }

    static jobject split(const jobject& obj) {
                
       const auto methodID = methodID_split();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_nextSplitter() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "forkPositional", "method_38421", "nextSplitter", "m_188582_"), "()Ldzl;");
    }

    static jobject nextSplitter(const jobject& obj) {
                
       const auto methodID = methodID_nextSplitter();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_setSeed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setSeed", "method_43052", "setSeed", "m_188584_"), "(J)V");
    }

    static void setSeed(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_setSeed();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_next() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "next", "method_43156", "next", "m_64707_"), "(I)I");
    }

    static jint next(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_next();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_nextGaussian() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "nextGaussian", "method_43059", "nextGaussian", "m_188583_"), "()D");
    }

    static jdouble nextGaussian(const jobject& obj) {
                
       const auto methodID = methodID_nextGaussian();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_UTIL_MATH_RANDOM_LOCALRANDOM_HPP