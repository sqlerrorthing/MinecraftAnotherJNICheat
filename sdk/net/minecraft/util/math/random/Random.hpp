// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_MATH_RANDOM_RANDOM_HPP
#define NET_MINECRAFT_UTIL_MATH_RANDOM_RANDOM_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.math.random.Random
 * Remapped: ayw
 */
namespace Random {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("ayw", "net/minecraft/util/RandomSource", "net/minecraft/class_5819", "net/minecraft/util/math/random/Random", "net/minecraft/src/C_212974_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.util.math.random.Random#field_38930
    [[maybe_unused]] static jdouble get_field_field_38930() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "GAUSSIAN_SPREAD_FACTOR", "field_38930", "field_38930", "f_216326_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.util.math.random.Random#field_38930
    [[maybe_unused]] static void set_field_field_38930(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "GAUSSIAN_SPREAD_FACTOR", "field_38930", "field_38930", "f_216326_"), "D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    static jmethodID methodID_create() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "create", "method_43047", "create", "m_216327_"), "()Layw;");
    }

    static jobject create() {
       const auto clazz = self();
       const auto methodID = methodID_create();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_createThreadSafe() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "createThreadSafe", "method_43050", "createThreadSafe", "m_216337_"), "()Layw;");
    }

    static jobject createThreadSafe() {
       const auto clazz = self();
       const auto methodID = methodID_createThreadSafe();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID__create() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "create", "method_43049", "create", "m_216335_"), "(J)Layw;");
    }

    static jobject _create(const jlong& arg0) {
       const auto clazz = self();
       const auto methodID = methodID__create();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_createLocal() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "createNewThreadLocalInstance", "method_43053", "createLocal", "m_216343_"), "()Layw;");
    }

    static jobject createLocal() {
       const auto clazz = self();
       const auto methodID = methodID_createLocal();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_split() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "fork", "method_38420", "split", "m_213769_"), "()Layw;");
    }

    static jobject split(const jobject& obj) {
                
       const auto methodID = methodID_split();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_nextSplitter() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "forkPositional", "method_38421", "nextSplitter", "m_188582_"), "()Ldzl;");
    }

    static jobject nextSplitter(const jobject& obj) {
                
       const auto methodID = methodID_nextSplitter();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_setSeed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setSeed", "method_43052", "setSeed", "m_188584_"), "(J)V");
    }

    static void setSeed(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_setSeed();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_nextInt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "nextInt", "method_43054", "nextInt", "m_188502_"), "()I");
    }

    static jint nextInt(const jobject& obj) {
                
       const auto methodID = methodID_nextInt();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID__nextInt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "nextInt", "method_43048", "nextInt", "m_188503_"), "(I)I");
    }

    static jint _nextInt(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID__nextInt();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_nextBetween() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "nextIntBetweenInclusive", "method_39332", "nextBetween", "m_216332_"), "(II)I");
    }

    static jint nextBetween(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_nextBetween();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_nextLong() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "nextLong", "method_43055", "nextLong", "m_188505_"), "()J");
    }

    static jlong nextLong(const jobject& obj) {
                
       const auto methodID = methodID_nextLong();
       return MinecraftSDK::env->CallLongMethod(obj, methodID);
    };
    
    static jmethodID methodID_nextBoolean() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "nextBoolean", "method_43056", "nextBoolean", "m_188499_"), "()Z");
    }

    static jboolean nextBoolean(const jobject& obj) {
                
       const auto methodID = methodID_nextBoolean();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_nextFloat() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "nextFloat", "method_43057", "nextFloat", "m_188501_"), "()F");
    }

    static jfloat nextFloat(const jobject& obj) {
                
       const auto methodID = methodID_nextFloat();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_nextDouble() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "nextDouble", "method_43058", "nextDouble", "m_188500_"), "()D");
    }

    static jdouble nextDouble(const jobject& obj) {
                
       const auto methodID = methodID_nextDouble();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_nextGaussian() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "nextGaussian", "method_43059", "nextGaussian", "m_188583_"), "()D");
    }

    static jdouble nextGaussian(const jobject& obj) {
                
       const auto methodID = methodID_nextGaussian();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_nextTriangular() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "triangle", "method_43385", "nextTriangular", "m_216328_"), "(DD)D");
    }

    static jdouble nextTriangular(const jobject& obj, const jdouble& arg0, const jdouble& arg1) {
                
       const auto methodID = methodID_nextTriangular();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_skip() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "consumeCount", "method_33650", "skip", "m_190110_"), "(I)V");
    }

    static void skip(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_skip();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_nextBetweenExclusive() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "nextInt", "method_43051", "nextBetweenExclusive", "m_216339_"), "(II)I");
    }

    static jint nextBetweenExclusive(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_nextBetweenExclusive();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_UTIL_MATH_RANDOM_RANDOM_HPP