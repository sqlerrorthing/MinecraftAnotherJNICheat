// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_MATH_RANDOM_CHECKEDRANDOM$SPLITTER_HPP
#define NET_MINECRAFT_UTIL_MATH_RANDOM_CHECKEDRANDOM$SPLITTER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.math.random.CheckedRandom$Splitter
 * Remapped: dyz$a
 */
namespace CheckedRandom$Splitter {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dyz$a", "net/minecraft/world/level/levelgen/LegacyRandomSource$LegacyPositionalRandomFactory", "net/minecraft/class_5820$class_6671", "net/minecraft/util/math/random/CheckedRandom$Splitter", "net/minecraft/src/C_182892_$C_182893_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.util.math.random.CheckedRandom$Splitter#seed
    static jlong get_field_seed(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "seed", "field_35125", "seed", "f_188586_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.random.CheckedRandom$Splitter#seed
    static void set_field_seed(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "seed", "field_35125", "seed", "f_188586_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    static jmethodID methodID_split() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "at", "method_38418", "split", "m_213715_"), "(III)Layw;");
    }

    static jobject split(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_split();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__split() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "fromHashOf", "method_38995", "split", "m_214111_"), "(Ljava/lang/String;)Layw;");
    }

    static jobject _split(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__split();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID___split() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "fromSeed", "method_60628", "split", "m_339345_"), "(J)Layw;");
    }

    static jobject __split(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID___split();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_addDebugInfo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "parityConfigString", "method_39039", "addDebugInfo", "m_183502_"), "(Ljava/lang/StringBuilder;)V");
    }

    static void addDebugInfo(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addDebugInfo();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_UTIL_MATH_RANDOM_CHECKEDRANDOM$SPLITTER_HPP