// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_MATH_RANDOM_GAUSSIANGENERATOR_HPP
#define NET_MINECRAFT_UTIL_MATH_RANDOM_GAUSSIANGENERATOR_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.math.random.GaussianGenerator
 * Remapped: dza
 */
namespace GaussianGenerator {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dza", "net/minecraft/world/level/levelgen/MarsagliaPolarGaussian", "net/minecraft/class_6672", "net/minecraft/util/math/random/GaussianGenerator", "net/minecraft/src/C_182894_"));
        }
        return cachedClass;
    };

    // getter for public field net.minecraft.util.math.random.GaussianGenerator#baseRandom
    static jobject get_field_baseRandom(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "randomSource", "field_35126", "baseRandom", "f_188597_"), "Layw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static public field net.minecraft.util.math.random.GaussianGenerator#baseRandom
    static void set_field_baseRandom(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "randomSource", "field_35126", "baseRandom", "f_188597_"), "Layw;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.random.GaussianGenerator#nextNextGaussian
    static jdouble get_field_nextNextGaussian(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "nextNextGaussian", "field_35127", "nextNextGaussian", "f_188598_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.random.GaussianGenerator#nextNextGaussian
    static void set_field_nextNextGaussian(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "nextNextGaussian", "field_35127", "nextNextGaussian", "f_188598_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.random.GaussianGenerator#hasNextGaussian
    static jboolean get_field_hasNextGaussian(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "haveNextNextGaussian", "field_35128", "hasNextGaussian", "f_188599_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.random.GaussianGenerator#hasNextGaussian
    static void set_field_hasNextGaussian(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "haveNextNextGaussian", "field_35128", "hasNextGaussian", "f_188599_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    static jmethodID methodID_reset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "reset", "method_39541", "reset", "m_188602_"), "()V");
    }

    static void reset(const jobject& obj) {
                
       const auto methodID = methodID_reset();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_next() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "nextGaussian", "method_38996", "next", "m_188603_"), "()D");
    }

    static jdouble next(const jobject& obj) {
                
       const auto methodID = methodID_next();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_UTIL_MATH_RANDOM_GAUSSIANGENERATOR_HPP