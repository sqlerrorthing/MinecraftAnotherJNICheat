// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_MATH_RANDOM_CHUNKRANDOM_HPP
#define NET_MINECRAFT_UTIL_MATH_RANDOM_CHUNKRANDOM_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.math.random.ChunkRandom
 * Remapped: dzx
 */
namespace ChunkRandom {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dzx", "net/minecraft/world/level/levelgen/WorldgenRandom", "net/minecraft/class_2919", "net/minecraft/util/math/random/ChunkRandom", "net/minecraft/src/C_2202_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.util.math.random.ChunkRandom#baseRandom
    static jobject get_field_baseRandom(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "randomSource", "field_35141", "baseRandom", "f_190054_"), "Layw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.random.ChunkRandom#baseRandom
    static void set_field_baseRandom(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "randomSource", "field_35141", "baseRandom", "f_190054_"), "Layw;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.random.ChunkRandom#sampleCount
    static jint get_field_sampleCount(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "count", "field_28768", "sampleCount", "f_64676_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.random.ChunkRandom#sampleCount
    static void set_field_sampleCount(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "count", "field_28768", "sampleCount", "f_64676_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    static jmethodID methodID_getSampleCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "getCount", "method_35335", "getSampleCount", "m_158960_"), "()I");
    }

    static jint getSampleCount(const jobject& obj) {
                
       const auto methodID = methodID_getSampleCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_split() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "fork", "method_38420", "split", "m_213769_"), "()Layw;");
    }

    static jobject split(const jobject& obj) {
                
       const auto methodID = methodID_split();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_nextSplitter() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "forkPositional", "method_38421", "nextSplitter", "m_188582_"), "()Ldzl;");
    }

    static jobject nextSplitter(const jobject& obj) {
                
       const auto methodID = methodID_nextSplitter();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_next() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "next", "method_43156", "next", "m_64707_"), "(I)I");
    }

    static jint next(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_next();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setSeed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setSeed", "method_43052", "setSeed", "m_188584_"), "(J)V");
    }

    static void setSeed(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_setSeed();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setPopulationSeed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setDecorationSeed", "method_12661", "setPopulationSeed", "m_64690_"), "(JII)J");
    }

    static jlong setPopulationSeed(const jobject& obj, const jlong& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_setPopulationSeed();
       return MinecraftSDK::env->CallLongMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_setDecoratorSeed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setFeatureSeed", "method_12664", "setDecoratorSeed", "m_190064_"), "(JII)V");
    }

    static void setDecoratorSeed(const jobject& obj, const jlong& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_setDecoratorSeed();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_setCarverSeed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "setLargeFeatureSeed", "method_12663", "setCarverSeed", "m_190068_"), "(JII)V");
    }

    static void setCarverSeed(const jobject& obj, const jlong& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_setCarverSeed();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_setRegionSeed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setLargeFeatureWithSalt", "method_12665", "setRegionSeed", "m_190058_"), "(JIII)V");
    }

    static void setRegionSeed(const jobject& obj, const jlong& arg0, const jint& arg1, const jint& arg2, const jint& arg3) {
                
       const auto methodID = methodID_setRegionSeed();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_getSlimeRandom() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "seedSlimeChunk", "method_12662", "getSlimeRandom", "m_224681_"), "(IIJJ)Layw;");
    }

    static jobject getSlimeRandom(const jint& arg0, const jint& arg1, const jlong& arg2, const jlong& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_getSlimeRandom();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
};

#endif // NET_MINECRAFT_UTIL_MATH_RANDOM_CHUNKRANDOM_HPP