// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_MATH_RANDOM_RANDOMSEQUENCESSTATE_HPP
#define NET_MINECRAFT_UTIL_MATH_RANDOM_RANDOMSEQUENCESSTATE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.math.random.RandomSequencesState
 * Remapped: bqy
 */
namespace RandomSequencesState {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("bqy", "net/minecraft/world/RandomSequences", "net/minecraft/class_8565", "net/minecraft/util/math/random/RandomSequencesState", "net/minecraft/src/C_286923_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.util.math.random.RandomSequencesState#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_44861", "LOGGER", "f_286984_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.random.RandomSequencesState#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_44861", "LOGGER", "f_286984_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.random.RandomSequencesState#seed
    static jlong get_field_seed(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "worldSeed", "field_44862", "seed", "f_290669_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.random.RandomSequencesState#seed
    static void set_field_seed(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "worldSeed", "field_44862", "seed", "f_290669_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.random.RandomSequencesState#salt
    static jint get_field_salt(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "salt", "field_45100", "salt", "f_290528_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.random.RandomSequencesState#salt
    static void set_field_salt(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "salt", "field_45100", "salt", "f_290528_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.random.RandomSequencesState#includeWorldSeed
    static jboolean get_field_includeWorldSeed(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "includeWorldSeed", "field_45101", "includeWorldSeed", "f_291706_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.random.RandomSequencesState#includeWorldSeed
    static void set_field_includeWorldSeed(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "includeWorldSeed", "field_45101", "includeWorldSeed", "f_291706_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.random.RandomSequencesState#includeSequenceId
    static jboolean get_field_includeSequenceId(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "includeSequenceId", "field_45102", "includeSequenceId", "f_291446_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.random.RandomSequencesState#includeSequenceId
    static void set_field_includeSequenceId(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "includeSequenceId", "field_45102", "includeSequenceId", "f_291446_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.random.RandomSequencesState#sequences
    static jobject get_field_sequences(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "sequences", "field_44863", "sequences", "f_286954_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.random.RandomSequencesState#sequences
    static void set_field_sequences(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "sequences", "field_44863", "sequences", "f_286954_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_getPersistentStateType() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "factory", "method_52511", "getPersistentStateType", "m_295760_"), "(J)Leql$a;");
    }

    static jobject getPersistentStateType(const jlong& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getPersistentStateType();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getOrCreate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "get", "method_51843", "getOrCreate", "m_287292_"), "(Lakr;)Layw;");
    }

    static jobject getOrCreate(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getOrCreate();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_createSequence() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "createSequence", "method_52519", "createSequence", "m_294862_"), "(Lakr;)Lbqx;");
    }

    static jobject createSequence(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_createSequence();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__createSequence() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "createSequence", "method_52518", "createSequence", "m_292708_"), "(Lakr;IZZ)Lbqx;");
    }

    static jobject _createSequence(const jobject& obj, const jobject& arg0, const jint& arg1, const jboolean& arg2, const jboolean& arg3) {
                
       const auto methodID = methodID__createSequence();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_forEachSequence() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "forAllSequences", "method_52513", "forEachSequence", "m_293664_"), "(Ljava/util/function/BiConsumer;)V");
    }

    static void forEachSequence(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_forEachSequence();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setDefaultParameters() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setSeedDefaults", "method_52510", "setDefaultParameters", "m_293057_"), "(IZZ)V");
    }

    static void setDefaultParameters(const jobject& obj, const jint& arg0, const jboolean& arg1, const jboolean& arg2) {
                
       const auto methodID = methodID_setDefaultParameters();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_writeNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "save", "method_75", "writeNbt", "m_7176_"), "(Lub;Ljo$a;)Lub;");
    }

    static jobject writeNbt(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_writeNbt();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getBooleanFromNbtOrFallback() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getBooleanWithDefault", "method_52514", "getBooleanFromNbtOrFallback", "m_295631_"), "(Lub;Ljava/lang/String;Z)Z");
    }

    static jboolean getBooleanFromNbtOrFallback(const jobject& arg0, const jobject& arg1, const jboolean& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_getBooleanFromNbtOrFallback();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_fromNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "load", "method_51842", "fromNbt", "m_287187_"), "(JLub;)Lbqy;");
    }

    static jobject fromNbt(const jlong& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_fromNbt();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_resetAll() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "clear", "method_52509", "resetAll", "m_292818_"), "()I");
    }

    static jint resetAll(const jobject& obj) {
                
       const auto methodID = methodID_resetAll();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_reset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "reset", "method_52517", "reset", "m_294388_"), "(Lakr;)V");
    }

    static void reset(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_reset();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__reset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "reset", "method_52512", "reset", "m_295700_"), "(Lakr;IZZ)V");
    }

    static void _reset(const jobject& obj, const jobject& arg0, const jint& arg1, const jboolean& arg2, const jboolean& arg3) {
                
       const auto methodID = methodID__reset();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
};

#endif // NET_MINECRAFT_UTIL_MATH_RANDOM_RANDOMSEQUENCESSTATE_HPP