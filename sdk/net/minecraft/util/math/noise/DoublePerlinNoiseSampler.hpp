// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_MATH_NOISE_DOUBLEPERLINNOISESAMPLER_HPP
#define NET_MINECRAFT_UTIL_MATH_NOISE_DOUBLEPERLINNOISESAMPLER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.math.noise.DoublePerlinNoiseSampler
 * Remapped: eoh
 */
namespace DoublePerlinNoiseSampler {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("eoh", "net/minecraft/world/level/levelgen/synth/NormalNoise", "net/minecraft/class_5216", "net/minecraft/util/math/noise/DoublePerlinNoiseSampler", "net/minecraft/src/C_2663_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.util.math.noise.DoublePerlinNoiseSampler#DOMAIN_SCALE
    [[maybe_unused]] static jdouble get_field_DOMAIN_SCALE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "INPUT_FACTOR", "field_31702", "DOMAIN_SCALE", "f_164344_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.noise.DoublePerlinNoiseSampler#DOMAIN_SCALE
    [[maybe_unused]] static void set_field_DOMAIN_SCALE(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "INPUT_FACTOR", "field_31702", "DOMAIN_SCALE", "f_164344_"), "D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.math.noise.DoublePerlinNoiseSampler#field_31703
    [[maybe_unused]] static jdouble get_field_field_31703() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "TARGET_DEVIATION", "field_31703", "field_31703", "f_164345_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.noise.DoublePerlinNoiseSampler#field_31703
    [[maybe_unused]] static void set_field_field_31703(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "TARGET_DEVIATION", "field_31703", "field_31703", "f_164345_"), "D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.noise.DoublePerlinNoiseSampler#amplitude
    static jdouble get_field_amplitude(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "valueFactor", "field_24175", "amplitude", "f_75373_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.noise.DoublePerlinNoiseSampler#amplitude
    static void set_field_amplitude(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "valueFactor", "field_24175", "amplitude", "f_75373_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.noise.DoublePerlinNoiseSampler#firstSampler
    static jobject get_field_firstSampler(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "first", "field_24176", "firstSampler", "f_75374_"), "Leoi;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.noise.DoublePerlinNoiseSampler#firstSampler
    static void set_field_firstSampler(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "first", "field_24176", "firstSampler", "f_75374_"), "Leoi;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.noise.DoublePerlinNoiseSampler#secondSampler
    static jobject get_field_secondSampler(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "second", "field_24177", "secondSampler", "f_75375_"), "Leoi;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.noise.DoublePerlinNoiseSampler#secondSampler
    static void set_field_secondSampler(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "second", "field_24177", "secondSampler", "f_75375_"), "Leoi;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.noise.DoublePerlinNoiseSampler#maxValue
    static jdouble get_field_maxValue(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "maxValue", "field_36631", "maxValue", "f_210624_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.noise.DoublePerlinNoiseSampler#maxValue
    static void set_field_maxValue(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "maxValue", "field_36631", "maxValue", "f_210624_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.noise.DoublePerlinNoiseSampler#parameters
    static jobject get_field_parameters(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "parameters", "field_37207", "parameters", "f_210625_"), "Leoh$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.noise.DoublePerlinNoiseSampler#parameters
    static void set_field_parameters(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "parameters", "field_37207", "parameters", "f_210625_"), "Leoh$a;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_createLegacy() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "createLegacyNetherBiome", "method_39186", "createLegacy", "m_230508_"), "(Layw;Leoh$a;)Leoh;");
    }

    static jobject createLegacy(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_createLegacy();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_create() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "create", "method_31927", "create", "m_230504_"), "(Layw;I[D)Leoh;");
    }

    static jobject create(const jobject& arg0, const jint& arg1, const jarray& arg2, const jdouble& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_create();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID__create() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "create", "method_38476", "create", "m_230511_"), "(Layw;Leoh$a;)Leoh;");
    }

    static jobject _create(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID__create();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getMaxValue() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "maxValue", "method_40554", "getMaxValue", "m_210630_"), "()D");
    }

    static jdouble getMaxValue(const jobject& obj) {
                
       const auto methodID = methodID_getMaxValue();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_createAmplitude() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "expectedDeviation", "method_27407", "createAmplitude", "m_75384_"), "(I)D");
    }

    static jdouble createAmplitude(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_createAmplitude();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_sample() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getValue", "method_27406", "sample", "m_75380_"), "(DDD)D");
    }

    static jdouble sample(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID_sample();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_copy() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "parameters", "method_38475", "copy", "m_192842_"), "()Leoh$a;");
    }

    static jobject copy(const jobject& obj) {
                
       const auto methodID = methodID_copy();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_addDebugInfo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "parityConfigString", "method_39124", "addDebugInfo", "m_192846_"), "(Ljava/lang/StringBuilder;)V");
    }

    static void addDebugInfo(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addDebugInfo();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_UTIL_MATH_NOISE_DOUBLEPERLINNOISESAMPLER_HPP