// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_MATH_NOISE_OCTAVEPERLINNOISESAMPLER_HPP
#define NET_MINECRAFT_UTIL_MATH_NOISE_OCTAVEPERLINNOISESAMPLER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.math.noise.OctavePerlinNoiseSampler
 * Remapped: eoi
 */
namespace OctavePerlinNoiseSampler {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("eoi", "net/minecraft/world/level/levelgen/synth/PerlinNoise", "net/minecraft/class_3537", "net/minecraft/util/math/noise/OctavePerlinNoiseSampler", "net/minecraft/src/C_2664_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.util.math.noise.OctavePerlinNoiseSampler#field_31704
    [[maybe_unused]] static jint get_field_field_31704() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "ROUND_OFF", "field_31704", "field_31704", "f_164358_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.noise.OctavePerlinNoiseSampler#field_31704
    [[maybe_unused]] static void set_field_field_31704(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "ROUND_OFF", "field_31704", "field_31704", "f_164358_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.noise.OctavePerlinNoiseSampler#octaveSamplers
    static jobject get_field_octaveSamplers(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "noiseLevels", "field_15744", "octaveSamplers", "f_75390_"), "[Leof;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.noise.OctavePerlinNoiseSampler#octaveSamplers
    static void set_field_octaveSamplers(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "noiseLevels", "field_15744", "octaveSamplers", "f_75390_"), "[Leof;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.noise.OctavePerlinNoiseSampler#firstOctave
    static jint get_field_firstOctave(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "firstOctave", "field_34758", "firstOctave", "f_192867_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.noise.OctavePerlinNoiseSampler#firstOctave
    static void set_field_firstOctave(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "firstOctave", "field_34758", "firstOctave", "f_192867_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.noise.OctavePerlinNoiseSampler#amplitudes
    static jobject get_field_amplitudes(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "amplitudes", "field_26445", "amplitudes", "f_75391_"), "Lit/unimi/dsi/fastutil/doubles/DoubleList;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.noise.OctavePerlinNoiseSampler#amplitudes
    static void set_field_amplitudes(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "amplitudes", "field_26445", "amplitudes", "f_75391_"), "Lit/unimi/dsi/fastutil/doubles/DoubleList;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.noise.OctavePerlinNoiseSampler#persistence
    static jdouble get_field_persistence(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "lowestFreqValueFactor", "field_20659", "persistence", "f_75392_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.noise.OctavePerlinNoiseSampler#persistence
    static void set_field_persistence(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "lowestFreqValueFactor", "field_20659", "persistence", "f_75392_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.noise.OctavePerlinNoiseSampler#lacunarity
    static jdouble get_field_lacunarity(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "lowestFreqInputFactor", "field_20660", "lacunarity", "f_75393_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.noise.OctavePerlinNoiseSampler#lacunarity
    static void set_field_lacunarity(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "lowestFreqInputFactor", "field_20660", "lacunarity", "f_75393_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.noise.OctavePerlinNoiseSampler#maxValue
    static jdouble get_field_maxValue(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "maxValue", "field_36632", "maxValue", "f_210641_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.noise.OctavePerlinNoiseSampler#maxValue
    static void set_field_maxValue(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "maxValue", "field_36632", "maxValue", "f_210641_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    static jmethodID methodID_createLegacy() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "createLegacyForBlendedNoise", "method_39187", "createLegacy", "m_230532_"), "(Layw;Ljava/util/stream/IntStream;)Leoi;");
    }

    static jobject createLegacy(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_createLegacy();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__createLegacy() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "createLegacyForLegacyNetherBiome", "method_39126", "createLegacy", "m_230525_"), "(Layw;ILit/unimi/dsi/fastutil/doubles/DoubleList;)Leoi;");
    }

    static jobject _createLegacy(const jobject& arg0, const jint& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID__createLegacy();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_create() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "create", "method_39128", "create", "m_230539_"), "(Layw;Ljava/util/stream/IntStream;)Leoi;");
    }

    static jobject create(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_create();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__create() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "create", "method_39127", "create", "m_230529_"), "(Layw;Ljava/util/List;)Leoi;");
    }

    static jobject _create(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID__create();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID___create() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "create", "method_35480", "create", "m_230520_"), "(Layw;ID[D)Leoi;");
    }

    static jobject __create(const jobject& arg0, const jint& arg1, const jdouble& arg2, const jarray& arg3, const jdouble& arg4) {
       const auto clazz = self();
       const auto methodID = methodID___create();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID____create() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "create", "method_30847", "create", "m_230535_"), "(Layw;ILit/unimi/dsi/fastutil/doubles/DoubleList;)Leoi;");
    }

    static jobject ___create(const jobject& arg0, const jint& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID____create();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_calculateAmplitudes() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "makeAmplitudes", "method_30848", "calculateAmplitudes", "m_75430_"), "(Lit/unimi/dsi/fastutil/ints/IntSortedSet;)Lcom/mojang/datafixers/util/Pair;");
    }

    static jobject calculateAmplitudes(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_calculateAmplitudes();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getMaxValue() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "maxValue", "method_40555", "getMaxValue", "m_210642_"), "()D");
    }

    static jdouble getMaxValue(const jobject& obj) {
                
       const auto methodID = methodID_getMaxValue();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_skipCalls() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "skipOctave", "method_34401", "skipCalls", "m_230518_"), "(Layw;)V");
    }

    static void skipCalls(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_skipCalls();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_sample() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getValue", "method_15416", "sample", "m_75408_"), "(DDD)D");
    }

    static jdouble sample(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID_sample();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__sample() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getValue", "method_16453", "sample", "m_75417_"), "(DDDDDZ)D");
    }

    static jdouble _sample(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2, const jdouble& arg3, const jdouble& arg4, const jboolean& arg5) {
                
       const auto methodID = methodID__sample();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
    static jmethodID methodID_method_40556() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "maxBrokenValue", "method_40556", "method_40556", "m_210643_"), "(D)D");
    }

    static jdouble method_40556(const jobject& obj, const jdouble& arg0) {
                
       const auto methodID = methodID_method_40556();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getTotalAmplitude() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "edgeValue", "method_40557", "getTotalAmplitude", "m_210649_"), "(D)D");
    }

    static jdouble getTotalAmplitude(const jobject& obj, const jdouble& arg0) {
                
       const auto methodID = methodID_getTotalAmplitude();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getOctave() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getOctaveNoise", "method_16668", "getOctave", "m_75424_"), "(I)Leof;");
    }

    static jobject getOctave(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_getOctave();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_maintainPrecision() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "wrap", "method_16452", "maintainPrecision", "m_75406_"), "(D)D");
    }

    static jdouble maintainPrecision(const jdouble& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_maintainPrecision();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getFirstOctave() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "firstOctave", "method_38477", "getFirstOctave", "m_192872_"), "()I");
    }

    static jint getFirstOctave(const jobject& obj) {
                
       const auto methodID = methodID_getFirstOctave();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getAmplitudes() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "amplitudes", "method_38478", "getAmplitudes", "m_192892_"), "()Lit/unimi/dsi/fastutil/doubles/DoubleList;");
    }

    static jobject getAmplitudes(const jobject& obj) {
                
       const auto methodID = methodID_getAmplitudes();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_addDebugInfo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "parityConfigString", "method_39130", "addDebugInfo", "m_192890_"), "(Ljava/lang/StringBuilder;)V");
    }

    static void addDebugInfo(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addDebugInfo();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_UTIL_MATH_NOISE_OCTAVEPERLINNOISESAMPLER_HPP