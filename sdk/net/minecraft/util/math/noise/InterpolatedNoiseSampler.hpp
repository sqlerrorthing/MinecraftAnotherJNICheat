// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_MATH_NOISE_INTERPOLATEDNOISESAMPLER_HPP
#define NET_MINECRAFT_UTIL_MATH_NOISE_INTERPOLATEDNOISESAMPLER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.math.noise.InterpolatedNoiseSampler
 * Remapped: eoe
 */
namespace InterpolatedNoiseSampler {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("eoe", "net/minecraft/world/level/levelgen/synth/BlendedNoise", "net/minecraft/class_5822", "net/minecraft/util/math/noise/InterpolatedNoiseSampler", "net/minecraft/src/C_141430_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.util.math.noise.InterpolatedNoiseSampler#SCALE_AND_FACTOR_RANGE
    [[maybe_unused]] static jobject get_field_SCALE_AND_FACTOR_RANGE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "SCALE_RANGE", "field_38269", "SCALE_AND_FACTOR_RANGE", "f_230454_"), "Lcom/mojang/serialization/Codec;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.noise.InterpolatedNoiseSampler#SCALE_AND_FACTOR_RANGE
    [[maybe_unused]] static void set_field_SCALE_AND_FACTOR_RANGE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "SCALE_RANGE", "field_38269", "SCALE_AND_FACTOR_RANGE", "f_230454_"), "Lcom/mojang/serialization/Codec;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.math.noise.InterpolatedNoiseSampler#MAP_CODEC
    [[maybe_unused]] static jobject get_field_MAP_CODEC() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "DATA_CODEC", "field_38270", "MAP_CODEC", "f_230455_"), "Lcom/mojang/serialization/MapCodec;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.noise.InterpolatedNoiseSampler#MAP_CODEC
    [[maybe_unused]] static void set_field_MAP_CODEC(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "DATA_CODEC", "field_38270", "MAP_CODEC", "f_230455_"), "Lcom/mojang/serialization/MapCodec;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.util.math.noise.InterpolatedNoiseSampler#CODEC
    [[maybe_unused]] static jobject get_field_CODEC() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CODEC", "field_37206", "CODEC", "f_210616_"), "Layh;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.util.math.noise.InterpolatedNoiseSampler#CODEC
    [[maybe_unused]] static void set_field_CODEC(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CODEC", "field_37206", "CODEC", "f_210616_"), "Layh;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.noise.InterpolatedNoiseSampler#lowerInterpolatedNoise
    static jobject get_field_lowerInterpolatedNoise(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "minLimitNoise", "field_28774", "lowerInterpolatedNoise", "f_164288_"), "Leoi;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.noise.InterpolatedNoiseSampler#lowerInterpolatedNoise
    static void set_field_lowerInterpolatedNoise(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "minLimitNoise", "field_28774", "lowerInterpolatedNoise", "f_164288_"), "Leoi;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.noise.InterpolatedNoiseSampler#upperInterpolatedNoise
    static jobject get_field_upperInterpolatedNoise(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "maxLimitNoise", "field_28775", "upperInterpolatedNoise", "f_164289_"), "Leoi;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.noise.InterpolatedNoiseSampler#upperInterpolatedNoise
    static void set_field_upperInterpolatedNoise(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "maxLimitNoise", "field_28775", "upperInterpolatedNoise", "f_164289_"), "Leoi;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.noise.InterpolatedNoiseSampler#interpolationNoise
    static jobject get_field_interpolationNoise(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "mainNoise", "field_28776", "interpolationNoise", "f_164290_"), "Leoi;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.noise.InterpolatedNoiseSampler#interpolationNoise
    static void set_field_interpolationNoise(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "mainNoise", "field_28776", "interpolationNoise", "f_164290_"), "Leoi;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.noise.InterpolatedNoiseSampler#scaledXzScale
    static jdouble get_field_scaledXzScale(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "xzMultiplier", "field_38271", "scaledXzScale", "f_230456_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.noise.InterpolatedNoiseSampler#scaledXzScale
    static void set_field_scaledXzScale(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "xzMultiplier", "field_38271", "scaledXzScale", "f_230456_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.noise.InterpolatedNoiseSampler#scaledYScale
    static jdouble get_field_scaledYScale(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "yMultiplier", "field_38272", "scaledYScale", "f_230457_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.noise.InterpolatedNoiseSampler#scaledYScale
    static void set_field_scaledYScale(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "yMultiplier", "field_38272", "scaledYScale", "f_230457_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.noise.InterpolatedNoiseSampler#xzFactor
    static jdouble get_field_xzFactor(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "xzFactor", "field_38273", "xzFactor", "f_230458_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.noise.InterpolatedNoiseSampler#xzFactor
    static void set_field_xzFactor(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "xzFactor", "field_38273", "xzFactor", "f_230458_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.noise.InterpolatedNoiseSampler#yFactor
    static jdouble get_field_yFactor(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "yFactor", "field_38274", "yFactor", "f_230459_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.noise.InterpolatedNoiseSampler#yFactor
    static void set_field_yFactor(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "yFactor", "field_38274", "yFactor", "f_230459_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.noise.InterpolatedNoiseSampler#smearScaleMultiplier
    static jdouble get_field_smearScaleMultiplier(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "smearScaleMultiplier", "field_38275", "smearScaleMultiplier", "f_230460_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.noise.InterpolatedNoiseSampler#smearScaleMultiplier
    static void set_field_smearScaleMultiplier(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "smearScaleMultiplier", "field_38275", "smearScaleMultiplier", "f_230460_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.noise.InterpolatedNoiseSampler#maxValue
    static jdouble get_field_maxValue(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "maxValue", "field_36630", "maxValue", "f_210617_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.noise.InterpolatedNoiseSampler#maxValue
    static void set_field_maxValue(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "maxValue", "field_36630", "maxValue", "f_210617_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.noise.InterpolatedNoiseSampler#xzScale
    static jdouble get_field_xzScale(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "xzScale", "field_34752", "xzScale", "f_192799_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.noise.InterpolatedNoiseSampler#xzScale
    static void set_field_xzScale(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "xzScale", "field_34752", "xzScale", "f_192799_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.noise.InterpolatedNoiseSampler#yScale
    static jdouble get_field_yScale(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "yScale", "field_34753", "yScale", "f_192800_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.noise.InterpolatedNoiseSampler#yScale
    static void set_field_yScale(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "yScale", "field_34753", "yScale", "f_192800_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    static jmethodID methodID_createBase3dNoiseFunction() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "createUnseeded", "method_42384", "createBase3dNoiseFunction", "m_230477_"), "(DDDDD)Leoe;");
    }

    static jobject createBase3dNoiseFunction(const jdouble& arg0, const jdouble& arg1, const jdouble& arg2, const jdouble& arg3, const jdouble& arg4) {
       const auto clazz = self();
       const auto methodID = methodID_createBase3dNoiseFunction();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_copyWithRandom() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "withNewRandom", "method_42386", "copyWithRandom", "m_230483_"), "(Layw;)Leoe;");
    }

    static jobject copyWithRandom(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_copyWithRandom();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_sample() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "compute", "method_40464", "sample", "m_207386_"), "(Ldyr$b;)D");
    }

    static jdouble sample(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_sample();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_minValue() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "minValue", "comp_377", "minValue", "m_207402_"), "()D");
    }

    static jdouble minValue(const jobject& obj) {
                
       const auto methodID = methodID_minValue();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID__maxValue() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "maxValue", "comp_378", "maxValue", "m_207401_"), "()D");
    }

    static jdouble _maxValue(const jobject& obj) {
                
       const auto methodID = methodID__maxValue();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_addDebugInfo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "parityConfigString", "method_39117", "addDebugInfo", "m_192817_"), "(Ljava/lang/StringBuilder;)V");
    }

    static void addDebugInfo(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addDebugInfo();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getCodecHolder() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "codec", "method_41062", "getCodecHolder", "m_214023_"), "()Layh;");
    }

    static jobject getCodecHolder(const jobject& obj) {
                
       const auto methodID = methodID_getCodecHolder();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_UTIL_MATH_NOISE_INTERPOLATEDNOISESAMPLER_HPP