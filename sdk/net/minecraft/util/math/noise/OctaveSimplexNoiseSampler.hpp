// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_MATH_NOISE_OCTAVESIMPLEXNOISESAMPLER_HPP
#define NET_MINECRAFT_UTIL_MATH_NOISE_OCTAVESIMPLEXNOISESAMPLER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.math.noise.OctaveSimplexNoiseSampler
 * Remapped: eoj
 */
namespace OctaveSimplexNoiseSampler {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("eoj", "net/minecraft/world/level/levelgen/synth/PerlinSimplexNoise", "net/minecraft/class_3543", "net/minecraft/util/math/noise/OctaveSimplexNoiseSampler", "net/minecraft/src/C_2665_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.util.math.noise.OctaveSimplexNoiseSampler#octaveSamplers
    static jobject get_field_octaveSamplers(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "noiseLevels", "field_15770", "octaveSamplers", "f_75432_"), "[Leok;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.noise.OctaveSimplexNoiseSampler#octaveSamplers
    static void set_field_octaveSamplers(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "noiseLevels", "field_15770", "octaveSamplers", "f_75432_"), "[Leok;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.noise.OctaveSimplexNoiseSampler#persistence
    static jdouble get_field_persistence(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "highestFreqValueFactor", "field_20661", "persistence", "f_75433_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.noise.OctaveSimplexNoiseSampler#persistence
    static void set_field_persistence(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "highestFreqValueFactor", "field_20661", "persistence", "f_75433_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.noise.OctaveSimplexNoiseSampler#lacunarity
    static jdouble get_field_lacunarity(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "highestFreqInputFactor", "field_20662", "lacunarity", "f_75434_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.noise.OctaveSimplexNoiseSampler#lacunarity
    static void set_field_lacunarity(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "highestFreqInputFactor", "field_20662", "lacunarity", "f_75434_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    static jmethodID methodID_sample() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getValue", "method_16451", "sample", "m_75449_"), "(DDZ)D");
    }

    static jdouble sample(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jboolean& arg2) {
                
       const auto methodID = methodID_sample();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0, arg1, arg2);
    };
    
};

#endif // NET_MINECRAFT_UTIL_MATH_NOISE_OCTAVESIMPLEXNOISESAMPLER_HPP