// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_MATH_NOISE_SIMPLEXNOISESAMPLER_HPP
#define NET_MINECRAFT_UTIL_MATH_NOISE_SIMPLEXNOISESAMPLER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.math.noise.SimplexNoiseSampler
 * Remapped: eok
 */
namespace SimplexNoiseSampler {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("eok", "net/minecraft/world/level/levelgen/synth/SimplexNoise", "net/minecraft/class_3541", "net/minecraft/util/math/noise/SimplexNoiseSampler", "net/minecraft/src/C_2666_"));
        }
        return cachedClass;
    };

    // getter for static protected field net.minecraft.util.math.noise.SimplexNoiseSampler#GRADIENTS
    [[maybe_unused]] static jint get_field_GRADIENTS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "GRADIENT", "field_15766", "GRADIENTS", "f_75453_"), "[[I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static protected field net.minecraft.util.math.noise.SimplexNoiseSampler#GRADIENTS
    [[maybe_unused]] static void set_field_GRADIENTS(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "GRADIENT", "field_15766", "GRADIENTS", "f_75453_"), "[[I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.math.noise.SimplexNoiseSampler#SQRT_3
    [[maybe_unused]] static jdouble get_field_SQRT_3() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "SQRT_3", "field_15764", "SQRT_3", "f_75457_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.noise.SimplexNoiseSampler#SQRT_3
    [[maybe_unused]] static void set_field_SQRT_3(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "SQRT_3", "field_15764", "SQRT_3", "f_75457_"), "D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.math.noise.SimplexNoiseSampler#SKEW_FACTOR_2D
    [[maybe_unused]] static jdouble get_field_SKEW_FACTOR_2D() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "F2", "field_15768", "SKEW_FACTOR_2D", "f_75458_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.noise.SimplexNoiseSampler#SKEW_FACTOR_2D
    [[maybe_unused]] static void set_field_SKEW_FACTOR_2D(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "F2", "field_15768", "SKEW_FACTOR_2D", "f_75458_"), "D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.math.noise.SimplexNoiseSampler#UNSKEW_FACTOR_2D
    [[maybe_unused]] static jdouble get_field_UNSKEW_FACTOR_2D() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "G2", "field_15767", "UNSKEW_FACTOR_2D", "f_75459_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.noise.SimplexNoiseSampler#UNSKEW_FACTOR_2D
    [[maybe_unused]] static void set_field_UNSKEW_FACTOR_2D(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "G2", "field_15767", "UNSKEW_FACTOR_2D", "f_75459_"), "D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.util.math.noise.SimplexNoiseSampler#permutation
    static jint get_field_permutation(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "p", "field_15765", "permutation", "f_75460_"), "[I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.math.noise.SimplexNoiseSampler#permutation
    static void set_field_permutation(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "p", "field_15765", "permutation", "f_75460_"), "[I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.util.math.noise.SimplexNoiseSampler#originX
    static jdouble get_field_originX(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "xo", "field_15763", "originX", "f_75454_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static public field net.minecraft.util.math.noise.SimplexNoiseSampler#originX
    static void set_field_originX(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "xo", "field_15763", "originX", "f_75454_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.util.math.noise.SimplexNoiseSampler#originY
    static jdouble get_field_originY(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "yo", "field_15762", "originY", "f_75455_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static public field net.minecraft.util.math.noise.SimplexNoiseSampler#originY
    static void set_field_originY(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "yo", "field_15762", "originY", "f_75455_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.util.math.noise.SimplexNoiseSampler#originZ
    static jdouble get_field_originZ(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "zo", "field_15761", "originZ", "f_75456_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static public field net.minecraft.util.math.noise.SimplexNoiseSampler#originZ
    static void set_field_originZ(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "zo", "field_15761", "originZ", "f_75456_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    static jmethodID methodID_map() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "p", "method_16456", "map", "m_75471_"), "(I)I");
    }

    static jint map(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_map();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_dot() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "dot", "method_15431", "dot", "m_75479_"), "([IDDD)D");
    }

    static jdouble dot(const jarray& arg0, const jint& arg1, const jdouble& arg2, const jdouble& arg3, const jdouble& arg4) {
       const auto clazz = self();
       const auto methodID = methodID_dot();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_grad() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getCornerNoise3D", "method_16455", "grad", "m_75473_"), "(IDDDD)D");
    }

    static jdouble grad(const jobject& obj, const jint& arg0, const jdouble& arg1, const jdouble& arg2, const jdouble& arg3, const jdouble& arg4) {
                
       const auto methodID = methodID_grad();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_sample() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getValue", "method_15433", "sample", "m_75464_"), "(DD)D");
    }

    static jdouble sample(const jobject& obj, const jdouble& arg0, const jdouble& arg1) {
                
       const auto methodID = methodID_sample();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__sample() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getValue", "method_22416", "sample", "m_75467_"), "(DDD)D");
    }

    static jdouble _sample(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID__sample();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0, arg1, arg2);
    };
    
};

#endif // NET_MINECRAFT_UTIL_MATH_NOISE_SIMPLEXNOISESAMPLER_HPP