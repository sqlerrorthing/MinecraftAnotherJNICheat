// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_MATH_AXISCYCLEDIRECTION_HPP
#define NET_MINECRAFT_UTIL_MATH_AXISCYCLEDIRECTION_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.math.AxisCycleDirection
 * Remapped: ja
 */
namespace AxisCycleDirection {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("ja", "net/minecraft/core/AxisCycle", "net/minecraft/class_2335", "net/minecraft/util/math/AxisCycleDirection", "net/minecraft/src/C_4670_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.util.math.AxisCycleDirection#NONE
    [[maybe_unused]] static jobject get_field_NONE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "NONE", "field_10962", "NONE", "NONE"), "Lja;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.util.math.AxisCycleDirection#NONE
    [[maybe_unused]] static void set_field_NONE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "NONE", "field_10962", "NONE", "NONE"), "Lja;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.util.math.AxisCycleDirection#FORWARD
    [[maybe_unused]] static jobject get_field_FORWARD() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "FORWARD", "field_10963", "FORWARD", "FORWARD"), "Lja;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.util.math.AxisCycleDirection#FORWARD
    [[maybe_unused]] static void set_field_FORWARD(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "FORWARD", "field_10963", "FORWARD", "FORWARD"), "Lja;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.util.math.AxisCycleDirection#BACKWARD
    [[maybe_unused]] static jobject get_field_BACKWARD() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "BACKWARD", "field_10965", "BACKWARD", "BACKWARD"), "Lja;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.util.math.AxisCycleDirection#BACKWARD
    [[maybe_unused]] static void set_field_BACKWARD(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "BACKWARD", "field_10965", "BACKWARD", "BACKWARD"), "Lja;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.util.math.AxisCycleDirection#AXES
    [[maybe_unused]] static jobject get_field_AXES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "AXIS_VALUES", "field_10961", "AXES", "f_121783_"), "[Lji$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.util.math.AxisCycleDirection#AXES
    [[maybe_unused]] static void set_field_AXES(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "AXIS_VALUES", "field_10961", "AXES", "f_121783_"), "[Lji$a;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.util.math.AxisCycleDirection#VALUES
    [[maybe_unused]] static jobject get_field_VALUES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "VALUES", "field_10960", "VALUES", "f_121784_"), "[Lja;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.util.math.AxisCycleDirection#VALUES
    [[maybe_unused]] static void set_field_VALUES(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "VALUES", "field_10960", "VALUES", "f_121784_"), "[Lja;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_values() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("values", "values", "values", "values", "values"), "()[Lja;");
    }

    static jobject values() {
       const auto clazz = self();
       const auto methodID = methodID_values();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_valueOf() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("valueOf", "valueOf", "valueOf", "valueOf", "valueOf"), "(Ljava/lang/String;)Lja;");
    }

    static jobject valueOf(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_valueOf();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_choose() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "cycle", "method_10056", "choose", "m_7758_"), "(IIILji$a;)I");
    }

    static jint choose(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_choose();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID__choose() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "cycle", "method_35819", "choose", "m_142567_"), "(DDDLji$a;)D");
    }

    static jdouble _choose(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2, const jobject& arg3) {
                
       const auto methodID = methodID__choose();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_cycle() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "cycle", "method_10058", "cycle", "m_7314_"), "(Lji$a;)Lji$a;");
    }

    static jobject cycle(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_cycle();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_opposite() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "inverse", "method_10055", "opposite", "m_7634_"), "()Lja;");
    }

    static jobject opposite(const jobject& obj) {
                
       const auto methodID = methodID_opposite();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_between() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "between", "method_10057", "between", "m_121799_"), "(Lji$a;Lji$a;)Lja;");
    }

    static jobject between(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_between();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_UTIL_MATH_AXISCYCLEDIRECTION_HPP