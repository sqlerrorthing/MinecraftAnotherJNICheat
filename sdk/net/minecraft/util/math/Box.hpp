// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_MATH_BOX_HPP
#define NET_MINECRAFT_UTIL_MATH_BOX_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.math.Box
 * Remapped: ewx
 */
namespace Box {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("ewx", "net/minecraft/world/phys/AABB", "net/minecraft/class_238", "net/minecraft/util/math/Box", "net/minecraft/src/C_3040_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.util.math.Box#EPSILON
    [[maybe_unused]] static jdouble get_field_EPSILON() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "EPSILON", "field_31879", "EPSILON", "f_165879_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.Box#EPSILON
    [[maybe_unused]] static void set_field_EPSILON(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "EPSILON", "field_31879", "EPSILON", "f_165879_"), "D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    // getter for public field net.minecraft.util.math.Box#minX
    static jdouble get_field_minX(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "minX", "field_1323", "minX", "f_82288_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static public field net.minecraft.util.math.Box#minX
    static void set_field_minX(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "minX", "field_1323", "minX", "f_82288_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.util.math.Box#minY
    static jdouble get_field_minY(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "minY", "field_1322", "minY", "f_82289_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static public field net.minecraft.util.math.Box#minY
    static void set_field_minY(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "minY", "field_1322", "minY", "f_82289_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.util.math.Box#minZ
    static jdouble get_field_minZ(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "minZ", "field_1321", "minZ", "f_82290_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static public field net.minecraft.util.math.Box#minZ
    static void set_field_minZ(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "minZ", "field_1321", "minZ", "f_82290_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.util.math.Box#maxX
    static jdouble get_field_maxX(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "maxX", "field_1320", "maxX", "f_82291_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static public field net.minecraft.util.math.Box#maxX
    static void set_field_maxX(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "maxX", "field_1320", "maxX", "f_82291_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.util.math.Box#maxY
    static jdouble get_field_maxY(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "maxY", "field_1325", "maxY", "f_82292_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static public field net.minecraft.util.math.Box#maxY
    static void set_field_maxY(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "maxY", "field_1325", "maxY", "f_82292_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.util.math.Box#maxZ
    static jdouble get_field_maxZ(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "maxZ", "field_1324", "maxZ", "f_82293_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static public field net.minecraft.util.math.Box#maxZ
    static void set_field_maxZ(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "maxZ", "field_1324", "maxZ", "f_82293_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    static jmethodID methodID_from() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "of", "method_19316", "from", "m_82321_"), "(Lejj;)Lewx;");
    }

    static jobject from(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_from();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID__from() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "unitCubeFromLowerCorner", "method_29968", "from", "m_82333_"), "(Lexc;)Lewx;");
    }

    static jobject _from(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID__from();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_enclosing() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "encapsulatingFullBlocks", "method_54784", "enclosing", "m_307411_"), "(Ljd;Ljd;)Lewx;");
    }

    static jobject enclosing(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_enclosing();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_withMinX() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setMinX", "method_35574", "withMinX", "m_165880_"), "(D)Lewx;");
    }

    static jobject withMinX(const jobject& obj, const jdouble& arg0) {
                
       const auto methodID = methodID_withMinX();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_withMinY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setMinY", "method_35575", "withMinY", "m_165887_"), "(D)Lewx;");
    }

    static jobject withMinY(const jobject& obj, const jdouble& arg0) {
                
       const auto methodID = methodID_withMinY();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_withMinZ() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "setMinZ", "method_35576", "withMinZ", "m_165889_"), "(D)Lewx;");
    }

    static jobject withMinZ(const jobject& obj, const jdouble& arg0) {
                
       const auto methodID = methodID_withMinZ();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_withMaxX() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "setMaxX", "method_35577", "withMaxX", "m_165891_"), "(D)Lewx;");
    }

    static jobject withMaxX(const jobject& obj, const jdouble& arg0) {
                
       const auto methodID = methodID_withMaxX();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_withMaxY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "setMaxY", "method_35578", "withMaxY", "m_165893_"), "(D)Lewx;");
    }

    static jobject withMaxY(const jobject& obj, const jdouble& arg0) {
                
       const auto methodID = methodID_withMaxY();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_withMaxZ() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "setMaxZ", "method_35579", "withMaxZ", "m_165895_"), "(D)Lewx;");
    }

    static jobject withMaxZ(const jobject& obj, const jdouble& arg0) {
                
       const auto methodID = methodID_withMaxZ();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getMin() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "min", "method_1001", "getMin", "m_82340_"), "(Lji$a;)D");
    }

    static jdouble getMin(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getMin();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getMax() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "max", "method_990", "getMax", "m_82374_"), "(Lji$a;)D");
    }

    static jdouble getMax(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getMax();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_shrink() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "contract", "method_1002", "shrink", "m_82310_"), "(DDD)Lewx;");
    }

    static jobject shrink(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID_shrink();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_stretch() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "expandTowards", "method_18804", "stretch", "m_82369_"), "(Lexc;)Lewx;");
    }

    static jobject stretch(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_stretch();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__stretch() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "expandTowards", "method_1012", "stretch", "m_82363_"), "(DDD)Lewx;");
    }

    static jobject _stretch(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID__stretch();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_expand() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "inflate", "method_1009", "expand", "m_82377_"), "(DDD)Lewx;");
    }

    static jobject expand(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID_expand();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__expand() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "inflate", "method_1014", "expand", "m_82400_"), "(D)Lewx;");
    }

    static jobject _expand(const jobject& obj, const jdouble& arg0) {
                
       const auto methodID = methodID__expand();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_intersection() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "intersect", "method_999", "intersection", "m_82323_"), "(Lewx;)Lewx;");
    }

    static jobject intersection(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_intersection();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_union() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "minmax", "method_991", "union", "m_82367_"), "(Lewx;)Lewx;");
    }

    static jobject union(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_union();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_offset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "move", "method_989", "offset", "m_82386_"), "(DDD)Lewx;");
    }

    static jobject offset(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID_offset();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__offset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "move", "method_996", "offset", "m_82338_"), "(Ljd;)Lewx;");
    }

    static jobject _offset(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__offset();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID___offset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "move", "method_997", "offset", "m_82383_"), "(Lexc;)Lewx;");
    }

    static jobject __offset(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID___offset();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID____offset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "move", "method_60314", "offset", "m_339435_"), "(Lorg/joml/Vector3f;)Lewx;");
    }

    static jobject ___offset(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID____offset();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_intersects() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "intersects", "method_994", "intersects", "m_82381_"), "(Lewx;)Z");
    }

    static jboolean intersects(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_intersects();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__intersects() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "intersects", "method_1003", "intersects", "m_82314_"), "(DDDDDD)Z");
    }

    static jboolean _intersects(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2, const jdouble& arg3, const jdouble& arg4, const jdouble& arg5) {
                
       const auto methodID = methodID__intersects();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
    static jmethodID methodID___intersects() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "intersects", "method_993", "intersects", "m_82335_"), "(Lexc;Lexc;)Z");
    }

    static jboolean __intersects(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID___intersects();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_contains() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "contains", "method_1006", "contains", "m_82390_"), "(Lexc;)Z");
    }

    static jboolean contains(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_contains();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__contains() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "contains", "method_1008", "contains", "m_82393_"), "(DDD)Z");
    }

    static jboolean _contains(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID__contains();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getAverageSideLength() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getSize", "method_995", "getAverageSideLength", "m_82309_"), "()D");
    }

    static jdouble getAverageSideLength(const jobject& obj) {
                
       const auto methodID = methodID_getAverageSideLength();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_getLengthX() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getXsize", "method_17939", "getLengthX", "m_82362_"), "()D");
    }

    static jdouble getLengthX(const jobject& obj) {
                
       const auto methodID = methodID_getLengthX();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_getLengthY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getYsize", "method_17940", "getLengthY", "m_82376_"), "()D");
    }

    static jdouble getLengthY(const jobject& obj) {
                
       const auto methodID = methodID_getLengthY();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_getLengthZ() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getZsize", "method_17941", "getLengthZ", "m_82385_"), "()D");
    }

    static jdouble getLengthZ(const jobject& obj) {
                
       const auto methodID = methodID_getLengthZ();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_contract() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "deflate", "method_35580", "contract", "m_165897_"), "(DDD)Lewx;");
    }

    static jobject contract(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID_contract();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__contract() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "deflate", "method_1011", "contract", "m_82406_"), "(D)Lewx;");
    }

    static jobject _contract(const jobject& obj, const jdouble& arg0) {
                
       const auto methodID = methodID__contract();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_raycast() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "clip", "method_992", "raycast", "m_82371_"), "(Lexc;Lexc;)Ljava/util/Optional;");
    }

    static jobject raycast(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_raycast();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__raycast() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "clip", "method_1010", "raycast", "m_82342_"), "(Ljava/lang/Iterable;Lexc;Lexc;Ljd;)Lewy;");
    }

    static jobject _raycast(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
       const auto clazz = self();
       const auto methodID = methodID__raycast();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_traceCollisionSide() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getDirection", "method_1007", "traceCollisionSide", "m_82325_"), "(Lewx;Lexc;[DLji;DDD)Lji;");
    }

    static jobject traceCollisionSide(const jobject& arg0, const jobject& arg1, const jarray& arg2, const jdouble& arg3, const jobject& arg4, const jdouble& arg5, const jdouble& arg6, const jdouble& arg7) {
       const auto clazz = self();
       const auto methodID = methodID_traceCollisionSide();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    };
    
    static jmethodID methodID__traceCollisionSide() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "clipPoint", "method_998", "traceCollisionSide", "m_82347_"), "([DLji;DDDDDDDDLji;DDD)Lji;");
    }

    static jobject _traceCollisionSide(const jarray& arg0, const jdouble& arg1, const jobject& arg2, const jdouble& arg3, const jdouble& arg4, const jdouble& arg5, const jdouble& arg6, const jdouble& arg7, const jdouble& arg8, const jdouble& arg9, const jdouble& arg10, const jobject& arg11, const jdouble& arg12, const jdouble& arg13, const jdouble& arg14) {
       const auto clazz = self();
       const auto methodID = methodID__traceCollisionSide();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    };
    
    static jmethodID methodID_squaredMagnitude() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "distanceToSqr", "method_49271", "squaredMagnitude", "m_272282_"), "(Lexc;)D");
    }

    static jdouble squaredMagnitude(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_squaredMagnitude();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isNaN() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "hasNaN", "method_1013", "isNaN", "m_82392_"), "()Z");
    }

    static jboolean isNaN(const jobject& obj) {
                
       const auto methodID = methodID_isNaN();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getCenter() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "getCenter", "method_1005", "getCenter", "m_82399_"), "()Lexc;");
    }

    static jobject getCenter(const jobject& obj) {
                
       const auto methodID = methodID_getCenter();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getBottomCenter() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "getBottomCenter", "method_61124", "getBottomCenter", "m_339726_"), "()Lexc;");
    }

    static jobject getBottomCenter(const jobject& obj) {
                
       const auto methodID = methodID_getBottomCenter();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getMinPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "getMinPosition", "method_61125", "getMinPos", "m_340437_"), "()Lexc;");
    }

    static jobject getMinPos(const jobject& obj) {
                
       const auto methodID = methodID_getMinPos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getMaxPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "getMaxPosition", "method_61126", "getMaxPos", "m_340300_"), "()Lexc;");
    }

    static jobject getMaxPos(const jobject& obj) {
                
       const auto methodID = methodID_getMaxPos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_of() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "ofSize", "method_30048", "of", "m_165882_"), "(Lexc;DDD)Lewx;");
    }

    static jobject of(const jobject& arg0, const jdouble& arg1, const jdouble& arg2, const jdouble& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_of();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
};

#endif // NET_MINECRAFT_UTIL_MATH_BOX_HPP