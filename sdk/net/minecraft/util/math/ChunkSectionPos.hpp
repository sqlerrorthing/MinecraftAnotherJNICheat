// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_MATH_CHUNKSECTIONPOS_HPP
#define NET_MINECRAFT_UTIL_MATH_CHUNKSECTIONPOS_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.math.ChunkSectionPos
 * Remapped: kf
 */
namespace ChunkSectionPos {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("kf", "net/minecraft/core/SectionPos", "net/minecraft/class_4076", "net/minecraft/util/math/ChunkSectionPos", "net/minecraft/src/C_4710_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.util.math.ChunkSectionPos#field_33096
    [[maybe_unused]] static jint get_field_field_33096() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "SECTION_BITS", "field_33096", "field_33096", "f_175535_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.util.math.ChunkSectionPos#field_33096
    [[maybe_unused]] static void set_field_field_33096(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "SECTION_BITS", "field_33096", "field_33096", "f_175535_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.util.math.ChunkSectionPos#field_33097
    [[maybe_unused]] static jint get_field_field_33097() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "SECTION_SIZE", "field_33097", "field_33097", "f_175536_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.util.math.ChunkSectionPos#field_33097
    [[maybe_unused]] static void set_field_field_33097(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "SECTION_SIZE", "field_33097", "field_33097", "f_175536_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.util.math.ChunkSectionPos#field_33100
    [[maybe_unused]] static jint get_field_field_33100() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "SECTION_MASK", "field_33100", "field_33100", "f_175539_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.util.math.ChunkSectionPos#field_33100
    [[maybe_unused]] static void set_field_field_33100(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "SECTION_MASK", "field_33100", "field_33100", "f_175539_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.util.math.ChunkSectionPos#field_33098
    [[maybe_unused]] static jint get_field_field_33098() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "SECTION_HALF_SIZE", "field_33098", "field_33098", "f_175537_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.util.math.ChunkSectionPos#field_33098
    [[maybe_unused]] static void set_field_field_33098(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "SECTION_HALF_SIZE", "field_33098", "field_33098", "f_175537_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.util.math.ChunkSectionPos#field_33099
    [[maybe_unused]] static jint get_field_field_33099() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "SECTION_MAX_INDEX", "field_33099", "field_33099", "f_175538_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.util.math.ChunkSectionPos#field_33099
    [[maybe_unused]] static void set_field_field_33099(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "SECTION_MAX_INDEX", "field_33099", "field_33099", "f_175538_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.math.ChunkSectionPos#field_33101
    [[maybe_unused]] static jint get_field_field_33101() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "PACKED_X_LENGTH", "field_33101", "field_33101", "f_175540_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.ChunkSectionPos#field_33101
    [[maybe_unused]] static void set_field_field_33101(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "PACKED_X_LENGTH", "field_33101", "field_33101", "f_175540_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.math.ChunkSectionPos#field_33102
    [[maybe_unused]] static jint get_field_field_33102() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "PACKED_Y_LENGTH", "field_33102", "field_33102", "f_175541_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.ChunkSectionPos#field_33102
    [[maybe_unused]] static void set_field_field_33102(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "PACKED_Y_LENGTH", "field_33102", "field_33102", "f_175541_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.math.ChunkSectionPos#field_33103
    [[maybe_unused]] static jint get_field_field_33103() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "PACKED_Z_LENGTH", "field_33103", "field_33103", "f_175542_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.ChunkSectionPos#field_33103
    [[maybe_unused]] static void set_field_field_33103(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "PACKED_Z_LENGTH", "field_33103", "field_33103", "f_175542_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.math.ChunkSectionPos#field_33104
    [[maybe_unused]] static jlong get_field_field_33104() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "PACKED_X_MASK", "field_33104", "field_33104", "f_175543_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticLongField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.ChunkSectionPos#field_33104
    [[maybe_unused]] static void set_field_field_33104(const jlong &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "PACKED_X_MASK", "field_33104", "field_33104", "f_175543_"), "J");
        return MinecraftSDK::env->SetStaticLongField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.math.ChunkSectionPos#field_33105
    [[maybe_unused]] static jlong get_field_field_33105() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "PACKED_Y_MASK", "field_33105", "field_33105", "f_175544_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticLongField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.ChunkSectionPos#field_33105
    [[maybe_unused]] static void set_field_field_33105(const jlong &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "PACKED_Y_MASK", "field_33105", "field_33105", "f_175544_"), "J");
        return MinecraftSDK::env->SetStaticLongField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.math.ChunkSectionPos#field_33106
    [[maybe_unused]] static jlong get_field_field_33106() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "PACKED_Z_MASK", "field_33106", "field_33106", "f_175545_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticLongField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.ChunkSectionPos#field_33106
    [[maybe_unused]] static void set_field_field_33106(const jlong &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "PACKED_Z_MASK", "field_33106", "field_33106", "f_175545_"), "J");
        return MinecraftSDK::env->SetStaticLongField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.math.ChunkSectionPos#field_33107
    [[maybe_unused]] static jint get_field_field_33107() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "Y_OFFSET", "field_33107", "field_33107", "f_175546_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.ChunkSectionPos#field_33107
    [[maybe_unused]] static void set_field_field_33107(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "Y_OFFSET", "field_33107", "field_33107", "f_175546_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.math.ChunkSectionPos#field_33108
    [[maybe_unused]] static jint get_field_field_33108() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "Z_OFFSET", "field_33108", "field_33108", "f_175547_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.ChunkSectionPos#field_33108
    [[maybe_unused]] static void set_field_field_33108(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "Z_OFFSET", "field_33108", "field_33108", "f_175547_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.math.ChunkSectionPos#field_33109
    [[maybe_unused]] static jint get_field_field_33109() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("p", "X_OFFSET", "field_33109", "field_33109", "f_175548_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.ChunkSectionPos#field_33109
    [[maybe_unused]] static void set_field_field_33109(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("p", "X_OFFSET", "field_33109", "field_33109", "f_175548_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.math.ChunkSectionPos#field_33110
    [[maybe_unused]] static jint get_field_field_33110() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("q", "RELATIVE_X_SHIFT", "field_33110", "field_33110", "f_175549_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.ChunkSectionPos#field_33110
    [[maybe_unused]] static void set_field_field_33110(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("q", "RELATIVE_X_SHIFT", "field_33110", "field_33110", "f_175549_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.math.ChunkSectionPos#field_33111
    [[maybe_unused]] static jint get_field_field_33111() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("r", "RELATIVE_Y_SHIFT", "field_33111", "field_33111", "f_175550_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.ChunkSectionPos#field_33111
    [[maybe_unused]] static void set_field_field_33111(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("r", "RELATIVE_Y_SHIFT", "field_33111", "field_33111", "f_175550_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.math.ChunkSectionPos#field_33112
    [[maybe_unused]] static jint get_field_field_33112() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("s", "RELATIVE_Z_SHIFT", "field_33112", "field_33112", "f_175551_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.ChunkSectionPos#field_33112
    [[maybe_unused]] static void set_field_field_33112(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("s", "RELATIVE_Z_SHIFT", "field_33112", "field_33112", "f_175551_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    static jmethodID methodID_from() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "of", "method_18676", "from", "m_123173_"), "(III)Lkf;");
    }

    static jobject from(const jint& arg0, const jint& arg1, const jint& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_from();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__from() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "of", "method_18682", "from", "m_123199_"), "(Ljd;)Lkf;");
    }

    static jobject _from(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID__from();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID___from() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "of", "method_18681", "from", "m_123196_"), "(Ldcd;I)Lkf;");
    }

    static jobject __from(const jobject& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID___from();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID____from() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "of", "method_42614", "from", "m_235861_"), "(Ldxg;)Lkf;");
    }

    static jobject ___from(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID____from();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_____from() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "of", "method_18680", "from", "m_235863_"), "(Ljw;)Lkf;");
    }

    static jobject ____from(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_____from();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID______from() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "of", "method_18677", "from", "m_123184_"), "(J)Lkf;");
    }

    static jobject _____from(const jlong& arg0) {
       const auto clazz = self();
       const auto methodID = methodID______from();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_______from() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "bottomOf", "method_33705", "from", "m_175562_"), "(Lduy;)Lkf;");
    }

    static jobject ______from(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_______from();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_offset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "offset", "method_18679", "offset", "m_123191_"), "(JLji;)J");
    }

    static jlong offset(const jlong& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_offset();
       return MinecraftSDK::env->CallStaticLongMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__offset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "offset", "method_18678", "offset", "m_123186_"), "(JIII)J");
    }

    static jlong _offset(const jlong& arg0, const jint& arg1, const jint& arg2, const jint& arg3) {
       const auto clazz = self();
       const auto methodID = methodID__offset();
       return MinecraftSDK::env->CallStaticLongMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_getSectionCoord() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "posToSectionCoord", "method_32204", "getSectionCoord", "m_175552_"), "(D)I");
    }

    static jint getSectionCoord(const jdouble& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getSectionCoord();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID__getSectionCoord() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "blockToSectionCoord", "method_18675", "getSectionCoord", "m_123171_"), "(I)I");
    }

    static jint _getSectionCoord(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID__getSectionCoord();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getSectionCoordFloored() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "blockToSectionCoord", "method_42615", "getSectionCoordFloored", "m_235865_"), "(D)I");
    }

    static jint getSectionCoordFloored(const jdouble& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getSectionCoordFloored();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getLocalCoord() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "sectionRelative", "method_18684", "getLocalCoord", "m_123207_"), "(I)I");
    }

    static jint getLocalCoord(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getLocalCoord();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_packLocal() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "sectionRelativePos", "method_19454", "packLocal", "m_123218_"), "(Ljd;)S");
    }

    static jshort packLocal(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_packLocal();
       return MinecraftSDK::env->CallStaticShortMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_unpackLocalX() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "sectionRelativeX", "method_30551", "unpackLocalX", "m_123204_"), "(S)I");
    }

    static jint unpackLocalX(const jshort& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_unpackLocalX();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_unpackLocalY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "sectionRelativeY", "method_30552", "unpackLocalY", "m_123220_"), "(S)I");
    }

    static jint unpackLocalY(const jshort& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_unpackLocalY();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_unpackLocalZ() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "sectionRelativeZ", "method_30553", "unpackLocalZ", "m_123227_"), "(S)I");
    }

    static jint unpackLocalZ(const jshort& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_unpackLocalZ();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_unpackBlockX() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "relativeToBlockX", "method_30554", "unpackBlockX", "m_123232_"), "(S)I");
    }

    static jint unpackBlockX(const jobject& obj, const jshort& arg0) {
                
       const auto methodID = methodID_unpackBlockX();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_unpackBlockY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "relativeToBlockY", "method_30555", "unpackBlockY", "m_123237_"), "(S)I");
    }

    static jint unpackBlockY(const jobject& obj, const jshort& arg0) {
                
       const auto methodID = methodID_unpackBlockY();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_unpackBlockZ() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "relativeToBlockZ", "method_30556", "unpackBlockZ", "m_123242_"), "(S)I");
    }

    static jint unpackBlockZ(const jobject& obj, const jshort& arg0) {
                
       const auto methodID = methodID_unpackBlockZ();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_unpackBlockPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "relativeToBlockPos", "method_30557", "unpackBlockPos", "m_123245_"), "(S)Ljd;");
    }

    static jobject unpackBlockPos(const jobject& obj, const jshort& arg0) {
                
       const auto methodID = methodID_unpackBlockPos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getBlockCoord() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "sectionToBlockCoord", "method_18688", "getBlockCoord", "m_123223_"), "(I)I");
    }

    static jint getBlockCoord(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getBlockCoord();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getOffsetPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "sectionToBlockCoord", "method_32205", "getOffsetPos", "m_175554_"), "(II)I");
    }

    static jint getOffsetPos(const jint& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_getOffsetPos();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_unpackX() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "x", "method_18686", "unpackX", "m_123213_"), "(J)I");
    }

    static jint unpackX(const jlong& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_unpackX();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_unpackY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "y", "method_18689", "unpackY", "m_123225_"), "(J)I");
    }

    static jint unpackY(const jlong& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_unpackY();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_unpackZ() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("d", "z", "method_18690", "unpackZ", "m_123230_"), "(J)I");
    }

    static jint unpackZ(const jlong& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_unpackZ();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getSectionX() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "x", "method_18674", "getSectionX", "m_123170_"), "()I");
    }

    static jint getSectionX(const jobject& obj) {
                
       const auto methodID = methodID_getSectionX();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getSectionY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "y", "method_18683", "getSectionY", "m_123206_"), "()I");
    }

    static jint getSectionY(const jobject& obj) {
                
       const auto methodID = methodID_getSectionY();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getSectionZ() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "z", "method_18687", "getSectionZ", "m_123222_"), "()I");
    }

    static jint getSectionZ(const jobject& obj) {
                
       const auto methodID = methodID_getSectionZ();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getMinX() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "minBlockX", "method_19527", "getMinX", "m_123229_"), "()I");
    }

    static jint getMinX(const jobject& obj) {
                
       const auto methodID = methodID_getMinX();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getMinY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "minBlockY", "method_19528", "getMinY", "m_123234_"), "()I");
    }

    static jint getMinY(const jobject& obj) {
                
       const auto methodID = methodID_getMinY();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getMinZ() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "minBlockZ", "method_19529", "getMinZ", "m_123239_"), "()I");
    }

    static jint getMinZ(const jobject& obj) {
                
       const auto methodID = methodID_getMinZ();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getMaxX() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "maxBlockX", "method_19530", "getMaxX", "m_123244_"), "()I");
    }

    static jint getMaxX(const jobject& obj) {
                
       const auto methodID = methodID_getMaxX();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getMaxY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "maxBlockY", "method_19531", "getMaxY", "m_123247_"), "()I");
    }

    static jint getMaxY(const jobject& obj) {
                
       const auto methodID = methodID_getMaxY();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getMaxZ() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "maxBlockZ", "method_19532", "getMaxZ", "m_123248_"), "()I");
    }

    static jint getMaxZ(const jobject& obj) {
                
       const auto methodID = methodID_getMaxZ();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_fromBlockPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("e", "blockToSection", "method_18691", "fromBlockPos", "m_123235_"), "(J)J");
    }

    static jlong fromBlockPos(const jlong& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_fromBlockPos();
       return MinecraftSDK::env->CallStaticLongMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_withZeroY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "getZeroNode", "method_51687", "withZeroY", "m_284454_"), "(II)J");
    }

    static jlong withZeroY(const jint& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_withZeroY();
       return MinecraftSDK::env->CallStaticLongMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__withZeroY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("f", "getZeroNode", "method_18693", "withZeroY", "m_123240_"), "(J)J");
    }

    static jlong _withZeroY(const jlong& arg0) {
       const auto clazz = self();
       const auto methodID = methodID__withZeroY();
       return MinecraftSDK::env->CallStaticLongMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getMinPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "origin", "method_19767", "getMinPos", "m_123249_"), "()Ljd;");
    }

    static jobject getMinPos(const jobject& obj) {
                
       const auto methodID = methodID_getMinPos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getCenterPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "center", "method_19768", "getCenterPos", "m_123250_"), "()Ljd;");
    }

    static jobject getCenterPos(const jobject& obj) {
                
       const auto methodID = methodID_getCenterPos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_toChunkPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("r", "chunk", "method_18692", "toChunkPos", "m_123251_"), "()Ldcd;");
    }

    static jobject toChunkPos(const jobject& obj) {
                
       const auto methodID = methodID_toChunkPos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_toLong() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "asLong", "method_33706", "toLong", "m_175568_"), "(Ljd;)J");
    }

    static jlong toLong(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_toLong();
       return MinecraftSDK::env->CallStaticLongMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_asLong() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "asLong", "method_18685", "asLong", "m_123209_"), "(III)J");
    }

    static jlong asLong(const jint& arg0, const jint& arg1, const jint& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_asLong();
       return MinecraftSDK::env->CallStaticLongMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__asLong() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("s", "asLong", "method_18694", "asLong", "m_123252_"), "()J");
    }

    static jlong _asLong(const jobject& obj) {
                
       const auto methodID = methodID__asLong();
       return MinecraftSDK::env->CallLongMethod(obj, methodID);
    };
    
    static jmethodID methodID_add() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "offset", "method_34591", "add", "m_7918_"), "(III)Lkf;");
    }

    static jobject add(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_add();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_streamBlocks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("t", "blocksInside", "method_19533", "streamBlocks", "m_123253_"), "()Ljava/util/stream/Stream;");
    }

    static jobject streamBlocks(const jobject& obj) {
                
       const auto methodID = methodID_streamBlocks();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_stream() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "cube", "method_20439", "stream", "m_123201_"), "(Lkf;I)Ljava/util/stream/Stream;");
    }

    static jobject stream(const jobject& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_stream();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__stream() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "aroundChunk", "method_22446", "stream", "m_175557_"), "(Ldcd;III)Ljava/util/stream/Stream;");
    }

    static jobject _stream(const jobject& arg0, const jint& arg1, const jint& arg2, const jint& arg3) {
       const auto clazz = self();
       const auto methodID = methodID__stream();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID___stream() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "betweenClosedStream", "method_20438", "stream", "m_123177_"), "(IIIIII)Ljava/util/stream/Stream;");
    }

    static jobject __stream(const jint& arg0, const jint& arg1, const jint& arg2, const jint& arg3, const jint& arg4, const jint& arg5) {
       const auto clazz = self();
       const auto methodID = methodID___stream();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
    static jmethodID methodID_forEachChunkSectionAround() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "aroundAndAtBlockPos", "method_39491", "forEachChunkSectionAround", "m_194642_"), "(Ljd;Lit/unimi/dsi/fastutil/longs/LongConsumer;)V");
    }

    static void forEachChunkSectionAround(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_forEachChunkSectionAround();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__forEachChunkSectionAround() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "aroundAndAtBlockPos", "method_39490", "forEachChunkSectionAround", "m_194639_"), "(JLit/unimi/dsi/fastutil/longs/LongConsumer;)V");
    }

    static void _forEachChunkSectionAround(const jlong& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID__forEachChunkSectionAround();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID___forEachChunkSectionAround() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "aroundAndAtBlockPos", "method_39489", "forEachChunkSectionAround", "m_194634_"), "(IIILit/unimi/dsi/fastutil/longs/LongConsumer;)V");
    }

    static void __forEachChunkSectionAround(const jint& arg0, const jint& arg1, const jint& arg2, const jobject& arg3) {
       const auto clazz = self();
       const auto methodID = methodID___forEachChunkSectionAround();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
};

#endif // NET_MINECRAFT_UTIL_MATH_CHUNKSECTIONPOS_HPP