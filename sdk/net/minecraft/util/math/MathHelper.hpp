// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_MATH_MATHHELPER_HPP
#define NET_MINECRAFT_UTIL_MATH_MATHHELPER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.math.MathHelper
 * Remapped: ayo
 */
namespace MathHelper {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("ayo", "net/minecraft/util/Mth", "net/minecraft/class_3532", "net/minecraft/util/math/MathHelper", "net/minecraft/src/C_188_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.util.math.MathHelper#field_29852
    [[maybe_unused]] static jlong get_field_field_29852() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "UUID_VERSION", "field_29852", "field_29852", "f_144838_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticLongField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.MathHelper#field_29852
    [[maybe_unused]] static void set_field_field_29852(const jlong &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "UUID_VERSION", "field_29852", "field_29852", "f_144838_"), "J");
        return MinecraftSDK::env->SetStaticLongField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.math.MathHelper#HALF_PI_RADIANS_SINE_TABLE_INDEX
    [[maybe_unused]] static jlong get_field_HALF_PI_RADIANS_SINE_TABLE_INDEX() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "UUID_VERSION_TYPE_4", "field_29853", "HALF_PI_RADIANS_SINE_TABLE_INDEX", "f_144839_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticLongField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.MathHelper#HALF_PI_RADIANS_SINE_TABLE_INDEX
    [[maybe_unused]] static void set_field_HALF_PI_RADIANS_SINE_TABLE_INDEX(const jlong &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "UUID_VERSION_TYPE_4", "field_29853", "HALF_PI_RADIANS_SINE_TABLE_INDEX", "f_144839_"), "J");
        return MinecraftSDK::env->SetStaticLongField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.math.MathHelper#field_29854
    [[maybe_unused]] static jlong get_field_field_29854() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "UUID_VARIANT", "field_29854", "field_29854", "f_144840_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticLongField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.MathHelper#field_29854
    [[maybe_unused]] static void set_field_field_29854(const jlong &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "UUID_VARIANT", "field_29854", "field_29854", "f_144840_"), "J");
        return MinecraftSDK::env->SetStaticLongField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.math.MathHelper#field_29855
    [[maybe_unused]] static jlong get_field_field_29855() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "UUID_VARIANT_2", "field_29855", "field_29855", "f_144841_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticLongField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.MathHelper#field_29855
    [[maybe_unused]] static void set_field_field_29855(const jlong &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "UUID_VARIANT_2", "field_29855", "field_29855", "f_144841_"), "J");
        return MinecraftSDK::env->SetStaticLongField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.util.math.MathHelper#PI
    [[maybe_unused]] static jfloat get_field_PI() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "PI", "field_29844", "PI", "f_144830_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.util.math.MathHelper#PI
    [[maybe_unused]] static void set_field_PI(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "PI", "field_29844", "PI", "f_144830_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.util.math.MathHelper#HALF_PI
    [[maybe_unused]] static jfloat get_field_HALF_PI() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "HALF_PI", "field_29845", "HALF_PI", "f_144831_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.util.math.MathHelper#HALF_PI
    [[maybe_unused]] static void set_field_HALF_PI(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "HALF_PI", "field_29845", "HALF_PI", "f_144831_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.util.math.MathHelper#TAU
    [[maybe_unused]] static jfloat get_field_TAU() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "TWO_PI", "field_29846", "TAU", "f_144832_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.util.math.MathHelper#TAU
    [[maybe_unused]] static void set_field_TAU(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "TWO_PI", "field_29846", "TAU", "f_144832_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.util.math.MathHelper#RADIANS_PER_DEGREE
    [[maybe_unused]] static jfloat get_field_RADIANS_PER_DEGREE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "DEG_TO_RAD", "field_29847", "RADIANS_PER_DEGREE", "f_144833_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.util.math.MathHelper#RADIANS_PER_DEGREE
    [[maybe_unused]] static void set_field_RADIANS_PER_DEGREE(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "DEG_TO_RAD", "field_29847", "RADIANS_PER_DEGREE", "f_144833_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.util.math.MathHelper#DEGREES_PER_RADIAN
    [[maybe_unused]] static jfloat get_field_DEGREES_PER_RADIAN() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "RAD_TO_DEG", "field_29848", "DEGREES_PER_RADIAN", "f_144834_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.util.math.MathHelper#DEGREES_PER_RADIAN
    [[maybe_unused]] static void set_field_DEGREES_PER_RADIAN(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "RAD_TO_DEG", "field_29848", "DEGREES_PER_RADIAN", "f_144834_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.util.math.MathHelper#EPSILON
    [[maybe_unused]] static jfloat get_field_EPSILON() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "EPSILON", "field_29849", "EPSILON", "f_144835_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.util.math.MathHelper#EPSILON
    [[maybe_unused]] static void set_field_EPSILON(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "EPSILON", "field_29849", "EPSILON", "f_144835_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.util.math.MathHelper#SQUARE_ROOT_OF_TWO
    [[maybe_unused]] static jfloat get_field_SQUARE_ROOT_OF_TWO() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "SQRT_OF_TWO", "field_15724", "SQUARE_ROOT_OF_TWO", "f_13994_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.util.math.MathHelper#SQUARE_ROOT_OF_TWO
    [[maybe_unused]] static void set_field_SQUARE_ROOT_OF_TWO(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "SQRT_OF_TWO", "field_15724", "SQUARE_ROOT_OF_TWO", "f_13994_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.math.MathHelper#DEGREES_TO_SINE_TABLE_INDEX
    [[maybe_unused]] static jfloat get_field_DEGREES_TO_SINE_TABLE_INDEX() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "SIN_SCALE", "field_29856", "DEGREES_TO_SINE_TABLE_INDEX", "f_144842_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.MathHelper#DEGREES_TO_SINE_TABLE_INDEX
    [[maybe_unused]] static void set_field_DEGREES_TO_SINE_TABLE_INDEX(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "SIN_SCALE", "field_29856", "DEGREES_TO_SINE_TABLE_INDEX", "f_144842_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.util.math.MathHelper#Y_AXIS
    [[maybe_unused]] static jobject get_field_Y_AXIS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "Y_AXIS", "field_46242", "Y_AXIS", "f_303648_"), "Lorg/joml/Vector3f;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.util.math.MathHelper#Y_AXIS
    [[maybe_unused]] static void set_field_Y_AXIS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "Y_AXIS", "field_46242", "Y_AXIS", "f_303648_"), "Lorg/joml/Vector3f;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.util.math.MathHelper#X_AXIS
    [[maybe_unused]] static jobject get_field_X_AXIS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "X_AXIS", "field_46243", "X_AXIS", "f_302939_"), "Lorg/joml/Vector3f;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.util.math.MathHelper#X_AXIS
    [[maybe_unused]] static void set_field_X_AXIS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "X_AXIS", "field_46243", "X_AXIS", "f_302939_"), "Lorg/joml/Vector3f;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.util.math.MathHelper#Z_AXIS
    [[maybe_unused]] static jobject get_field_Z_AXIS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "Z_AXIS", "field_46244", "Z_AXIS", "f_302844_"), "Lorg/joml/Vector3f;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.util.math.MathHelper#Z_AXIS
    [[maybe_unused]] static void set_field_Z_AXIS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "Z_AXIS", "field_46244", "Z_AXIS", "f_302844_"), "Lorg/joml/Vector3f;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.math.MathHelper#SINE_TABLE
    [[maybe_unused]] static jfloat get_field_SINE_TABLE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("p", "SIN", "field_15725", "SINE_TABLE", "f_13995_"), "[F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.MathHelper#SINE_TABLE
    [[maybe_unused]] static void set_field_SINE_TABLE(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("p", "SIN", "field_15725", "SINE_TABLE", "f_13995_"), "[F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.math.MathHelper#RANDOM
    [[maybe_unused]] static jobject get_field_RANDOM() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("q", "RANDOM", "field_15726", "RANDOM", "f_13996_"), "Layw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.MathHelper#RANDOM
    [[maybe_unused]] static void set_field_RANDOM(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("q", "RANDOM", "field_15726", "RANDOM", "f_13996_"), "Layw;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.math.MathHelper#MULTIPLY_DE_BRUIJN_BIT_POSITION
    [[maybe_unused]] static jint get_field_MULTIPLY_DE_BRUIJN_BIT_POSITION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("r", "MULTIPLY_DE_BRUIJN_BIT_POSITION", "field_15723", "MULTIPLY_DE_BRUIJN_BIT_POSITION", "f_13997_"), "[I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.MathHelper#MULTIPLY_DE_BRUIJN_BIT_POSITION
    [[maybe_unused]] static void set_field_MULTIPLY_DE_BRUIJN_BIT_POSITION(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("r", "MULTIPLY_DE_BRUIJN_BIT_POSITION", "field_15723", "MULTIPLY_DE_BRUIJN_BIT_POSITION", "f_13997_"), "[I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.math.MathHelper#ARCSINE_MACLAURIN_3
    [[maybe_unused]] static jdouble get_field_ARCSINE_MACLAURIN_3() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("s", "ONE_SIXTH", "field_29857", "ARCSINE_MACLAURIN_3", "f_144843_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.MathHelper#ARCSINE_MACLAURIN_3
    [[maybe_unused]] static void set_field_ARCSINE_MACLAURIN_3(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("s", "ONE_SIXTH", "field_29857", "ARCSINE_MACLAURIN_3", "f_144843_"), "D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.math.MathHelper#field_29858
    [[maybe_unused]] static jint get_field_field_29858() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("t", "FRAC_EXP", "field_29858", "field_29858", "f_144844_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.MathHelper#field_29858
    [[maybe_unused]] static void set_field_field_29858(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("t", "FRAC_EXP", "field_29858", "field_29858", "f_144844_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.math.MathHelper#ARCSINE_TABLE_LENGTH
    [[maybe_unused]] static jint get_field_ARCSINE_TABLE_LENGTH() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("u", "LUT_SIZE", "field_29859", "ARCSINE_TABLE_LENGTH", "f_144845_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.MathHelper#ARCSINE_TABLE_LENGTH
    [[maybe_unused]] static void set_field_ARCSINE_TABLE_LENGTH(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("u", "LUT_SIZE", "field_29859", "ARCSINE_TABLE_LENGTH", "f_144845_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.math.MathHelper#ROUNDER_256THS
    [[maybe_unused]] static jdouble get_field_ROUNDER_256THS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("v", "FRAC_BIAS", "field_15728", "ROUNDER_256THS", "f_13998_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.MathHelper#ROUNDER_256THS
    [[maybe_unused]] static void set_field_ROUNDER_256THS(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("v", "FRAC_BIAS", "field_15728", "ROUNDER_256THS", "f_13998_"), "D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.math.MathHelper#ARCSINE_TABLE
    [[maybe_unused]] static jdouble get_field_ARCSINE_TABLE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("w", "ASIN_TAB", "field_15727", "ARCSINE_TABLE", "f_13999_"), "[D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.MathHelper#ARCSINE_TABLE
    [[maybe_unused]] static void set_field_ARCSINE_TABLE(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("w", "ASIN_TAB", "field_15727", "ARCSINE_TABLE", "f_13999_"), "[D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.math.MathHelper#COSINE_OF_ARCSINE_TABLE
    [[maybe_unused]] static jdouble get_field_COSINE_OF_ARCSINE_TABLE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("x", "COS_TAB", "field_15722", "COSINE_OF_ARCSINE_TABLE", "f_14000_"), "[D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.math.MathHelper#COSINE_OF_ARCSINE_TABLE
    [[maybe_unused]] static void set_field_COSINE_OF_ARCSINE_TABLE(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("x", "COS_TAB", "field_15722", "COSINE_OF_ARCSINE_TABLE", "f_14000_"), "[D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    static jmethodID methodID_sin() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "sin", "method_15374", "sin", "m_14031_"), "(F)F");
    }

    static jfloat sin(const jfloat& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_sin();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_cos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "cos", "method_15362", "cos", "m_14089_"), "(F)F");
    }

    static jfloat cos(const jfloat& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_cos();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_sqrt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "sqrt", "method_15355", "sqrt", "m_14116_"), "(F)F");
    }

    static jfloat sqrt(const jfloat& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_sqrt();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_floor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("d", "floor", "method_15375", "floor", "m_14143_"), "(F)I");
    }

    static jint floor(const jfloat& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_floor();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID__floor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "floor", "method_15357", "floor", "m_14107_"), "(D)I");
    }

    static jint _floor(const jdouble& arg0) {
       const auto clazz = self();
       const auto methodID = methodID__floor();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_lfloor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "lfloor", "method_15372", "lfloor", "m_14134_"), "(D)J");
    }

    static jlong lfloor(const jdouble& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_lfloor();
       return MinecraftSDK::env->CallStaticLongMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_abs() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("e", "abs", "method_15379", "abs", "m_14154_"), "(F)F");
    }

    static jfloat abs(const jfloat& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_abs();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID__abs() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "abs", "method_15382", "abs", "m_14040_"), "(I)I");
    }

    static jint _abs(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID__abs();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_ceil() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("f", "ceil", "method_15386", "ceil", "m_14167_"), "(F)I");
    }

    static jint ceil(const jfloat& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_ceil();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID__ceil() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "ceil", "method_15384", "ceil", "m_14165_"), "(D)I");
    }

    static jint _ceil(const jdouble& arg0) {
       const auto clazz = self();
       const auto methodID = methodID__ceil();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_clamp() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "clamp", "method_15340", "clamp", "m_14045_"), "(III)I");
    }

    static jint clamp(const jint& arg0, const jint& arg1, const jint& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_clamp();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__clamp() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "clamp", "method_53062", "clamp", "m_295574_"), "(JJJ)J");
    }

    static jlong _clamp(const jlong& arg0, const jlong& arg1, const jlong& arg2) {
       const auto clazz = self();
       const auto methodID = methodID__clamp();
       return MinecraftSDK::env->CallStaticLongMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID___clamp() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "clamp", "method_15363", "clamp", "m_14036_"), "(FFF)F");
    }

    static jfloat __clamp(const jfloat& arg0, const jfloat& arg1, const jfloat& arg2) {
       const auto clazz = self();
       const auto methodID = methodID___clamp();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID____clamp() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "clamp", "method_15350", "clamp", "m_14008_"), "(DDD)D");
    }

    static jdouble ___clamp(const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
       const auto clazz = self();
       const auto methodID = methodID____clamp();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_clampedLerp() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "clampedLerp", "method_15390", "clampedLerp", "m_14085_"), "(DDD)D");
    }

    static jdouble clampedLerp(const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_clampedLerp();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__clampedLerp() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "clampedLerp", "method_37166", "clampedLerp", "m_144920_"), "(FFF)F");
    }

    static jfloat _clampedLerp(const jfloat& arg0, const jfloat& arg1, const jfloat& arg2) {
       const auto clazz = self();
       const auto methodID = methodID__clampedLerp();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_absMax() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "absMax", "method_15391", "absMax", "m_14005_"), "(DD)D");
    }

    static jdouble absMax(const jdouble& arg0, const jdouble& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_absMax();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_floorDiv() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "floorDiv", "method_48116", "floorDiv", "m_14042_"), "(II)I");
    }

    static jint floorDiv(const jint& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_floorDiv();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_nextInt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "nextInt", "method_15395", "nextInt", "m_216271_"), "(Layw;II)I");
    }

    static jint nextInt(const jobject& arg0, const jint& arg1, const jint& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_nextInt();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_nextFloat() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "nextFloat", "method_15344", "nextFloat", "m_216267_"), "(Layw;FF)F");
    }

    static jfloat nextFloat(const jobject& arg0, const jfloat& arg1, const jfloat& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_nextFloat();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_nextDouble() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "nextDouble", "method_15366", "nextDouble", "m_216263_"), "(Layw;DD)D");
    }

    static jdouble nextDouble(const jobject& arg0, const jdouble& arg1, const jdouble& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_nextDouble();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_approximatelyEquals() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "equal", "method_15347", "approximatelyEquals", "m_14033_"), "(FF)Z");
    }

    static jboolean approximatelyEquals(const jfloat& arg0, const jfloat& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_approximatelyEquals();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__approximatelyEquals() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "equal", "method_20390", "approximatelyEquals", "m_14082_"), "(DD)Z");
    }

    static jboolean _approximatelyEquals(const jdouble& arg0, const jdouble& arg1) {
       const auto clazz = self();
       const auto methodID = methodID__approximatelyEquals();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_floorMod() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "positiveModulo", "method_15387", "floorMod", "m_14100_"), "(II)I");
    }

    static jint floorMod(const jint& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_floorMod();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__floorMod() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "positiveModulo", "method_15341", "floorMod", "m_14091_"), "(FF)F");
    }

    static jfloat _floorMod(const jfloat& arg0, const jfloat& arg1) {
       const auto clazz = self();
       const auto methodID = methodID__floorMod();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID___floorMod() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "positiveModulo", "method_15367", "floorMod", "m_14109_"), "(DD)D");
    }

    static jdouble __floorMod(const jdouble& arg0, const jdouble& arg1) {
       const auto clazz = self();
       const auto methodID = methodID___floorMod();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isMultipleOf() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "isMultipleOf", "method_48117", "isMultipleOf", "m_264612_"), "(II)Z");
    }

    static jboolean isMultipleOf(const jint& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_isMultipleOf();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_wrapDegrees() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "wrapDegrees", "method_15392", "wrapDegrees", "m_14098_"), "(I)I");
    }

    static jint wrapDegrees(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_wrapDegrees();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID__wrapDegrees() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("g", "wrapDegrees", "method_15393", "wrapDegrees", "m_14177_"), "(F)F");
    }

    static jfloat _wrapDegrees(const jfloat& arg0) {
       const auto clazz = self();
       const auto methodID = methodID__wrapDegrees();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID___wrapDegrees() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("d", "wrapDegrees", "method_15338", "wrapDegrees", "m_14175_"), "(D)D");
    }

    static jdouble __wrapDegrees(const jdouble& arg0) {
       const auto clazz = self();
       const auto methodID = methodID___wrapDegrees();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_subtractAngles() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "degreesDifference", "method_15381", "subtractAngles", "m_14118_"), "(FF)F");
    }

    static jfloat subtractAngles(const jfloat& arg0, const jfloat& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_subtractAngles();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_angleBetween() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("d", "degreesDifferenceAbs", "method_15356", "angleBetween", "m_14145_"), "(FF)F");
    }

    static jfloat angleBetween(const jfloat& arg0, const jfloat& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_angleBetween();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_clampAngle() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "rotateIfNecessary", "method_20306", "clampAngle", "m_14094_"), "(FFF)F");
    }

    static jfloat clampAngle(const jfloat& arg0, const jfloat& arg1, const jfloat& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_clampAngle();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_stepTowards() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("d", "approach", "method_15348", "stepTowards", "m_14121_"), "(FFF)F");
    }

    static jfloat stepTowards(const jfloat& arg0, const jfloat& arg1, const jfloat& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_stepTowards();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_stepUnwrappedAngleTowards() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("e", "approachDegrees", "method_15388", "stepUnwrappedAngleTowards", "m_14148_"), "(FFF)F");
    }

    static jfloat stepUnwrappedAngleTowards(const jfloat& arg0, const jfloat& arg1, const jfloat& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_stepUnwrappedAngleTowards();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_parseInt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getInt", "method_15343", "parseInt", "m_14059_"), "(Ljava/lang/String;I)I");
    }

    static jint parseInt(const jobject& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_parseInt();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_smallestEncompassingPowerOfTwo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "smallestEncompassingPowerOfTwo", "method_15339", "smallestEncompassingPowerOfTwo", "m_14125_"), "(I)I");
    }

    static jint smallestEncompassingPowerOfTwo(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_smallestEncompassingPowerOfTwo();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_isPowerOfTwo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("d", "isPowerOfTwo", "method_15352", "isPowerOfTwo", "m_14152_"), "(I)Z");
    }

    static jboolean isPowerOfTwo(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_isPowerOfTwo();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_ceilLog2() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("e", "ceillog2", "method_15342", "ceilLog2", "m_14163_"), "(I)I");
    }

    static jint ceilLog2(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_ceilLog2();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_floorLog2() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("f", "log2", "method_15351", "floorLog2", "m_14173_"), "(I)I");
    }

    static jint floorLog2(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_floorLog2();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_packRgb() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("f", "color", "method_15353", "packRgb", "m_14159_"), "(FFF)I");
    }

    static jint packRgb(const jfloat& arg0, const jfloat& arg1, const jfloat& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_packRgb();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_fractionalPart() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("h", "frac", "method_22450", "fractionalPart", "m_14187_"), "(F)F");
    }

    static jfloat fractionalPart(const jfloat& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_fractionalPart();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID__fractionalPart() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("e", "frac", "method_15385", "fractionalPart", "m_14185_"), "(D)D");
    }

    static jdouble _fractionalPart(const jdouble& arg0) {
       const auto clazz = self();
       const auto methodID = methodID__fractionalPart();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_hashCode() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getSeed", "method_15389", "hashCode", "m_14057_"), "(Lkh;)J");
    }

    static jlong hashCode(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_hashCode();
       return MinecraftSDK::env->CallStaticLongMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID__hashCode() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "getSeed", "method_15371", "hashCode", "m_14130_"), "(III)J");
    }

    static jlong _hashCode(const jint& arg0, const jint& arg1, const jint& arg2) {
       const auto clazz = self();
       const auto methodID = methodID__hashCode();
       return MinecraftSDK::env->CallStaticLongMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_randomUuid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "createInsecureUUID", "method_15378", "randomUuid", "m_216261_"), "(Layw;)Ljava/util/UUID;");
    }

    static jobject randomUuid(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_randomUuid();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID__randomUuid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "createInsecureUUID", "method_15394", "randomUuid", "m_14002_"), "()Ljava/util/UUID;");
    }

    static jobject _randomUuid() {
       const auto clazz = self();
       const auto methodID = methodID__randomUuid();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_getLerpProgress() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "inverseLerp", "method_15370", "getLerpProgress", "m_14112_"), "(DDD)D");
    }

    static jdouble getLerpProgress(const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_getLerpProgress();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__getLerpProgress() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("g", "inverseLerp", "method_37960", "getLerpProgress", "m_184655_"), "(FFF)F");
    }

    static jfloat _getLerpProgress(const jfloat& arg0, const jfloat& arg1, const jfloat& arg2) {
       const auto clazz = self();
       const auto methodID = methodID__getLerpProgress();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_method_34945() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "rayIntersectsAABB", "method_34945", "method_34945", "m_144888_"), "(Lexc;Lexc;Lewx;)Z");
    }

    static jboolean method_34945(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_method_34945();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_atan2() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("d", "atan2", "method_15349", "atan2", "m_14136_"), "(DD)D");
    }

    static jdouble atan2(const jdouble& arg0, const jdouble& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_atan2();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_inverseSqrt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("i", "invSqrt", "method_48119", "inverseSqrt", "m_264536_"), "(F)F");
    }

    static jfloat inverseSqrt(const jfloat& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_inverseSqrt();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID__inverseSqrt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("f", "invSqrt", "method_48118", "inverseSqrt", "m_264555_"), "(D)D");
    }

    static jdouble _inverseSqrt(const jdouble& arg0) {
       const auto clazz = self();
       const auto methodID = methodID__inverseSqrt();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_fastInverseSqrt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("g", "fastInvSqrt", "method_15345", "fastInverseSqrt", "m_14193_"), "(D)D");
    }

    static jdouble fastInverseSqrt(const jdouble& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_fastInverseSqrt();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_fastInverseCbrt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("j", "fastInvCubeRoot", "method_23278", "fastInverseCbrt", "m_14199_"), "(F)F");
    }

    static jfloat fastInverseCbrt(const jfloat& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_fastInverseCbrt();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_hsvToRgb() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("h", "hsvToRgb", "method_15369", "hsvToRgb", "m_14169_"), "(FFF)I");
    }

    static jint hsvToRgb(const jfloat& arg0, const jfloat& arg1, const jfloat& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_hsvToRgb();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_hsvToArgb() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "hsvToArgb", "method_60599", "hsvToArgb", "m_339996_"), "(FFFI)I");
    }

    static jint hsvToArgb(const jfloat& arg0, const jfloat& arg1, const jfloat& arg2, const jint& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_hsvToArgb();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_idealHash() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("g", "murmurHash3Mixer", "method_15354", "idealHash", "m_14183_"), "(I)I");
    }

    static jint idealHash(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_idealHash();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_binarySearch() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "binarySearch", "method_15360", "binarySearch", "m_14049_"), "(IILjava/util/function/IntPredicate;)I");
    }

    static jint binarySearch(const jint& arg0, const jint& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_binarySearch();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_lerp() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "lerpInt", "method_48781", "lerp", "m_269140_"), "(FII)I");
    }

    static jint lerp(const jfloat& arg0, const jint& arg1, const jint& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_lerp();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_lerpPositive() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "lerpDiscrete", "method_53063", "lerpPositive", "m_295919_"), "(FII)I");
    }

    static jint lerpPositive(const jfloat& arg0, const jint& arg1, const jint& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_lerpPositive();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__lerp() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("i", "lerp", "method_16439", "lerp", "m_14179_"), "(FFF)F");
    }

    static jfloat _lerp(const jfloat& arg0, const jfloat& arg1, const jfloat& arg2) {
       const auto clazz = self();
       const auto methodID = methodID__lerp();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID___lerp() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("d", "lerp", "method_16436", "lerp", "m_14139_"), "(DDD)D");
    }

    static jdouble __lerp(const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
       const auto clazz = self();
       const auto methodID = methodID___lerp();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_lerp2() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "lerp2", "method_16437", "lerp2", "m_14012_"), "(DDDDDD)D");
    }

    static jdouble lerp2(const jdouble& arg0, const jdouble& arg1, const jdouble& arg2, const jdouble& arg3, const jdouble& arg4, const jdouble& arg5) {
       const auto clazz = self();
       const auto methodID = methodID_lerp2();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
    static jmethodID methodID_lerp3() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "lerp3", "method_16438", "lerp3", "m_14019_"), "(DDDDDDDDDDD)D");
    }

    static jdouble lerp3(const jdouble& arg0, const jdouble& arg1, const jdouble& arg2, const jdouble& arg3, const jdouble& arg4, const jdouble& arg5, const jdouble& arg6, const jdouble& arg7, const jdouble& arg8, const jdouble& arg9, const jdouble& arg10) {
       const auto clazz = self();
       const auto methodID = methodID_lerp3();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    };
    
    static jmethodID methodID_catmullRom() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "catmullrom", "method_41303", "catmullRom", "m_216244_"), "(FFFFF)F");
    }

    static jfloat catmullRom(const jfloat& arg0, const jfloat& arg1, const jfloat& arg2, const jfloat& arg3, const jfloat& arg4) {
       const auto clazz = self();
       const auto methodID = methodID_catmullRom();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_perlinFade() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("h", "smoothstep", "method_16435", "perlinFade", "m_14197_"), "(D)D");
    }

    static jdouble perlinFade(const jdouble& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_perlinFade();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_perlinFadeDerivative() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("i", "smoothstepDerivative", "method_34956", "perlinFadeDerivative", "m_144946_"), "(D)D");
    }

    static jdouble perlinFadeDerivative(const jdouble& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_perlinFadeDerivative();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_sign() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("j", "sign", "method_17822", "sign", "m_14205_"), "(D)I");
    }

    static jint sign(const jdouble& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_sign();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_lerpAngleDegrees() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("j", "rotLerp", "method_17821", "lerpAngleDegrees", "m_14189_"), "(FFF)F");
    }

    static jfloat lerpAngleDegrees(const jfloat& arg0, const jfloat& arg1, const jfloat& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_lerpAngleDegrees();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__lerpAngleDegrees() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("e", "rotLerp", "method_52468", "lerpAngleDegrees", "m_293415_"), "(DDD)D");
    }

    static jdouble _lerpAngleDegrees(const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
       const auto clazz = self();
       const auto methodID = methodID__lerpAngleDegrees();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_wrap() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("e", "triangleWave", "method_24504", "wrap", "m_14156_"), "(FF)F");
    }

    static jfloat wrap(const jfloat& arg0, const jfloat& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_wrap();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_square() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("k", "square", "method_27285", "square", "m_14207_"), "(F)F");
    }

    static jfloat square(const jfloat& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_square();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID__square() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("k", "square", "method_33723", "square", "m_144952_"), "(D)D");
    }

    static jdouble _square(const jdouble& arg0) {
       const auto clazz = self();
       const auto methodID = methodID__square();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID___square() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("h", "square", "method_34954", "square", "m_144944_"), "(I)I");
    }

    static jint __square(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID___square();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID____square() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "square", "method_38652", "square", "m_184643_"), "(J)J");
    }

    static jlong ___square(const jlong& arg0) {
       const auto clazz = self();
       const auto methodID = methodID____square();
       return MinecraftSDK::env->CallStaticLongMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_clampedMap() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "clampedMap", "method_32854", "clampedMap", "m_144851_"), "(DDDDD)D");
    }

    static jdouble clampedMap(const jdouble& arg0, const jdouble& arg1, const jdouble& arg2, const jdouble& arg3, const jdouble& arg4) {
       const auto clazz = self();
       const auto methodID = methodID_clampedMap();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID__clampedMap() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "clampedMap", "method_37958", "clampedMap", "m_184631_"), "(FFFFF)F");
    }

    static jfloat _clampedMap(const jfloat& arg0, const jfloat& arg1, const jfloat& arg2, const jfloat& arg3, const jfloat& arg4) {
       const auto clazz = self();
       const auto methodID = methodID__clampedMap();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_map() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "map", "method_33722", "map", "m_144914_"), "(DDDDD)D");
    }

    static jdouble map(const jdouble& arg0, const jdouble& arg1, const jdouble& arg2, const jdouble& arg3, const jdouble& arg4) {
       const auto clazz = self();
       const auto methodID = methodID_map();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID__map() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "map", "method_37959", "map", "m_184637_"), "(FFFFF)F");
    }

    static jfloat _map(const jfloat& arg0, const jfloat& arg1, const jfloat& arg2, const jfloat& arg3, const jfloat& arg4) {
       const auto clazz = self();
       const auto methodID = methodID__map();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_method_34957() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("l", "wobble", "method_34957", "method_34957", "m_144954_"), "(D)D");
    }

    static jdouble method_34957(const jdouble& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_method_34957();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_roundUpToMultiple() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("d", "roundToward", "method_28139", "roundUpToMultiple", "m_144941_"), "(II)I");
    }

    static jint roundUpToMultiple(const jint& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_roundUpToMultiple();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_ceilDiv() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("e", "positiveCeilDiv", "method_38788", "ceilDiv", "m_184652_"), "(II)I");
    }

    static jint ceilDiv(const jint& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_ceilDiv();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_nextBetween() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "randomBetweenInclusive", "method_32751", "nextBetween", "m_216287_"), "(Layw;II)I");
    }

    static jint nextBetween(const jobject& arg0, const jint& arg1, const jint& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_nextBetween();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__nextBetween() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "randomBetween", "method_32750", "nextBetween", "m_216283_"), "(Layw;FF)F");
    }

    static jfloat _nextBetween(const jobject& arg0, const jfloat& arg1, const jfloat& arg2) {
       const auto clazz = self();
       const auto methodID = methodID__nextBetween();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_nextGaussian() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "normal", "method_32855", "nextGaussian", "m_216291_"), "(Layw;FF)F");
    }

    static jfloat nextGaussian(const jobject& arg0, const jfloat& arg1, const jfloat& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_nextGaussian();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_squaredHypot() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("e", "lengthSquared", "method_41189", "squaredHypot", "m_211589_"), "(DD)D");
    }

    static jdouble squaredHypot(const jdouble& arg0, const jdouble& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_squaredHypot();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_hypot() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("f", "length", "method_39241", "hypot", "m_184645_"), "(DD)D");
    }

    static jdouble hypot(const jdouble& arg0, const jdouble& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_hypot();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_squaredMagnitude() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("f", "lengthSquared", "method_41190", "squaredMagnitude", "m_211592_"), "(DDD)D");
    }

    static jdouble squaredMagnitude(const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_squaredMagnitude();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_magnitude() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("g", "length", "method_33825", "magnitude", "m_184648_"), "(DDD)D");
    }

    static jdouble magnitude(const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_magnitude();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__magnitude() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("k", "lengthSquared", "method_60677", "magnitude", "m_338503_"), "(FFF)F");
    }

    static jfloat _magnitude(const jfloat& arg0, const jfloat& arg1, const jfloat& arg2) {
       const auto clazz = self();
       const auto methodID = methodID__magnitude();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_roundDownToMultiple() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "quantize", "method_38961", "roundDownToMultiple", "m_184628_"), "(DI)I");
    }

    static jint roundDownToMultiple(const jdouble& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_roundDownToMultiple();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_stream() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "outFromOrigin", "method_42120", "stream", "m_216295_"), "(III)Ljava/util/stream/IntStream;");
    }

    static jobject stream(const jint& arg0, const jint& arg1, const jint& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_stream();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__stream() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "outFromOrigin", "method_42117", "stream", "m_216250_"), "(IIII)Ljava/util/stream/IntStream;");
    }

    static jobject _stream(const jint& arg0, const jint& arg1, const jint& arg2, const jint& arg3) {
       const auto clazz = self();
       const auto methodID = methodID__stream();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_rotateAround() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "rotationAroundAxis", "method_53948", "rotateAround", "m_305706_"), "(Lorg/joml/Vector3f;Lorg/joml/Quaternionf;Lorg/joml/Quaternionf;)Lorg/joml/Quaternionf;");
    }

    static jobject rotateAround(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_rotateAround();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_multiplyFraction() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "mulAndTruncate", "method_59515", "multiplyFraction", "m_320106_"), "(Lorg/apache/commons/lang3/math/Fraction;I)I");
    }

    static jint multiplyFraction(const jobject& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_multiplyFraction();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_UTIL_MATH_MATHHELPER_HPP