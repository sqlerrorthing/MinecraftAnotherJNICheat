// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_MATH_VEC3D_HPP
#define NET_MINECRAFT_UTIL_MATH_VEC3D_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.math.Vec3d
 * Remapped: exc
 */
namespace Vec3d {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("exc", "net/minecraft/world/phys/Vec3", "net/minecraft/class_243", "net/minecraft/util/math/Vec3d", "net/minecraft/src/C_3046_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.util.math.Vec3d#CODEC
    [[maybe_unused]] static jobject get_field_CODEC() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CODEC", "field_38277", "CODEC", "f_231074_"), "Lcom/mojang/serialization/Codec;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.util.math.Vec3d#CODEC
    [[maybe_unused]] static void set_field_CODEC(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CODEC", "field_38277", "CODEC", "f_231074_"), "Lcom/mojang/serialization/Codec;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.util.math.Vec3d#ZERO
    [[maybe_unused]] static jobject get_field_ZERO() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ZERO", "field_1353", "ZERO", "f_82478_"), "Lexc;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.util.math.Vec3d#ZERO
    [[maybe_unused]] static void set_field_ZERO(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ZERO", "field_1353", "ZERO", "f_82478_"), "Lexc;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for public field net.minecraft.util.math.Vec3d#x
    static jdouble get_field_x(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "x", "field_1352", "x", "f_82479_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static public field net.minecraft.util.math.Vec3d#x
    static void set_field_x(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "x", "field_1352", "x", "f_82479_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.util.math.Vec3d#y
    static jdouble get_field_y(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "y", "field_1351", "y", "f_82480_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static public field net.minecraft.util.math.Vec3d#y
    static void set_field_y(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "y", "field_1351", "y", "f_82480_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.util.math.Vec3d#z
    static jdouble get_field_z(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "z", "field_1350", "z", "f_82481_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static public field net.minecraft.util.math.Vec3d#z
    static void set_field_z(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "z", "field_1350", "z", "f_82481_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    static jmethodID methodID_unpackRgb() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "fromRGB24", "method_24457", "unpackRgb", "m_82501_"), "(I)Lexc;");
    }

    static jobject unpackRgb(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_unpackRgb();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_of() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "atLowerCornerOf", "method_24954", "of", "m_82528_"), "(Lkh;)Lexc;");
    }

    static jobject of(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_of();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_add() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "atLowerCornerWithOffset", "method_49273", "add", "m_272021_"), "(Lkh;DDD)Lexc;");
    }

    static jobject add(const jobject& arg0, const jdouble& arg1, const jdouble& arg2, const jdouble& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_add();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_ofCenter() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "atCenterOf", "method_24953", "ofCenter", "m_82512_"), "(Lkh;)Lexc;");
    }

    static jobject ofCenter(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_ofCenter();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_ofBottomCenter() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "atBottomCenterOf", "method_24955", "ofBottomCenter", "m_82539_"), "(Lkh;)Lexc;");
    }

    static jobject ofBottomCenter(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_ofBottomCenter();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID__ofCenter() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "upFromBottomCenterOf", "method_26410", "ofCenter", "m_82514_"), "(Lkh;D)Lexc;");
    }

    static jobject _ofCenter(const jobject& arg0, const jdouble& arg1) {
       const auto clazz = self();
       const auto methodID = methodID__ofCenter();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_relativize() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "vectorTo", "method_1035", "relativize", "m_82505_"), "(Lexc;)Lexc;");
    }

    static jobject relativize(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_relativize();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_normalize() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "normalize", "method_1029", "normalize", "m_82541_"), "()Lexc;");
    }

    static jobject normalize(const jobject& obj) {
                
       const auto methodID = methodID_normalize();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_dotProduct() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "dot", "method_1026", "dotProduct", "m_82526_"), "(Lexc;)D");
    }

    static jdouble dotProduct(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_dotProduct();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_crossProduct() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "cross", "method_1036", "crossProduct", "m_82537_"), "(Lexc;)Lexc;");
    }

    static jobject crossProduct(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_crossProduct();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_subtract() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "subtract", "method_1020", "subtract", "m_82546_"), "(Lexc;)Lexc;");
    }

    static jobject subtract(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_subtract();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__subtract() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "subtract", "method_1023", "subtract", "m_82492_"), "(DDD)Lexc;");
    }

    static jobject _subtract(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID__subtract();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__add() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "add", "method_1019", "add", "m_82549_"), "(Lexc;)Lexc;");
    }

    static jobject _add(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__add();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID___add() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "add", "method_1031", "add", "m_82520_"), "(DDD)Lexc;");
    }

    static jobject __add(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID___add();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_isInRange() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "closerThan", "method_24802", "isInRange", "m_82509_"), "(Ljw;D)Z");
    }

    static jboolean isInRange(const jobject& obj, const jobject& arg0, const jdouble& arg1) {
                
       const auto methodID = methodID_isInRange();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_distanceTo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "distanceTo", "method_1022", "distanceTo", "m_82554_"), "(Lexc;)D");
    }

    static jdouble distanceTo(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_distanceTo();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_squaredDistanceTo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "distanceToSqr", "method_1025", "squaredDistanceTo", "m_82557_"), "(Lexc;)D");
    }

    static jdouble squaredDistanceTo(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_squaredDistanceTo();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__squaredDistanceTo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "distanceToSqr", "method_1028", "squaredDistanceTo", "m_82531_"), "(DDD)D");
    }

    static jdouble _squaredDistanceTo(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID__squaredDistanceTo();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_isWithinRangeOf() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "closerThan", "method_55230", "isWithinRangeOf", "m_306338_"), "(Lexc;DD)Z");
    }

    static jboolean isWithinRangeOf(const jobject& obj, const jobject& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID_isWithinRangeOf();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_multiply() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "scale", "method_1021", "multiply", "m_82490_"), "(D)Lexc;");
    }

    static jobject multiply(const jobject& obj, const jdouble& arg0) {
                
       const auto methodID = methodID_multiply();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_negate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "reverse", "method_22882", "negate", "m_82548_"), "()Lexc;");
    }

    static jobject negate(const jobject& obj) {
                
       const auto methodID = methodID_negate();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__multiply() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "multiply", "method_18806", "multiply", "m_82559_"), "(Lexc;)Lexc;");
    }

    static jobject _multiply(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__multiply();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID___multiply() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "multiply", "method_18805", "multiply", "m_82542_"), "(DDD)Lexc;");
    }

    static jobject __multiply(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID___multiply();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_addRandom() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "offsetRandom", "method_49272", "addRandom", "m_272010_"), "(Layw;F)Lexc;");
    }

    static jobject addRandom(const jobject& obj, const jobject& arg0, const jfloat& arg1) {
                
       const auto methodID = methodID_addRandom();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_length() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "length", "method_1033", "length", "m_82553_"), "()D");
    }

    static jdouble length(const jobject& obj) {
                
       const auto methodID = methodID_length();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_lengthSquared() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "lengthSqr", "method_1027", "lengthSquared", "m_82556_"), "()D");
    }

    static jdouble lengthSquared(const jobject& obj) {
                
       const auto methodID = methodID_lengthSquared();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_horizontalLength() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "horizontalDistance", "method_37267", "horizontalLength", "m_165924_"), "()D");
    }

    static jdouble horizontalLength(const jobject& obj) {
                
       const auto methodID = methodID_horizontalLength();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_horizontalLengthSquared() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "horizontalDistanceSqr", "method_37268", "horizontalLengthSquared", "m_165925_"), "()D");
    }

    static jdouble horizontalLengthSquared(const jobject& obj) {
                
       const auto methodID = methodID_horizontalLengthSquared();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_lerp() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "lerp", "method_35590", "lerp", "m_165921_"), "(Lexc;D)Lexc;");
    }

    static jobject lerp(const jobject& obj, const jobject& arg0, const jdouble& arg1) {
                
       const auto methodID = methodID_lerp();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_rotateX() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "xRot", "method_1037", "rotateX", "m_82496_"), "(F)Lexc;");
    }

    static jobject rotateX(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_rotateX();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_rotateY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "yRot", "method_1024", "rotateY", "m_82524_"), "(F)Lexc;");
    }

    static jobject rotateY(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_rotateY();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_rotateZ() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "zRot", "method_31033", "rotateZ", "m_82535_"), "(F)Lexc;");
    }

    static jobject rotateZ(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_rotateZ();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_fromPolar() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "directionFromRotation", "method_1034", "fromPolar", "m_82503_"), "(Lexb;)Lexc;");
    }

    static jobject fromPolar(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_fromPolar();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID__fromPolar() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "directionFromRotation", "method_1030", "fromPolar", "m_82498_"), "(FF)Lexc;");
    }

    static jobject _fromPolar(const jfloat& arg0, const jfloat& arg1) {
       const auto clazz = self();
       const auto methodID = methodID__fromPolar();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_floorAlongAxes() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "align", "method_1032", "floorAlongAxes", "m_82517_"), "(Ljava/util/EnumSet;)Lexc;");
    }

    static jobject floorAlongAxes(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_floorAlongAxes();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getComponentAlongAxis() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "get", "method_18043", "getComponentAlongAxis", "m_82507_"), "(Lji$a;)D");
    }

    static jdouble getComponentAlongAxis(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getComponentAlongAxis();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_withAxis() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "with", "method_38499", "withAxis", "m_193103_"), "(Lji$a;D)Lexc;");
    }

    static jobject withAxis(const jobject& obj, const jobject& arg0, const jdouble& arg1) {
                
       const auto methodID = methodID_withAxis();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_offset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "relative", "method_43206", "offset", "m_231075_"), "(Lji;D)Lexc;");
    }

    static jobject offset(const jobject& obj, const jobject& arg0, const jdouble& arg1) {
                
       const auto methodID = methodID_offset();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getX() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "x", "method_10216", "getX", "m_7096_"), "()D");
    }

    static jdouble getX(const jobject& obj) {
                
       const auto methodID = methodID_getX();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_getY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "y", "method_10214", "getY", "m_7098_"), "()D");
    }

    static jdouble getY(const jobject& obj) {
                
       const auto methodID = methodID_getY();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_getZ() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "z", "method_10215", "getZ", "m_7094_"), "()D");
    }

    static jdouble getZ(const jobject& obj) {
                
       const auto methodID = methodID_getZ();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_toVector3f() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "toVector3f", "method_46409", "toVector3f", "m_252839_"), "()Lorg/joml/Vector3f;");
    }

    static jobject toVector3f(const jobject& obj) {
                
       const auto methodID = methodID_toVector3f();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_UTIL_MATH_VEC3D_HPP