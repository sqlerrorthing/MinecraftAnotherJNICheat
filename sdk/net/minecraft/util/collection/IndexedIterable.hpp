// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_COLLECTION_INDEXEDITERABLE_HPP
#define NET_MINECRAFT_UTIL_COLLECTION_INDEXEDITERABLE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.collection.IndexedIterable
 * Remapped: jr
 */
namespace IndexedIterable {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("jr", "net/minecraft/core/IdMap", "net/minecraft/class_2359", "net/minecraft/util/collection/IndexedIterable", "net/minecraft/src/C_4698_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.util.collection.IndexedIterable#ABSENT_RAW_ID
    [[maybe_unused]] static jint get_field_ABSENT_RAW_ID() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "DEFAULT", "field_34829", "ABSENT_RAW_ID", "f_194530_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.util.collection.IndexedIterable#ABSENT_RAW_ID
    [[maybe_unused]] static void set_field_ABSENT_RAW_ID(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "DEFAULT", "field_34829", "ABSENT_RAW_ID", "f_194530_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    static jmethodID methodID_getRawId() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getId", "method_10206", "getRawId", "m_7447_"), "(Ljava/lang/Object;)I");
    }

    static jint getRawId(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getRawId();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_get() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "byId", "method_10200", "get", "m_7942_"), "(I)Ljava/lang/Object;");
    }

    static jobject get(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_get();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getOrThrow() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "byIdOrThrow", "method_39974", "getOrThrow", "m_200957_"), "(I)Ljava/lang/Object;");
    }

    static jobject getOrThrow(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_getOrThrow();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getRawIdOrThrow() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getIdOrThrow", "method_56158", "getRawIdOrThrow", "m_322535_"), "(Ljava/lang/Object;)I");
    }

    static jint getRawIdOrThrow(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getRawIdOrThrow();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_size() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "size", "method_10204", "size", "m_13562_"), "()I");
    }

    static jint size(const jobject& obj) {
                
       const auto methodID = methodID_size();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_UTIL_COLLECTION_INDEXEDITERABLE_HPP