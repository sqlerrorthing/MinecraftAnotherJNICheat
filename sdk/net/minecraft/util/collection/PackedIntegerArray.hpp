// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_COLLECTION_PACKEDINTEGERARRAY_HPP
#define NET_MINECRAFT_UTIL_COLLECTION_PACKEDINTEGERARRAY_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.collection.PackedIntegerArray
 * Remapped: azd
 */
namespace PackedIntegerArray {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("azd", "net/minecraft/util/SimpleBitStorage", "net/minecraft/class_3508", "net/minecraft/util/collection/PackedIntegerArray", "net/minecraft/src/C_182786_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.util.collection.PackedIntegerArray#INDEX_PARAMETERS
    [[maybe_unused]] static jint get_field_INDEX_PARAMETERS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "MAGIC", "field_24078", "INDEX_PARAMETERS", "f_184706_"), "[I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.collection.PackedIntegerArray#INDEX_PARAMETERS
    [[maybe_unused]] static void set_field_INDEX_PARAMETERS(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "MAGIC", "field_24078", "INDEX_PARAMETERS", "f_184706_"), "[I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.util.collection.PackedIntegerArray#data
    static jlong get_field_data(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "data", "field_15631", "data", "f_184707_"), "[J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.collection.PackedIntegerArray#data
    static void set_field_data(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "data", "field_15631", "data", "f_184707_"), "[J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.collection.PackedIntegerArray#elementBits
    static jint get_field_elementBits(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "bits", "field_15633", "elementBits", "f_184708_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.collection.PackedIntegerArray#elementBits
    static void set_field_elementBits(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "bits", "field_15633", "elementBits", "f_184708_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.collection.PackedIntegerArray#maxValue
    static jlong get_field_maxValue(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "mask", "field_15634", "maxValue", "f_184709_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.collection.PackedIntegerArray#maxValue
    static void set_field_maxValue(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "mask", "field_15634", "maxValue", "f_184709_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.collection.PackedIntegerArray#size
    static jint get_field_size(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "size", "field_15632", "size", "f_184710_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.collection.PackedIntegerArray#size
    static void set_field_size(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "size", "field_15632", "size", "f_184710_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.collection.PackedIntegerArray#elementsPerLong
    static jint get_field_elementsPerLong(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "valuesPerLong", "field_24079", "elementsPerLong", "f_184711_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.collection.PackedIntegerArray#elementsPerLong
    static void set_field_elementsPerLong(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "valuesPerLong", "field_24079", "elementsPerLong", "f_184711_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.collection.PackedIntegerArray#indexScale
    static jint get_field_indexScale(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "divideMul", "field_24080", "indexScale", "f_184712_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.collection.PackedIntegerArray#indexScale
    static void set_field_indexScale(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "divideMul", "field_24080", "indexScale", "f_184712_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.collection.PackedIntegerArray#indexOffset
    static jint get_field_indexOffset(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "divideAdd", "field_24081", "indexOffset", "f_184713_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.collection.PackedIntegerArray#indexOffset
    static void set_field_indexOffset(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "divideAdd", "field_24081", "indexOffset", "f_184713_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.collection.PackedIntegerArray#indexShift
    static jint get_field_indexShift(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "divideShift", "field_24082", "indexShift", "f_184714_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.collection.PackedIntegerArray#indexShift
    static void set_field_indexShift(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "divideShift", "field_24082", "indexShift", "f_184714_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    static jmethodID methodID_getStorageIndex() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "cellIndex", "method_27284", "getStorageIndex", "m_184739_"), "(I)I");
    }

    static jint getStorageIndex(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_getStorageIndex();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_swap() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getAndSet", "method_15214", "swap", "m_13516_"), "(II)I");
    }

    static jint swap(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_swap();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_set() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "set", "method_15210", "set", "m_13524_"), "(II)V");
    }

    static void set(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_set();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_get() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "get", "method_15211", "get", "m_13514_"), "(I)I");
    }

    static jint get(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_get();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getData() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getRaw", "method_15212", "getData", "m_13513_"), "()[J");
    }

    static jlong getData(const jobject& obj) {
                
       const auto methodID = methodID_getData();
       return MinecraftSDK::env->CallLongMethod(obj, methodID);
    };
    
    static jmethodID methodID_getSize() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getSize", "method_15215", "getSize", "m_13521_"), "()I");
    }

    static jint getSize(const jobject& obj) {
                
       const auto methodID = methodID_getSize();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getElementBits() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getBits", "method_34896", "getElementBits", "m_144604_"), "()I");
    }

    static jint getElementBits(const jobject& obj) {
                
       const auto methodID = methodID_getElementBits();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_forEach() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getAll", "method_21739", "forEach", "m_13519_"), "(Ljava/util/function/IntConsumer;)V");
    }

    static void forEach(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_forEach();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_writePaletteIndices() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "unpack", "method_39892", "writePaletteIndices", "m_197970_"), "([I)V");
    }

    static void writePaletteIndices(const jobject& obj, const jarray& arg0, const jint& arg1) {
                
       const auto methodID = methodID_writePaletteIndices();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_copy() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "copy", "method_39939", "copy", "m_199833_"), "()Laxc;");
    }

    static jobject copy(const jobject& obj) {
                
       const auto methodID = methodID_copy();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_UTIL_COLLECTION_PACKEDINTEGERARRAY_HPP