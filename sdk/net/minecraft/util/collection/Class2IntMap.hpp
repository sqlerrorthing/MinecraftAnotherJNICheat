// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_COLLECTION_CLASS2INTMAP_HPP
#define NET_MINECRAFT_UTIL_COLLECTION_CLASS2INTMAP_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.collection.Class2IntMap
 * Remapped: axg
 */
namespace Class2IntMap {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("axg", "net/minecraft/util/ClassTreeIdRegistry", "net/minecraft/class_9227", "net/minecraft/util/collection/Class2IntMap", "net/minecraft/src/C_313305_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.util.collection.Class2IntMap#MISSING
    [[maybe_unused]] static jint get_field_MISSING() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "NO_ID_VALUE", "field_49052", "MISSING", "f_313901_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.util.collection.Class2IntMap#MISSING
    [[maybe_unused]] static void set_field_MISSING(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "NO_ID_VALUE", "field_49052", "MISSING", "f_313901_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.util.collection.Class2IntMap#backingMap
    static jobject get_field_backingMap(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "classToLastIdCache", "field_49053", "backingMap", "f_316601_"), "Lit/unimi/dsi/fastutil/objects/Object2IntMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.collection.Class2IntMap#backingMap
    static void set_field_backingMap(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "classToLastIdCache", "field_49053", "backingMap", "f_316601_"), "Lit/unimi/dsi/fastutil/objects/Object2IntMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_get() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getLastIdFor", "method_56939", "get", "m_321546_"), "(Ljava/lang/Class;)I");
    }

    static jint get(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_get();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getNext() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getCount", "method_56940", "getNext", "m_321486_"), "(Ljava/lang/Class;)I");
    }

    static jint getNext(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getNext();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_put() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "define", "method_56941", "put", "m_321864_"), "(Ljava/lang/Class;)I");
    }

    static jint put(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_put();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_UTIL_COLLECTION_CLASS2INTMAP_HPP