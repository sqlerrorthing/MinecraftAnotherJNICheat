// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_COLLECTION_ARRAYLISTDEQUE$ITERATORIMPL_HPP
#define NET_MINECRAFT_UTIL_COLLECTION_ARRAYLISTDEQUE$ITERATORIMPL_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.collection.ArrayListDeque$IteratorImpl
 * Remapped: axb$a
 */
namespace ArrayListDeque$IteratorImpl {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("axb$a", "net/minecraft/util/ArrayListDeque$DescendingIterator", "net/minecraft/class_8623$class_8624", "net/minecraft/util/collection/ArrayListDeque$IteratorImpl", "net/minecraft/src/C_290101_$C_290216_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.util.collection.ArrayListDeque$IteratorImpl#currentIndex
    static jint get_field_currentIndex(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "index", "field_45072", "currentIndex", "f_291243_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.collection.ArrayListDeque$IteratorImpl#currentIndex
    static void set_field_currentIndex(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "index", "field_45072", "currentIndex", "f_291243_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    static jmethodID methodID_hasNext() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("hasNext", "hasNext", "", "", "hasNext"), "()Z");
    }

    static jboolean hasNext(const jobject& obj) {
                
       const auto methodID = methodID_hasNext();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_next() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("next", "next", "", "", "next"), "()Ljava/lang/Object;");
    }

    static jobject next(const jobject& obj) {
                
       const auto methodID = methodID_next();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_remove() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("remove", "remove", "", "", "remove"), "()V");
    }

    static void remove(const jobject& obj) {
                
       const auto methodID = methodID_remove();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_UTIL_COLLECTION_ARRAYLISTDEQUE$ITERATORIMPL_HPP