// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_COLLECTION_LINKEDBLOCKPOSHASHSET_HPP
#define NET_MINECRAFT_UTIL_COLLECTION_LINKEDBLOCKPOSHASHSET_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.collection.LinkedBlockPosHashSet
 * Remapped: eoz
 */
namespace LinkedBlockPosHashSet {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("eoz", "net/minecraft/world/level/lighting/SpatialLongSet", "net/minecraft/class_6136", "net/minecraft/util/collection/LinkedBlockPosHashSet", "net/minecraft/src/C_141433_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.util.collection.LinkedBlockPosHashSet#buffer
    static jobject get_field_buffer(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "map", "field_31715", "buffer", "f_164460_"), "Leoz$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.collection.LinkedBlockPosHashSet#buffer
    static void set_field_buffer(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "map", "field_31715", "buffer", "f_164460_"), "Leoz$a;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_add() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("add", "add", "add", "add", "add"), "(J)Z");
    }

    static jboolean add(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_add();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_rem() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("rem", "rem", "rem", "rem", "rem"), "(J)Z");
    }

    static jboolean rem(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_rem();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_removeFirstLong() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("removeFirstLong", "removeFirstLong", "removeFirstLong", "removeFirstLong", "removeFirstLong"), "()J");
    }

    static jlong removeFirstLong(const jobject& obj) {
                
       const auto methodID = methodID_removeFirstLong();
       return MinecraftSDK::env->CallLongMethod(obj, methodID);
    };
    
    static jmethodID methodID_size() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("size", "size", "size", "size", "size"), "()I");
    }

    static jint size(const jobject& obj) {
                
       const auto methodID = methodID_size();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_isEmpty() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("isEmpty", "isEmpty", "isEmpty", "isEmpty", "isEmpty"), "()Z");
    }

    static jboolean isEmpty(const jobject& obj) {
                
       const auto methodID = methodID_isEmpty();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_UTIL_COLLECTION_LINKEDBLOCKPOSHASHSET_HPP