// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_PROFILER_SERVERSAMPLERSOURCE_HPP
#define NET_MINECRAFT_UTIL_PROFILER_SERVERSAMPLERSOURCE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.profiler.ServerSamplerSource
 * Remapped: bov
 */
namespace ServerSamplerSource {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("bov", "net/minecraft/util/profiling/metrics/profiling/ServerMetricsSamplersProvider", "net/minecraft/class_6402", "net/minecraft/util/profiler/ServerSamplerSource", "net/minecraft/src/C_141026_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.util.profiler.ServerSamplerSource#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_33988", "LOGGER", "f_181117_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.profiler.ServerSamplerSource#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_33988", "LOGGER", "f_181117_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.util.profiler.ServerSamplerSource#samplers
    static jobject get_field_samplers(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "samplers", "field_33895", "samplers", "f_146177_"), "Ljava/util/Set;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.profiler.ServerSamplerSource#samplers
    static void set_field_samplers(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "samplers", "field_33895", "samplers", "f_146177_"), "Ljava/util/Set;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.profiler.ServerSamplerSource#factory
    static jobject get_field_factory(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "samplerFactory", "field_33896", "factory", "f_146178_"), "Lbou;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.profiler.ServerSamplerSource#factory
    static void set_field_factory(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "samplerFactory", "field_33896", "factory", "f_146178_"), "Lbou;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_createSystemSamplers() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "runtimeIndependentSamplers", "method_37199", "createSystemSamplers", "m_146182_"), "()Ljava/util/Set;");
    }

    static jobject createSystemSamplers() {
       const auto clazz = self();
       const auto methodID = methodID_createSystemSamplers();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_getSamplers() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "samplers", "method_37189", "getSamplers", "m_142531_"), "(Ljava/util/function/Supplier;)Ljava/util/Set;");
    }

    static jobject getSamplers(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getSamplers();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_createTickTimeTracker() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "tickTimeSampler", "method_37202", "createTickTimeTracker", "m_146188_"), "(Ljava/util/function/LongSupplier;)Lbom;");
    }

    static jobject createTickTimeTracker(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_createTickTimeTracker();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_UTIL_PROFILER_SERVERSAMPLERSOURCE_HPP