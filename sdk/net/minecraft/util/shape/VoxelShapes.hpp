// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_SHAPE_VOXELSHAPES_HPP
#define NET_MINECRAFT_UTIL_SHAPE_VOXELSHAPES_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.shape.VoxelShapes
 * Remapped: exs
 */
namespace VoxelShapes {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("exs", "net/minecraft/world/phys/shapes/Shapes", "net/minecraft/class_259", "net/minecraft/util/shape/VoxelShapes", "net/minecraft/src/C_3068_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.util.shape.VoxelShapes#MIN_SIZE
    [[maybe_unused]] static jdouble get_field_MIN_SIZE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "EPSILON", "field_31880", "MIN_SIZE", "f_166025_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.util.shape.VoxelShapes#MIN_SIZE
    [[maybe_unused]] static void set_field_MIN_SIZE(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "EPSILON", "field_31880", "MIN_SIZE", "f_166025_"), "D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.util.shape.VoxelShapes#field_31881
    [[maybe_unused]] static jdouble get_field_field_31881() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "BIG_EPSILON", "field_31881", "field_31881", "f_166026_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.util.shape.VoxelShapes#field_31881
    [[maybe_unused]] static void set_field_field_31881(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "BIG_EPSILON", "field_31881", "field_31881", "f_166026_"), "D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.shape.VoxelShapes#FULL_CUBE
    [[maybe_unused]] static jobject get_field_FULL_CUBE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "BLOCK", "field_1385", "FULL_CUBE", "f_83037_"), "Lexv;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.shape.VoxelShapes#FULL_CUBE
    [[maybe_unused]] static void set_field_FULL_CUBE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "BLOCK", "field_1385", "FULL_CUBE", "f_83037_"), "Lexv;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.util.shape.VoxelShapes#UNBOUNDED
    [[maybe_unused]] static jobject get_field_UNBOUNDED() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "INFINITY", "field_17669", "UNBOUNDED", "f_83036_"), "Lexv;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.util.shape.VoxelShapes#UNBOUNDED
    [[maybe_unused]] static void set_field_UNBOUNDED(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "INFINITY", "field_17669", "UNBOUNDED", "f_83036_"), "Lexv;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.shape.VoxelShapes#EMPTY
    [[maybe_unused]] static jobject get_field_EMPTY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "EMPTY", "field_1384", "EMPTY", "f_83038_"), "Lexv;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.shape.VoxelShapes#EMPTY
    [[maybe_unused]] static void set_field_EMPTY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "EMPTY", "field_1384", "EMPTY", "f_83038_"), "Lexv;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_empty() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "empty", "method_1073", "empty", "m_83040_"), "()Lexv;");
    }

    static jobject empty() {
       const auto clazz = self();
       const auto methodID = methodID_empty();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_fullCube() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "block", "method_1077", "fullCube", "m_83144_"), "()Lexv;");
    }

    static jobject fullCube() {
       const auto clazz = self();
       const auto methodID = methodID_fullCube();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_cuboid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "box", "method_1081", "cuboid", "m_83048_"), "(DDDDDD)Lexv;");
    }

    static jobject cuboid(const jdouble& arg0, const jdouble& arg1, const jdouble& arg2, const jdouble& arg3, const jdouble& arg4, const jdouble& arg5) {
       const auto clazz = self();
       const auto methodID = methodID_cuboid();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
    static jmethodID methodID_cuboidUnchecked() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "create", "method_31943", "cuboidUnchecked", "m_166049_"), "(DDDDDD)Lexv;");
    }

    static jobject cuboidUnchecked(const jdouble& arg0, const jdouble& arg1, const jdouble& arg2, const jdouble& arg3, const jdouble& arg4, const jdouble& arg5) {
       const auto clazz = self();
       const auto methodID = methodID_cuboidUnchecked();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
    static jmethodID methodID__cuboid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "create", "method_1078", "cuboid", "m_83064_"), "(Lewx;)Lexv;");
    }

    static jobject _cuboid(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID__cuboid();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_findRequiredBitResolution() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "findBits", "method_1086", "findRequiredBitResolution", "m_83041_"), "(DD)I");
    }

    static jint findRequiredBitResolution(const jdouble& arg0, const jdouble& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_findRequiredBitResolution();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_lcm() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "lcm", "method_1079", "lcm", "m_83055_"), "(II)J");
    }

    static jlong lcm(const jint& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_lcm();
       return MinecraftSDK::env->CallStaticLongMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_union() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "or", "method_1084", "union", "m_83110_"), "(Lexv;Lexv;)Lexv;");
    }

    static jobject union(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_union();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__union() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "or", "method_17786", "union", "m_83124_"), "(Lexv;[Lexv;)Lexv;");
    }

    static jobject _union(const jobject& arg0, const jarray& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID__union();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_combineAndSimplify() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "join", "method_1072", "combineAndSimplify", "m_83113_"), "(Lexv;Lexv;Lexg;)Lexv;");
    }

    static jobject combineAndSimplify(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_combineAndSimplify();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_combine() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "joinUnoptimized", "method_1082", "combine", "m_83148_"), "(Lexv;Lexv;Lexg;)Lexv;");
    }

    static jobject combine(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_combine();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_matchesAnywhere() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "joinIsNotEmpty", "method_1074", "matchesAnywhere", "m_83157_"), "(Lexv;Lexv;Lexg;)Z");
    }

    static jboolean matchesAnywhere(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_matchesAnywhere();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__matchesAnywhere() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "joinIsNotEmpty", "method_1071", "matchesAnywhere", "m_83103_"), "(Lexo;Lexo;Lexo;Lexl;Lexl;Lexg;)Z");
    }

    static jboolean _matchesAnywhere(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4, const jobject& arg5) {
       const auto clazz = self();
       const auto methodID = methodID__matchesAnywhere();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
    static jmethodID methodID_calculateMaxOffset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "collide", "method_1085", "calculateMaxOffset", "m_193135_"), "(Lji$a;Lewx;Ljava/lang/Iterable;D)D");
    }

    static jdouble calculateMaxOffset(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jdouble& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_calculateMaxOffset();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_isSideCovered() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "blockOccudes", "method_1083", "isSideCovered", "m_83117_"), "(Lexv;Lexv;Lji;)Z");
    }

    static jboolean isSideCovered(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_isSideCovered();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_extrudeFace() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getFaceShape", "method_16344", "extrudeFace", "m_83121_"), "(Lexv;Lji;)Lexv;");
    }

    static jobject extrudeFace(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_extrudeFace();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_adjacentSidesCoverSquare() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "mergedFaceOccludes", "method_1080", "adjacentSidesCoverSquare", "m_83152_"), "(Lexv;Lexv;Lji;)Z");
    }

    static jboolean adjacentSidesCoverSquare(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_adjacentSidesCoverSquare();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_unionCoversFullCube() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "faceShapeOccludes", "method_20713", "unionCoversFullCube", "m_83145_"), "(Lexv;Lexv;)Z");
    }

    static jboolean unionCoversFullCube(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_unionCoversFullCube();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_createListPair() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "createIndexMerger", "method_1069", "createListPair", "m_83058_"), "(ILit/unimi/dsi/fastutil/doubles/DoubleList;Lit/unimi/dsi/fastutil/doubles/DoubleList;ZZ)Lexo;");
    }

    static jobject createListPair(const jint& arg0, const jobject& arg1, const jobject& arg2, const jboolean& arg3, const jboolean& arg4) {
       const auto clazz = self();
       const auto methodID = methodID_createListPair();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
};

#endif // NET_MINECRAFT_UTIL_SHAPE_VOXELSHAPES_HPP