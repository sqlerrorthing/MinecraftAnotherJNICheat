// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_SHAPE_VOXELSET_HPP
#define NET_MINECRAFT_UTIL_SHAPE_VOXELSET_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.shape.VoxelSet
 * Remapped: exl
 */
namespace VoxelSet {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("exl", "net/minecraft/world/phys/shapes/DiscreteVoxelShape", "net/minecraft/class_251", "net/minecraft/util/shape/VoxelSet", "net/minecraft/src/C_3055_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.util.shape.VoxelSet#AXES
    [[maybe_unused]] static jobject get_field_AXES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "AXIS_VALUES", "field_1375", "AXES", "f_82784_"), "[Lji$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.shape.VoxelSet#AXES
    [[maybe_unused]] static void set_field_AXES(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "AXIS_VALUES", "field_1375", "AXES", "f_82784_"), "[Lji$a;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for protected field net.minecraft.util.shape.VoxelSet#sizeX
    static jint get_field_sizeX(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "xSize", "field_1374", "sizeX", "f_82781_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.util.shape.VoxelSet#sizeX
    static void set_field_sizeX(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "xSize", "field_1374", "sizeX", "f_82781_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.util.shape.VoxelSet#sizeY
    static jint get_field_sizeY(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "ySize", "field_1373", "sizeY", "f_82782_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.util.shape.VoxelSet#sizeY
    static void set_field_sizeY(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "ySize", "field_1373", "sizeY", "f_82782_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.util.shape.VoxelSet#sizeZ
    static jint get_field_sizeZ(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "zSize", "field_1372", "sizeZ", "f_82783_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.util.shape.VoxelSet#sizeZ
    static void set_field_sizeZ(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "zSize", "field_1372", "sizeZ", "f_82783_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    static jmethodID methodID_inBoundsAndContains() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isFullWide", "method_1062", "inBoundsAndContains", "m_82822_"), "(Lja;III)Z");
    }

    static jboolean inBoundsAndContains(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2, const jint& arg3) {
                
       const auto methodID = methodID_inBoundsAndContains();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID__inBoundsAndContains() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "isFullWide", "method_1044", "inBoundsAndContains", "m_82846_"), "(III)Z");
    }

    static jboolean _inBoundsAndContains(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID__inBoundsAndContains();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_contains() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "isFull", "method_1057", "contains", "m_82835_"), "(Lja;III)Z");
    }

    static jboolean contains(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2, const jint& arg3) {
                
       const auto methodID = methodID_contains();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID__contains() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "isFull", "method_1063", "contains", "m_6696_"), "(III)Z");
    }

    static jboolean _contains(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID__contains();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_set() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "fill", "method_1049", "set", "m_142703_"), "(III)V");
    }

    static void set(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_set();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_isEmpty() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isEmpty", "method_1056", "isEmpty", "m_6224_"), "()Z");
    }

    static jboolean isEmpty(const jobject& obj) {
                
       const auto methodID = methodID_isEmpty();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getMin() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "firstFull", "method_1055", "getMin", "m_6538_"), "(Lji$a;)I");
    }

    static jint getMin(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getMin();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getMax() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "lastFull", "method_1045", "getMax", "m_6536_"), "(Lji$a;)I");
    }

    static jint getMax(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getMax();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getStartingAxisCoord() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "firstFull", "method_35592", "getStartingAxisCoord", "m_165994_"), "(Lji$a;II)I");
    }

    static jint getStartingAxisCoord(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_getStartingAxisCoord();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getEndingAxisCoord() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "lastFull", "method_1058", "getEndingAxisCoord", "m_82841_"), "(Lji$a;II)I");
    }

    static jint getEndingAxisCoord(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_getEndingAxisCoord();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getSize() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getSize", "method_1051", "getSize", "m_82850_"), "(Lji$a;)I");
    }

    static jint getSize(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getSize();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getXSize() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getXSize", "method_1050", "getXSize", "m_82828_"), "()I");
    }

    static jint getXSize(const jobject& obj) {
                
       const auto methodID = methodID_getXSize();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getYSize() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getYSize", "method_1047", "getYSize", "m_82845_"), "()I");
    }

    static jint getYSize(const jobject& obj) {
                
       const auto methodID = methodID_getYSize();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getZSize() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getZSize", "method_1048", "getZSize", "m_82852_"), "()I");
    }

    static jint getZSize(const jobject& obj) {
                
       const auto methodID = methodID_getZSize();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_forEachEdge() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "forAllEdges", "method_1064", "forEachEdge", "m_82819_"), "(Lexl$b;Z)V");
    }

    static void forEachEdge(const jobject& obj, const jobject& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_forEachEdge();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__forEachEdge() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "forAllAxisEdges", "method_1052", "forEachEdge", "m_82815_"), "(Lexl$b;Lja;Z)V");
    }

    static void _forEachEdge(const jobject& obj, const jobject& arg0, const jobject& arg1, const jboolean& arg2) {
                
       const auto methodID = methodID__forEachEdge();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_forEachBox() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "forAllBoxes", "method_1053", "forEachBox", "m_82832_"), "(Lexl$b;Z)V");
    }

    static void forEachBox(const jobject& obj, const jobject& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_forEachBox();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_forEachDirection() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "forAllFaces", "method_1046", "forEachDirection", "m_82810_"), "(Lexl$a;)V");
    }

    static void forEachDirection(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_forEachDirection();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__forEachDirection() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "forAllAxisFaces", "method_1061", "forEachDirection", "m_82812_"), "(Lexl$a;Lja;)V");
    }

    static void _forEachDirection(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID__forEachDirection();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_UTIL_SHAPE_VOXELSET_HPP