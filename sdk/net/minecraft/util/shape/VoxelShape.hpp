// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_SHAPE_VOXELSHAPE_HPP
#define NET_MINECRAFT_UTIL_SHAPE_VOXELSHAPE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.shape.VoxelShape
 * Remapped: exv
 */
namespace VoxelShape {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("exv", "net/minecraft/world/phys/shapes/VoxelShape", "net/minecraft/class_265", "net/minecraft/util/shape/VoxelShape", "net/minecraft/src/C_3072_"));
        }
        return cachedClass;
    };

    // getter for protected field net.minecraft.util.shape.VoxelShape#voxels
    static jobject get_field_voxels(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "shape", "field_1401", "voxels", "f_83211_"), "Lexl;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.util.shape.VoxelShape#voxels
    static void set_field_voxels(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "shape", "field_1401", "voxels", "f_83211_"), "Lexl;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.shape.VoxelShape#shapeCache
    static jobject get_field_shapeCache(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "faces", "field_19318", "shapeCache", "f_83212_"), "[Lexv;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.shape.VoxelShape#shapeCache
    static void set_field_shapeCache(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "faces", "field_19318", "shapeCache", "f_83212_"), "[Lexv;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_getMin() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "min", "method_1091", "getMin", "m_83288_"), "(Lji$a;)D");
    }

    static jdouble getMin(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getMin();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getMax() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "max", "method_1105", "getMax", "m_83297_"), "(Lji$a;)D");
    }

    static jdouble getMax(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getMax();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getBoundingBox() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "bounds", "method_1107", "getBoundingBox", "m_83215_"), "()Lewx;");
    }

    static jobject getBoundingBox(const jobject& obj) {
                
       const auto methodID = methodID_getBoundingBox();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_asCuboid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "singleEncompassing", "method_52620", "asCuboid", "m_292898_"), "()Lexv;");
    }

    static jobject asCuboid(const jobject& obj) {
                
       const auto methodID = methodID_asCuboid();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getPointPosition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "get", "method_1099", "getPointPosition", "m_83256_"), "(Lji$a;I)D");
    }

    static jdouble getPointPosition(const jobject& obj, const jobject& arg0, const jint& arg1) {
                
       const auto methodID = methodID_getPointPosition();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getPointPositions() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getCoords", "method_1109", "getPointPositions", "m_7700_"), "(Lji$a;)Lit/unimi/dsi/fastutil/doubles/DoubleList;");
    }

    static jobject getPointPositions(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getPointPositions();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isEmpty() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "isEmpty", "method_1110", "isEmpty", "m_83281_"), "()Z");
    }

    static jboolean isEmpty(const jobject& obj) {
                
       const auto methodID = methodID_isEmpty();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_offset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "move", "method_1096", "offset", "m_83216_"), "(DDD)Lexv;");
    }

    static jobject offset(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID_offset();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_simplify() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "optimize", "method_1097", "simplify", "m_83296_"), "()Lexv;");
    }

    static jobject simplify(const jobject& obj) {
                
       const auto methodID = methodID_simplify();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_forEachEdge() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "forAllEdges", "method_1104", "forEachEdge", "m_83224_"), "(Lexs$a;)V");
    }

    static void forEachEdge(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_forEachEdge();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_forEachBox() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "forAllBoxes", "method_1089", "forEachBox", "m_83286_"), "(Lexs$a;)V");
    }

    static void forEachBox(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_forEachBox();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getBoundingBoxes() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "toAabbs", "method_1090", "getBoundingBoxes", "m_83299_"), "()Ljava/util/List;");
    }

    static jobject getBoundingBoxes(const jobject& obj) {
                
       const auto methodID = methodID_getBoundingBoxes();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getStartingCoord() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "min", "method_35593", "getStartingCoord", "m_166078_"), "(Lji$a;DD)D");
    }

    static jdouble getStartingCoord(const jobject& obj, const jobject& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID_getStartingCoord();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getEndingCoord() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "max", "method_1102", "getEndingCoord", "m_83290_"), "(Lji$a;DD)D");
    }

    static jdouble getEndingCoord(const jobject& obj, const jobject& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID_getEndingCoord();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getCoordIndex() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "findIndex", "method_1100", "getCoordIndex", "m_6595_"), "(Lji$a;D)I");
    }

    static jint getCoordIndex(const jobject& obj, const jobject& arg0, const jdouble& arg1) {
                
       const auto methodID = methodID_getCoordIndex();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_raycast() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "clip", "method_1092", "raycast", "m_83220_"), "(Lexc;Lexc;Ljd;)Lewy;");
    }

    static jobject raycast(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_raycast();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getClosestPointTo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "closestPointTo", "method_33661", "getClosestPointTo", "m_166067_"), "(Lexc;)Ljava/util/Optional;");
    }

    static jobject getClosestPointTo(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getClosestPointTo();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getFace() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getFaceShape", "method_20538", "getFace", "m_83263_"), "(Lji;)Lexv;");
    }

    static jobject getFace(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getFace();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getUncachedFace() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "calculateFace", "method_1098", "getUncachedFace", "m_83294_"), "(Lji;)Lexv;");
    }

    static jobject getUncachedFace(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getUncachedFace();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_calculateMaxDistance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "collide", "method_1108", "calculateMaxDistance", "m_83259_"), "(Lji$a;Lewx;D)D");
    }

    static jdouble calculateMaxDistance(const jobject& obj, const jobject& arg0, const jobject& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID_calculateMaxDistance();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__calculateMaxDistance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "collideX", "method_1103", "calculateMaxDistance", "m_83245_"), "(Lja;Lewx;D)D");
    }

    static jdouble _calculateMaxDistance(const jobject& obj, const jobject& arg0, const jobject& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID__calculateMaxDistance();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0, arg1, arg2);
    };
    
};

#endif // NET_MINECRAFT_UTIL_SHAPE_VOXELSHAPE_HPP