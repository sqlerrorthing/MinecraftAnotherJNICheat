// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_FIXEDBUFFERINPUTSTREAM_HPP
#define NET_MINECRAFT_UTIL_FIXEDBUFFERINPUTSTREAM_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.FixedBufferInputStream
 * Remapped: axx
 */
namespace FixedBufferInputStream {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("axx", "net/minecraft/util/FastBufferedInputStream", "net/minecraft/class_6826", "net/minecraft/util/FixedBufferInputStream", "net/minecraft/src/C_196105_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.util.FixedBufferInputStream#DEFAULT_BUFFER_SIZE
    [[maybe_unused]] static jint get_field_DEFAULT_BUFFER_SIZE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "DEFAULT_BUFFER_SIZE", "field_36209", "DEFAULT_BUFFER_SIZE", "f_196560_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.FixedBufferInputStream#DEFAULT_BUFFER_SIZE
    [[maybe_unused]] static void set_field_DEFAULT_BUFFER_SIZE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "DEFAULT_BUFFER_SIZE", "field_36209", "DEFAULT_BUFFER_SIZE", "f_196560_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.util.FixedBufferInputStream#stream
    static jobject get_field_stream(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "in", "field_36210", "stream", "f_196561_"), "Ljava/io/InputStream;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.FixedBufferInputStream#stream
    static void set_field_stream(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "in", "field_36210", "stream", "f_196561_"), "Ljava/io/InputStream;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.FixedBufferInputStream#buf
    static jbyte get_field_buf(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "buffer", "field_36211", "buf", "f_196562_"), "[B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetByteField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.FixedBufferInputStream#buf
    static void set_field_buf(const jobject &obj, const jbyte &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "buffer", "field_36211", "buf", "f_196562_"), "[B");
        return MinecraftSDK::env->SetByteField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.FixedBufferInputStream#end
    static jint get_field_end(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "limit", "field_36212", "end", "f_196563_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.FixedBufferInputStream#end
    static void set_field_end(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "limit", "field_36212", "end", "f_196563_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.FixedBufferInputStream#start
    static jint get_field_start(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "position", "field_36213", "start", "f_196564_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.FixedBufferInputStream#start
    static void set_field_start(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "position", "field_36213", "start", "f_196564_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    static jmethodID methodID_read() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("read", "read", "", "", "read"), "()I");
    }

    static jint read(const jobject& obj) {
                
       const auto methodID = methodID_read();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID__read() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("read", "read", "read", "read", "read"), "([BII)I");
    }

    static jint _read(const jobject& obj, const jarray& arg0, const jbyte& arg1, const jint& arg2, const jint& arg3) {
                
       const auto methodID = methodID__read();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_skip() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("skip", "skip", "skip", "skip", "skip"), "(J)J");
    }

    static jlong skip(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_skip();
       return MinecraftSDK::env->CallLongMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_available() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("available", "available", "", "", "available"), "()I");
    }

    static jint available(const jobject& obj) {
                
       const auto methodID = methodID_available();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_close() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("close", "close", "", "", "close"), "()V");
    }

    static void close(const jobject& obj) {
                
       const auto methodID = methodID_close();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getAvailableBuffer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "bytesInBuffer", "method_39779", "getAvailableBuffer", "m_196570_"), "()I");
    }

    static jint getAvailableBuffer(const jobject& obj) {
                
       const auto methodID = methodID_getAvailableBuffer();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_fill() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "fill", "method_39780", "fill", "m_196572_"), "()V");
    }

    static void fill(const jobject& obj) {
                
       const auto methodID = methodID_fill();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_UTIL_FIXEDBUFFERINPUTSTREAM_HPP