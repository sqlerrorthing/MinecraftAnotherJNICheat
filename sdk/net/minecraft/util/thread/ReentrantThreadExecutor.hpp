// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_THREAD_REENTRANTTHREADEXECUTOR_HPP
#define NET_MINECRAFT_UTIL_THREAD_REENTRANTTHREADEXECUTOR_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.thread.ReentrantThreadExecutor
 * Remapped: bpl
 */
namespace ReentrantThreadExecutor {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("bpl", "net/minecraft/util/thread/ReentrantBlockableEventLoop", "net/minecraft/class_4093", "net/minecraft/util/thread/ReentrantThreadExecutor", "net/minecraft/src/C_453_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.util.thread.ReentrantThreadExecutor#runningTasks
    static jint get_field_runningTasks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "reentrantCount", "field_18320", "runningTasks", "f_18763_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.thread.ReentrantThreadExecutor#runningTasks
    static void set_field_runningTasks(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "reentrantCount", "field_18320", "runningTasks", "f_18763_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    static jmethodID methodID_shouldExecuteAsync() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("ay", "scheduleExecutables", "method_5384", "shouldExecuteAsync", "m_5660_"), "()Z");
    }

    static jboolean shouldExecuteAsync(const jobject& obj) {
                
       const auto methodID = methodID_shouldExecuteAsync();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasRunningTasks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bC", "runningTask", "method_18860", "hasRunningTasks", "m_18767_"), "()Z");
    }

    static jboolean hasRunningTasks(const jobject& obj) {
                
       const auto methodID = methodID_hasRunningTasks();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_executeTask() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "doRunTask", "method_18859", "executeTask", "m_6367_"), "(Ljava/lang/Runnable;)V");
    }

    static void executeTask(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_executeTask();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_UTIL_THREAD_REENTRANTTHREADEXECUTOR_HPP