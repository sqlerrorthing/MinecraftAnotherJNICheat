// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_THREAD_THREADEXECUTOR_HPP
#define NET_MINECRAFT_UTIL_THREAD_THREADEXECUTOR_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.thread.ThreadExecutor
 * Remapped: bph
 */
namespace ThreadExecutor {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("bph", "net/minecraft/util/thread/BlockableEventLoop", "net/minecraft/class_1255", "net/minecraft/util/thread/ThreadExecutor", "net/minecraft/src/C_449_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.util.thread.ThreadExecutor#name
    static jobject get_field_name(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "name", "field_18318", "name", "f_18680_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.thread.ThreadExecutor#name
    static void set_field_name(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "name", "field_18318", "name", "f_18680_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for static private field net.minecraft.util.thread.ThreadExecutor#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "LOGGER", "field_5751", "LOGGER", "f_18681_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.thread.ThreadExecutor#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "LOGGER", "field_5751", "LOGGER", "f_18681_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.util.thread.ThreadExecutor#tasks
    static jobject get_field_tasks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "pendingRunnables", "field_5750", "tasks", "f_18682_"), "Ljava/util/Queue;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.thread.ThreadExecutor#tasks
    static void set_field_tasks(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "pendingRunnables", "field_5750", "tasks", "f_18682_"), "Ljava/util/Queue;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.thread.ThreadExecutor#executionsInProgress
    static jint get_field_executionsInProgress(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "blockingCount", "field_18319", "executionsInProgress", "f_18683_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.thread.ThreadExecutor#executionsInProgress
    static void set_field_executionsInProgress(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "blockingCount", "field_18319", "executionsInProgress", "f_18683_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    static jmethodID methodID_createTask() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "wrapRunnable", "method_16211", "createTask", "m_6681_"), "(Ljava/lang/Runnable;)Ljava/lang/Runnable;");
    }

    static jobject createTask(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_createTask();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_canExecute() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "shouldRun", "method_18856", "canExecute", "m_6362_"), "(Ljava/lang/Runnable;)Z");
    }

    static jboolean canExecute(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_canExecute();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isOnThread() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bx", "isSameThread", "method_18854", "isOnThread", "m_18695_"), "()Z");
    }

    static jboolean isOnThread(const jobject& obj) {
                
       const auto methodID = methodID_isOnThread();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getThread() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("az", "getRunningThread", "method_3777", "getThread", "m_6304_"), "()Ljava/lang/Thread;");
    }

    static jobject getThread(const jobject& obj) {
                
       const auto methodID = methodID_getThread();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_shouldExecuteAsync() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("ay", "scheduleExecutables", "method_5384", "shouldExecuteAsync", "m_5660_"), "()Z");
    }

    static jboolean shouldExecuteAsync(const jobject& obj) {
                
       const auto methodID = methodID_shouldExecuteAsync();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getTaskCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("by", "getPendingTasksCount", "method_21684", "getTaskCount", "m_18696_"), "()I");
    }

    static jint getTaskCount(const jobject& obj) {
                
       const auto methodID = methodID_getTaskCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getName() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bz", "name", "method_16898", "getName", "m_7326_"), "()Ljava/lang/String;");
    }

    static jobject getName(const jobject& obj) {
                
       const auto methodID = methodID_getName();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_submit() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "submit", "method_5385", "submit", "m_18691_"), "(Ljava/util/function/Supplier;)Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject submit(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_submit();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_submitAsync() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "submitAsync", "method_5382", "submitAsync", "m_18689_"), "(Ljava/lang/Runnable;)Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject submitAsync(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_submitAsync();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__submit() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "submit", "method_20493", "submit", "m_18707_"), "(Ljava/lang/Runnable;)Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject _submit(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__submit();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_submitAndJoin() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "executeBlocking", "method_19537", "submitAndJoin", "m_18709_"), "(Ljava/lang/Runnable;)V");
    }

    static void submitAndJoin(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_submitAndJoin();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_send() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "tell", "method_18858", "send", "m_6937_"), "(Ljava/lang/Runnable;)V");
    }

    static void send(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_send();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_execute() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("execute", "execute", "execute", "execute", "execute"), "(Ljava/lang/Runnable;)V");
    }

    static void execute(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_execute();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_executeSync() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "executeIfPossible", "method_40000", "executeSync", "m_201446_"), "(Ljava/lang/Runnable;)V");
    }

    static void executeSync(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_executeSync();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_cancelTasks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bA", "dropAllTasks", "method_18855", "cancelTasks", "m_18698_"), "()V");
    }

    static void cancelTasks(const jobject& obj) {
                
       const auto methodID = methodID_cancelTasks();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_runTasks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bB", "runAllTasks", "method_5383", "runTasks", "m_18699_"), "()V");
    }

    static void runTasks(const jobject& obj) {
                
       const auto methodID = methodID_runTasks();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_runTask() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("B", "pollTask", "method_16075", "runTask", "m_7245_"), "()Z");
    }

    static jboolean runTask(const jobject& obj) {
                
       const auto methodID = methodID_runTask();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID__runTasks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "managedBlock", "method_18857", "runTasks", "m_18701_"), "(Ljava/util/function/BooleanSupplier;)V");
    }

    static void _runTasks(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__runTasks();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_waitForTasks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("A", "waitForTasks", "method_20813", "waitForTasks", "m_5667_"), "()V");
    }

    static void waitForTasks(const jobject& obj) {
                
       const auto methodID = methodID_waitForTasks();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_executeTask() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "doRunTask", "method_18859", "executeTask", "m_6367_"), "(Ljava/lang/Runnable;)V");
    }

    static void executeTask(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_executeTask();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_createSamplers() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bw", "profiledMetrics", "method_34705", "createSamplers", "m_142754_"), "()Ljava/util/List;");
    }

    static jobject createSamplers(const jobject& obj) {
                
       const auto methodID = methodID_createSamplers();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_UTIL_THREAD_THREADEXECUTOR_HPP