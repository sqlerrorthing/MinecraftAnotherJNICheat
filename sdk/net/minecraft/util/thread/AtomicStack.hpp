// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_THREAD_ATOMICSTACK_HPP
#define NET_MINECRAFT_UTIL_THREAD_ATOMICSTACK_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.thread.AtomicStack
 * Remapped: axq
 */
namespace AtomicStack {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("axq", "net/minecraft/util/DebugBuffer", "net/minecraft/class_5831", "net/minecraft/util/thread/AtomicStack", "net/minecraft/src/C_140988_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.util.thread.AtomicStack#contents
    static jobject get_field_contents(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "data", "field_28810", "contents", "f_144620_"), "Ljava/util/concurrent/atomic/AtomicReferenceArray;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.thread.AtomicStack#contents
    static void set_field_contents(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "data", "field_28810", "contents", "f_144620_"), "Ljava/util/concurrent/atomic/AtomicReferenceArray;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.thread.AtomicStack#size
    static jobject get_field_size(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "index", "field_28811", "size", "f_144621_"), "Ljava/util/concurrent/atomic/AtomicInteger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.thread.AtomicStack#size
    static void set_field_size(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "index", "field_28811", "size", "f_144621_"), "Ljava/util/concurrent/atomic/AtomicInteger;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_push() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "push", "method_33721", "push", "m_144625_"), "(Ljava/lang/Object;)V");
    }

    static void push(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_push();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_toList() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "dump", "method_33720", "toList", "m_144624_"), "()Ljava/util/List;");
    }

    static jobject toList(const jobject& obj) {
                
       const auto methodID = methodID_toList();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_UTIL_THREAD_ATOMICSTACK_HPP