// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_THREAD_LOCKHELPER_HPP
#define NET_MINECRAFT_UTIL_THREAD_LOCKHELPER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.thread.LockHelper
 * Remapped: azn
 */
namespace LockHelper {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("azn", "net/minecraft/util/ThreadingDetector", "net/minecraft/class_5798", "net/minecraft/util/thread/LockHelper", "net/minecraft/src/C_140993_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.util.thread.LockHelper#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_36293", "LOGGER", "f_199407_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.thread.LockHelper#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_36293", "LOGGER", "f_199407_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.util.thread.LockHelper#name
    static jobject get_field_name(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "name", "field_36294", "name", "f_199408_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.thread.LockHelper#name
    static void set_field_name(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "name", "field_36294", "name", "f_199408_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.thread.LockHelper#semaphore
    static jobject get_field_semaphore(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "lock", "field_36295", "semaphore", "f_199409_"), "Ljava/util/concurrent/Semaphore;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.thread.LockHelper#semaphore
    static void set_field_semaphore(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "lock", "field_36295", "semaphore", "f_199409_"), "Ljava/util/concurrent/Semaphore;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.thread.LockHelper#lock
    static jobject get_field_lock(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "stackTraceLock", "field_36296", "lock", "f_199410_"), "Ljava/util/concurrent/locks/Lock;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.thread.LockHelper#lock
    static void set_field_lock(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "stackTraceLock", "field_36296", "lock", "f_199410_"), "Ljava/util/concurrent/locks/Lock;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.thread.LockHelper#thread
    static jobject get_field_thread(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "threadThatFailedToAcquire", "field_36297", "thread", "f_199411_"), "Ljava/lang/Thread;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.thread.LockHelper#thread
    static void set_field_thread(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "threadThatFailedToAcquire", "field_36297", "thread", "f_199411_"), "Ljava/lang/Thread;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.thread.LockHelper#crashException
    static jobject get_field_crashException(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "fullException", "field_36298", "crashException", "f_199412_"), "Lz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.thread.LockHelper#crashException
    static void set_field_crashException(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "fullException", "field_36298", "crashException", "f_199412_"), "Lz;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID__lock() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "checkAndLock", "method_39935", "lock", "m_199416_"), "()V");
    }

    static void _lock(const jobject& obj) {
                
       const auto methodID = methodID__lock();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_unlock() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "checkAndUnlock", "method_39937", "unlock", "m_199422_"), "()V");
    }

    static void unlock(const jobject& obj) {
                
       const auto methodID = methodID_unlock();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_crash() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "makeThreadingException", "method_33564", "crash", "m_199417_"), "(Ljava/lang/String;Ljava/lang/Thread;)Lz;");
    }

    static jobject crash(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_crash();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_formatStackTraceForThread() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "stackTrace", "method_39936", "formatStackTraceForThread", "m_199420_"), "(Ljava/lang/Thread;)Ljava/lang/String;");
    }

    static jobject formatStackTraceForThread(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_formatStackTraceForThread();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_UTIL_THREAD_LOCKHELPER_HPP