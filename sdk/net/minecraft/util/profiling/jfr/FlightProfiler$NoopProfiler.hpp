// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_PROFILING_JFR_FLIGHTPROFILER$NOOPPROFILER_HPP
#define NET_MINECRAFT_UTIL_PROFILING_JFR_FLIGHTPROFILER$NOOPPROFILER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.profiling.jfr.FlightProfiler$NoopProfiler
 * Remapped: bnl$a
 */
namespace FlightProfiler$NoopProfiler {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("bnl$a", "net/minecraft/util/profiling/jfr/JvmProfiler$NoOpProfiler", "net/minecraft/class_6611$class_6612", "net/minecraft/util/profiling/jfr/FlightProfiler$NoopProfiler", "net/minecraft/src/C_182808_$C_182809_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.util.profiling.jfr.FlightProfiler$NoopProfiler#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "LOGGER", "field_34924", "LOGGER", "f_185355_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.profiling.jfr.FlightProfiler$NoopProfiler#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "LOGGER", "field_34924", "LOGGER", "f_185355_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.util.profiling.jfr.FlightProfiler$NoopProfiler#NOOP
    [[maybe_unused]] static jobject get_field_NOOP() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "noOpCommit", "field_34925", "NOOP", "f_185356_"), "Lbno;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.util.profiling.jfr.FlightProfiler$NoopProfiler#NOOP
    [[maybe_unused]] static void set_field_NOOP(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "noOpCommit", "field_34925", "NOOP", "f_185356_"), "Lbno;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_start() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "start", "method_37981", "start", "m_183425_"), "(Lbnj;)Z");
    }

    static jboolean start(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_start();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_stop() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "stop", "method_37980", "stop", "m_183243_"), "()Ljava/nio/file/Path;");
    }

    static jobject stop(const jobject& obj) {
                
       const auto methodID = methodID_stop();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_isProfiling() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "isRunning", "method_37984", "isProfiling", "m_183608_"), "()Z");
    }

    static jboolean isProfiling(const jobject& obj) {
                
       const auto methodID = methodID_isProfiling();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isAvailable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "isAvailable", "method_38658", "isAvailable", "m_183609_"), "()Z");
    }

    static jboolean isAvailable(const jobject& obj) {
                
       const auto methodID = methodID_isAvailable();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_onPacketReceived() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onPacketReceived", "method_38656", "onPacketReceived", "m_183510_"), "(Lvu;Lzi;Ljava/net/SocketAddress;I)V");
    }

    static void onPacketReceived(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jint& arg3) {
                
       const auto methodID = methodID_onPacketReceived();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_onPacketSent() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "onPacketSent", "method_38657", "onPacketSent", "m_183508_"), "(Lvu;Lzi;Ljava/net/SocketAddress;I)V");
    }

    static void onPacketSent(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jint& arg3) {
                
       const auto methodID = methodID_onPacketSent();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_onChunkRegionRead() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onRegionFileRead", "method_56979", "onChunkRegionRead", "m_321210_"), "(Ldws;Ldcd;Ldwr;I)V");
    }

    static void onChunkRegionRead(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jint& arg3) {
                
       const auto methodID = methodID_onChunkRegionRead();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_onChunkRegionWrite() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "onRegionFileWrite", "method_56980", "onChunkRegionWrite", "m_319778_"), "(Ldws;Ldcd;Ldwr;I)V");
    }

    static void onChunkRegionWrite(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jint& arg3) {
                
       const auto methodID = methodID_onChunkRegionWrite();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_onTick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onServerTick", "method_38654", "onTick", "m_183597_"), "(F)V");
    }

    static void onTick(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_onTick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_startWorldLoadProfiling() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "onWorldLoadedStarted", "method_38659", "startWorldLoadProfiling", "m_183494_"), "()Lbno;");
    }

    static jobject startWorldLoadProfiling(const jobject& obj) {
                
       const auto methodID = methodID_startWorldLoadProfiling();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_startChunkGenerationProfiling() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onChunkGenerate", "method_38655", "startChunkGenerationProfiling", "m_183559_"), "(Ldcd;Lakq;Ljava/lang/String;)Lbno;");
    }

    static jobject startChunkGenerationProfiling(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_startChunkGenerationProfiling();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
};

#endif // NET_MINECRAFT_UTIL_PROFILING_JFR_FLIGHTPROFILER$NOOPPROFILER_HPP