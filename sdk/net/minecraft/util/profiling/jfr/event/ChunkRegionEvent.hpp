// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_PROFILING_JFR_EVENT_CHUNKREGIONEVENT_HPP
#define NET_MINECRAFT_UTIL_PROFILING_JFR_EVENT_CHUNKREGIONEVENT_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.profiling.jfr.event.ChunkRegionEvent
 * Remapped: bnq
 */
namespace ChunkRegionEvent {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("bnq", "net/minecraft/util/profiling/jfr/event/ChunkRegionIoEvent", "net/minecraft/class_9232", "net/minecraft/util/profiling/jfr/event/ChunkRegionEvent", "net/minecraft/src/C_313609_"));
        }
        return cachedClass;
    };

    // getter for public field net.minecraft.util.profiling.jfr.event.ChunkRegionEvent#regionPosX
    static jint get_field_regionPosX(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("regionPosX", "regionPosX", "", "", "regionPosX"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static public field net.minecraft.util.profiling.jfr.event.ChunkRegionEvent#regionPosX
    static void set_field_regionPosX(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("regionPosX", "regionPosX", "", "", "regionPosX"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.util.profiling.jfr.event.ChunkRegionEvent#regionPosZ
    static jint get_field_regionPosZ(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("regionPosZ", "regionPosZ", "", "", "regionPosZ"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static public field net.minecraft.util.profiling.jfr.event.ChunkRegionEvent#regionPosZ
    static void set_field_regionPosZ(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("regionPosZ", "regionPosZ", "", "", "regionPosZ"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.util.profiling.jfr.event.ChunkRegionEvent#localChunkPosX
    static jint get_field_localChunkPosX(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("localChunkPosX", "localChunkPosX", "", "", "localChunkPosX"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static public field net.minecraft.util.profiling.jfr.event.ChunkRegionEvent#localChunkPosX
    static void set_field_localChunkPosX(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("localChunkPosX", "localChunkPosX", "", "", "localChunkPosX"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.util.profiling.jfr.event.ChunkRegionEvent#localChunkPosZ
    static jint get_field_localChunkPosZ(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("localChunkPosZ", "localChunkPosZ", "", "", "localChunkPosZ"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static public field net.minecraft.util.profiling.jfr.event.ChunkRegionEvent#localChunkPosZ
    static void set_field_localChunkPosZ(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("localChunkPosZ", "localChunkPosZ", "", "", "localChunkPosZ"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.util.profiling.jfr.event.ChunkRegionEvent#chunkPosX
    static jint get_field_chunkPosX(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("chunkPosX", "chunkPosX", "", "", "chunkPosX"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static public field net.minecraft.util.profiling.jfr.event.ChunkRegionEvent#chunkPosX
    static void set_field_chunkPosX(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("chunkPosX", "chunkPosX", "", "", "chunkPosX"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.util.profiling.jfr.event.ChunkRegionEvent#chunkPosZ
    static jint get_field_chunkPosZ(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("chunkPosZ", "chunkPosZ", "", "", "chunkPosZ"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static public field net.minecraft.util.profiling.jfr.event.ChunkRegionEvent#chunkPosZ
    static void set_field_chunkPosZ(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("chunkPosZ", "chunkPosZ", "", "", "chunkPosZ"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.util.profiling.jfr.event.ChunkRegionEvent#worldId
    static jobject get_field_worldId(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("levelId", "levelId", "levelId", "worldId", "levelId"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static public field net.minecraft.util.profiling.jfr.event.ChunkRegionEvent#worldId
    static void set_field_worldId(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("levelId", "levelId", "levelId", "worldId", "levelId"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.util.profiling.jfr.event.ChunkRegionEvent#dimension
    static jobject get_field_dimension(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("dimension", "dimension", "", "", "dimension"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static public field net.minecraft.util.profiling.jfr.event.ChunkRegionEvent#dimension
    static void set_field_dimension(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("dimension", "dimension", "", "", "dimension"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.util.profiling.jfr.event.ChunkRegionEvent#type
    static jobject get_field_type(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("type", "type", "", "", "type"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static public field net.minecraft.util.profiling.jfr.event.ChunkRegionEvent#type
    static void set_field_type(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("type", "type", "", "", "type"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.util.profiling.jfr.event.ChunkRegionEvent#compression
    static jobject get_field_compression(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("compression", "compression", "", "", "compression"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static public field net.minecraft.util.profiling.jfr.event.ChunkRegionEvent#compression
    static void set_field_compression(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("compression", "compression", "", "", "compression"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.util.profiling.jfr.event.ChunkRegionEvent#bytes
    static jint get_field_bytes(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("bytes", "bytes", "", "", "bytes"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static public field net.minecraft.util.profiling.jfr.event.ChunkRegionEvent#bytes
    static void set_field_bytes(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("bytes", "bytes", "", "", "bytes"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

};

#endif // NET_MINECRAFT_UTIL_PROFILING_JFR_EVENT_CHUNKREGIONEVENT_HPP