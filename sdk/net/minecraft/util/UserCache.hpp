// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_UTIL_USERCACHE_HPP
#define NET_MINECRAFT_UTIL_USERCACHE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.util.UserCache
 * Remapped: aun
 */
namespace UserCache {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("aun", "net/minecraft/server/players/GameProfileCache", "net/minecraft/class_3312", "net/minecraft/util/UserCache", "net/minecraft/src/C_90_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.util.UserCache#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_25805", "LOGGER", "f_10964_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.UserCache#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_25805", "LOGGER", "f_10964_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.UserCache#MAX_SAVED_ENTRIES
    [[maybe_unused]] static jint get_field_MAX_SAVED_ENTRIES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "GAMEPROFILES_MRU_LIMIT", "field_29788", "MAX_SAVED_ENTRIES", "f_143955_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.UserCache#MAX_SAVED_ENTRIES
    [[maybe_unused]] static void set_field_MAX_SAVED_ENTRIES(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "GAMEPROFILES_MRU_LIMIT", "field_29788", "MAX_SAVED_ENTRIES", "f_143955_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.UserCache#field_29789
    [[maybe_unused]] static jint get_field_field_29789() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "GAMEPROFILES_EXPIRATION_MONTHS", "field_29789", "field_29789", "f_143956_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.UserCache#field_29789
    [[maybe_unused]] static void set_field_field_29789(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "GAMEPROFILES_EXPIRATION_MONTHS", "field_29789", "field_29789", "f_143956_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.util.UserCache#useRemote
    [[maybe_unused]] static jboolean get_field_useRemote() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "usesAuthentication", "field_14313", "useRemote", "f_10965_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticBooleanField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.util.UserCache#useRemote
    [[maybe_unused]] static void set_field_useRemote(const jboolean &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "usesAuthentication", "field_14313", "useRemote", "f_10965_"), "Z");
        return MinecraftSDK::env->SetStaticBooleanField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.util.UserCache#byName
    static jobject get_field_byName(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "profilesByName", "field_14312", "byName", "f_10966_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.UserCache#byName
    static void set_field_byName(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "profilesByName", "field_14312", "byName", "f_10966_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.UserCache#byUuid
    static jobject get_field_byUuid(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "profilesByUUID", "field_14310", "byUuid", "f_10967_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.UserCache#byUuid
    static void set_field_byUuid(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "profilesByUUID", "field_14310", "byUuid", "f_10967_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.UserCache#pendingRequests
    static jobject get_field_pendingRequests(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "requests", "field_33860", "pendingRequests", "f_143957_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.UserCache#pendingRequests
    static void set_field_pendingRequests(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "requests", "field_33860", "pendingRequests", "f_143957_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.UserCache#profileRepository
    static jobject get_field_profileRepository(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "profileRepository", "field_14315", "profileRepository", "f_10968_"), "Lcom/mojang/authlib/GameProfileRepository;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.UserCache#profileRepository
    static void set_field_profileRepository(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "profileRepository", "field_14315", "profileRepository", "f_10968_"), "Lcom/mojang/authlib/GameProfileRepository;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.UserCache#gson
    static jobject get_field_gson(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "gson", "field_14318", "gson", "f_10969_"), "Lcom/google/gson/Gson;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.UserCache#gson
    static void set_field_gson(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "gson", "field_14318", "gson", "f_10969_"), "Lcom/google/gson/Gson;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.UserCache#cacheFile
    static jobject get_field_cacheFile(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "file", "field_14314", "cacheFile", "f_10970_"), "Ljava/io/File;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.UserCache#cacheFile
    static void set_field_cacheFile(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "file", "field_14314", "cacheFile", "f_10970_"), "Ljava/io/File;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.UserCache#accessCount
    static jobject get_field_accessCount(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "operationCount", "field_25724", "accessCount", "f_10971_"), "Ljava/util/concurrent/atomic/AtomicLong;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.UserCache#accessCount
    static void set_field_accessCount(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "operationCount", "field_25724", "accessCount", "f_10971_"), "Ljava/util/concurrent/atomic/AtomicLong;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.util.UserCache#executor
    static jobject get_field_executor(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "executor", "field_33861", "executor", "f_143958_"), "Ljava/util/concurrent/Executor;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.util.UserCache#executor
    static void set_field_executor(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "executor", "field_33861", "executor", "f_143958_"), "Ljava/util/concurrent/Executor;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_add() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "safeAdd", "method_30164", "add", "m_10979_"), "(Laun$a;)V");
    }

    static void add(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_add();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_findProfileByName() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "lookupGameProfile", "method_14509", "findProfileByName", "m_10993_"), "(Lcom/mojang/authlib/GameProfileRepository;Ljava/lang/String;)Ljava/util/Optional;");
    }

    static jobject findProfileByName(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_findProfileByName();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getOfflinePlayerProfile() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "createUnknownProfile", "method_53912", "getOfflinePlayerProfile", "m_304894_"), "(Ljava/lang/String;)Ljava/util/Optional;");
    }

    static jobject getOfflinePlayerProfile(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getOfflinePlayerProfile();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_setUseRemote() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "setUsesAuthentication", "method_14510", "setUseRemote", "m_11004_"), "(Z)V");
    }

    static void setUseRemote(const jboolean& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_setUseRemote();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_shouldUseRemote() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("d", "usesAuthentication", "method_14514", "shouldUseRemote", "m_11007_"), "()Z");
    }

    static jboolean shouldUseRemote() {
       const auto clazz = self();
       const auto methodID = methodID_shouldUseRemote();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID);
    };
    
    static jmethodID methodID__add() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "add", "method_14508", "add", "m_10991_"), "(Lcom/mojang/authlib/GameProfile;)V");
    }

    static void _add(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__add();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_incrementAndGetAccessCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "getNextOperation", "method_30169", "incrementAndGetAccessCount", "m_11008_"), "()J");
    }

    static jlong incrementAndGetAccessCount(const jobject& obj) {
                
       const auto methodID = methodID_incrementAndGetAccessCount();
       return MinecraftSDK::env->CallLongMethod(obj, methodID);
    };
    
    static jmethodID methodID_findByName() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "get", "method_14515", "findByName", "m_10996_"), "(Ljava/lang/String;)Ljava/util/Optional;");
    }

    static jobject findByName(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_findByName();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_findByNameAsync() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getAsync", "method_37156", "findByNameAsync", "m_143967_"), "(Ljava/lang/String;)Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject findByNameAsync(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_findByNameAsync();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getByUuid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "get", "method_14512", "getByUuid", "m_11002_"), "(Ljava/util/UUID;)Ljava/util/Optional;");
    }

    static jobject getByUuid(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getByUuid();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setExecutor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setExecutor", "method_37157", "setExecutor", "m_143974_"), "(Ljava/util/concurrent/Executor;)V");
    }

    static void setExecutor(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setExecutor();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_clearExecutor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "clearExecutor", "method_39753", "clearExecutor", "m_196559_"), "()V");
    }

    static void clearExecutor(const jobject& obj) {
                
       const auto methodID = methodID_clearExecutor();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getDateFormat() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("f", "createDateFormat", "method_30170", "getDateFormat", "m_11009_"), "()Ljava/text/DateFormat;");
    }

    static jobject getDateFormat() {
       const auto clazz = self();
       const auto methodID = methodID_getDateFormat();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_load() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "load", "method_14517", "load", "m_10976_"), "()Ljava/util/List;");
    }

    static jobject load(const jobject& obj) {
                
       const auto methodID = methodID_load();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_save() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "save", "method_14518", "save", "m_11006_"), "()V");
    }

    static void save(const jobject& obj) {
                
       const auto methodID = methodID_save();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getLastAccessedEntries() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getTopMRUProfiles", "method_14516", "getLastAccessedEntries", "m_10977_"), "(I)Ljava/util/stream/Stream;");
    }

    static jobject getLastAccessedEntries(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_getLastAccessedEntries();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_entryToJson() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "writeGameProfile", "method_30165", "entryToJson", "m_10981_"), "(Laun$a;Ljava/text/DateFormat;)Lcom/google/gson/JsonElement;");
    }

    static jobject entryToJson(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_entryToJson();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_entryFromJson() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "readGameProfile", "method_30167", "entryFromJson", "m_10988_"), "(Lcom/google/gson/JsonElement;Ljava/text/DateFormat;)Ljava/util/Optional;");
    }

    static jobject entryFromJson(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_entryFromJson();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_UTIL_USERCACHE_HPP