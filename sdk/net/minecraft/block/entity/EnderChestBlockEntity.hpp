// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_BLOCK_ENTITY_ENDERCHESTBLOCKENTITY_HPP
#define NET_MINECRAFT_BLOCK_ENTITY_ENDERCHESTBLOCKENTITY_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.block.entity.EnderChestBlockEntity
 * Remapped: drd
 */
namespace EnderChestBlockEntity {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("drd", "net/minecraft/world/level/block/entity/EnderChestBlockEntity", "net/minecraft/class_2611", "net/minecraft/block/entity/EnderChestBlockEntity", "net/minecraft/src/C_2007_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.block.entity.EnderChestBlockEntity#lidAnimator
    static jobject get_field_lidAnimator(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "chestLidController", "field_27216", "lidAnimator", "f_155510_"), "Ldqp;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.entity.EnderChestBlockEntity#lidAnimator
    static void set_field_lidAnimator(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "chestLidController", "field_27216", "lidAnimator", "f_155510_"), "Ldqp;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.entity.EnderChestBlockEntity#stateManager
    static jobject get_field_stateManager(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "openersCounter", "field_27217", "stateManager", "f_155511_"), "Ldqu;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.entity.EnderChestBlockEntity#stateManager
    static void set_field_stateManager(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "openersCounter", "field_27217", "stateManager", "f_155511_"), "Ldqu;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_clientTick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "lidAnimateTick", "method_31689", "clientTick", "m_155517_"), "(Ldcw;Ljd;Ldtc;Ldrd;)V");
    }

    static void clientTick(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_clientTick();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_onSyncedBlockEvent() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a_", "triggerEvent", "method_11004", "onSyncedBlockEvent", "m_7531_"), "(II)Z");
    }

    static jboolean onSyncedBlockEvent(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_onSyncedBlockEvent();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_onOpen() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "startOpen", "method_11219", "onOpen", "m_155515_"), "(Lcmx;)V");
    }

    static void onOpen(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onOpen();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onClose() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "stopOpen", "method_11220", "onClose", "m_155522_"), "(Lcmx;)V");
    }

    static void onClose(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onClose();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_canPlayerUse() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "stillValid", "method_11218", "canPlayerUse", "m_59282_"), "(Lcmx;)Z");
    }

    static jboolean canPlayerUse(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_canPlayerUse();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onScheduledTick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "recheckOpen", "method_31690", "onScheduledTick", "m_155524_"), "()V");
    }

    static void onScheduledTick(const jobject& obj) {
                
       const auto methodID = methodID_onScheduledTick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getAnimationProgress() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getOpenNess", "method_11274", "getAnimationProgress", "m_6683_"), "(F)F");
    }

    static jfloat getAnimationProgress(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_getAnimationProgress();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_BLOCK_ENTITY_ENDERCHESTBLOCKENTITY_HPP