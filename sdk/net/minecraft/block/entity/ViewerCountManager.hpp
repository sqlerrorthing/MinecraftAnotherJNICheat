// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_BLOCK_ENTITY_VIEWERCOUNTMANAGER_HPP
#define NET_MINECRAFT_BLOCK_ENTITY_VIEWERCOUNTMANAGER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.block.entity.ViewerCountManager
 * Remapped: dqu
 */
namespace ViewerCountManager {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dqu", "net/minecraft/world/level/block/entity/ContainerOpenersCounter", "net/minecraft/class_5561", "net/minecraft/block/entity/ViewerCountManager", "net/minecraft/src/C_141248_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.block.entity.ViewerCountManager#SCHEDULE_TICK_DELAY
    [[maybe_unused]] static jint get_field_SCHEDULE_TICK_DELAY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CHECK_TICK_DELAY", "field_31339", "SCHEDULE_TICK_DELAY", "f_155447_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.entity.ViewerCountManager#SCHEDULE_TICK_DELAY
    [[maybe_unused]] static void set_field_SCHEDULE_TICK_DELAY(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CHECK_TICK_DELAY", "field_31339", "SCHEDULE_TICK_DELAY", "f_155447_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.block.entity.ViewerCountManager#viewerCount
    static jint get_field_viewerCount(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "openCount", "field_27215", "viewerCount", "f_155448_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.entity.ViewerCountManager#viewerCount
    static void set_field_viewerCount(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "openCount", "field_27215", "viewerCount", "f_155448_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.entity.ViewerCountManager#maxBlockInteractionRange
    static jdouble get_field_maxBlockInteractionRange(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "maxInteractionRange", "field_48376", "maxBlockInteractionRange", "f_314841_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.entity.ViewerCountManager#maxBlockInteractionRange
    static void set_field_maxBlockInteractionRange(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "maxInteractionRange", "field_48376", "maxBlockInteractionRange", "f_314841_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    static jmethodID methodID_onContainerOpen() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onOpen", "method_31681", "onContainerOpen", "m_142292_"), "(Ldcw;Ljd;Ldtc;)V");
    }

    static void onContainerOpen(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_onContainerOpen();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_onContainerClose() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "onClose", "method_31683", "onContainerClose", "m_142289_"), "(Ldcw;Ljd;Ldtc;)V");
    }

    static void onContainerClose(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_onContainerClose();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_onViewerCountUpdate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "openerCountChanged", "method_31682", "onViewerCountUpdate", "m_142148_"), "(Ldcw;Ljd;Ldtc;II)V");
    }

    static void onViewerCountUpdate(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jint& arg3, const jint& arg4) {
                
       const auto methodID = methodID_onViewerCountUpdate();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_isPlayerViewing() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isOwnContainer", "method_31679", "isPlayerViewing", "m_142718_"), "(Lcmx;)Z");
    }

    static jboolean isPlayerViewing(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isPlayerViewing();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_openContainer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "incrementOpeners", "method_31684", "openContainer", "m_155452_"), "(Lcmx;Ldcw;Ljd;Ldtc;)V");
    }

    static void openContainer(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_openContainer();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_closeContainer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "decrementOpeners", "method_31685", "closeContainer", "m_155468_"), "(Lcmx;Ldcw;Ljd;Ldtc;)V");
    }

    static void closeContainer(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_closeContainer();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_getViewingPlayers() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getPlayersWithContainerOpen", "method_56121", "getViewingPlayers", "m_319165_"), "(Ldcw;Ljd;)Ljava/util/List;");
    }

    static jobject getViewingPlayers(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_getViewingPlayers();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_updateViewerCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "recheckOpeners", "method_31686", "updateViewerCount", "m_155476_"), "(Ldcw;Ljd;Ldtc;)V");
    }

    static void updateViewerCount(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_updateViewerCount();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getViewerCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getOpenerCount", "method_31678", "getViewerCount", "m_155450_"), "()I");
    }

    static jint getViewerCount(const jobject& obj) {
                
       const auto methodID = methodID_getViewerCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_scheduleBlockTick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("d", "scheduleRecheck", "method_31687", "scheduleBlockTick", "m_155480_"), "(Ldcw;Ljd;Ldtc;)V");
    }

    static void scheduleBlockTick(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_scheduleBlockTick();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
};

#endif // NET_MINECRAFT_BLOCK_ENTITY_VIEWERCOUNTMANAGER_HPP