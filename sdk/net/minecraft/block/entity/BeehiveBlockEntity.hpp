// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_BLOCK_ENTITY_BEEHIVEBLOCKENTITY_HPP
#define NET_MINECRAFT_BLOCK_ENTITY_BEEHIVEBLOCKENTITY_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.block.entity.BeehiveBlockEntity
 * Remapped: dqe
 */
namespace BeehiveBlockEntity {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dqe", "net/minecraft/world/level/block/entity/BeehiveBlockEntity", "net/minecraft/class_4482", "net/minecraft/block/entity/BeehiveBlockEntity", "net/minecraft/src/C_1985_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.block.entity.BeehiveBlockEntity#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "LOGGER", "field_49409", "LOGGER", "f_316080_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.entity.BeehiveBlockEntity#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "LOGGER", "field_49409", "LOGGER", "f_316080_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.entity.BeehiveBlockEntity#FLOWER_POS_KEY
    [[maybe_unused]] static jobject get_field_FLOWER_POS_KEY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "TAG_FLOWER_POS", "field_31306", "FLOWER_POS_KEY", "f_155121_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.entity.BeehiveBlockEntity#FLOWER_POS_KEY
    [[maybe_unused]] static void set_field_FLOWER_POS_KEY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "TAG_FLOWER_POS", "field_31306", "FLOWER_POS_KEY", "f_155121_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.entity.BeehiveBlockEntity#BEES_KEY
    [[maybe_unused]] static jobject get_field_BEES_KEY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "BEES", "field_31311", "BEES_KEY", "f_155126_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.entity.BeehiveBlockEntity#BEES_KEY
    [[maybe_unused]] static void set_field_BEES_KEY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "BEES", "field_31311", "BEES_KEY", "f_155126_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.block.entity.BeehiveBlockEntity#IRRELEVANT_BEE_NBT_KEYS
    [[maybe_unused]] static jobject get_field_IRRELEVANT_BEE_NBT_KEYS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "IGNORED_BEE_TAGS", "field_33570", "IRRELEVANT_BEE_NBT_KEYS", "f_155129_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.block.entity.BeehiveBlockEntity#IRRELEVANT_BEE_NBT_KEYS
    [[maybe_unused]] static void set_field_IRRELEVANT_BEE_NBT_KEYS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "IGNORED_BEE_TAGS", "field_33570", "IRRELEVANT_BEE_NBT_KEYS", "f_155129_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.entity.BeehiveBlockEntity#MAX_BEE_COUNT
    [[maybe_unused]] static jint get_field_MAX_BEE_COUNT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "MAX_OCCUPANTS", "field_31312", "MAX_BEE_COUNT", "f_155127_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.entity.BeehiveBlockEntity#MAX_BEE_COUNT
    [[maybe_unused]] static void set_field_MAX_BEE_COUNT(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "MAX_OCCUPANTS", "field_31312", "MAX_BEE_COUNT", "f_155127_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.entity.BeehiveBlockEntity#ANGERED_CANNOT_ENTER_HIVE_TICKS
    [[maybe_unused]] static jint get_field_ANGERED_CANNOT_ENTER_HIVE_TICKS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "MIN_TICKS_BEFORE_REENTERING_HIVE", "field_31314", "ANGERED_CANNOT_ENTER_HIVE_TICKS", "f_155130_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.entity.BeehiveBlockEntity#ANGERED_CANNOT_ENTER_HIVE_TICKS
    [[maybe_unused]] static void set_field_ANGERED_CANNOT_ENTER_HIVE_TICKS(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "MIN_TICKS_BEFORE_REENTERING_HIVE", "field_31314", "ANGERED_CANNOT_ENTER_HIVE_TICKS", "f_155130_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.entity.BeehiveBlockEntity#MIN_OCCUPATION_TICKS_WITH_NECTAR
    [[maybe_unused]] static jint get_field_MIN_OCCUPATION_TICKS_WITH_NECTAR() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "MIN_OCCUPATION_TICKS_NECTAR", "field_31315", "MIN_OCCUPATION_TICKS_WITH_NECTAR", "f_155131_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.entity.BeehiveBlockEntity#MIN_OCCUPATION_TICKS_WITH_NECTAR
    [[maybe_unused]] static void set_field_MIN_OCCUPATION_TICKS_WITH_NECTAR(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "MIN_OCCUPATION_TICKS_NECTAR", "field_31315", "MIN_OCCUPATION_TICKS_WITH_NECTAR", "f_155131_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.entity.BeehiveBlockEntity#MIN_OCCUPATION_TICKS_WITHOUT_NECTAR
    [[maybe_unused]] static jint get_field_MIN_OCCUPATION_TICKS_WITHOUT_NECTAR() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "MIN_OCCUPATION_TICKS_NECTARLESS", "field_31313", "MIN_OCCUPATION_TICKS_WITHOUT_NECTAR", "f_155128_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.entity.BeehiveBlockEntity#MIN_OCCUPATION_TICKS_WITHOUT_NECTAR
    [[maybe_unused]] static void set_field_MIN_OCCUPATION_TICKS_WITHOUT_NECTAR(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "MIN_OCCUPATION_TICKS_NECTARLESS", "field_31313", "MIN_OCCUPATION_TICKS_WITHOUT_NECTAR", "f_155128_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.block.entity.BeehiveBlockEntity#bees
    static jobject get_field_bees(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "stored", "field_20423", "bees", "f_58732_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.entity.BeehiveBlockEntity#bees
    static void set_field_bees(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "stored", "field_20423", "bees", "f_58732_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.entity.BeehiveBlockEntity#flowerPos
    static jobject get_field_flowerPos(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "savedFlowerPos", "field_20424", "flowerPos", "f_58733_"), "Ljd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.entity.BeehiveBlockEntity#flowerPos
    static void set_field_flowerPos(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "savedFlowerPos", "field_20424", "flowerPos", "f_58733_"), "Ljd;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_markDirty() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "setChanged", "method_5431", "markDirty", "m_6596_"), "()V");
    }

    static void markDirty(const jobject& obj) {
                
       const auto methodID = methodID_markDirty();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_isNearFire() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "isFireNearby", "method_23280", "isNearFire", "m_58773_"), "()Z");
    }

    static jboolean isNearFire(const jobject& obj) {
                
       const auto methodID = methodID_isNearFire();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasNoBees() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "isEmpty", "method_22400", "hasNoBees", "m_58774_"), "()Z");
    }

    static jboolean hasNoBees(const jobject& obj) {
                
       const auto methodID = methodID_hasNoBees();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isFullOfBees() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "isFull", "method_21856", "isFullOfBees", "m_58775_"), "()Z");
    }

    static jboolean isFullOfBees(const jobject& obj) {
                
       const auto methodID = methodID_isFullOfBees();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_angerBees() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "emptyAllLivingFromHive", "method_21850", "angerBees", "m_58748_"), "(Lcmx;Ldtc;Ldqe$b;)V");
    }

    static void angerBees(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_angerBees();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_tryReleaseBee() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "releaseAllOccupants", "method_21852", "tryReleaseBee", "m_58759_"), "(Ldtc;Ldqe$b;)Ljava/util/List;");
    }

    static jobject tryReleaseBee(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_tryReleaseBee();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getBeeCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "getOccupantCount", "method_23903", "getBeeCount", "m_58776_"), "()I");
    }

    static jint getBeeCount(const jobject& obj) {
                
       const auto methodID = methodID_getBeeCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getHoneyLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getHoneyLevel", "method_23902", "getHoneyLevel", "m_58752_"), "(Ldtc;)I");
    }

    static jint getHoneyLevel(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getHoneyLevel();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_isSmoked() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "isSedated", "method_23904", "isSmoked", "m_58777_"), "()Z");
    }

    static jboolean isSmoked(const jobject& obj) {
                
       const auto methodID = methodID_isSmoked();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_tryEnterHive() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addOccupant", "method_21848", "tryEnterHive", "m_58741_"), "(Lbsr;)V");
    }

    static void tryEnterHive(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_tryEnterHive();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_addBee() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "storeBee", "method_35292", "addBee", "m_155157_"), "(Ldqe$c;)V");
    }

    static void addBee(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addBee();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_releaseBee() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "releaseOccupant", "method_21855", "releaseBee", "m_155136_"), "(Ldcw;Ljd;Ldtc;Ldqe$c;Ljava/util/List;Ldqe$b;Ljd;)Z");
    }

    static jboolean releaseBee(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4, const jobject& arg5, const jobject& arg6) {
       const auto clazz = self();
       const auto methodID = methodID_releaseBee();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    };
    
    static jmethodID methodID_hasFlowerPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "hasSavedFlowerPos", "method_21857", "hasFlowerPos", "m_58780_"), "()Z");
    }

    static jboolean hasFlowerPos(const jobject& obj) {
                
       const auto methodID = methodID_hasFlowerPos();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_tickBees() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "tickOccupants", "method_21858", "tickBees", "m_155149_"), "(Ldcw;Ljd;Ldtc;Ljava/util/List;Ljd;)V");
    }

    static void tickBees(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4) {
       const auto clazz = self();
       const auto methodID = methodID_tickBees();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_serverTick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "serverTick", "method_31656", "serverTick", "m_155144_"), "(Ldcw;Ljd;Ldtc;Ldqe;)V");
    }

    static void serverTick(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_serverTick();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_readNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "loadAdditional", "method_11014", "readNbt", "m_318667_"), "(Lub;Ljo$a;)V");
    }

    static void readNbt(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_readNbt();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_writeNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "saveAdditional", "method_11007", "writeNbt", "m_183515_"), "(Lub;Ljo$a;)V");
    }

    static void writeNbt(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_writeNbt();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_readComponents() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "applyImplicitComponents", "method_57568", "readComponents", "m_318741_"), "(Ldqh$b;)V");
    }

    static void readComponents(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_readComponents();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_addComponents() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "collectImplicitComponents", "method_57567", "addComponents", "m_318837_"), "(Lkm$a;)V");
    }

    static void addComponents(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addComponents();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_removeFromCopiedStackNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "removeComponentsFromTag", "method_57569", "removeFromCopiedStackNbt", "m_318942_"), "(Lub;)V");
    }

    static void removeFromCopiedStackNbt(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_removeFromCopiedStackNbt();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_createBeesData() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "getBees", "method_57580", "createBeesData", "m_322480_"), "()Ljava/util/List;");
    }

    static jobject createBeesData(const jobject& obj) {
                
       const auto methodID = methodID_createBeesData();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_BLOCK_ENTITY_BEEHIVEBLOCKENTITY_HPP