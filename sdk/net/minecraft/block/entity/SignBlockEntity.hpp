// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_BLOCK_ENTITY_SIGNBLOCKENTITY_HPP
#define NET_MINECRAFT_BLOCK_ENTITY_SIGNBLOCKENTITY_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.block.entity.SignBlockEntity
 * Remapped: drs
 */
namespace SignBlockEntity {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("drs", "net/minecraft/world/level/block/entity/SignBlockEntity", "net/minecraft/class_2625", "net/minecraft/block/entity/SignBlockEntity", "net/minecraft/src/C_2024_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.block.entity.SignBlockEntity#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_43294", "LOGGER", "f_276608_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.entity.SignBlockEntity#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_43294", "LOGGER", "f_276608_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.entity.SignBlockEntity#MAX_TEXT_WIDTH
    [[maybe_unused]] static jint get_field_MAX_TEXT_WIDTH() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "MAX_TEXT_LINE_WIDTH", "field_40335", "MAX_TEXT_WIDTH", "f_243840_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.entity.SignBlockEntity#MAX_TEXT_WIDTH
    [[maybe_unused]] static void set_field_MAX_TEXT_WIDTH(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "MAX_TEXT_LINE_WIDTH", "field_40335", "MAX_TEXT_WIDTH", "f_243840_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.entity.SignBlockEntity#TEXT_LINE_HEIGHT
    [[maybe_unused]] static jint get_field_TEXT_LINE_HEIGHT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "TEXT_LINE_HEIGHT", "field_40336", "TEXT_LINE_HEIGHT", "f_243968_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.entity.SignBlockEntity#TEXT_LINE_HEIGHT
    [[maybe_unused]] static void set_field_TEXT_LINE_HEIGHT(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "TEXT_LINE_HEIGHT", "field_40336", "TEXT_LINE_HEIGHT", "f_243968_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.block.entity.SignBlockEntity#editor
    static jobject get_field_editor(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "playerWhoMayEdit", "field_12046", "editor", "f_59722_"), "Ljava/util/UUID;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.entity.SignBlockEntity#editor
    static void set_field_editor(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "playerWhoMayEdit", "field_12046", "editor", "f_59722_"), "Ljava/util/UUID;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.entity.SignBlockEntity#frontText
    static jobject get_field_frontText(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "frontText", "field_43295", "frontText", "f_276598_"), "Ldrt;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.entity.SignBlockEntity#frontText
    static void set_field_frontText(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "frontText", "field_43295", "frontText", "f_276598_"), "Ldrt;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.entity.SignBlockEntity#backText
    static jobject get_field_backText(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "backText", "field_43296", "backText", "f_276476_"), "Ldrt;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.entity.SignBlockEntity#backText
    static void set_field_backText(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "backText", "field_43296", "backText", "f_276476_"), "Ldrt;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.entity.SignBlockEntity#waxed
    static jboolean get_field_waxed(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "isWaxed", "field_43297", "waxed", "f_276544_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.entity.SignBlockEntity#waxed
    static void set_field_waxed(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "isWaxed", "field_43297", "waxed", "f_276544_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    static jmethodID methodID_createText() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "createDefaultSignText", "method_49852", "createText", "m_277006_"), "()Ldrt;");
    }

    static jobject createText(const jobject& obj) {
                
       const auto methodID = methodID_createText();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_isPlayerFacingFront() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isFacingFrontText", "method_49834", "isPlayerFacingFront", "m_277202_"), "(Lcmx;)Z");
    }

    static jboolean isPlayerFacingFront(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isPlayerFacingFront();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getText() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getText", "method_49843", "getText", "m_277157_"), "(Z)Ldrt;");
    }

    static jobject getText(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_getText();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getFrontText() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "getFrontText", "method_49853", "getFrontText", "m_277142_"), "()Ldrt;");
    }

    static jobject getFrontText(const jobject& obj) {
                
       const auto methodID = methodID_getFrontText();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getBackText() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "getBackText", "method_49854", "getBackText", "m_277159_"), "()Ldrt;");
    }

    static jobject getBackText(const jobject& obj) {
                
       const auto methodID = methodID_getBackText();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getTextLineHeight() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getTextLineHeight", "method_45469", "getTextLineHeight", "m_245065_"), "()I");
    }

    static jint getTextLineHeight(const jobject& obj) {
                
       const auto methodID = methodID_getTextLineHeight();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getMaxTextWidth() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getMaxTextLineWidth", "method_45470", "getMaxTextWidth", "m_245123_"), "()I");
    }

    static jint getMaxTextWidth(const jobject& obj) {
                
       const auto methodID = methodID_getMaxTextWidth();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_writeNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "saveAdditional", "method_11007", "writeNbt", "m_183515_"), "(Lub;Ljo$a;)V");
    }

    static void writeNbt(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_writeNbt();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_readNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "loadAdditional", "method_11014", "readNbt", "m_318667_"), "(Lub;Ljo$a;)V");
    }

    static void readNbt(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_readNbt();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_parseLines() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "loadLines", "method_50008", "parseLines", "m_278182_"), "(Ldrt;)Ldrt;");
    }

    static jobject parseLines(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_parseLines();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_parseLine() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "loadLine", "method_50009", "parseLine", "m_278165_"), "(Lwz;)Lwz;");
    }

    static jobject parseLine(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_parseLine();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_tryChangeText() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateSignText", "method_49836", "tryChangeText", "m_277134_"), "(Lcmx;ZLjava/util/List;)V");
    }

    static void tryChangeText(const jobject& obj, const jobject& arg0, const jboolean& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_tryChangeText();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_changeText() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateText", "method_49841", "changeText", "m_277073_"), "(Ljava/util/function/UnaryOperator;Z)Z");
    }

    static jboolean changeText(const jobject& obj, const jobject& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_changeText();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getTextWithMessages() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setMessages", "method_49835", "getTextWithMessages", "m_276929_"), "(Lcmx;Ljava/util/List;Ldrt;)Ldrt;");
    }

    static jobject getTextWithMessages(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_getTextWithMessages();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_setText() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setText", "method_49840", "setText", "m_276956_"), "(Ldrt;Z)Z");
    }

    static jboolean setText(const jobject& obj, const jobject& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_setText();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_setBackText() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setBackText", "method_49839", "setBackText", "m_277170_"), "(Ldrt;)Z");
    }

    static jboolean setBackText(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setBackText();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setFrontText() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "setFrontText", "method_49846", "setFrontText", "m_276964_"), "(Ldrt;)Z");
    }

    static jboolean setFrontText(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setFrontText();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_canRunCommandClickEvent() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "canExecuteClickCommands", "method_50010", "canRunCommandClickEvent", "m_278157_"), "(ZLcmx;)Z");
    }

    static jboolean canRunCommandClickEvent(const jobject& obj, const jboolean& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_canRunCommandClickEvent();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_runCommandClickEvent() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "executeClickCommandsIfPresent", "method_50007", "runCommandClickEvent", "m_278155_"), "(Lcmx;Ldcw;Ljd;Z)Z");
    }

    static jboolean runCommandClickEvent(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jboolean& arg3) {
                
       const auto methodID = methodID_runCommandClickEvent();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_createCommandSource() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "createCommandSourceStack", "method_50006", "createCommandSource", "m_278808_"), "(Lcmx;Ldcw;Ljd;)Let;");
    }

    static jobject createCommandSource(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_createCommandSource();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_toUpdatePacket() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "getUpdatePacket", "method_38249", "toUpdatePacket", "m_58483_"), "()Lacb;");
    }

    static jobject toUpdatePacket(const jobject& obj) {
                
       const auto methodID = methodID_toUpdatePacket();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_toInitialChunkDataNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getUpdateTag", "method_16887", "toInitialChunkDataNbt", "m_5995_"), "(Ljo$a;)Lub;");
    }

    static jobject toInitialChunkDataNbt(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_toInitialChunkDataNbt();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_copyItemDataRequiresOperator() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("q", "onlyOpCanSetNbt", "method_11011", "copyItemDataRequiresOperator", "m_6326_"), "()Z");
    }

    static jboolean copyItemDataRequiresOperator(const jobject& obj) {
                
       const auto methodID = methodID_copyItemDataRequiresOperator();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setEditor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setAllowedPlayerEditor", "method_11306", "setEditor", "m_155713_"), "(Ljava/util/UUID;)V");
    }

    static void setEditor(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setEditor();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getEditor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("u", "getPlayerWhoMayEdit", "method_11305", "getEditor", "m_155726_"), "()Ljava/util/UUID;");
    }

    static jobject getEditor(const jobject& obj) {
                
       const auto methodID = methodID_getEditor();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_updateListeners() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("w", "markUpdated", "method_34272", "updateListeners", "m_155728_"), "()V");
    }

    static void updateListeners(const jobject& obj) {
                
       const auto methodID = methodID_updateListeners();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_isWaxed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("v", "isWaxed", "method_49855", "isWaxed", "m_277118_"), "()Z");
    }

    static jboolean isWaxed(const jobject& obj) {
                
       const auto methodID = methodID_isWaxed();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setWaxed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setWaxed", "method_49849", "setWaxed", "m_277031_"), "(Z)Z");
    }

    static jboolean setWaxed(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setWaxed();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isPlayerTooFarToEdit() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "playerIsTooFarAwayToEdit", "method_49847", "isPlayerTooFarToEdit", "m_276813_"), "(Ljava/util/UUID;)Z");
    }

    static jboolean isPlayerTooFarToEdit(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isPlayerTooFarToEdit();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "tick", "method_49837", "tick", "m_276836_"), "(Ldcw;Ljd;Ldtc;Ldrs;)V");
    }

    static void tick(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_tick();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_tryClearInvalidEditor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "clearInvalidPlayerWhoMayEdit", "method_49838", "tryClearInvalidEditor", "m_276965_"), "(Ldrs;Ldcw;Ljava/util/UUID;)V");
    }

    static void tryClearInvalidEditor(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_tryClearInvalidEditor();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getInteractionFailSound() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getSignInteractionFailedSoundEvent", "method_54303", "getInteractionFailSound", "m_307050_"), "()Lavo;");
    }

    static jobject getInteractionFailSound(const jobject& obj) {
                
       const auto methodID = methodID_getInteractionFailSound();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_BLOCK_ENTITY_SIGNBLOCKENTITY_HPP