// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_BLOCK_PISTON_PISTONHANDLER_HPP
#define NET_MINECRAFT_BLOCK_PISTON_PISTONHANDLER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.block.piston.PistonHandler
 * Remapped: dsz
 */
namespace PistonHandler {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dsz", "net/minecraft/world/level/block/piston/PistonStructureResolver", "net/minecraft/class_2674", "net/minecraft/block/piston/PistonHandler", "net/minecraft/src/C_2055_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.block.piston.PistonHandler#MAX_MOVABLE_BLOCKS
    [[maybe_unused]] static jint get_field_MAX_MOVABLE_BLOCKS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "MAX_PUSH_DEPTH", "field_31384", "MAX_MOVABLE_BLOCKS", "f_155936_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.piston.PistonHandler#MAX_MOVABLE_BLOCKS
    [[maybe_unused]] static void set_field_MAX_MOVABLE_BLOCKS(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "MAX_PUSH_DEPTH", "field_31384", "MAX_MOVABLE_BLOCKS", "f_155936_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.block.piston.PistonHandler#world
    static jobject get_field_world(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "level", "field_12249", "world", "f_60409_"), "Ldcw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.piston.PistonHandler#world
    static void set_field_world(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "level", "field_12249", "world", "f_60409_"), "Ldcw;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.piston.PistonHandler#posFrom
    static jobject get_field_posFrom(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "pistonPos", "field_12250", "posFrom", "f_60410_"), "Ljd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.piston.PistonHandler#posFrom
    static void set_field_posFrom(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "pistonPos", "field_12250", "posFrom", "f_60410_"), "Ljd;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.piston.PistonHandler#retracted
    static jboolean get_field_retracted(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "extending", "field_12247", "retracted", "f_60411_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.piston.PistonHandler#retracted
    static void set_field_retracted(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "extending", "field_12247", "retracted", "f_60411_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.piston.PistonHandler#posTo
    static jobject get_field_posTo(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "startPos", "field_12244", "posTo", "f_60412_"), "Ljd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.piston.PistonHandler#posTo
    static void set_field_posTo(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "startPos", "field_12244", "posTo", "f_60412_"), "Ljd;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.piston.PistonHandler#motionDirection
    static jobject get_field_motionDirection(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "pushDirection", "field_12243", "motionDirection", "f_60413_"), "Lji;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.piston.PistonHandler#motionDirection
    static void set_field_motionDirection(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "pushDirection", "field_12243", "motionDirection", "f_60413_"), "Lji;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.piston.PistonHandler#movedBlocks
    static jobject get_field_movedBlocks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "toPush", "field_12245", "movedBlocks", "f_60414_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.piston.PistonHandler#movedBlocks
    static void set_field_movedBlocks(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "toPush", "field_12245", "movedBlocks", "f_60414_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.piston.PistonHandler#brokenBlocks
    static jobject get_field_brokenBlocks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "toDestroy", "field_12246", "brokenBlocks", "f_60415_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.piston.PistonHandler#brokenBlocks
    static void set_field_brokenBlocks(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "toDestroy", "field_12246", "brokenBlocks", "f_60415_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.piston.PistonHandler#pistonDirection
    static jobject get_field_pistonDirection(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "pistonDirection", "field_12248", "pistonDirection", "f_60416_"), "Lji;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.piston.PistonHandler#pistonDirection
    static void set_field_pistonDirection(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "pistonDirection", "field_12248", "pistonDirection", "f_60416_"), "Lji;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_calculatePush() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "resolve", "method_11537", "calculatePush", "m_60422_"), "()Z");
    }

    static jboolean calculatePush(const jobject& obj) {
                
       const auto methodID = methodID_calculatePush();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isBlockSticky() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "isSticky", "method_23367", "isBlockSticky", "m_155937_"), "(Ldtc;)Z");
    }

    static jboolean isBlockSticky(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_isBlockSticky();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_isAdjacentBlockStuck() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "canStickToEachOther", "method_23675", "isAdjacentBlockStuck", "m_155939_"), "(Ldtc;Ldtc;)Z");
    }

    static jboolean isAdjacentBlockStuck(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_isAdjacentBlockStuck();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_tryMove() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addBlockLine", "method_11540", "tryMove", "m_60433_"), "(Ljd;Lji;)Z");
    }

    static jboolean tryMove(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_tryMove();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_setMovedBlocks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "reorderListAtCollision", "method_11539", "setMovedBlocks", "m_60423_"), "(II)V");
    }

    static void setMovedBlocks(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_setMovedBlocks();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_tryMoveAdjacentBlock() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addBranchingBlocks", "method_11538", "tryMoveAdjacentBlock", "m_60431_"), "(Ljd;)Z");
    }

    static jboolean tryMoveAdjacentBlock(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_tryMoveAdjacentBlock();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getMotionDirection() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getPushDirection", "method_35299", "getMotionDirection", "m_155942_"), "()Lji;");
    }

    static jobject getMotionDirection(const jobject& obj) {
                
       const auto methodID = methodID_getMotionDirection();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getMovedBlocks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getToPush", "method_11541", "getMovedBlocks", "m_60436_"), "()Ljava/util/List;");
    }

    static jobject getMovedBlocks(const jobject& obj) {
                
       const auto methodID = methodID_getMovedBlocks();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getBrokenBlocks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getToDestroy", "method_11536", "getBrokenBlocks", "m_60437_"), "()Ljava/util/List;");
    }

    static jobject getBrokenBlocks(const jobject& obj) {
                
       const auto methodID = methodID_getBrokenBlocks();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_BLOCK_PISTON_PISTONHANDLER_HPP