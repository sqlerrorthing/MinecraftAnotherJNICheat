// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_BLOCK_BLOCK_HPP
#define NET_MINECRAFT_BLOCK_BLOCK_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.block.Block
 * Remapped: dfy
 */
namespace Block {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dfy", "net/minecraft/world/level/block/Block", "net/minecraft/class_2248", "net/minecraft/block/Block", "net/minecraft/src/C_1706_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.block.Block#CODEC
    [[maybe_unused]] static jobject get_field_CODEC() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("p", "CODEC", "field_46280", "CODEC", "f_303539_"), "Lcom/mojang/serialization/MapCodec;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.Block#CODEC
    [[maybe_unused]] static void set_field_CODEC(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("p", "CODEC", "field_46280", "CODEC", "f_303539_"), "Lcom/mojang/serialization/MapCodec;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.Block#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_10638", "LOGGER", "f_49790_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.Block#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_10638", "LOGGER", "f_49790_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.block.Block#registryEntry
    static jobject get_field_registryEntry(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "builtInRegistryHolder", "field_36404", "registryEntry", "f_204296_"), "Ljm$c;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.Block#registryEntry
    static void set_field_registryEntry(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "builtInRegistryHolder", "field_36404", "registryEntry", "f_204296_"), "Ljm$c;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for static public field net.minecraft.block.Block#STATE_IDS
    [[maybe_unused]] static jobject get_field_STATE_IDS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("q", "BLOCK_STATE_REGISTRY", "field_10651", "STATE_IDS", "f_49791_"), "Ljs;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.Block#STATE_IDS
    [[maybe_unused]] static void set_field_STATE_IDS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("q", "BLOCK_STATE_REGISTRY", "field_10651", "STATE_IDS", "f_49791_"), "Ljs;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.Block#FULL_CUBE_SHAPE_CACHE
    [[maybe_unused]] static jobject get_field_FULL_CUBE_SHAPE_CACHE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "SHAPE_FULL_BLOCK_CACHE", "field_19312", "FULL_CUBE_SHAPE_CACHE", "f_49785_"), "Lcom/google/common/cache/LoadingCache;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.Block#FULL_CUBE_SHAPE_CACHE
    [[maybe_unused]] static void set_field_FULL_CUBE_SHAPE_CACHE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "SHAPE_FULL_BLOCK_CACHE", "field_19312", "FULL_CUBE_SHAPE_CACHE", "f_49785_"), "Lcom/google/common/cache/LoadingCache;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.Block#NOTIFY_NEIGHBORS
    [[maybe_unused]] static jint get_field_NOTIFY_NEIGHBORS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("r", "UPDATE_NEIGHBORS", "field_31027", "NOTIFY_NEIGHBORS", "f_152393_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.Block#NOTIFY_NEIGHBORS
    [[maybe_unused]] static void set_field_NOTIFY_NEIGHBORS(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("r", "UPDATE_NEIGHBORS", "field_31027", "NOTIFY_NEIGHBORS", "f_152393_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.Block#NOTIFY_LISTENERS
    [[maybe_unused]] static jint get_field_NOTIFY_LISTENERS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("s", "UPDATE_CLIENTS", "field_31028", "NOTIFY_LISTENERS", "f_152394_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.Block#NOTIFY_LISTENERS
    [[maybe_unused]] static void set_field_NOTIFY_LISTENERS(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("s", "UPDATE_CLIENTS", "field_31028", "NOTIFY_LISTENERS", "f_152394_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.Block#NO_REDRAW
    [[maybe_unused]] static jint get_field_NO_REDRAW() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("t", "UPDATE_INVISIBLE", "field_31029", "NO_REDRAW", "f_152395_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.Block#NO_REDRAW
    [[maybe_unused]] static void set_field_NO_REDRAW(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("t", "UPDATE_INVISIBLE", "field_31029", "NO_REDRAW", "f_152395_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.Block#REDRAW_ON_MAIN_THREAD
    [[maybe_unused]] static jint get_field_REDRAW_ON_MAIN_THREAD() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("u", "UPDATE_IMMEDIATE", "field_31030", "REDRAW_ON_MAIN_THREAD", "f_152396_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.Block#REDRAW_ON_MAIN_THREAD
    [[maybe_unused]] static void set_field_REDRAW_ON_MAIN_THREAD(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("u", "UPDATE_IMMEDIATE", "field_31030", "REDRAW_ON_MAIN_THREAD", "f_152396_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.Block#FORCE_STATE
    [[maybe_unused]] static jint get_field_FORCE_STATE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("v", "UPDATE_KNOWN_SHAPE", "field_31031", "FORCE_STATE", "f_152397_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.Block#FORCE_STATE
    [[maybe_unused]] static void set_field_FORCE_STATE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("v", "UPDATE_KNOWN_SHAPE", "field_31031", "FORCE_STATE", "f_152397_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.Block#SKIP_DROPS
    [[maybe_unused]] static jint get_field_SKIP_DROPS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("w", "UPDATE_SUPPRESS_DROPS", "field_31032", "SKIP_DROPS", "f_152398_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.Block#SKIP_DROPS
    [[maybe_unused]] static void set_field_SKIP_DROPS(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("w", "UPDATE_SUPPRESS_DROPS", "field_31032", "SKIP_DROPS", "f_152398_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.Block#MOVED
    [[maybe_unused]] static jint get_field_MOVED() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("x", "UPDATE_MOVE_BY_PISTON", "field_31033", "MOVED", "f_152399_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.Block#MOVED
    [[maybe_unused]] static void set_field_MOVED(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("x", "UPDATE_MOVE_BY_PISTON", "field_31033", "MOVED", "f_152399_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.Block#field_31035
    [[maybe_unused]] static jint get_field_field_31035() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("y", "UPDATE_NONE", "field_31035", "field_31035", "f_152401_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.Block#field_31035
    [[maybe_unused]] static void set_field_field_31035(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("y", "UPDATE_NONE", "field_31035", "field_31035", "f_152401_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.Block#NOTIFY_ALL
    [[maybe_unused]] static jint get_field_NOTIFY_ALL() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("z", "UPDATE_ALL", "field_31036", "NOTIFY_ALL", "f_152402_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.Block#NOTIFY_ALL
    [[maybe_unused]] static void set_field_NOTIFY_ALL(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("z", "UPDATE_ALL", "field_31036", "NOTIFY_ALL", "f_152402_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.Block#NOTIFY_ALL_AND_REDRAW
    [[maybe_unused]] static jint get_field_NOTIFY_ALL_AND_REDRAW() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("A", "UPDATE_ALL_IMMEDIATE", "field_31022", "NOTIFY_ALL_AND_REDRAW", "f_152388_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.Block#NOTIFY_ALL_AND_REDRAW
    [[maybe_unused]] static void set_field_NOTIFY_ALL_AND_REDRAW(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("A", "UPDATE_ALL_IMMEDIATE", "field_31022", "NOTIFY_ALL_AND_REDRAW", "f_152388_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.Block#field_31023
    [[maybe_unused]] static jfloat get_field_field_31023() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("B", "INDESTRUCTIBLE", "field_31023", "field_31023", "f_152389_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.Block#field_31023
    [[maybe_unused]] static void set_field_field_31023(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("B", "INDESTRUCTIBLE", "field_31023", "field_31023", "f_152389_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.Block#field_31024
    [[maybe_unused]] static jfloat get_field_field_31024() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("C", "INSTANT", "field_31024", "field_31024", "f_152390_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.Block#field_31024
    [[maybe_unused]] static void set_field_field_31024(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("C", "INSTANT", "field_31024", "field_31024", "f_152390_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.Block#field_31025
    [[maybe_unused]] static jint get_field_field_31025() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("D", "UPDATE_LIMIT", "field_31025", "field_31025", "f_152391_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.Block#field_31025
    [[maybe_unused]] static void set_field_field_31025(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("D", "UPDATE_LIMIT", "field_31025", "field_31025", "f_152391_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for protected field net.minecraft.block.Block#stateManager
    static jobject get_field_stateManager(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("E", "stateDefinition", "field_10647", "stateManager", "f_49792_"), "Ldtd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.block.Block#stateManager
    static void set_field_stateManager(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("E", "stateDefinition", "field_10647", "stateManager", "f_49792_"), "Ldtd;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.Block#defaultState
    static jobject get_field_defaultState(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "defaultBlockState", "field_10646", "defaultState", "f_49786_"), "Ldtc;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.Block#defaultState
    static void set_field_defaultState(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "defaultBlockState", "field_10646", "defaultState", "f_49786_"), "Ldtc;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.Block#translationKey
    static jobject get_field_translationKey(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "descriptionId", "field_10642", "translationKey", "f_49787_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.Block#translationKey
    static void set_field_translationKey(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "descriptionId", "field_10642", "translationKey", "f_49787_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.Block#cachedItem
    static jobject get_field_cachedItem(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "item", "field_17562", "cachedItem", "f_49788_"), "Lcul;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.Block#cachedItem
    static void set_field_cachedItem(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "item", "field_17562", "cachedItem", "f_49788_"), "Lcul;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for static private field net.minecraft.block.Block#field_31026
    [[maybe_unused]] static jint get_field_field_31026() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "CACHE_SIZE", "field_31026", "field_31026", "f_152392_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.Block#field_31026
    [[maybe_unused]] static void set_field_field_31026(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "CACHE_SIZE", "field_31026", "field_31026", "f_152392_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.Block#FACE_CULL_MAP
    [[maybe_unused]] static jobject get_field_FACE_CULL_MAP() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "OCCLUSION_CACHE", "field_10649", "FACE_CULL_MAP", "f_49789_"), "Ljava/lang/ThreadLocal;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.Block#FACE_CULL_MAP
    [[maybe_unused]] static void set_field_FACE_CULL_MAP(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "OCCLUSION_CACHE", "field_10649", "FACE_CULL_MAP", "f_49789_"), "Ljava/lang/ThreadLocal;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_getCodec() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "codec", "method_53969", "getCodec", "m_304657_"), "()Lcom/mojang/serialization/MapCodec;");
    }

    static jobject getCodec(const jobject& obj) {
                
       const auto methodID = methodID_getCodec();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getRawIdFromState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("i", "getId", "method_9507", "getRawIdFromState", "m_49956_"), "(Ldtc;)I");
    }

    static jint getRawIdFromState(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getRawIdFromState();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getStateFromRawId() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "stateById", "method_9531", "getStateFromRawId", "m_49803_"), "(I)Ldtc;");
    }

    static jobject getStateFromRawId(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getStateFromRawId();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getBlockFromItem() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "byItem", "method_9503", "getBlockFromItem", "m_49814_"), "(Lcul;)Ldfy;");
    }

    static jobject getBlockFromItem(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getBlockFromItem();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_pushEntitiesUpBeforeBlockChange() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "pushEntitiesUp", "method_9582", "pushEntitiesUpBeforeBlockChange", "m_49897_"), "(Ldtc;Ldtc;Ldcx;Ljd;)Ldtc;");
    }

    static jobject pushEntitiesUpBeforeBlockChange(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_pushEntitiesUpBeforeBlockChange();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_createCuboidShape() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "box", "method_9541", "createCuboidShape", "m_49796_"), "(DDDDDD)Lexv;");
    }

    static jobject createCuboidShape(const jdouble& arg0, const jdouble& arg1, const jdouble& arg2, const jdouble& arg3, const jdouble& arg4, const jdouble& arg5) {
       const auto clazz = self();
       const auto methodID = methodID_createCuboidShape();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
    static jmethodID methodID_postProcessState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "updateFromNeighbourShapes", "method_9510", "postProcessState", "m_49931_"), "(Ldtc;Ldcx;Ljd;)Ldtc;");
    }

    static jobject postProcessState(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_postProcessState();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_replace() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "updateOrDestroy", "method_30094", "replace", "m_49902_"), "(Ldtc;Ldtc;Ldcx;Ljd;I)V");
    }

    static void replace(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jint& arg4) {
       const auto clazz = self();
       const auto methodID = methodID_replace();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID__replace() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "updateOrDestroy", "method_9611", "replace", "m_49908_"), "(Ldtc;Ldtc;Ldcx;Ljd;II)V");
    }

    static void _replace(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jint& arg4, const jint& arg5) {
       const auto clazz = self();
       const auto methodID = methodID__replace();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
    static jmethodID methodID_cannotConnect() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("j", "isExceptionForConnection", "method_9581", "cannotConnect", "m_152463_"), "(Ldtc;)Z");
    }

    static jboolean cannotConnect(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_cannotConnect();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_shouldDrawSide() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "shouldRenderFace", "method_9607", "shouldDrawSide", "m_152444_"), "(Ldtc;Ldcc;Ljd;Lji;Ljd;)Z");
    }

    static jboolean shouldDrawSide(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4) {
       const auto clazz = self();
       const auto methodID = methodID_shouldDrawSide();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_hasTopRim() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "canSupportRigidBlock", "method_16361", "hasTopRim", "m_49936_"), "(Ldcc;Ljd;)Z");
    }

    static jboolean hasTopRim(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_hasTopRim();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_sideCoversSmallSquare() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "canSupportCenter", "method_20044", "sideCoversSmallSquare", "m_49863_"), "(Ldcz;Ljd;Lji;)Z");
    }

    static jboolean sideCoversSmallSquare(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_sideCoversSmallSquare();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_isFaceFullSquare() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "isFaceFull", "method_9501", "isFaceFullSquare", "m_49918_"), "(Lexv;Lji;)Z");
    }

    static jboolean isFaceFullSquare(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_isFaceFullSquare();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isShapeFullCube() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "isShapeFullBlock", "method_9614", "isShapeFullCube", "m_49916_"), "(Lexv;)Z");
    }

    static jboolean isShapeFullCube(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_isShapeFullCube();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_randomDisplayTick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "animateTick", "method_9496", "randomDisplayTick", "m_214162_"), "(Ldtc;Ldcw;Ljd;Layw;)V");
    }

    static void randomDisplayTick(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_randomDisplayTick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_onBroken() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "destroy", "method_9585", "onBroken", "m_6786_"), "(Ldcx;Ljd;Ldtc;)V");
    }

    static void onBroken(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_onBroken();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getDroppedStacks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getDrops", "method_9562", "getDroppedStacks", "m_49869_"), "(Ldtc;Laqu;Ljd;Ldqh;)Ljava/util/List;");
    }

    static jobject getDroppedStacks(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_getDroppedStacks();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID__getDroppedStacks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getDrops", "method_9609", "getDroppedStacks", "m_49874_"), "(Ldtc;Laqu;Ljd;Ldqh;Lbsr;Lcuq;)Ljava/util/List;");
    }

    static jobject _getDroppedStacks(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4, const jobject& arg5) {
       const auto clazz = self();
       const auto methodID = methodID__getDroppedStacks();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
    static jmethodID methodID_dropStacks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "dropResources", "method_9497", "dropStacks", "m_49950_"), "(Ldtc;Ldcw;Ljd;)V");
    }

    static void dropStacks(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_dropStacks();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__dropStacks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "dropResources", "method_9610", "dropStacks", "m_49892_"), "(Ldtc;Ldcx;Ljd;Ldqh;)V");
    }

    static void _dropStacks(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
       const auto clazz = self();
       const auto methodID = methodID__dropStacks();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID___dropStacks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "dropResources", "method_9511", "dropStacks", "m_49881_"), "(Ldtc;Ldcw;Ljd;Ldqh;Lbsr;Lcuq;)V");
    }

    static void __dropStacks(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4, const jobject& arg5) {
       const auto clazz = self();
       const auto methodID = methodID___dropStacks();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
    static jmethodID methodID_dropStack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "popResource", "method_9577", "dropStack", "m_49840_"), "(Ldcw;Ljd;Lcuq;)V");
    }

    static void dropStack(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_dropStack();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__dropStack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "popResourceFromFace", "method_36992", "dropStack", "m_152435_"), "(Ldcw;Ljd;Lji;Lcuq;)V");
    }

    static void _dropStack(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
       const auto clazz = self();
       const auto methodID = methodID__dropStack();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID___dropStack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "popResource", "method_36993", "dropStack", "m_152440_"), "(Ldcw;Ljava/util/function/Supplier;Lcuq;)V");
    }

    static void __dropStack(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID___dropStack();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_dropExperience() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "popExperience", "method_9583", "dropExperience", "m_49805_"), "(Laqu;Ljd;I)V");
    }

    static void dropExperience(const jobject& obj, const jobject& arg0, const jobject& arg1, const jint& arg2) {
                
       const auto methodID = methodID_dropExperience();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getBlastResistance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "getExplosionResistance", "method_9520", "getBlastResistance", "m_7325_"), "()F");
    }

    static jfloat getBlastResistance(const jobject& obj) {
                
       const auto methodID = methodID_getBlastResistance();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_onDestroyedByExplosion() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "wasExploded", "method_9586", "onDestroyedByExplosion", "m_7592_"), "(Ldcw;Ljd;Ldco;)V");
    }

    static void onDestroyedByExplosion(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_onDestroyedByExplosion();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_onSteppedOn() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "stepOn", "method_9591", "onSteppedOn", "m_141947_"), "(Ldcw;Ljd;Ldtc;Lbsr;)V");
    }

    static void onSteppedOn(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_onSteppedOn();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_getPlacementState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getStateForPlacement", "method_9605", "getPlacementState", "m_5573_"), "(Lcyd;)Ldtc;");
    }

    static jobject getPlacementState(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getPlacementState();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_afterBreak() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "playerDestroy", "method_9556", "afterBreak", "m_6240_"), "(Ldcw;Lcmx;Ljd;Ldtc;Ldqh;Lcuq;)V");
    }

    static void afterBreak(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4, const jobject& arg5) {
                
       const auto methodID = methodID_afterBreak();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
    static jmethodID methodID_onPlaced() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setPlacedBy", "method_9567", "onPlaced", "m_6402_"), "(Ldcw;Ljd;Ldtc;Lbtn;Lcuq;)V");
    }

    static void onPlaced(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4) {
                
       const auto methodID = methodID_onPlaced();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_canMobSpawnInside() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isPossibleToRespawnInThis", "method_9538", "canMobSpawnInside", "m_48673_"), "(Ldtc;)Z");
    }

    static jboolean canMobSpawnInside(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_canMobSpawnInside();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getName() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "getName", "method_9518", "getName", "m_49954_"), "()Lxn;");
    }

    static jobject getName(const jobject& obj) {
                
       const auto methodID = methodID_getName();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getTranslationKey() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "getDescriptionId", "method_9539", "getTranslationKey", "m_7705_"), "()Ljava/lang/String;");
    }

    static jobject getTranslationKey(const jobject& obj) {
                
       const auto methodID = methodID_getTranslationKey();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_onLandedUpon() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "fallOn", "method_9554", "onLandedUpon", "m_142072_"), "(Ldcw;Ldtc;Ljd;Lbsr;F)V");
    }

    static void onLandedUpon(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jfloat& arg4) {
                
       const auto methodID = methodID_onLandedUpon();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_onEntityLand() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateEntityAfterFallOn", "method_9502", "onEntityLand", "m_5548_"), "(Ldcc;Lbsr;)V");
    }

    static void onEntityLand(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_onEntityLand();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getPickStack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getCloneItemStack", "method_9574", "getPickStack", "m_7397_"), "(Ldcz;Ljd;Ldtc;)Lcuq;");
    }

    static jobject getPickStack(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_getPickStack();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getSlipperiness() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "getFriction", "method_9499", "getSlipperiness", "m_49958_"), "()F");
    }

    static jfloat getSlipperiness(const jobject& obj) {
                
       const auto methodID = methodID_getSlipperiness();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_getVelocityMultiplier() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "getSpeedFactor", "method_23349", "getVelocityMultiplier", "m_49961_"), "()F");
    }

    static jfloat getVelocityMultiplier(const jobject& obj) {
                
       const auto methodID = methodID_getVelocityMultiplier();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_getJumpVelocityMultiplier() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "getJumpFactor", "method_23350", "getJumpVelocityMultiplier", "m_49964_"), "()F");
    }

    static jfloat getJumpVelocityMultiplier(const jobject& obj) {
                
       const auto methodID = methodID_getJumpVelocityMultiplier();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_spawnBreakParticles() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "spawnDestroyParticles", "method_33614", "spawnBreakParticles", "m_142387_"), "(Ldcw;Lcmx;Ljd;Ldtc;)V");
    }

    static void spawnBreakParticles(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_spawnBreakParticles();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_onBreak() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "playerWillDestroy", "method_9576", "onBreak", "m_5707_"), "(Ldcw;Ljd;Ldtc;Lcmx;)Ldtc;");
    }

    static jobject onBreak(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_onBreak();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_precipitationTick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handlePrecipitation", "method_9504", "precipitationTick", "m_141997_"), "(Ldtc;Ldcw;Ljd;Lddw$c;)V");
    }

    static void precipitationTick(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_precipitationTick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_shouldDropItemsOnExplosion() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "dropFromExplosion", "method_9533", "shouldDropItemsOnExplosion", "m_6903_"), "(Ldco;)Z");
    }

    static jboolean shouldDropItemsOnExplosion(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_shouldDropItemsOnExplosion();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_appendProperties() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "createBlockStateDefinition", "method_9515", "appendProperties", "m_7926_"), "(Ldtd$a;)V");
    }

    static void appendProperties(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_appendProperties();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getStateManager() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "getStateDefinition", "method_9595", "getStateManager", "m_49965_"), "()Ldtd;");
    }

    static jobject getStateManager(const jobject& obj) {
                
       const auto methodID = methodID_getStateManager();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_setDefaultState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "registerDefaultState", "method_9590", "setDefaultState", "m_49959_"), "(Ldtc;)V");
    }

    static void setDefaultState(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setDefaultState();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getDefaultState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("o", "defaultBlockState", "method_9564", "getDefaultState", "m_49966_"), "()Ldtc;");
    }

    static jobject getDefaultState(const jobject& obj) {
                
       const auto methodID = methodID_getDefaultState();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getStateWithProperties() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "withPropertiesOf", "method_34725", "getStateWithProperties", "m_152465_"), "(Ldtc;)Ldtc;");
    }

    static jobject getStateWithProperties(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getStateWithProperties();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_copyProperty() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "copyProperty", "method_34724", "copyProperty", "m_152454_"), "(Ldtc;Ldtc;Lduf;)Ldtc;");
    }

    static jobject copyProperty(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_copyProperty();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_asItem() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("r", "asItem", "method_8389", "asItem", "m_5456_"), "()Lcul;");
    }

    static jobject asItem(const jobject& obj) {
                
       const auto methodID = methodID_asItem();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasDynamicBounds() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("p", "hasDynamicShape", "method_9543", "hasDynamicBounds", "m_49967_"), "()Z");
    }

    static jboolean hasDynamicBounds(const jobject& obj) {
                
       const auto methodID = methodID_hasDynamicBounds();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_appendTooltip() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "appendHoverText", "method_9568", "appendTooltip", "m_5871_"), "(Lcuq;Lcul$b;Ljava/util/List;Lcwm;)V");
    }

    static void appendTooltip(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_appendTooltip();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_asBlock() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("q", "asBlock", "method_26160", "asBlock", "m_7374_"), "()Ldfy;");
    }

    static jobject asBlock(const jobject& obj) {
                
       const auto methodID = methodID_asBlock();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getShapesForStates() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getShapeForEachState", "method_33615", "getShapesForStates", "m_152458_"), "(Ljava/util/function/Function;)Lcom/google/common/collect/ImmutableMap;");
    }

    static jobject getShapesForStates(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getShapesForStates();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getRegistryEntry() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("s", "builtInRegistryHolder", "method_40142", "getRegistryEntry", "m_204297_"), "()Ljm$c;");
    }

    static jobject getRegistryEntry(const jobject& obj) {
                
       const auto methodID = methodID_getRegistryEntry();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_dropExperienceWhenMined() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "tryDropExperience", "method_41420", "dropExperienceWhenMined", "m_220822_"), "(Laqu;Ljd;Lcuq;Lbpw;)V");
    }

    static void dropExperienceWhenMined(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_dropExperienceWhenMined();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
};

#endif // NET_MINECRAFT_BLOCK_BLOCK_HPP