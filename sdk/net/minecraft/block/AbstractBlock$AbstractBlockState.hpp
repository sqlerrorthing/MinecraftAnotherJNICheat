// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_BLOCK_ABSTRACTBLOCK$ABSTRACTBLOCKSTATE_HPP
#define NET_MINECRAFT_BLOCK_ABSTRACTBLOCK$ABSTRACTBLOCKSTATE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.block.AbstractBlock$AbstractBlockState
 * Remapped: dtb$a
 */
namespace AbstractBlock$AbstractBlockState {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dtb$a", "net/minecraft/world/level/block/state/BlockBehaviour$BlockStateBase", "net/minecraft/class_4970$class_4971", "net/minecraft/block/AbstractBlock$AbstractBlockState", "net/minecraft/src/C_2056_$C_2058_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.block.AbstractBlock$AbstractBlockState#luminance
    static jint get_field_luminance(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "lightEmission", "field_23167", "luminance", "f_60594_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.AbstractBlock$AbstractBlockState#luminance
    static void set_field_luminance(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "lightEmission", "field_23167", "luminance", "f_60594_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.AbstractBlock$AbstractBlockState#hasSidedTransparency
    static jboolean get_field_hasSidedTransparency(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "useShapeForLightOcclusion", "field_23168", "hasSidedTransparency", "f_60595_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.AbstractBlock$AbstractBlockState#hasSidedTransparency
    static void set_field_hasSidedTransparency(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "useShapeForLightOcclusion", "field_23168", "hasSidedTransparency", "f_60595_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.AbstractBlock$AbstractBlockState#isAir
    static jboolean get_field_isAir(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "isAir", "field_23169", "isAir", "f_60596_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.AbstractBlock$AbstractBlockState#isAir
    static void set_field_isAir(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "isAir", "field_23169", "isAir", "f_60596_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.AbstractBlock$AbstractBlockState#burnable
    static jboolean get_field_burnable(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "ignitedByLava", "field_43392", "burnable", "f_278120_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.AbstractBlock$AbstractBlockState#burnable
    static void set_field_burnable(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "ignitedByLava", "field_43392", "burnable", "f_278120_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.AbstractBlock$AbstractBlockState#liquid
    static jboolean get_field_liquid(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "liquid", "field_44480", "liquid", "f_278472_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.AbstractBlock$AbstractBlockState#liquid
    static void set_field_liquid(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "liquid", "field_44480", "liquid", "f_278472_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.AbstractBlock$AbstractBlockState#solid
    static jboolean get_field_solid(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "legacySolid", "field_44624", "solid", "f_279551_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.AbstractBlock$AbstractBlockState#solid
    static void set_field_solid(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "legacySolid", "field_44624", "solid", "f_279551_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.AbstractBlock$AbstractBlockState#pistonBehavior
    static jobject get_field_pistonBehavior(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "pushReaction", "field_43393", "pistonBehavior", "f_278134_"), "Lepj;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.AbstractBlock$AbstractBlockState#pistonBehavior
    static void set_field_pistonBehavior(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "pushReaction", "field_43393", "pistonBehavior", "f_278134_"), "Lepj;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.AbstractBlock$AbstractBlockState#mapColor
    static jobject get_field_mapColor(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "mapColor", "field_23171", "mapColor", "f_283893_"), "Lepi;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.AbstractBlock$AbstractBlockState#mapColor
    static void set_field_mapColor(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "mapColor", "field_23171", "mapColor", "f_283893_"), "Lepi;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.AbstractBlock$AbstractBlockState#hardness
    static jfloat get_field_hardness(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "destroySpeed", "field_23172", "hardness", "f_60599_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.AbstractBlock$AbstractBlockState#hardness
    static void set_field_hardness(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "destroySpeed", "field_23172", "hardness", "f_60599_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.AbstractBlock$AbstractBlockState#toolRequired
    static jboolean get_field_toolRequired(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "requiresCorrectToolForDrops", "field_25184", "toolRequired", "f_60600_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.AbstractBlock$AbstractBlockState#toolRequired
    static void set_field_toolRequired(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "requiresCorrectToolForDrops", "field_25184", "toolRequired", "f_60600_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.AbstractBlock$AbstractBlockState#opaque
    static jboolean get_field_opaque(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "canOcclude", "field_23173", "opaque", "f_60601_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.AbstractBlock$AbstractBlockState#opaque
    static void set_field_opaque(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "canOcclude", "field_23173", "opaque", "f_60601_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.AbstractBlock$AbstractBlockState#solidBlockPredicate
    static jobject get_field_solidBlockPredicate(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "isRedstoneConductor", "field_23174", "solidBlockPredicate", "f_60602_"), "Ldtb$f;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.AbstractBlock$AbstractBlockState#solidBlockPredicate
    static void set_field_solidBlockPredicate(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "isRedstoneConductor", "field_23174", "solidBlockPredicate", "f_60602_"), "Ldtb$f;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.AbstractBlock$AbstractBlockState#suffocationPredicate
    static jobject get_field_suffocationPredicate(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "isSuffocating", "field_23175", "suffocationPredicate", "f_60603_"), "Ldtb$f;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.AbstractBlock$AbstractBlockState#suffocationPredicate
    static void set_field_suffocationPredicate(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "isSuffocating", "field_23175", "suffocationPredicate", "f_60603_"), "Ldtb$f;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.AbstractBlock$AbstractBlockState#blockVisionPredicate
    static jobject get_field_blockVisionPredicate(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "isViewBlocking", "field_23176", "blockVisionPredicate", "f_60604_"), "Ldtb$f;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.AbstractBlock$AbstractBlockState#blockVisionPredicate
    static void set_field_blockVisionPredicate(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "isViewBlocking", "field_23176", "blockVisionPredicate", "f_60604_"), "Ldtb$f;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.AbstractBlock$AbstractBlockState#postProcessPredicate
    static jobject get_field_postProcessPredicate(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "hasPostProcess", "field_23177", "postProcessPredicate", "f_60605_"), "Ldtb$f;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.AbstractBlock$AbstractBlockState#postProcessPredicate
    static void set_field_postProcessPredicate(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "hasPostProcess", "field_23177", "postProcessPredicate", "f_60605_"), "Ldtb$f;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.AbstractBlock$AbstractBlockState#emissiveLightingPredicate
    static jobject get_field_emissiveLightingPredicate(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "emissiveRendering", "field_23178", "emissiveLightingPredicate", "f_60606_"), "Ldtb$f;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.AbstractBlock$AbstractBlockState#emissiveLightingPredicate
    static void set_field_emissiveLightingPredicate(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "emissiveRendering", "field_23178", "emissiveLightingPredicate", "f_60606_"), "Ldtb$f;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.AbstractBlock$AbstractBlockState#offsetter
    static jobject get_field_offsetter(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "offsetFunction", "field_42817", "offsetter", "f_271099_"), "Ldtb$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.AbstractBlock$AbstractBlockState#offsetter
    static void set_field_offsetter(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "offsetFunction", "field_42817", "offsetter", "f_271099_"), "Ldtb$b;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.AbstractBlock$AbstractBlockState#blockBreakParticles
    static jboolean get_field_blockBreakParticles(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("w", "spawnTerrainParticles", "field_40338", "blockBreakParticles", "f_290889_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.AbstractBlock$AbstractBlockState#blockBreakParticles
    static void set_field_blockBreakParticles(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("w", "spawnTerrainParticles", "field_40338", "blockBreakParticles", "f_290889_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.AbstractBlock$AbstractBlockState#instrument
    static jobject get_field_instrument(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("x", "instrument", "field_44625", "instrument", "f_279617_"), "Ldud;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.AbstractBlock$AbstractBlockState#instrument
    static void set_field_instrument(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("x", "instrument", "field_44625", "instrument", "f_279617_"), "Ldud;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.AbstractBlock$AbstractBlockState#replaceable
    static jboolean get_field_replaceable(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("y", "replaceable", "field_44626", "replaceable", "f_279615_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.AbstractBlock$AbstractBlockState#replaceable
    static void set_field_replaceable(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("y", "replaceable", "field_44626", "replaceable", "f_279615_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.block.AbstractBlock$AbstractBlockState#shapeCache
    static jobject get_field_shapeCache(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "cache", "field_23166", "shapeCache", "f_60593_"), "Ldtb$a$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.block.AbstractBlock$AbstractBlockState#shapeCache
    static void set_field_shapeCache(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "cache", "field_23166", "shapeCache", "f_60593_"), "Ldtb$a$a;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.AbstractBlock$AbstractBlockState#fluidState
    static jobject get_field_fluidState(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("z", "fluidState", "field_40339", "fluidState", "f_243896_"), "Lepe;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.AbstractBlock$AbstractBlockState#fluidState
    static void set_field_fluidState(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("z", "fluidState", "field_40339", "fluidState", "f_243896_"), "Lepe;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.AbstractBlock$AbstractBlockState#ticksRandomly
    static jboolean get_field_ticksRandomly(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("A", "isRandomlyTicking", "field_40340", "ticksRandomly", "f_244227_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.AbstractBlock$AbstractBlockState#ticksRandomly
    static void set_field_ticksRandomly(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("A", "isRandomlyTicking", "field_40340", "ticksRandomly", "f_244227_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    static jmethodID methodID_shouldBeSolid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("D", "calculateSolid", "method_51365", "shouldBeSolid", "m_280210_"), "()Z");
    }

    static jboolean shouldBeSolid(const jobject& obj) {
                
       const auto methodID = methodID_shouldBeSolid();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_initShapeCache() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "initCache", "method_26200", "initShapeCache", "m_60611_"), "()V");
    }

    static void initShapeCache(const jobject& obj) {
                
       const auto methodID = methodID_initShapeCache();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getBlock() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getBlock", "method_26204", "getBlock", "m_60734_"), "()Ldfy;");
    }

    static jobject getBlock(const jobject& obj) {
                
       const auto methodID = methodID_getBlock();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getRegistryEntry() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getBlockHolder", "method_41520", "getRegistryEntry", "m_222976_"), "()Ljm;");
    }

    static jobject getRegistryEntry(const jobject& obj) {
                
       const auto methodID = methodID_getRegistryEntry();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_blocksMovement() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "blocksMotion", "method_51366", "blocksMovement", "m_280555_"), "()Z");
    }

    static jboolean blocksMovement(const jobject& obj) {
                
       const auto methodID = methodID_blocksMovement();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isSolid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "isSolid", "method_51367", "isSolid", "m_280296_"), "()Z");
    }

    static jboolean isSolid(const jobject& obj) {
                
       const auto methodID = methodID_isSolid();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_allowsSpawning() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isValidSpawn", "method_26170", "allowsSpawning", "m_60643_"), "(Ldcc;Ljd;Lbsx;)Z");
    }

    static jboolean allowsSpawning(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_allowsSpawning();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_isTransparent() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "propagatesSkylightDown", "method_26167", "isTransparent", "m_60631_"), "(Ldcc;Ljd;)Z");
    }

    static jboolean isTransparent(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_isTransparent();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getOpacity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getLightBlock", "method_26193", "getOpacity", "m_60739_"), "(Ldcc;Ljd;)I");
    }

    static jint getOpacity(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_getOpacity();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getCullingFace() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getFaceOcclusionShape", "method_26173", "getCullingFace", "m_60655_"), "(Ldcc;Ljd;Lji;)Lexv;");
    }

    static jobject getCullingFace(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_getCullingFace();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getCullingShape() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getOcclusionShape", "method_26201", "getCullingShape", "m_60768_"), "(Ldcc;Ljd;)Lexv;");
    }

    static jobject getCullingShape(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_getCullingShape();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_exceedsCube() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "hasLargeCollisionShape", "method_26209", "exceedsCube", "m_60779_"), "()Z");
    }

    static jboolean exceedsCube(const jobject& obj) {
                
       const auto methodID = methodID_exceedsCube();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID__hasSidedTransparency() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "useShapeForLightOcclusion", "method_26211", "hasSidedTransparency", "m_60787_"), "()Z");
    }

    static jboolean _hasSidedTransparency(const jobject& obj) {
                
       const auto methodID = methodID__hasSidedTransparency();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getLuminance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "getLightEmission", "method_26213", "getLuminance", "m_60791_"), "()I");
    }

    static jint getLuminance(const jobject& obj) {
                
       const auto methodID = methodID_getLuminance();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID__isAir() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "isAir", "method_26215", "isAir", "m_60795_"), "()Z");
    }

    static jboolean _isAir(const jobject& obj) {
                
       const auto methodID = methodID__isAir();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isBurnable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "ignitedByLava", "method_50011", "isBurnable", "m_278200_"), "()Z");
    }

    static jboolean isBurnable(const jobject& obj) {
                
       const auto methodID = methodID_isBurnable();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isLiquid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "liquid", "method_51176", "isLiquid", "m_278721_"), "()Z");
    }

    static jboolean isLiquid(const jobject& obj) {
                
       const auto methodID = methodID_isLiquid();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getMapColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getMapColor", "method_26205", "getMapColor", "m_284242_"), "(Ldcc;Ljd;)Lepi;");
    }

    static jobject getMapColor(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_getMapColor();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_rotate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "rotate", "method_26186", "rotate", "m_60717_"), "(Ldmm;)Ldtc;");
    }

    static jobject rotate(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_rotate();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_mirror() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "mirror", "method_26185", "mirror", "m_60715_"), "(Ldkv;)Ldtc;");
    }

    static jobject mirror(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_mirror();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getRenderType() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "getRenderShape", "method_26217", "getRenderType", "m_60799_"), "()Ldmf;");
    }

    static jobject getRenderType(const jobject& obj) {
                
       const auto methodID = methodID_getRenderType();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasEmissiveLighting() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "emissiveRendering", "method_26208", "hasEmissiveLighting", "m_60788_"), "(Ldcc;Ljd;)Z");
    }

    static jboolean hasEmissiveLighting(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_hasEmissiveLighting();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getAmbientOcclusionLightLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "getShadeBrightness", "method_26210", "getAmbientOcclusionLightLevel", "m_60792_"), "(Ldcc;Ljd;)F");
    }

    static jfloat getAmbientOcclusionLightLevel(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_getAmbientOcclusionLightLevel();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isSolidBlock() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "isRedstoneConductor", "method_26212", "isSolidBlock", "m_60796_"), "(Ldcc;Ljd;)Z");
    }

    static jboolean isSolidBlock(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_isSolidBlock();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_emitsRedstonePower() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("m", "isSignalSource", "method_26219", "emitsRedstonePower", "m_60803_"), "()Z");
    }

    static jboolean emitsRedstonePower(const jobject& obj) {
                
       const auto methodID = methodID_emitsRedstonePower();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getWeakRedstonePower() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getSignal", "method_26195", "getWeakRedstonePower", "m_60746_"), "(Ldcc;Ljd;Lji;)I");
    }

    static jint getWeakRedstonePower(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_getWeakRedstonePower();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_hasComparatorOutput() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("n", "hasAnalogOutputSignal", "method_26221", "hasComparatorOutput", "m_60807_"), "()Z");
    }

    static jboolean hasComparatorOutput(const jobject& obj) {
                
       const auto methodID = methodID_hasComparatorOutput();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getComparatorOutput() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getAnalogOutputSignal", "method_26176", "getComparatorOutput", "m_60674_"), "(Ldcw;Ljd;)I");
    }

    static jint getComparatorOutput(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_getComparatorOutput();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getHardness() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "getDestroySpeed", "method_26214", "getHardness", "m_60800_"), "(Ldcc;Ljd;)F");
    }

    static jfloat getHardness(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_getHardness();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_calcBlockBreakingDelta() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getDestroyProgress", "method_26165", "calcBlockBreakingDelta", "m_60625_"), "(Lcmx;Ldcc;Ljd;)F");
    }

    static jfloat calcBlockBreakingDelta(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_calcBlockBreakingDelta();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getStrongRedstonePower() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getDirectSignal", "method_26203", "getStrongRedstonePower", "m_60775_"), "(Ldcc;Ljd;Lji;)I");
    }

    static jint getStrongRedstonePower(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_getStrongRedstonePower();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getPistonBehavior() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("o", "getPistonPushReaction", "method_26223", "getPistonBehavior", "m_60811_"), "()Lepj;");
    }

    static jobject getPistonBehavior(const jobject& obj) {
                
       const auto methodID = methodID_getPistonBehavior();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_isOpaqueFullCube() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "isSolidRender", "method_26216", "isOpaqueFullCube", "m_60804_"), "(Ldcc;Ljd;)Z");
    }

    static jboolean isOpaqueFullCube(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_isOpaqueFullCube();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isOpaque() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("p", "canOcclude", "method_26225", "isOpaque", "m_60815_"), "()Z");
    }

    static jboolean isOpaque(const jobject& obj) {
                
       const auto methodID = methodID_isOpaque();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isSideInvisible() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "skipRendering", "method_26187", "isSideInvisible", "m_60719_"), "(Ldtc;Lji;)Z");
    }

    static jboolean isSideInvisible(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_isSideInvisible();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getOutlineShape() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "getShape", "method_26218", "getOutlineShape", "m_60808_"), "(Ldcc;Ljd;)Lexv;");
    }

    static jobject getOutlineShape(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_getOutlineShape();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__getOutlineShape() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getShape", "method_26172", "getOutlineShape", "m_60651_"), "(Ldcc;Ljd;Lexh;)Lexv;");
    }

    static jobject _getOutlineShape(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID__getOutlineShape();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getCollisionShape() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "getCollisionShape", "method_26220", "getCollisionShape", "m_60812_"), "(Ldcc;Ljd;)Lexv;");
    }

    static jobject getCollisionShape(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_getCollisionShape();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__getCollisionShape() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getCollisionShape", "method_26194", "getCollisionShape", "m_60742_"), "(Ldcc;Ljd;Lexh;)Lexv;");
    }

    static jobject _getCollisionShape(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID__getCollisionShape();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getSidesShape() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "getBlockSupportShape", "method_26222", "getSidesShape", "m_60816_"), "(Ldcc;Ljd;)Lexv;");
    }

    static jobject getSidesShape(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_getSidesShape();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getCameraCollisionShape() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getVisualShape", "method_26202", "getCameraCollisionShape", "m_60771_"), "(Ldcc;Ljd;Lexh;)Lexv;");
    }

    static jobject getCameraCollisionShape(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_getCameraCollisionShape();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getRaycastShape() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("m", "getInteractionShape", "method_26224", "getRaycastShape", "m_60820_"), "(Ldcc;Ljd;)Lexv;");
    }

    static jobject getRaycastShape(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_getRaycastShape();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_hasSolidTopSurface() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "entityCanStandOn", "method_26168", "hasSolidTopSurface", "m_60634_"), "(Ldcc;Ljd;Lbsr;)Z");
    }

    static jboolean hasSolidTopSurface(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_hasSolidTopSurface();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_isSolidSurface() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "entityCanStandOnFace", "method_26169", "isSolidSurface", "m_60638_"), "(Ldcc;Ljd;Lbsr;Lji;)Z");
    }

    static jboolean isSolidSurface(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_isSolidSurface();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_getModelOffset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("n", "getOffset", "method_26226", "getModelOffset", "m_60824_"), "(Ldcc;Ljd;)Lexc;");
    }

    static jobject getModelOffset(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_getModelOffset();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_hasModelOffset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("q", "hasOffsetFunction", "method_49228", "hasModelOffset", "m_271730_"), "()Z");
    }

    static jboolean hasModelOffset(const jobject& obj) {
                
       const auto methodID = methodID_hasModelOffset();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_onSyncedBlockEvent() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "triggerEvent", "method_26177", "onSyncedBlockEvent", "m_60677_"), "(Ldcw;Ljd;II)Z");
    }

    static jboolean onSyncedBlockEvent(const jobject& obj, const jobject& arg0, const jobject& arg1, const jint& arg2, const jint& arg3) {
                
       const auto methodID = methodID_onSyncedBlockEvent();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_neighborUpdate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleNeighborChanged", "method_26181", "neighborUpdate", "m_60690_"), "(Ldcw;Ljd;Ldfy;Ljd;Z)V");
    }

    static void neighborUpdate(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jboolean& arg4) {
                
       const auto methodID = methodID_neighborUpdate();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_updateNeighbors() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateNeighbourShapes", "method_30101", "updateNeighbors", "m_60701_"), "(Ldcx;Ljd;I)V");
    }

    static void updateNeighbors(const jobject& obj, const jobject& arg0, const jobject& arg1, const jint& arg2) {
                
       const auto methodID = methodID_updateNeighbors();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__updateNeighbors() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateNeighbourShapes", "method_26183", "updateNeighbors", "m_60705_"), "(Ldcx;Ljd;II)V");
    }

    static void _updateNeighbors(const jobject& obj, const jobject& arg0, const jobject& arg1, const jint& arg2, const jint& arg3) {
                
       const auto methodID = methodID__updateNeighbors();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_prepare() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "updateIndirectNeighbourShapes", "method_30102", "prepare", "m_60758_"), "(Ldcx;Ljd;I)V");
    }

    static void prepare(const jobject& obj, const jobject& arg0, const jobject& arg1, const jint& arg2) {
                
       const auto methodID = methodID_prepare();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__prepare() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "updateIndirectNeighbourShapes", "method_26198", "prepare", "m_60762_"), "(Ldcx;Ljd;II)V");
    }

    static void _prepare(const jobject& obj, const jobject& arg0, const jobject& arg1, const jint& arg2, const jint& arg3) {
                
       const auto methodID = methodID__prepare();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_onBlockAdded() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onPlace", "method_26182", "onBlockAdded", "m_60696_"), "(Ldcw;Ljd;Ldtc;Z)V");
    }

    static void onBlockAdded(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jboolean& arg3) {
                
       const auto methodID = methodID_onBlockAdded();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_onStateReplaced() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "onRemove", "method_26197", "onStateReplaced", "m_60753_"), "(Ldcw;Ljd;Ldtc;Z)V");
    }

    static void onStateReplaced(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jboolean& arg3) {
                
       const auto methodID = methodID_onStateReplaced();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_onExploded() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onExplosionHit", "method_55225", "onExploded", "m_306874_"), "(Ldcw;Ljd;Ldco;Ljava/util/function/BiConsumer;)V");
    }

    static void onExploded(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_onExploded();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_scheduledTick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "tick", "method_26192", "scheduledTick", "m_222963_"), "(Laqu;Ljd;Layw;)V");
    }

    static void scheduledTick(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_scheduledTick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_randomTick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "randomTick", "method_26199", "randomTick", "m_222972_"), "(Laqu;Ljd;Layw;)V");
    }

    static void randomTick(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_randomTick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_onEntityCollision() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "entityInside", "method_26178", "onEntityCollision", "m_60682_"), "(Ldcw;Ljd;Lbsr;)V");
    }

    static void onEntityCollision(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_onEntityCollision();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_onStacksDropped() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "spawnAfterBreak", "method_26180", "onStacksDropped", "m_222967_"), "(Laqu;Ljd;Lcuq;Z)V");
    }

    static void onStacksDropped(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jboolean& arg3) {
                
       const auto methodID = methodID_onStacksDropped();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_getDroppedStacks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getDrops", "method_26189", "getDroppedStacks", "m_287290_"), "(Leru$a;)Ljava/util/List;");
    }

    static jobject getDroppedStacks(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getDroppedStacks();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onUseWithItem() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "useItemOn", "method_55780", "onUseWithItem", "m_318730_"), "(Lcuq;Ldcw;Lcmx;Lbqq;Lewy;)Lbqt;");
    }

    static jobject onUseWithItem(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4) {
                
       const auto methodID = methodID_onUseWithItem();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_onUse() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "useWithoutItem", "method_55781", "onUse", "m_324126_"), "(Ldcw;Lcmx;Lewy;)Lbqr;");
    }

    static jobject onUse(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_onUse();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_onBlockBreakStart() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "attack", "method_26179", "onBlockBreakStart", "m_60686_"), "(Ldcw;Ljd;Lcmx;)V");
    }

    static void onBlockBreakStart(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_onBlockBreakStart();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_shouldSuffocate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("o", "isSuffocating", "method_26228", "shouldSuffocate", "m_60828_"), "(Ldcc;Ljd;)Z");
    }

    static jboolean shouldSuffocate(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_shouldSuffocate();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_shouldBlockVision() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("p", "isViewBlocking", "method_26230", "shouldBlockVision", "m_60831_"), "(Ldcc;Ljd;)Z");
    }

    static jboolean shouldBlockVision(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_shouldBlockVision();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getStateForNeighborUpdate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateShape", "method_26191", "getStateForNeighborUpdate", "m_60728_"), "(Lji;Ldtc;Ldcx;Ljd;Ljd;)Ldtc;");
    }

    static jobject getStateForNeighborUpdate(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4) {
                
       const auto methodID = methodID_getStateForNeighborUpdate();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_canPathfindThrough() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isPathfindable", "method_26171", "canPathfindThrough", "m_60647_"), "(Lept;)Z");
    }

    static jboolean canPathfindThrough(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_canPathfindThrough();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_canReplace() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "canBeReplaced", "method_26166", "canReplace", "m_60629_"), "(Lcyd;)Z");
    }

    static jboolean canReplace(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_canReplace();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_canBucketPlace() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "canBeReplaced", "method_26188", "canBucketPlace", "m_60722_"), "(Lepd;)Z");
    }

    static jboolean canBucketPlace(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_canBucketPlace();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isReplaceable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("r", "canBeReplaced", "method_45474", "isReplaceable", "m_247087_"), "()Z");
    }

    static jboolean isReplaceable(const jobject& obj) {
                
       const auto methodID = methodID_isReplaceable();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_canPlaceAt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "canSurvive", "method_26184", "canPlaceAt", "m_60710_"), "(Ldcz;Ljd;)Z");
    }

    static jboolean canPlaceAt(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_canPlaceAt();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_shouldPostProcess() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("q", "hasPostProcess", "method_26232", "shouldPostProcess", "m_60835_"), "(Ldcc;Ljd;)Z");
    }

    static jboolean shouldPostProcess(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_shouldPostProcess();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_createScreenHandlerFactory() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getMenuProvider", "method_26196", "createScreenHandlerFactory", "m_60750_"), "(Ldcw;Ljd;)Lbqv;");
    }

    static jobject createScreenHandlerFactory(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_createScreenHandlerFactory();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isIn() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "is", "method_26164", "isIn", "m_204336_"), "(Lawu;)Z");
    }

    static jboolean isIn(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isIn();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__isIn() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "is", "method_27851", "isIn", "m_204338_"), "(Lawu;Ljava/util/function/Predicate;)Z");
    }

    static jboolean _isIn(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID__isIn();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID___isIn() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "is", "method_40143", "isIn", "m_204341_"), "(Ljq;)Z");
    }

    static jboolean __isIn(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID___isIn();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isOf() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "is", "method_53257", "isOf", "m_295990_"), "(Ljm;)Z");
    }

    static jboolean isOf(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isOf();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_streamTags() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("s", "getTags", "method_40144", "streamTags", "m_204343_"), "()Ljava/util/stream/Stream;");
    }

    static jobject streamTags(const jobject& obj) {
                
       const auto methodID = methodID_streamTags();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasBlockEntity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("t", "hasBlockEntity", "method_31709", "hasBlockEntity", "m_155947_"), "()Z");
    }

    static jboolean hasBlockEntity(const jobject& obj) {
                
       const auto methodID = methodID_hasBlockEntity();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getBlockEntityTicker() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getTicker", "method_31708", "getBlockEntityTicker", "m_155944_"), "(Ldcw;Ldqj;)Ldqi;");
    }

    static jobject getBlockEntityTicker(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_getBlockEntityTicker();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__isOf() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "is", "method_27852", "isOf", "m_60713_"), "(Ldfy;)Z");
    }

    static jboolean _isOf(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__isOf();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_matchesKey() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "is", "method_54097", "matchesKey", "m_305717_"), "(Lakq;)Z");
    }

    static jboolean matchesKey(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_matchesKey();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getFluidState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("u", "getFluidState", "method_26227", "getFluidState", "m_60819_"), "()Lepe;");
    }

    static jobject getFluidState(const jobject& obj) {
                
       const auto methodID = methodID_getFluidState();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasRandomTicks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("v", "isRandomlyTicking", "method_26229", "hasRandomTicks", "m_60823_"), "()Z");
    }

    static jboolean hasRandomTicks(const jobject& obj) {
                
       const auto methodID = methodID_hasRandomTicks();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getRenderingSeed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getSeed", "method_26190", "getRenderingSeed", "m_60726_"), "(Ljd;)J");
    }

    static jlong getRenderingSeed(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getRenderingSeed();
       return MinecraftSDK::env->CallLongMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getSoundGroup() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("w", "getSoundType", "method_26231", "getSoundGroup", "m_60827_"), "()Ldnm;");
    }

    static jobject getSoundGroup(const jobject& obj) {
                
       const auto methodID = methodID_getSoundGroup();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_onProjectileHit() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onProjectileHit", "method_26175", "onProjectileHit", "m_60669_"), "(Ldcw;Ldtc;Lewy;Lcnp;)V");
    }

    static void onProjectileHit(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_onProjectileHit();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_isSideSolidFullSquare() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "isFaceSturdy", "method_26206", "isSideSolidFullSquare", "m_60783_"), "(Ldcc;Ljd;Lji;)Z");
    }

    static jboolean isSideSolidFullSquare(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_isSideSolidFullSquare();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_isSideSolid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isFaceSturdy", "method_30368", "isSideSolid", "m_60659_"), "(Ldcc;Ljd;Lji;Ldoa;)Z");
    }

    static jboolean isSideSolid(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_isSideSolid();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_isFullCube() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("r", "isCollisionShapeFullBlock", "method_26234", "isFullCube", "m_60838_"), "(Ldcc;Ljd;)Z");
    }

    static jboolean isFullCube(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_isFullCube();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_asBlockState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("x", "asState", "method_26233", "asBlockState", "m_7160_"), "()Ldtc;");
    }

    static jobject asBlockState(const jobject& obj) {
                
       const auto methodID = methodID_asBlockState();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_isToolRequired() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("y", "requiresCorrectToolForDrops", "method_29291", "isToolRequired", "m_60834_"), "()Z");
    }

    static jboolean isToolRequired(const jobject& obj) {
                
       const auto methodID = methodID_isToolRequired();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasBlockBreakParticles() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("z", "shouldSpawnTerrainParticles", "method_45475", "hasBlockBreakParticles", "m_295777_"), "()Z");
    }

    static jboolean hasBlockBreakParticles(const jobject& obj) {
                
       const auto methodID = methodID_hasBlockBreakParticles();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getInstrument() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("A", "instrument", "method_51364", "getInstrument", "m_280603_"), "()Ldud;");
    }

    static jobject getInstrument(const jobject& obj) {
                
       const auto methodID = methodID_getInstrument();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_BLOCK_ABSTRACTBLOCK$ABSTRACTBLOCKSTATE_HPP