// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_BLOCK_SPAWNER_TRIALSPAWNERLOGIC$TYPE_HPP
#define NET_MINECRAFT_BLOCK_SPAWNER_TRIALSPAWNERLOGIC$TYPE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.block.spawner.TrialSpawnerLogic$Type
 * Remapped: dsf$a
 */
namespace TrialSpawnerLogic$Type {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dsf$a", "net/minecraft/world/level/block/entity/trialspawner/TrialSpawner$FlameParticle", "net/minecraft/class_8963$class_9474", "net/minecraft/block/spawner/TrialSpawnerLogic$Type", "net/minecraft/src/C_301982_$C_313594_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.block.spawner.TrialSpawnerLogic$Type#NORMAL
    [[maybe_unused]] static jobject get_field_NORMAL() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "NORMAL", "field_50186", "NORMAL", "NORMAL"), "Ldsf$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.spawner.TrialSpawnerLogic$Type#NORMAL
    [[maybe_unused]] static void set_field_NORMAL(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "NORMAL", "field_50186", "NORMAL", "NORMAL"), "Ldsf$a;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.spawner.TrialSpawnerLogic$Type#OMINOUS
    [[maybe_unused]] static jobject get_field_OMINOUS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "OMINOUS", "field_50187", "OMINOUS", "OMINOUS"), "Ldsf$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.spawner.TrialSpawnerLogic$Type#OMINOUS
    [[maybe_unused]] static void set_field_OMINOUS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "OMINOUS", "field_50187", "OMINOUS", "OMINOUS"), "Ldsf$a;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for public field net.minecraft.block.spawner.TrialSpawnerLogic$Type#particle
    static jobject get_field_particle(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "particleType", "field_50188", "particle", "f_316337_"), "Llq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static public field net.minecraft.block.spawner.TrialSpawnerLogic$Type#particle
    static void set_field_particle(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "particleType", "field_50188", "particle", "f_316337_"), "Llq;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_values() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("values", "values", "values", "values", "values"), "()[Ldsf$a;");
    }

    static jobject values() {
       const auto clazz = self();
       const auto methodID = methodID_values();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_valueOf() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("valueOf", "valueOf", "valueOf", "valueOf", "valueOf"), "(Ljava/lang/String;)Ldsf$a;");
    }

    static jobject valueOf(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_valueOf();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_fromIndex() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "decode", "method_58710", "fromIndex", "m_319943_"), "(I)Ldsf$a;");
    }

    static jobject fromIndex(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_fromIndex();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getIndex() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "encode", "method_58709", "getIndex", "m_324816_"), "()I");
    }

    static jint getIndex(const jobject& obj) {
                
       const auto methodID = methodID_getIndex();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_BLOCK_SPAWNER_TRIALSPAWNERLOGIC$TYPE_HPP