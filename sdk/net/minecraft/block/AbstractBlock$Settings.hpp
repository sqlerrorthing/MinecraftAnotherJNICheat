// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_BLOCK_ABSTRACTBLOCK$SETTINGS_HPP
#define NET_MINECRAFT_BLOCK_ABSTRACTBLOCK$SETTINGS_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.block.AbstractBlock$Settings
 * Remapped: dtb$d
 */
namespace AbstractBlock$Settings {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dtb$d", "net/minecraft/world/level/block/state/BlockBehaviour$Properties", "net/minecraft/class_4970$class_2251", "net/minecraft/block/AbstractBlock$Settings", "net/minecraft/src/C_2056_$C_2061_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.block.AbstractBlock$Settings#CODEC
    [[maybe_unused]] static jobject get_field_CODEC() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CODEC", "field_46532", "CODEC", "f_302699_"), "Lcom/mojang/serialization/Codec;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.AbstractBlock$Settings#CODEC
    [[maybe_unused]] static void set_field_CODEC(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CODEC", "field_46532", "CODEC", "f_302699_"), "Lcom/mojang/serialization/Codec;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for default field net.minecraft.block.AbstractBlock$Settings#mapColorProvider
    static jobject get_field_mapColorProvider(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "mapColor", "field_10662", "mapColorProvider", "f_283880_"), "Ljava/util/function/Function;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.block.AbstractBlock$Settings#mapColorProvider
    static void set_field_mapColorProvider(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "mapColor", "field_10662", "mapColorProvider", "f_283880_"), "Ljava/util/function/Function;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.block.AbstractBlock$Settings#collidable
    static jboolean get_field_collidable(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "hasCollision", "field_10664", "collidable", "f_60884_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static default field net.minecraft.block.AbstractBlock$Settings#collidable
    static void set_field_collidable(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "hasCollision", "field_10664", "collidable", "f_60884_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.block.AbstractBlock$Settings#soundGroup
    static jobject get_field_soundGroup(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "soundType", "field_10665", "soundGroup", "f_60885_"), "Ldnm;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.block.AbstractBlock$Settings#soundGroup
    static void set_field_soundGroup(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "soundType", "field_10665", "soundGroup", "f_60885_"), "Ldnm;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.block.AbstractBlock$Settings#luminance
    static jobject get_field_luminance(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "lightEmission", "field_10663", "luminance", "f_60886_"), "Ljava/util/function/ToIntFunction;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.block.AbstractBlock$Settings#luminance
    static void set_field_luminance(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "lightEmission", "field_10663", "luminance", "f_60886_"), "Ljava/util/function/ToIntFunction;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.block.AbstractBlock$Settings#resistance
    static jfloat get_field_resistance(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "explosionResistance", "field_10660", "resistance", "f_60887_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static default field net.minecraft.block.AbstractBlock$Settings#resistance
    static void set_field_resistance(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "explosionResistance", "field_10660", "resistance", "f_60887_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.block.AbstractBlock$Settings#hardness
    static jfloat get_field_hardness(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "destroyTime", "field_10669", "hardness", "f_60888_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static default field net.minecraft.block.AbstractBlock$Settings#hardness
    static void set_field_hardness(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "destroyTime", "field_10669", "hardness", "f_60888_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.block.AbstractBlock$Settings#toolRequired
    static jboolean get_field_toolRequired(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "requiresCorrectToolForDrops", "field_25185", "toolRequired", "f_60889_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static default field net.minecraft.block.AbstractBlock$Settings#toolRequired
    static void set_field_toolRequired(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "requiresCorrectToolForDrops", "field_25185", "toolRequired", "f_60889_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.block.AbstractBlock$Settings#randomTicks
    static jboolean get_field_randomTicks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "isRandomlyTicking", "field_10661", "randomTicks", "f_60890_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static default field net.minecraft.block.AbstractBlock$Settings#randomTicks
    static void set_field_randomTicks(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "isRandomlyTicking", "field_10661", "randomTicks", "f_60890_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.block.AbstractBlock$Settings#slipperiness
    static jfloat get_field_slipperiness(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "friction", "field_10667", "slipperiness", "f_60891_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static default field net.minecraft.block.AbstractBlock$Settings#slipperiness
    static void set_field_slipperiness(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "friction", "field_10667", "slipperiness", "f_60891_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.block.AbstractBlock$Settings#velocityMultiplier
    static jfloat get_field_velocityMultiplier(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "speedFactor", "field_23179", "velocityMultiplier", "f_60892_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static default field net.minecraft.block.AbstractBlock$Settings#velocityMultiplier
    static void set_field_velocityMultiplier(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "speedFactor", "field_23179", "velocityMultiplier", "f_60892_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.block.AbstractBlock$Settings#jumpVelocityMultiplier
    static jfloat get_field_jumpVelocityMultiplier(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "jumpFactor", "field_21209", "jumpVelocityMultiplier", "f_60893_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static default field net.minecraft.block.AbstractBlock$Settings#jumpVelocityMultiplier
    static void set_field_jumpVelocityMultiplier(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "jumpFactor", "field_21209", "jumpVelocityMultiplier", "f_60893_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.block.AbstractBlock$Settings#lootTableKey
    static jobject get_field_lootTableKey(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "drops", "field_10666", "lootTableKey", "f_60894_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.block.AbstractBlock$Settings#lootTableKey
    static void set_field_lootTableKey(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "drops", "field_10666", "lootTableKey", "f_60894_"), "Lakq;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.block.AbstractBlock$Settings#opaque
    static jboolean get_field_opaque(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "canOcclude", "field_20721", "opaque", "f_60895_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static default field net.minecraft.block.AbstractBlock$Settings#opaque
    static void set_field_opaque(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "canOcclude", "field_20721", "opaque", "f_60895_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.block.AbstractBlock$Settings#isAir
    static jboolean get_field_isAir(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "isAir", "field_23180", "isAir", "f_60896_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static default field net.minecraft.block.AbstractBlock$Settings#isAir
    static void set_field_isAir(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "isAir", "field_23180", "isAir", "f_60896_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.block.AbstractBlock$Settings#burnable
    static jboolean get_field_burnable(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "ignitedByLava", "field_43394", "burnable", "f_278123_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static default field net.minecraft.block.AbstractBlock$Settings#burnable
    static void set_field_burnable(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "ignitedByLava", "field_43394", "burnable", "f_278123_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.block.AbstractBlock$Settings#liquid
    static jboolean get_field_liquid(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "liquid", "field_44481", "liquid", "f_278418_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static default field net.minecraft.block.AbstractBlock$Settings#liquid
    static void set_field_liquid(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "liquid", "field_44481", "liquid", "f_278418_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.block.AbstractBlock$Settings#forceNotSolid
    static jboolean get_field_forceNotSolid(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "forceSolidOff", "field_44627", "forceNotSolid", "f_279665_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static default field net.minecraft.block.AbstractBlock$Settings#forceNotSolid
    static void set_field_forceNotSolid(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "forceSolidOff", "field_44627", "forceNotSolid", "f_279665_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.block.AbstractBlock$Settings#forceSolid
    static jboolean get_field_forceSolid(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "forceSolidOn", "field_44628", "forceSolid", "f_279618_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static default field net.minecraft.block.AbstractBlock$Settings#forceSolid
    static void set_field_forceSolid(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "forceSolidOn", "field_44628", "forceSolid", "f_279618_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.block.AbstractBlock$Settings#pistonBehavior
    static jobject get_field_pistonBehavior(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "pushReaction", "field_43395", "pistonBehavior", "f_278130_"), "Lepj;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.block.AbstractBlock$Settings#pistonBehavior
    static void set_field_pistonBehavior(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "pushReaction", "field_43395", "pistonBehavior", "f_278130_"), "Lepj;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.block.AbstractBlock$Settings#blockBreakParticles
    static jboolean get_field_blockBreakParticles(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "spawnTerrainParticles", "field_40341", "blockBreakParticles", "f_290592_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static default field net.minecraft.block.AbstractBlock$Settings#blockBreakParticles
    static void set_field_blockBreakParticles(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "spawnTerrainParticles", "field_40341", "blockBreakParticles", "f_290592_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.block.AbstractBlock$Settings#instrument
    static jobject get_field_instrument(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "instrument", "field_44629", "instrument", "f_279538_"), "Ldud;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.block.AbstractBlock$Settings#instrument
    static void set_field_instrument(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "instrument", "field_44629", "instrument", "f_279538_"), "Ldud;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.block.AbstractBlock$Settings#replaceable
    static jboolean get_field_replaceable(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("w", "replaceable", "field_44630", "replaceable", "f_279630_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static default field net.minecraft.block.AbstractBlock$Settings#replaceable
    static void set_field_replaceable(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("w", "replaceable", "field_44630", "replaceable", "f_279630_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.block.AbstractBlock$Settings#allowsSpawningPredicate
    static jobject get_field_allowsSpawningPredicate(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("x", "isValidSpawn", "field_23181", "allowsSpawningPredicate", "f_60897_"), "Ldtb$e;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.block.AbstractBlock$Settings#allowsSpawningPredicate
    static void set_field_allowsSpawningPredicate(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("x", "isValidSpawn", "field_23181", "allowsSpawningPredicate", "f_60897_"), "Ldtb$e;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.block.AbstractBlock$Settings#solidBlockPredicate
    static jobject get_field_solidBlockPredicate(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("y", "isRedstoneConductor", "field_23182", "solidBlockPredicate", "f_60898_"), "Ldtb$f;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.block.AbstractBlock$Settings#solidBlockPredicate
    static void set_field_solidBlockPredicate(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("y", "isRedstoneConductor", "field_23182", "solidBlockPredicate", "f_60898_"), "Ldtb$f;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.block.AbstractBlock$Settings#suffocationPredicate
    static jobject get_field_suffocationPredicate(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("z", "isSuffocating", "field_23183", "suffocationPredicate", "f_60899_"), "Ldtb$f;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.block.AbstractBlock$Settings#suffocationPredicate
    static void set_field_suffocationPredicate(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("z", "isSuffocating", "field_23183", "suffocationPredicate", "f_60899_"), "Ldtb$f;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.block.AbstractBlock$Settings#blockVisionPredicate
    static jobject get_field_blockVisionPredicate(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("A", "isViewBlocking", "field_23184", "blockVisionPredicate", "f_60900_"), "Ldtb$f;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.block.AbstractBlock$Settings#blockVisionPredicate
    static void set_field_blockVisionPredicate(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("A", "isViewBlocking", "field_23184", "blockVisionPredicate", "f_60900_"), "Ldtb$f;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.block.AbstractBlock$Settings#postProcessPredicate
    static jobject get_field_postProcessPredicate(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("B", "hasPostProcess", "field_23185", "postProcessPredicate", "f_60901_"), "Ldtb$f;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.block.AbstractBlock$Settings#postProcessPredicate
    static void set_field_postProcessPredicate(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("B", "hasPostProcess", "field_23185", "postProcessPredicate", "f_60901_"), "Ldtb$f;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.block.AbstractBlock$Settings#emissiveLightingPredicate
    static jobject get_field_emissiveLightingPredicate(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("C", "emissiveRendering", "field_23186", "emissiveLightingPredicate", "f_60902_"), "Ldtb$f;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.block.AbstractBlock$Settings#emissiveLightingPredicate
    static void set_field_emissiveLightingPredicate(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("C", "emissiveRendering", "field_23186", "emissiveLightingPredicate", "f_60902_"), "Ldtb$f;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.block.AbstractBlock$Settings#dynamicBounds
    static jboolean get_field_dynamicBounds(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("D", "dynamicShape", "field_10670", "dynamicBounds", "f_60903_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static default field net.minecraft.block.AbstractBlock$Settings#dynamicBounds
    static void set_field_dynamicBounds(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("D", "dynamicShape", "field_10670", "dynamicBounds", "f_60903_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.block.AbstractBlock$Settings#requiredFeatures
    static jobject get_field_requiredFeatures(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("E", "requiredFeatures", "field_40342", "requiredFeatures", "f_244138_"), "Lcpl;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.block.AbstractBlock$Settings#requiredFeatures
    static void set_field_requiredFeatures(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("E", "requiredFeatures", "field_40342", "requiredFeatures", "f_244138_"), "Lcpl;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.block.AbstractBlock$Settings#offsetter
    static jobject get_field_offsetter(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("F", "offsetFunction", "field_42818", "offsetter", "f_271289_"), "Ldtb$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.block.AbstractBlock$Settings#offsetter
    static void set_field_offsetter(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("F", "offsetFunction", "field_42818", "offsetter", "f_271289_"), "Ldtb$b;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_create() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "of", "method_9637", "create", "m_284310_"), "()Ldtb$d;");
    }

    static jobject create() {
       const auto clazz = self();
       const auto methodID = methodID_create();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_copy() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "ofFullCopy", "method_9630", "copy", "m_308003_"), "(Ldtb;)Ldtb$d;");
    }

    static jobject copy(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_copy();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_copyShallow() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "ofLegacyCopy", "method_55226", "copyShallow", "m_306071_"), "(Ldtb;)Ldtb$d;");
    }

    static jobject copyShallow(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_copyShallow();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_mapColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "mapColor", "method_51517", "mapColor", "m_284268_"), "(Lcti;)Ldtb$d;");
    }

    static jobject mapColor(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_mapColor();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__mapColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "mapColor", "method_31710", "mapColor", "m_284180_"), "(Lepi;)Ldtb$d;");
    }

    static jobject _mapColor(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__mapColor();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID___mapColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "mapColor", "method_51520", "mapColor", "m_284495_"), "(Ljava/util/function/Function;)Ldtb$d;");
    }

    static jobject __mapColor(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID___mapColor();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_noCollision() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "noCollission", "method_9634", "noCollision", "m_60910_"), "()Ldtb$d;");
    }

    static jobject noCollision(const jobject& obj) {
                
       const auto methodID = methodID_noCollision();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_nonOpaque() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "noOcclusion", "method_22488", "nonOpaque", "m_60955_"), "()Ldtb$d;");
    }

    static jobject nonOpaque(const jobject& obj) {
                
       const auto methodID = methodID_nonOpaque();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__slipperiness() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "friction", "method_9628", "slipperiness", "m_60911_"), "(F)Ldtb$d;");
    }

    static jobject _slipperiness(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID__slipperiness();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__velocityMultiplier() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "speedFactor", "method_23351", "velocityMultiplier", "m_60956_"), "(F)Ldtb$d;");
    }

    static jobject _velocityMultiplier(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID__velocityMultiplier();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__jumpVelocityMultiplier() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "jumpFactor", "method_23352", "jumpVelocityMultiplier", "m_60967_"), "(F)Ldtb$d;");
    }

    static jobject _jumpVelocityMultiplier(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID__jumpVelocityMultiplier();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_sounds() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "sound", "method_9626", "sounds", "m_60918_"), "(Ldnm;)Ldtb$d;");
    }

    static jobject sounds(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_sounds();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__luminance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "lightLevel", "method_9631", "luminance", "m_60953_"), "(Ljava/util/function/ToIntFunction;)Ldtb$d;");
    }

    static jobject _luminance(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__luminance();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_strength() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "strength", "method_9629", "strength", "m_60913_"), "(FF)Ldtb$d;");
    }

    static jobject strength(const jobject& obj, const jfloat& arg0, const jfloat& arg1) {
                
       const auto methodID = methodID_strength();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_breakInstantly() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "instabreak", "method_9618", "breakInstantly", "m_60966_"), "()Ldtb$d;");
    }

    static jobject breakInstantly(const jobject& obj) {
                
       const auto methodID = methodID_breakInstantly();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__strength() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "strength", "method_9632", "strength", "m_60978_"), "(F)Ldtb$d;");
    }

    static jobject _strength(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID__strength();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_ticksRandomly() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "randomTicks", "method_9640", "ticksRandomly", "m_60977_"), "()Ldtb$d;");
    }

    static jobject ticksRandomly(const jobject& obj) {
                
       const auto methodID = methodID_ticksRandomly();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__dynamicBounds() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "dynamicShape", "method_9624", "dynamicBounds", "m_60988_"), "()Ldtb$d;");
    }

    static jobject _dynamicBounds(const jobject& obj) {
                
       const auto methodID = methodID__dynamicBounds();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_dropsNothing() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "noLootTable", "method_42327", "dropsNothing", "m_222994_"), "()Ldtb$d;");
    }

    static jobject dropsNothing(const jobject& obj) {
                
       const auto methodID = methodID_dropsNothing();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_dropsLike() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "dropsLike", "method_16228", "dropsLike", "m_60916_"), "(Ldfy;)Ldtb$d;");
    }

    static jobject dropsLike(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_dropsLike();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__burnable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "ignitedByLava", "method_50013", "burnable", "m_278183_"), "()Ldtb$d;");
    }

    static jobject _burnable(const jobject& obj) {
                
       const auto methodID = methodID__burnable();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__liquid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "liquid", "method_51177", "liquid", "m_278788_"), "()Ldtb$d;");
    }

    static jobject _liquid(const jobject& obj) {
                
       const auto methodID = methodID__liquid();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_solid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "forceSolidOn", "method_51369", "solid", "m_280606_"), "()Ldtb$d;");
    }

    static jobject solid(const jobject& obj) {
                
       const auto methodID = methodID_solid();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_notSolid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "forceSolidOff", "method_51370", "notSolid", "m_280574_"), "()Ldtb$d;");
    }

    static jobject notSolid(const jobject& obj) {
                
       const auto methodID = methodID_notSolid();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__pistonBehavior() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "pushReaction", "method_50012", "pistonBehavior", "m_278166_"), "(Lepj;)Ldtb$d;");
    }

    static jobject _pistonBehavior(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__pistonBehavior();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_air() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "air", "method_26250", "air", "m_60996_"), "()Ldtb$d;");
    }

    static jobject air(const jobject& obj) {
                
       const auto methodID = methodID_air();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_allowsSpawning() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isValidSpawn", "method_26235", "allowsSpawning", "m_60922_"), "(Ldtb$e;)Ldtb$d;");
    }

    static jobject allowsSpawning(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_allowsSpawning();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_solidBlock() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isRedstoneConductor", "method_26236", "solidBlock", "m_60924_"), "(Ldtb$f;)Ldtb$d;");
    }

    static jobject solidBlock(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_solidBlock();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_suffocates() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "isSuffocating", "method_26243", "suffocates", "m_60960_"), "(Ldtb$f;)Ldtb$d;");
    }

    static jobject suffocates(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_suffocates();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_blockVision() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "isViewBlocking", "method_26245", "blockVision", "m_60971_"), "(Ldtb$f;)Ldtb$d;");
    }

    static jobject blockVision(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_blockVision();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_postProcess() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "hasPostProcess", "method_26247", "postProcess", "m_60982_"), "(Ldtb$f;)Ldtb$d;");
    }

    static jobject postProcess(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_postProcess();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_emissiveLighting() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "emissiveRendering", "method_26249", "emissiveLighting", "m_60991_"), "(Ldtb$f;)Ldtb$d;");
    }

    static jobject emissiveLighting(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_emissiveLighting();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_requiresTool() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("m", "requiresCorrectToolForDrops", "method_29292", "requiresTool", "m_60999_"), "()Ldtb$d;");
    }

    static jobject requiresTool(const jobject& obj) {
                
       const auto methodID = methodID_requiresTool();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__hardness() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "destroyTime", "method_36557", "hardness", "m_155954_"), "(F)Ldtb$d;");
    }

    static jobject _hardness(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID__hardness();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__resistance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "explosionResistance", "method_36558", "resistance", "m_155956_"), "(F)Ldtb$d;");
    }

    static jobject _resistance(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID__resistance();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_offset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "offsetType", "method_49229", "offset", "m_222979_"), "(Ldtb$c;)Ldtb$d;");
    }

    static jobject offset(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_offset();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_noBlockBreakParticles() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("n", "noTerrainParticles", "method_45477", "noBlockBreakParticles", "m_294567_"), "()Ldtb$d;");
    }

    static jobject noBlockBreakParticles(const jobject& obj) {
                
       const auto methodID = methodID_noBlockBreakParticles();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_requires() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "requiredFeatures", "method_45476", "requires", "m_246843_"), "([Lcpj;)Ldtb$d;");
    }

    static jobject requires(const jobject& obj, const jarray& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_requires();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__instrument() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "instrument", "method_51368", "instrument", "m_280658_"), "(Ldud;)Ldtb$d;");
    }

    static jobject _instrument(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__instrument();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__replaceable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("o", "replaceable", "method_51371", "replaceable", "m_280170_"), "()Ldtb$d;");
    }

    static jobject _replaceable(const jobject& obj) {
                
       const auto methodID = methodID__replaceable();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_BLOCK_ABSTRACTBLOCK$SETTINGS_HPP