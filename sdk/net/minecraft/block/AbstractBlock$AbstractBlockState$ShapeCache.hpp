// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_BLOCK_ABSTRACTBLOCK$ABSTRACTBLOCKSTATE$SHAPECACHE_HPP
#define NET_MINECRAFT_BLOCK_ABSTRACTBLOCK$ABSTRACTBLOCKSTATE$SHAPECACHE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.block.AbstractBlock$AbstractBlockState$ShapeCache
 * Remapped: dtb$a$a
 */
namespace AbstractBlock$AbstractBlockState$ShapeCache {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dtb$a$a", "net/minecraft/world/level/block/state/BlockBehaviour$BlockStateBase$Cache", "net/minecraft/class_4970$class_4971$class_3752", "net/minecraft/block/AbstractBlock$AbstractBlockState$ShapeCache", "net/minecraft/src/C_2056_$C_2058_$C_2059_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.block.AbstractBlock$AbstractBlockState$ShapeCache#DIRECTIONS
    [[maybe_unused]] static jobject get_field_DIRECTIONS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "DIRECTIONS", "field_16559", "DIRECTIONS", "f_60845_"), "[Lji;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.AbstractBlock$AbstractBlockState$ShapeCache#DIRECTIONS
    [[maybe_unused]] static void set_field_DIRECTIONS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "DIRECTIONS", "field_16559", "DIRECTIONS", "f_60845_"), "[Lji;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.AbstractBlock$AbstractBlockState$ShapeCache#SHAPE_TYPE_LENGTH
    [[maybe_unused]] static jint get_field_SHAPE_TYPE_LENGTH() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "SUPPORT_TYPE_COUNT", "field_25830", "SHAPE_TYPE_LENGTH", "f_60846_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.AbstractBlock$AbstractBlockState$ShapeCache#SHAPE_TYPE_LENGTH
    [[maybe_unused]] static void set_field_SHAPE_TYPE_LENGTH(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "SUPPORT_TYPE_COUNT", "field_25830", "SHAPE_TYPE_LENGTH", "f_60846_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for protected field net.minecraft.block.AbstractBlock$AbstractBlockState$ShapeCache#fullOpaque
    static jboolean get_field_fullOpaque(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "solidRender", "field_16557", "fullOpaque", "f_60841_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.block.AbstractBlock$AbstractBlockState$ShapeCache#fullOpaque
    static void set_field_fullOpaque(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "solidRender", "field_16557", "fullOpaque", "f_60841_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.block.AbstractBlock$AbstractBlockState$ShapeCache#transparent
    static jboolean get_field_transparent(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "propagatesSkylightDown", "field_16556", "transparent", "f_60847_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static default field net.minecraft.block.AbstractBlock$AbstractBlockState$ShapeCache#transparent
    static void set_field_transparent(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "propagatesSkylightDown", "field_16556", "transparent", "f_60847_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.block.AbstractBlock$AbstractBlockState$ShapeCache#lightSubtracted
    static jint get_field_lightSubtracted(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "lightBlock", "field_16555", "lightSubtracted", "f_60848_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static default field net.minecraft.block.AbstractBlock$AbstractBlockState$ShapeCache#lightSubtracted
    static void set_field_lightSubtracted(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "lightBlock", "field_16555", "lightSubtracted", "f_60848_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.block.AbstractBlock$AbstractBlockState$ShapeCache#extrudedFaces
    static jobject get_field_extrudedFaces(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "occlusionShapes", "field_16560", "extrudedFaces", "f_60849_"), "[Lexv;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.block.AbstractBlock$AbstractBlockState$ShapeCache#extrudedFaces
    static void set_field_extrudedFaces(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "occlusionShapes", "field_16560", "extrudedFaces", "f_60849_"), "[Lexv;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.block.AbstractBlock$AbstractBlockState$ShapeCache#collisionShape
    static jobject get_field_collisionShape(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "collisionShape", "field_19360", "collisionShape", "f_60842_"), "Lexv;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.block.AbstractBlock$AbstractBlockState$ShapeCache#collisionShape
    static void set_field_collisionShape(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "collisionShape", "field_19360", "collisionShape", "f_60842_"), "Lexv;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.block.AbstractBlock$AbstractBlockState$ShapeCache#exceedsCube
    static jboolean get_field_exceedsCube(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "largeCollisionShape", "field_17651", "exceedsCube", "f_60843_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.block.AbstractBlock$AbstractBlockState$ShapeCache#exceedsCube
    static void set_field_exceedsCube(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "largeCollisionShape", "field_17651", "exceedsCube", "f_60843_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.AbstractBlock$AbstractBlockState$ShapeCache#solidSides
    static jboolean get_field_solidSides(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "faceSturdy", "field_19429", "solidSides", "f_60850_"), "[Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.AbstractBlock$AbstractBlockState$ShapeCache#solidSides
    static void set_field_solidSides(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "faceSturdy", "field_19429", "solidSides", "f_60850_"), "[Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.block.AbstractBlock$AbstractBlockState$ShapeCache#isFullCube
    static jboolean get_field_isFullCube(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "isCollisionShapeFullBlock", "field_20337", "isFullCube", "f_60844_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.block.AbstractBlock$AbstractBlockState$ShapeCache#isFullCube
    static void set_field_isFullCube(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "isCollisionShapeFullBlock", "field_20337", "isFullCube", "f_60844_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    static jmethodID methodID_isSideSolid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isFaceSturdy", "method_30369", "isSideSolid", "m_60861_"), "(Lji;Ldoa;)Z");
    }

    static jboolean isSideSolid(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_isSideSolid();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_indexSolidSide() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "getFaceSupportIndex", "method_30370", "indexSolidSide", "m_60866_"), "(Lji;Ldoa;)I");
    }

    static jint indexSolidSide(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_indexSolidSide();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_BLOCK_ABSTRACTBLOCK$ABSTRACTBLOCKSTATE$SHAPECACHE_HPP