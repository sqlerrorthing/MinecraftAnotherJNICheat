// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_BLOCK_POINTEDDRIPSTONEBLOCK_HPP
#define NET_MINECRAFT_BLOCK_POINTEDDRIPSTONEBLOCK_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.block.PointedDripstoneBlock
 * Remapped: dlq
 */
namespace PointedDripstoneBlock {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dlq", "net/minecraft/world/level/block/PointedDripstoneBlock", "net/minecraft/class_5689", "net/minecraft/block/PointedDripstoneBlock", "net/minecraft/src/C_141220_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.block.PointedDripstoneBlock#CODEC
    [[maybe_unused]] static jobject get_field_CODEC() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CODEC", "field_46413", "CODEC", "f_303594_"), "Lcom/mojang/serialization/MapCodec;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.PointedDripstoneBlock#CODEC
    [[maybe_unused]] static void set_field_CODEC(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CODEC", "field_46413", "CODEC", "f_303594_"), "Lcom/mojang/serialization/MapCodec;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.PointedDripstoneBlock#VERTICAL_DIRECTION
    [[maybe_unused]] static jobject get_field_VERTICAL_DIRECTION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "TIP_DIRECTION", "field_28050", "VERTICAL_DIRECTION", "f_154009_"), "Ldtw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.PointedDripstoneBlock#VERTICAL_DIRECTION
    [[maybe_unused]] static void set_field_VERTICAL_DIRECTION(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "TIP_DIRECTION", "field_28050", "VERTICAL_DIRECTION", "f_154009_"), "Ldtw;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.PointedDripstoneBlock#THICKNESS
    [[maybe_unused]] static jobject get_field_THICKNESS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "THICKNESS", "field_28051", "THICKNESS", "f_154010_"), "Ldua;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.PointedDripstoneBlock#THICKNESS
    [[maybe_unused]] static void set_field_THICKNESS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "THICKNESS", "field_28051", "THICKNESS", "f_154010_"), "Ldua;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.PointedDripstoneBlock#WATERLOGGED
    [[maybe_unused]] static jobject get_field_WATERLOGGED() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "WATERLOGGED", "field_28052", "WATERLOGGED", "f_154011_"), "Ldtt;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.PointedDripstoneBlock#WATERLOGGED
    [[maybe_unused]] static void set_field_WATERLOGGED(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "WATERLOGGED", "field_28052", "WATERLOGGED", "f_154011_"), "Ldtt;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.PointedDripstoneBlock#field_31205
    [[maybe_unused]] static jint get_field_field_31205() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "MAX_SEARCH_LENGTH_WHEN_CHECKING_DRIP_TYPE", "field_31205", "field_31205", "f_154012_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.PointedDripstoneBlock#field_31205
    [[maybe_unused]] static void set_field_field_31205(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "MAX_SEARCH_LENGTH_WHEN_CHECKING_DRIP_TYPE", "field_31205", "field_31205", "f_154012_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.PointedDripstoneBlock#field_31207
    [[maybe_unused]] static jint get_field_field_31207() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "DELAY_BEFORE_FALLING", "field_31207", "field_31207", "f_154014_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.PointedDripstoneBlock#field_31207
    [[maybe_unused]] static void set_field_field_31207(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "DELAY_BEFORE_FALLING", "field_31207", "field_31207", "f_154014_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.PointedDripstoneBlock#field_31208
    [[maybe_unused]] static jfloat get_field_field_31208() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "DRIP_PROBABILITY_PER_ANIMATE_TICK", "field_31208", "field_31208", "f_154015_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.PointedDripstoneBlock#field_31208
    [[maybe_unused]] static void set_field_field_31208(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "DRIP_PROBABILITY_PER_ANIMATE_TICK", "field_31208", "field_31208", "f_154015_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.PointedDripstoneBlock#field_31209
    [[maybe_unused]] static jfloat get_field_field_31209() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "DRIP_PROBABILITY_PER_ANIMATE_TICK_IF_UNDER_LIQUID_SOURCE", "field_31209", "field_31209", "f_154016_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.PointedDripstoneBlock#field_31209
    [[maybe_unused]] static void set_field_field_31209(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "DRIP_PROBABILITY_PER_ANIMATE_TICK_IF_UNDER_LIQUID_SOURCE", "field_31209", "field_31209", "f_154016_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.PointedDripstoneBlock#field_31210
    [[maybe_unused]] static jint get_field_field_31210() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "MAX_SEARCH_LENGTH_BETWEEN_STALACTITE_TIP_AND_CAULDRON", "field_31210", "field_31210", "f_154017_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.PointedDripstoneBlock#field_31210
    [[maybe_unused]] static void set_field_field_31210(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "MAX_SEARCH_LENGTH_BETWEEN_STALACTITE_TIP_AND_CAULDRON", "field_31210", "field_31210", "f_154017_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.PointedDripstoneBlock#WATER_DRIP_CHANCE
    [[maybe_unused]] static jfloat get_field_WATER_DRIP_CHANCE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "WATER_TRANSFER_PROBABILITY_PER_RANDOM_TICK", "field_31211", "WATER_DRIP_CHANCE", "f_221844_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.PointedDripstoneBlock#WATER_DRIP_CHANCE
    [[maybe_unused]] static void set_field_WATER_DRIP_CHANCE(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "WATER_TRANSFER_PROBABILITY_PER_RANDOM_TICK", "field_31211", "WATER_DRIP_CHANCE", "f_221844_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.PointedDripstoneBlock#LAVA_DRIP_CHANCE
    [[maybe_unused]] static jfloat get_field_LAVA_DRIP_CHANCE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "LAVA_TRANSFER_PROBABILITY_PER_RANDOM_TICK", "field_31212", "LAVA_DRIP_CHANCE", "f_221845_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.PointedDripstoneBlock#LAVA_DRIP_CHANCE
    [[maybe_unused]] static void set_field_LAVA_DRIP_CHANCE(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "LAVA_TRANSFER_PROBABILITY_PER_RANDOM_TICK", "field_31212", "LAVA_DRIP_CHANCE", "f_221845_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.PointedDripstoneBlock#field_31213
    [[maybe_unused]] static jdouble get_field_field_31213() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "MIN_TRIDENT_VELOCITY_TO_BREAK_DRIPSTONE", "field_31213", "field_31213", "f_154020_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.PointedDripstoneBlock#field_31213
    [[maybe_unused]] static void set_field_field_31213(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "MIN_TRIDENT_VELOCITY_TO_BREAK_DRIPSTONE", "field_31213", "field_31213", "f_154020_"), "D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.PointedDripstoneBlock#field_31214
    [[maybe_unused]] static jfloat get_field_field_31214() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "STALACTITE_DAMAGE_PER_FALL_DISTANCE_AND_SIZE", "field_31214", "field_31214", "f_154021_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.PointedDripstoneBlock#field_31214
    [[maybe_unused]] static void set_field_field_31214(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "STALACTITE_DAMAGE_PER_FALL_DISTANCE_AND_SIZE", "field_31214", "field_31214", "f_154021_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.PointedDripstoneBlock#field_31215
    [[maybe_unused]] static jint get_field_field_31215() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "STALACTITE_MAX_DAMAGE", "field_31215", "field_31215", "f_154022_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.PointedDripstoneBlock#field_31215
    [[maybe_unused]] static void set_field_field_31215(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "STALACTITE_MAX_DAMAGE", "field_31215", "field_31215", "f_154022_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.PointedDripstoneBlock#field_31200
    [[maybe_unused]] static jint get_field_field_31200() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "MAX_STALACTITE_HEIGHT_FOR_DAMAGE_CALCULATION", "field_31200", "field_31200", "f_153994_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.PointedDripstoneBlock#field_31200
    [[maybe_unused]] static void set_field_field_31200(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "MAX_STALACTITE_HEIGHT_FOR_DAMAGE_CALCULATION", "field_31200", "field_31200", "f_153994_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.PointedDripstoneBlock#field_31201
    [[maybe_unused]] static jfloat get_field_field_31201() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("F", "STALAGMITE_FALL_DISTANCE_OFFSET", "field_31201", "field_31201", "f_153995_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.PointedDripstoneBlock#field_31201
    [[maybe_unused]] static void set_field_field_31201(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("F", "STALAGMITE_FALL_DISTANCE_OFFSET", "field_31201", "field_31201", "f_153995_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.PointedDripstoneBlock#field_31202
    [[maybe_unused]] static jint get_field_field_31202() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("G", "STALAGMITE_FALL_DAMAGE_MODIFIER", "field_31202", "field_31202", "f_153996_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.PointedDripstoneBlock#field_31202
    [[maybe_unused]] static void set_field_field_31202(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("G", "STALAGMITE_FALL_DAMAGE_MODIFIER", "field_31202", "field_31202", "f_153996_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.PointedDripstoneBlock#field_33566
    [[maybe_unused]] static jfloat get_field_field_33566() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("H", "AVERAGE_DAYS_PER_GROWTH", "field_33566", "field_33566", "f_153997_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.PointedDripstoneBlock#field_33566
    [[maybe_unused]] static void set_field_field_33566(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("H", "AVERAGE_DAYS_PER_GROWTH", "field_33566", "field_33566", "f_153997_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.PointedDripstoneBlock#field_33567
    [[maybe_unused]] static jfloat get_field_field_33567() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("I", "GROWTH_PROBABILITY_PER_RANDOM_TICK", "field_33567", "field_33567", "f_153998_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.PointedDripstoneBlock#field_33567
    [[maybe_unused]] static void set_field_field_33567(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("I", "GROWTH_PROBABILITY_PER_RANDOM_TICK", "field_33567", "field_33567", "f_153998_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.PointedDripstoneBlock#MAX_STALACTITE_GROWTH
    [[maybe_unused]] static jint get_field_MAX_STALACTITE_GROWTH() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("J", "MAX_GROWTH_LENGTH", "field_33568", "MAX_STALACTITE_GROWTH", "f_153999_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.PointedDripstoneBlock#MAX_STALACTITE_GROWTH
    [[maybe_unused]] static void set_field_MAX_STALACTITE_GROWTH(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("J", "MAX_GROWTH_LENGTH", "field_33568", "MAX_STALACTITE_GROWTH", "f_153999_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.PointedDripstoneBlock#STALACTITE_FLOOR_SEARCH_RANGE
    [[maybe_unused]] static jint get_field_STALACTITE_FLOOR_SEARCH_RANGE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("K", "MAX_STALAGMITE_SEARCH_RANGE_WHEN_GROWING", "field_33569", "STALACTITE_FLOOR_SEARCH_RANGE", "f_154000_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.PointedDripstoneBlock#STALACTITE_FLOOR_SEARCH_RANGE
    [[maybe_unused]] static void set_field_STALACTITE_FLOOR_SEARCH_RANGE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("K", "MAX_STALAGMITE_SEARCH_RANGE_WHEN_GROWING", "field_33569", "STALACTITE_FLOOR_SEARCH_RANGE", "f_154000_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.PointedDripstoneBlock#field_31203
    [[maybe_unused]] static jfloat get_field_field_31203() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("L", "STALACTITE_DRIP_START_PIXEL", "field_31203", "field_31203", "f_154001_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.PointedDripstoneBlock#field_31203
    [[maybe_unused]] static void set_field_field_31203(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("L", "STALACTITE_DRIP_START_PIXEL", "field_31203", "field_31203", "f_154001_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.PointedDripstoneBlock#TIP_MERGE_SHAPE
    [[maybe_unused]] static jobject get_field_TIP_MERGE_SHAPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("M", "TIP_MERGE_SHAPE", "field_28053", "TIP_MERGE_SHAPE", "f_154002_"), "Lexv;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.PointedDripstoneBlock#TIP_MERGE_SHAPE
    [[maybe_unused]] static void set_field_TIP_MERGE_SHAPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("M", "TIP_MERGE_SHAPE", "field_28053", "TIP_MERGE_SHAPE", "f_154002_"), "Lexv;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.PointedDripstoneBlock#UP_TIP_SHAPE
    [[maybe_unused]] static jobject get_field_UP_TIP_SHAPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("N", "TIP_SHAPE_UP", "field_28054", "UP_TIP_SHAPE", "f_154003_"), "Lexv;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.PointedDripstoneBlock#UP_TIP_SHAPE
    [[maybe_unused]] static void set_field_UP_TIP_SHAPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("N", "TIP_SHAPE_UP", "field_28054", "UP_TIP_SHAPE", "f_154003_"), "Lexv;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.PointedDripstoneBlock#DOWN_TIP_SHAPE
    [[maybe_unused]] static jobject get_field_DOWN_TIP_SHAPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("O", "TIP_SHAPE_DOWN", "field_28055", "DOWN_TIP_SHAPE", "f_154004_"), "Lexv;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.PointedDripstoneBlock#DOWN_TIP_SHAPE
    [[maybe_unused]] static void set_field_DOWN_TIP_SHAPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("O", "TIP_SHAPE_DOWN", "field_28055", "DOWN_TIP_SHAPE", "f_154004_"), "Lexv;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.PointedDripstoneBlock#BASE_SHAPE
    [[maybe_unused]] static jobject get_field_BASE_SHAPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("P", "FRUSTUM_SHAPE", "field_28058", "BASE_SHAPE", "f_154005_"), "Lexv;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.PointedDripstoneBlock#BASE_SHAPE
    [[maybe_unused]] static void set_field_BASE_SHAPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("P", "FRUSTUM_SHAPE", "field_28058", "BASE_SHAPE", "f_154005_"), "Lexv;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.PointedDripstoneBlock#FRUSTUM_SHAPE
    [[maybe_unused]] static jobject get_field_FRUSTUM_SHAPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("Q", "MIDDLE_SHAPE", "field_28056", "FRUSTUM_SHAPE", "f_154006_"), "Lexv;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.PointedDripstoneBlock#FRUSTUM_SHAPE
    [[maybe_unused]] static void set_field_FRUSTUM_SHAPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("Q", "MIDDLE_SHAPE", "field_28056", "FRUSTUM_SHAPE", "f_154006_"), "Lexv;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.PointedDripstoneBlock#MIDDLE_SHAPE
    [[maybe_unused]] static jobject get_field_MIDDLE_SHAPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("R", "BASE_SHAPE", "field_28057", "MIDDLE_SHAPE", "f_154007_"), "Lexv;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.PointedDripstoneBlock#MIDDLE_SHAPE
    [[maybe_unused]] static void set_field_MIDDLE_SHAPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("R", "BASE_SHAPE", "field_28057", "MIDDLE_SHAPE", "f_154007_"), "Lexv;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.PointedDripstoneBlock#field_31204
    [[maybe_unused]] static jfloat get_field_field_31204() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("S", "MAX_HORIZONTAL_OFFSET", "field_31204", "field_31204", "f_154008_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.PointedDripstoneBlock#field_31204
    [[maybe_unused]] static void set_field_field_31204(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("S", "MAX_HORIZONTAL_OFFSET", "field_31204", "field_31204", "f_154008_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.PointedDripstoneBlock#DRIP_COLLISION_SHAPE
    [[maybe_unused]] static jobject get_field_DRIP_COLLISION_SHAPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("T", "REQUIRED_SPACE_TO_DRIP_THROUGH_NON_SOLID_BLOCK", "field_36340", "DRIP_COLLISION_SHAPE", "f_202005_"), "Lexv;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.PointedDripstoneBlock#DRIP_COLLISION_SHAPE
    [[maybe_unused]] static void set_field_DRIP_COLLISION_SHAPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("T", "REQUIRED_SPACE_TO_DRIP_THROUGH_NON_SOLID_BLOCK", "field_36340", "DRIP_COLLISION_SHAPE", "f_202005_"), "Lexv;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_getCodec() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "codec", "method_53969", "getCodec", "m_304657_"), "()Lcom/mojang/serialization/MapCodec;");
    }

    static jobject getCodec(const jobject& obj) {
                
       const auto methodID = methodID_getCodec();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_appendProperties() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "createBlockStateDefinition", "method_9515", "appendProperties", "m_7926_"), "(Ldtd$a;)V");
    }

    static void appendProperties(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_appendProperties();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_canPlaceAt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "canSurvive", "method_9558", "canPlaceAt", "m_7898_"), "(Ldtc;Ldcz;Ljd;)Z");
    }

    static jboolean canPlaceAt(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_canPlaceAt();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getStateForNeighborUpdate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateShape", "method_9559", "getStateForNeighborUpdate", "m_7417_"), "(Ldtc;Lji;Ldtc;Ldcx;Ljd;Ljd;)Ldtc;");
    }

    static jobject getStateForNeighborUpdate(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4, const jobject& arg5) {
                
       const auto methodID = methodID_getStateForNeighborUpdate();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
    static jmethodID methodID_onProjectileHit() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onProjectileHit", "method_19286", "onProjectileHit", "m_5581_"), "(Ldcw;Ldtc;Lewy;Lcnp;)V");
    }

    static void onProjectileHit(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_onProjectileHit();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_onLandedUpon() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "fallOn", "method_9554", "onLandedUpon", "m_142072_"), "(Ldcw;Ldtc;Ljd;Lbsr;F)V");
    }

    static void onLandedUpon(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jfloat& arg4) {
                
       const auto methodID = methodID_onLandedUpon();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_randomDisplayTick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "animateTick", "method_9496", "randomDisplayTick", "m_214162_"), "(Ldtc;Ldcw;Ljd;Layw;)V");
    }

    static void randomDisplayTick(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_randomDisplayTick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_scheduledTick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "tick", "method_9588", "scheduledTick", "m_213897_"), "(Ldtc;Laqu;Ljd;Layw;)V");
    }

    static void scheduledTick(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_scheduledTick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_randomTick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "randomTick", "method_9514", "randomTick", "m_213898_"), "(Ldtc;Laqu;Ljd;Layw;)V");
    }

    static void randomTick(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_randomTick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_dripTick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "maybeTransferFluid", "method_32772", "dripTick", "m_221859_"), "(Ldtc;Laqu;Ljd;F)V");
    }

    static void dripTick(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jfloat& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_dripTick();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_getPlacementState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getStateForPlacement", "method_9605", "getPlacementState", "m_5573_"), "(Lcyd;)Ldtc;");
    }

    static jobject getPlacementState(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getPlacementState();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getFluidState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b_", "getFluidState", "method_9545", "getFluidState", "m_5888_"), "(Ldtc;)Lepe;");
    }

    static jobject getFluidState(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getFluidState();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getCullingShape() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "getOcclusionShape", "method_9571", "getCullingShape", "m_7952_"), "(Ldtc;Ldcc;Ljd;)Lexv;");
    }

    static jobject getCullingShape(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_getCullingShape();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getOutlineShape() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getShape", "method_9530", "getOutlineShape", "m_5940_"), "(Ldtc;Ldcc;Ljd;Lexh;)Lexv;");
    }

    static jobject getOutlineShape(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_getOutlineShape();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_isShapeFullCube() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "isCollisionShapeFullBlock", "method_37403", "isShapeFullCube", "m_180643_"), "(Ldtc;Ldcc;Ljd;)Z");
    }

    static jboolean isShapeFullCube(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_isShapeFullCube();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getMaxHorizontalModelOffset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("av_", "getMaxHorizontalOffset", "method_32913", "getMaxHorizontalModelOffset", "m_142740_"), "()F");
    }

    static jfloat getMaxHorizontalModelOffset(const jobject& obj) {
                
       const auto methodID = methodID_getMaxHorizontalModelOffset();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_onDestroyedOnLanding() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onBrokenAfterFall", "method_10129", "onDestroyedOnLanding", "m_142525_"), "(Ldcw;Ljd;Lcjg;)V");
    }

    static void onDestroyedOnLanding(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_onDestroyedOnLanding();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getDamageSource() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getFallDamageSource", "method_32898", "getDamageSource", "m_252932_"), "(Lbsr;)Lbrk;");
    }

    static jobject getDamageSource(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getDamageSource();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_spawnFallingBlock() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "spawnFallingStalactite", "method_32771", "spawnFallingBlock", "m_154097_"), "(Ldtc;Laqu;Ljd;)V");
    }

    static void spawnFallingBlock(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_spawnFallingBlock();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_tryGrow() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "growStalactiteOrStalagmiteIfPossible", "method_36375", "tryGrow", "m_221887_"), "(Ldtc;Laqu;Ljd;Layw;)V");
    }

    static void tryGrow(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_tryGrow();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_tryGrowStalagmite() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "growStalagmiteBelow", "method_36368", "tryGrowStalagmite", "m_154032_"), "(Laqu;Ljd;)V");
    }

    static void tryGrowStalagmite(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_tryGrowStalagmite();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__tryGrow() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "grow", "method_36369", "tryGrow", "m_154035_"), "(Laqu;Ljd;Lji;)V");
    }

    static void _tryGrow(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID__tryGrow();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_place() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "createDripstone", "method_36370", "place", "m_154087_"), "(Ldcx;Ljd;Lji;Ldtz;)V");
    }

    static void place(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_place();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_growMerged() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "createMergedTips", "method_36376", "growMerged", "m_154230_"), "(Ldtc;Ldcx;Ljd;)V");
    }

    static void growMerged(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_growMerged();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_createParticle() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "spawnDripParticle", "method_32899", "createParticle", "m_154062_"), "(Ldcw;Ljd;Ldtc;)V");
    }

    static void createParticle(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_createParticle();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__createParticle() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "spawnDripParticle", "method_32768", "createParticle", "m_154071_"), "(Ldcw;Ljd;Ldtc;Lepd;)V");
    }

    static void _createParticle(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
       const auto clazz = self();
       const auto methodID = methodID__createParticle();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_getTipPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "findTip", "method_32782", "getTipPos", "m_154130_"), "(Ldtc;Ldcx;Ljd;IZ)Ljd;");
    }

    static jobject getTipPos(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jint& arg3, const jboolean& arg4) {
       const auto clazz = self();
       const auto methodID = methodID_getTipPos();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_getDirectionToPlaceAt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "calculateTipDirection", "method_32777", "getDirectionToPlaceAt", "m_154190_"), "(Ldcz;Ljd;Lji;)Lji;");
    }

    static jobject getDirectionToPlaceAt(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_getDirectionToPlaceAt();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getThickness() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "calculateDripstoneThickness", "method_32770", "getThickness", "m_154092_"), "(Ldcz;Ljd;Lji;Z)Ldtz;");
    }

    static jobject getThickness(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jboolean& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_getThickness();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_canDrip() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("m", "canDrip", "method_32783", "canDrip", "m_154238_"), "(Ldtc;)Z");
    }

    static jboolean canDrip(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_canDrip();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_canGrow() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "canTipGrow", "method_36374", "canGrow", "m_154194_"), "(Ldtc;Laqu;Ljd;)Z");
    }

    static jboolean canGrow(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_canGrow();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getSupportingPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "findRootBlock", "method_32776", "getSupportingPos", "m_154066_"), "(Ldcw;Ljd;Ldtc;I)Ljava/util/Optional;");
    }

    static jobject getSupportingPos(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jint& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_getSupportingPos();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_canPlaceAtWithDirection() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "isValidPointedDripstonePlacement", "method_32781", "canPlaceAtWithDirection", "m_154221_"), "(Ldcz;Ljd;Lji;)Z");
    }

    static jboolean canPlaceAtWithDirection(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_canPlaceAtWithDirection();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_isTip() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "isTip", "method_32784", "isTip", "m_154153_"), "(Ldtc;Z)Z");
    }

    static jboolean isTip(const jobject& arg0, const jboolean& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_isTip();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__isTip() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "isUnmergedTipWithDirection", "method_36372", "isTip", "m_154143_"), "(Ldtc;Lji;)Z");
    }

    static jboolean _isTip(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID__isTip();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isPointingDown() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("n", "isStalactite", "method_32785", "isPointingDown", "m_154240_"), "(Ldtc;)Z");
    }

    static jboolean isPointingDown(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_isPointingDown();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_isPointingUp() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("o", "isStalagmite", "method_35283", "isPointingUp", "m_154242_"), "(Ldtc;)Z");
    }

    static jboolean isPointingUp(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_isPointingUp();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_isHeldByPointedDripstone() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "isStalactiteStartPos", "method_32778", "isHeldByPointedDripstone", "m_154203_"), "(Ldtc;Ldcz;Ljd;)Z");
    }

    static jboolean isHeldByPointedDripstone(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_isHeldByPointedDripstone();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_canPathfindThrough() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isPathfindable", "method_9516", "canPathfindThrough", "m_7357_"), "(Ldtc;Lept;)Z");
    }

    static jboolean canPathfindThrough(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_canPathfindThrough();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isPointedDripstoneFacingDirection() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "isPointedDripstoneWithDirection", "method_32774", "isPointedDripstoneFacingDirection", "m_154207_"), "(Ldtc;Lji;)Z");
    }

    static jboolean isPointedDripstoneFacingDirection(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_isPointedDripstoneFacingDirection();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getCauldronPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "findFillableCauldronBelowStalactiteTip", "method_32769", "getCauldronPos", "m_154076_"), "(Ldcw;Ljd;Lepd;)Ljd;");
    }

    static jobject getCauldronPos(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_getCauldronPos();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getDripPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "findStalactiteTipAboveCauldron", "method_32767", "getDripPos", "m_154055_"), "(Ldcw;Ljd;)Ljd;");
    }

    static jobject getDripPos(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_getDripPos();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getDripFluid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getCauldronFillFluidType", "method_32775", "getDripFluid", "m_221849_"), "(Laqu;Ljd;)Lepd;");
    }

    static jobject getDripFluid(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_getDripFluid();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getFluid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "getFluidAboveStalactite", "method_33276", "getFluid", "m_154181_"), "(Ldcw;Ljd;Ldtc;)Ljava/util/Optional;");
    }

    static jobject getFluid(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_getFluid();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_isFluidLiquid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "canFillCauldron", "method_33273", "isFluidLiquid", "m_154158_"), "(Lepd;)Z");
    }

    static jboolean isFluidLiquid(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_isFluidLiquid();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID__canGrow() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "canGrow", "method_36371", "canGrow", "m_154140_"), "(Ldtc;Ldtc;)Z");
    }

    static jboolean _canGrow(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID__canGrow();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__getDripFluid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getDripFluid", "method_33271", "getDripFluid", "m_154052_"), "(Ldcw;Lepd;)Lepd;");
    }

    static jobject _getDripFluid(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID__getDripFluid();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_searchInDirection() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "findBlockVertical", "method_33272", "searchInDirection", "m_202006_"), "(Ldcx;Ljd;Lji$b;Ljava/util/function/BiPredicate;Ljava/util/function/Predicate;I)Ljava/util/Optional;");
    }

    static jobject searchInDirection(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4, const jint& arg5) {
       const auto clazz = self();
       const auto methodID = methodID_searchInDirection();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
    static jmethodID methodID_canDripThrough() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "canDripThrough", "method_40016", "canDripThrough", "m_202017_"), "(Ldcc;Ljd;Ldtc;)Z");
    }

    static jboolean canDripThrough(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_canDripThrough();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
};

#endif // NET_MINECRAFT_BLOCK_POINTEDDRIPSTONEBLOCK_HPP