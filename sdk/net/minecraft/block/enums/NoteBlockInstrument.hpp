// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_BLOCK_ENUMS_NOTEBLOCKINSTRUMENT_HPP
#define NET_MINECRAFT_BLOCK_ENUMS_NOTEBLOCKINSTRUMENT_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.block.enums.NoteBlockInstrument
 * Remapped: dud
 */
namespace NoteBlockInstrument {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dud", "net/minecraft/world/level/block/state/properties/NoteBlockInstrument", "net/minecraft/class_2766", "net/minecraft/block/enums/NoteBlockInstrument", "net/minecraft/src/C_2095_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.block.enums.NoteBlockInstrument#HARP
    [[maybe_unused]] static jobject get_field_HARP() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "HARP", "field_12648", "HARP", "HARP"), "Ldud;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.enums.NoteBlockInstrument#HARP
    [[maybe_unused]] static void set_field_HARP(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "HARP", "field_12648", "HARP", "HARP"), "Ldud;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.enums.NoteBlockInstrument#BASEDRUM
    [[maybe_unused]] static jobject get_field_BASEDRUM() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "BASEDRUM", "field_12653", "BASEDRUM", "BASEDRUM"), "Ldud;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.enums.NoteBlockInstrument#BASEDRUM
    [[maybe_unused]] static void set_field_BASEDRUM(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "BASEDRUM", "field_12653", "BASEDRUM", "BASEDRUM"), "Ldud;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.enums.NoteBlockInstrument#SNARE
    [[maybe_unused]] static jobject get_field_SNARE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "SNARE", "field_12643", "SNARE", "SNARE"), "Ldud;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.enums.NoteBlockInstrument#SNARE
    [[maybe_unused]] static void set_field_SNARE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "SNARE", "field_12643", "SNARE", "SNARE"), "Ldud;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.enums.NoteBlockInstrument#HAT
    [[maybe_unused]] static jobject get_field_HAT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "HAT", "field_12645", "HAT", "HAT"), "Ldud;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.enums.NoteBlockInstrument#HAT
    [[maybe_unused]] static void set_field_HAT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "HAT", "field_12645", "HAT", "HAT"), "Ldud;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.enums.NoteBlockInstrument#BASS
    [[maybe_unused]] static jobject get_field_BASS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "BASS", "field_12651", "BASS", "BASS"), "Ldud;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.enums.NoteBlockInstrument#BASS
    [[maybe_unused]] static void set_field_BASS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "BASS", "field_12651", "BASS", "BASS"), "Ldud;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.enums.NoteBlockInstrument#FLUTE
    [[maybe_unused]] static jobject get_field_FLUTE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "FLUTE", "field_12650", "FLUTE", "FLUTE"), "Ldud;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.enums.NoteBlockInstrument#FLUTE
    [[maybe_unused]] static void set_field_FLUTE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "FLUTE", "field_12650", "FLUTE", "FLUTE"), "Ldud;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.enums.NoteBlockInstrument#BELL
    [[maybe_unused]] static jobject get_field_BELL() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "BELL", "field_12644", "BELL", "BELL"), "Ldud;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.enums.NoteBlockInstrument#BELL
    [[maybe_unused]] static void set_field_BELL(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "BELL", "field_12644", "BELL", "BELL"), "Ldud;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.enums.NoteBlockInstrument#GUITAR
    [[maybe_unused]] static jobject get_field_GUITAR() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "GUITAR", "field_12654", "GUITAR", "GUITAR"), "Ldud;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.enums.NoteBlockInstrument#GUITAR
    [[maybe_unused]] static void set_field_GUITAR(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "GUITAR", "field_12654", "GUITAR", "GUITAR"), "Ldud;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.enums.NoteBlockInstrument#CHIME
    [[maybe_unused]] static jobject get_field_CHIME() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "CHIME", "field_12647", "CHIME", "CHIME"), "Ldud;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.enums.NoteBlockInstrument#CHIME
    [[maybe_unused]] static void set_field_CHIME(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "CHIME", "field_12647", "CHIME", "CHIME"), "Ldud;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.enums.NoteBlockInstrument#XYLOPHONE
    [[maybe_unused]] static jobject get_field_XYLOPHONE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "XYLOPHONE", "field_12655", "XYLOPHONE", "XYLOPHONE"), "Ldud;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.enums.NoteBlockInstrument#XYLOPHONE
    [[maybe_unused]] static void set_field_XYLOPHONE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "XYLOPHONE", "field_12655", "XYLOPHONE", "XYLOPHONE"), "Ldud;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.enums.NoteBlockInstrument#IRON_XYLOPHONE
    [[maybe_unused]] static jobject get_field_IRON_XYLOPHONE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "IRON_XYLOPHONE", "field_18284", "IRON_XYLOPHONE", "IRON_XYLOPHONE"), "Ldud;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.enums.NoteBlockInstrument#IRON_XYLOPHONE
    [[maybe_unused]] static void set_field_IRON_XYLOPHONE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "IRON_XYLOPHONE", "field_18284", "IRON_XYLOPHONE", "IRON_XYLOPHONE"), "Ldud;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.enums.NoteBlockInstrument#COW_BELL
    [[maybe_unused]] static jobject get_field_COW_BELL() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "COW_BELL", "field_18285", "COW_BELL", "COW_BELL"), "Ldud;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.enums.NoteBlockInstrument#COW_BELL
    [[maybe_unused]] static void set_field_COW_BELL(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "COW_BELL", "field_18285", "COW_BELL", "COW_BELL"), "Ldud;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.enums.NoteBlockInstrument#DIDGERIDOO
    [[maybe_unused]] static jobject get_field_DIDGERIDOO() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "DIDGERIDOO", "field_18286", "DIDGERIDOO", "DIDGERIDOO"), "Ldud;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.enums.NoteBlockInstrument#DIDGERIDOO
    [[maybe_unused]] static void set_field_DIDGERIDOO(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "DIDGERIDOO", "field_18286", "DIDGERIDOO", "DIDGERIDOO"), "Ldud;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.enums.NoteBlockInstrument#BIT
    [[maybe_unused]] static jobject get_field_BIT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "BIT", "field_18287", "BIT", "BIT"), "Ldud;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.enums.NoteBlockInstrument#BIT
    [[maybe_unused]] static void set_field_BIT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "BIT", "field_18287", "BIT", "BIT"), "Ldud;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.enums.NoteBlockInstrument#BANJO
    [[maybe_unused]] static jobject get_field_BANJO() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "BANJO", "field_18288", "BANJO", "BANJO"), "Ldud;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.enums.NoteBlockInstrument#BANJO
    [[maybe_unused]] static void set_field_BANJO(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "BANJO", "field_18288", "BANJO", "BANJO"), "Ldud;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.enums.NoteBlockInstrument#PLING
    [[maybe_unused]] static jobject get_field_PLING() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("p", "PLING", "field_18289", "PLING", "PLING"), "Ldud;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.enums.NoteBlockInstrument#PLING
    [[maybe_unused]] static void set_field_PLING(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("p", "PLING", "field_18289", "PLING", "PLING"), "Ldud;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.enums.NoteBlockInstrument#ZOMBIE
    [[maybe_unused]] static jobject get_field_ZOMBIE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("q", "ZOMBIE", "field_41324", "ZOMBIE", "ZOMBIE"), "Ldud;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.enums.NoteBlockInstrument#ZOMBIE
    [[maybe_unused]] static void set_field_ZOMBIE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("q", "ZOMBIE", "field_41324", "ZOMBIE", "ZOMBIE"), "Ldud;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.enums.NoteBlockInstrument#SKELETON
    [[maybe_unused]] static jobject get_field_SKELETON() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("r", "SKELETON", "field_41325", "SKELETON", "SKELETON"), "Ldud;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.enums.NoteBlockInstrument#SKELETON
    [[maybe_unused]] static void set_field_SKELETON(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("r", "SKELETON", "field_41325", "SKELETON", "SKELETON"), "Ldud;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.enums.NoteBlockInstrument#CREEPER
    [[maybe_unused]] static jobject get_field_CREEPER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("s", "CREEPER", "field_41326", "CREEPER", "CREEPER"), "Ldud;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.enums.NoteBlockInstrument#CREEPER
    [[maybe_unused]] static void set_field_CREEPER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("s", "CREEPER", "field_41326", "CREEPER", "CREEPER"), "Ldud;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.enums.NoteBlockInstrument#DRAGON
    [[maybe_unused]] static jobject get_field_DRAGON() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("t", "DRAGON", "field_41327", "DRAGON", "DRAGON"), "Ldud;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.enums.NoteBlockInstrument#DRAGON
    [[maybe_unused]] static void set_field_DRAGON(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("t", "DRAGON", "field_41327", "DRAGON", "DRAGON"), "Ldud;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.enums.NoteBlockInstrument#WITHER_SKELETON
    [[maybe_unused]] static jobject get_field_WITHER_SKELETON() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("u", "WITHER_SKELETON", "field_41328", "WITHER_SKELETON", "WITHER_SKELETON"), "Ldud;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.enums.NoteBlockInstrument#WITHER_SKELETON
    [[maybe_unused]] static void set_field_WITHER_SKELETON(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("u", "WITHER_SKELETON", "field_41328", "WITHER_SKELETON", "WITHER_SKELETON"), "Ldud;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.enums.NoteBlockInstrument#PIGLIN
    [[maybe_unused]] static jobject get_field_PIGLIN() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("v", "PIGLIN", "field_41329", "PIGLIN", "PIGLIN"), "Ldud;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.enums.NoteBlockInstrument#PIGLIN
    [[maybe_unused]] static void set_field_PIGLIN(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("v", "PIGLIN", "field_41329", "PIGLIN", "PIGLIN"), "Ldud;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.enums.NoteBlockInstrument#CUSTOM_HEAD
    [[maybe_unused]] static jobject get_field_CUSTOM_HEAD() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("w", "CUSTOM_HEAD", "field_41604", "CUSTOM_HEAD", "CUSTOM_HEAD"), "Ldud;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.enums.NoteBlockInstrument#CUSTOM_HEAD
    [[maybe_unused]] static void set_field_CUSTOM_HEAD(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("w", "CUSTOM_HEAD", "field_41604", "CUSTOM_HEAD", "CUSTOM_HEAD"), "Ldud;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.block.enums.NoteBlockInstrument#name
    static jobject get_field_name(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("x", "name", "field_12646", "name", "f_61656_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.enums.NoteBlockInstrument#name
    static void set_field_name(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("x", "name", "field_12646", "name", "f_61656_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.enums.NoteBlockInstrument#sound
    static jobject get_field_sound(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("y", "soundEvent", "field_12649", "sound", "f_61657_"), "Ljm;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.enums.NoteBlockInstrument#sound
    static void set_field_sound(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("y", "soundEvent", "field_12649", "sound", "f_61657_"), "Ljm;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.enums.NoteBlockInstrument#type
    static jobject get_field_type(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("z", "type", "field_41605", "type", "f_262302_"), "Ldud$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.enums.NoteBlockInstrument#type
    static void set_field_type(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("z", "type", "field_41605", "type", "f_262302_"), "Ldud$a;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_values() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("values", "values", "values", "values", "values"), "()[Ldud;");
    }

    static jobject values() {
       const auto clazz = self();
       const auto methodID = methodID_values();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_valueOf() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("valueOf", "valueOf", "valueOf", "valueOf", "valueOf"), "(Ljava/lang/String;)Ldud;");
    }

    static jobject valueOf(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_valueOf();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_asString() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getSerializedName", "method_15434", "asString", "m_7912_"), "()Ljava/lang/String;");
    }

    static jobject asString(const jobject& obj) {
                
       const auto methodID = methodID_asString();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getSound() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getSoundEvent", "method_11886", "getSound", "m_263188_"), "()Ljm;");
    }

    static jobject getSound(const jobject& obj) {
                
       const auto methodID = methodID_getSound();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_canBePitched() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "isTunable", "method_47889", "canBePitched", "m_262503_"), "()Z");
    }

    static jboolean canBePitched(const jobject& obj) {
                
       const auto methodID = methodID_canBePitched();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasCustomSound() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "hasCustomSound", "method_47890", "hasCustomSound", "m_262394_"), "()Z");
    }

    static jboolean hasCustomSound(const jobject& obj) {
                
       const auto methodID = methodID_hasCustomSound();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isNotBaseBlock() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "worksAboveNoteBlock", "method_51372", "isNotBaseBlock", "m_280504_"), "()Z");
    }

    static jboolean isNotBaseBlock(const jobject& obj) {
                
       const auto methodID = methodID_isNotBaseBlock();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_BLOCK_ENUMS_NOTEBLOCKINSTRUMENT_HPP