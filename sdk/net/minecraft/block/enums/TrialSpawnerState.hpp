// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_BLOCK_ENUMS_TRIALSPAWNERSTATE_HPP
#define NET_MINECRAFT_BLOCK_ENUMS_TRIALSPAWNERSTATE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.block.enums.TrialSpawnerState
 * Remapped: dsi
 */
namespace TrialSpawnerState {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dsi", "net/minecraft/world/level/block/entity/trialspawner/TrialSpawnerState", "net/minecraft/class_8967", "net/minecraft/block/enums/TrialSpawnerState", "net/minecraft/src/C_302094_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.block.enums.TrialSpawnerState#INACTIVE
    [[maybe_unused]] static jobject get_field_INACTIVE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "INACTIVE", "field_47383", "INACTIVE", "INACTIVE"), "Ldsi;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.enums.TrialSpawnerState#INACTIVE
    [[maybe_unused]] static void set_field_INACTIVE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "INACTIVE", "field_47383", "INACTIVE", "INACTIVE"), "Ldsi;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.enums.TrialSpawnerState#WAITING_FOR_PLAYERS
    [[maybe_unused]] static jobject get_field_WAITING_FOR_PLAYERS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "WAITING_FOR_PLAYERS", "field_47384", "WAITING_FOR_PLAYERS", "WAITING_FOR_PLAYERS"), "Ldsi;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.enums.TrialSpawnerState#WAITING_FOR_PLAYERS
    [[maybe_unused]] static void set_field_WAITING_FOR_PLAYERS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "WAITING_FOR_PLAYERS", "field_47384", "WAITING_FOR_PLAYERS", "WAITING_FOR_PLAYERS"), "Ldsi;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.enums.TrialSpawnerState#ACTIVE
    [[maybe_unused]] static jobject get_field_ACTIVE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "ACTIVE", "field_47385", "ACTIVE", "ACTIVE"), "Ldsi;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.enums.TrialSpawnerState#ACTIVE
    [[maybe_unused]] static void set_field_ACTIVE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "ACTIVE", "field_47385", "ACTIVE", "ACTIVE"), "Ldsi;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.enums.TrialSpawnerState#WAITING_FOR_REWARD_EJECTION
    [[maybe_unused]] static jobject get_field_WAITING_FOR_REWARD_EJECTION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "WAITING_FOR_REWARD_EJECTION", "field_47386", "WAITING_FOR_REWARD_EJECTION", "WAITING_FOR_REWARD_EJECTION"), "Ldsi;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.enums.TrialSpawnerState#WAITING_FOR_REWARD_EJECTION
    [[maybe_unused]] static void set_field_WAITING_FOR_REWARD_EJECTION(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "WAITING_FOR_REWARD_EJECTION", "field_47386", "WAITING_FOR_REWARD_EJECTION", "WAITING_FOR_REWARD_EJECTION"), "Ldsi;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.enums.TrialSpawnerState#EJECTING_REWARD
    [[maybe_unused]] static jobject get_field_EJECTING_REWARD() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "EJECTING_REWARD", "field_47387", "EJECTING_REWARD", "EJECTING_REWARD"), "Ldsi;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.enums.TrialSpawnerState#EJECTING_REWARD
    [[maybe_unused]] static void set_field_EJECTING_REWARD(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "EJECTING_REWARD", "field_47387", "EJECTING_REWARD", "EJECTING_REWARD"), "Ldsi;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.block.enums.TrialSpawnerState#COOLDOWN
    [[maybe_unused]] static jobject get_field_COOLDOWN() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "COOLDOWN", "field_47388", "COOLDOWN", "COOLDOWN"), "Ldsi;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.block.enums.TrialSpawnerState#COOLDOWN
    [[maybe_unused]] static void set_field_COOLDOWN(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "COOLDOWN", "field_47388", "COOLDOWN", "COOLDOWN"), "Ldsi;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.enums.TrialSpawnerState#START_EJECTING_REWARDS_COOLDOWN
    [[maybe_unused]] static jfloat get_field_START_EJECTING_REWARDS_COOLDOWN() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "DELAY_BEFORE_EJECT_AFTER_KILLING_LAST_MOB", "field_47389", "START_EJECTING_REWARDS_COOLDOWN", "f_303262_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.enums.TrialSpawnerState#START_EJECTING_REWARDS_COOLDOWN
    [[maybe_unused]] static void set_field_START_EJECTING_REWARDS_COOLDOWN(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "DELAY_BEFORE_EJECT_AFTER_KILLING_LAST_MOB", "field_47389", "START_EJECTING_REWARDS_COOLDOWN", "f_303262_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.enums.TrialSpawnerState#BETWEEN_EJECTING_REWARDS_COOLDOWN
    [[maybe_unused]] static jint get_field_BETWEEN_EJECTING_REWARDS_COOLDOWN() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "TIME_BETWEEN_EACH_EJECTION", "field_47390", "BETWEEN_EJECTING_REWARDS_COOLDOWN", "f_302549_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.enums.TrialSpawnerState#BETWEEN_EJECTING_REWARDS_COOLDOWN
    [[maybe_unused]] static void set_field_BETWEEN_EJECTING_REWARDS_COOLDOWN(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "TIME_BETWEEN_EACH_EJECTION", "field_47390", "BETWEEN_EJECTING_REWARDS_COOLDOWN", "f_302549_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.block.enums.TrialSpawnerState#id
    static jobject get_field_id(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "name", "field_47391", "id", "f_303350_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.enums.TrialSpawnerState#id
    static void set_field_id(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "name", "field_47391", "id", "f_303350_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.enums.TrialSpawnerState#luminance
    static jint get_field_luminance(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "lightLevel", "field_47392", "luminance", "f_302810_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.enums.TrialSpawnerState#luminance
    static void set_field_luminance(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "lightLevel", "field_47392", "luminance", "f_302810_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.enums.TrialSpawnerState#displayRotationSpeed
    static jdouble get_field_displayRotationSpeed(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "spinningMobSpeed", "field_47393", "displayRotationSpeed", "f_303620_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.enums.TrialSpawnerState#displayRotationSpeed
    static void set_field_displayRotationSpeed(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "spinningMobSpeed", "field_47393", "displayRotationSpeed", "f_303620_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.enums.TrialSpawnerState#particleEmitter
    static jobject get_field_particleEmitter(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "particleEmission", "field_47394", "particleEmitter", "f_302969_"), "Ldsi$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.enums.TrialSpawnerState#particleEmitter
    static void set_field_particleEmitter(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "particleEmission", "field_47394", "particleEmitter", "f_302969_"), "Ldsi$b;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.enums.TrialSpawnerState#playsSound
    static jboolean get_field_playsSound(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "isCapableOfSpawning", "field_47395", "playsSound", "f_303677_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.enums.TrialSpawnerState#playsSound
    static void set_field_playsSound(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "isCapableOfSpawning", "field_47395", "playsSound", "f_303677_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    static jmethodID methodID_values() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("values", "values", "values", "values", "values"), "()[Ldsi;");
    }

    static jobject values() {
       const auto clazz = self();
       const auto methodID = methodID_values();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_valueOf() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("valueOf", "valueOf", "valueOf", "valueOf", "valueOf"), "(Ljava/lang/String;)Ldsi;");
    }

    static jobject valueOf(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_valueOf();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "tickAndGetNext", "method_55214", "tick", "m_308008_"), "(Ljd;Ldsf;Laqu;)Ldsi;");
    }

    static jobject tick(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_tick();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_spawnOminousItemSpawner() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "spawnOminousOminousItemSpawner", "method_58720", "spawnOminousItemSpawner", "m_322742_"), "(Laqu;Ljd;Ldsf;)V");
    }

    static void spawnOminousItemSpawner(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_spawnOminousItemSpawner();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getPosToSpawnItemSpawner() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "calculatePositionToSpawnSpawner", "method_58721", "getPosToSpawnItemSpawner", "m_319371_"), "(Laqu;Ljd;Ldsf;Ldsh;)Ljava/util/Optional;");
    }

    static jobject getPosToSpawnItemSpawner(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_getPosToSpawnItemSpawner();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_getPosAbove() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "calculatePositionAbove", "method_58722", "getPosAbove", "m_320878_"), "(Lbsr;Laqu;)Ljava/util/Optional;");
    }

    static jobject getPosAbove(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_getPosAbove();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getRandomEntity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "selectEntityToSpawnItemAbove", "method_58725", "getRandomEntity", "m_323848_"), "(Ljava/util/List;Ljava/util/Set;Ldsf;Ljd;Laqu;)Lbsr;");
    }

    static jobject getRandomEntity(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4) {
       const auto clazz = self();
       const auto methodID = methodID_getRandomEntity();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_shouldCooldownEnd() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "timeToSpawnItemSpawner", "method_58719", "shouldCooldownEnd", "m_324229_"), "(Laqu;Ldsh;)Z");
    }

    static jboolean shouldCooldownEnd(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_shouldCooldownEnd();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getLuminance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "lightLevel", "method_55209", "getLuminance", "m_304822_"), "()I");
    }

    static jint getLuminance(const jobject& obj) {
                
       const auto methodID = methodID_getLuminance();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getDisplayRotationSpeed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "spinningMobSpeed", "method_55215", "getDisplayRotationSpeed", "m_305120_"), "()D");
    }

    static jdouble getDisplayRotationSpeed(const jobject& obj) {
                
       const auto methodID = methodID_getDisplayRotationSpeed();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID_doesDisplayRotate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "hasSpinningMob", "method_55216", "doesDisplayRotate", "m_307384_"), "()Z");
    }

    static jboolean doesDisplayRotate(const jobject& obj) {
                
       const auto methodID = methodID_doesDisplayRotate();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID__playsSound() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "isCapableOfSpawning", "method_55217", "playsSound", "m_306216_"), "()Z");
    }

    static jboolean _playsSound(const jobject& obj) {
                
       const auto methodID = methodID__playsSound();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_emitParticles() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "emitParticles", "method_55210", "emitParticles", "m_306816_"), "(Ldcw;Ljd;Z)V");
    }

    static void emitParticles(const jobject& obj, const jobject& arg0, const jobject& arg1, const jboolean& arg2) {
                
       const auto methodID = methodID_emitParticles();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_asString() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getSerializedName", "method_15434", "asString", "m_7912_"), "()Ljava/lang/String;");
    }

    static jobject asString(const jobject& obj) {
                
       const auto methodID = methodID_asString();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_BLOCK_ENUMS_TRIALSPAWNERSTATE_HPP