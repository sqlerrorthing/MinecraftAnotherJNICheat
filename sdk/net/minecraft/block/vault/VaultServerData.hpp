// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_BLOCK_VAULT_VAULTSERVERDATA_HPP
#define NET_MINECRAFT_BLOCK_VAULT_VAULTSERVERDATA_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.block.vault.VaultServerData
 * Remapped: dsn
 */
namespace VaultServerData {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dsn", "net/minecraft/world/level/block/entity/vault/VaultServerData", "net/minecraft/class_9204", "net/minecraft/block/vault/VaultServerData", "net/minecraft/src/C_313354_"));
        }
        return cachedClass;
    };

    // getter for static default field net.minecraft.block.vault.VaultServerData#SERVER_DATA_KEY
    [[maybe_unused]] static jobject get_field_SERVER_DATA_KEY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "TAG_NAME", "field_48884", "SERVER_DATA_KEY", "f_315387_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.block.vault.VaultServerData#SERVER_DATA_KEY
    [[maybe_unused]] static void set_field_SERVER_DATA_KEY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "TAG_NAME", "field_48884", "SERVER_DATA_KEY", "f_315387_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.block.vault.VaultServerData#codec
    [[maybe_unused]] static jobject get_field_codec() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "CODEC", "field_48885", "codec", "f_315361_"), "Lcom/mojang/serialization/Codec;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.block.vault.VaultServerData#codec
    [[maybe_unused]] static void set_field_codec(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "CODEC", "field_48885", "codec", "f_315361_"), "Lcom/mojang/serialization/Codec;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.block.vault.VaultServerData#MAX_STORED_REWARDED_PLAYERS
    [[maybe_unused]] static jint get_field_MAX_STORED_REWARDED_PLAYERS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "MAX_REWARD_PLAYERS", "field_48887", "MAX_STORED_REWARDED_PLAYERS", "f_316541_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.block.vault.VaultServerData#MAX_STORED_REWARDED_PLAYERS
    [[maybe_unused]] static void set_field_MAX_STORED_REWARDED_PLAYERS(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "MAX_REWARD_PLAYERS", "field_48887", "MAX_STORED_REWARDED_PLAYERS", "f_316541_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.block.vault.VaultServerData#rewardedPlayers
    static jobject get_field_rewardedPlayers(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "rewardedPlayers", "field_48888", "rewardedPlayers", "f_315329_"), "Ljava/util/Set;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.vault.VaultServerData#rewardedPlayers
    static void set_field_rewardedPlayers(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "rewardedPlayers", "field_48888", "rewardedPlayers", "f_315329_"), "Ljava/util/Set;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.vault.VaultServerData#stateUpdatingResumesAt
    static jlong get_field_stateUpdatingResumesAt(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "stateUpdatingResumesAt", "field_48889", "stateUpdatingResumesAt", "f_316915_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.vault.VaultServerData#stateUpdatingResumesAt
    static void set_field_stateUpdatingResumesAt(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "stateUpdatingResumesAt", "field_48889", "stateUpdatingResumesAt", "f_316915_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.vault.VaultServerData#itemsToEject
    static jobject get_field_itemsToEject(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "itemsToEject", "field_48890", "itemsToEject", "f_314906_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.vault.VaultServerData#itemsToEject
    static void set_field_itemsToEject(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "itemsToEject", "field_48890", "itemsToEject", "f_314906_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.vault.VaultServerData#lastFailedUnlockTime
    static jlong get_field_lastFailedUnlockTime(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "lastInsertFailTimestamp", "field_48891", "lastFailedUnlockTime", "f_315545_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.vault.VaultServerData#lastFailedUnlockTime
    static void set_field_lastFailedUnlockTime(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "lastInsertFailTimestamp", "field_48891", "lastFailedUnlockTime", "f_315545_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.block.vault.VaultServerData#totalEjectionsNeeded
    static jint get_field_totalEjectionsNeeded(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "totalEjectionsNeeded", "field_48892", "totalEjectionsNeeded", "f_315977_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.block.vault.VaultServerData#totalEjectionsNeeded
    static void set_field_totalEjectionsNeeded(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "totalEjectionsNeeded", "field_48892", "totalEjectionsNeeded", "f_315977_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.block.vault.VaultServerData#dirty
    static jboolean get_field_dirty(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "isDirty", "field_48886", "dirty", "f_316353_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static default field net.minecraft.block.vault.VaultServerData#dirty
    static void set_field_dirty(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "isDirty", "field_48886", "dirty", "f_316353_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    static jmethodID methodID_setLastFailedUnlockTime() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setLastInsertFailTimestamp", "method_56768", "setLastFailedUnlockTime", "m_319976_"), "(J)V");
    }

    static void setLastFailedUnlockTime(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_setLastFailedUnlockTime();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getLastFailedUnlockTime() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getLastInsertFailTimestamp", "method_56767", "getLastFailedUnlockTime", "m_322332_"), "()J");
    }

    static jlong getLastFailedUnlockTime(const jobject& obj) {
                
       const auto methodID = methodID_getLastFailedUnlockTime();
       return MinecraftSDK::env->CallLongMethod(obj, methodID);
    };
    
    static jmethodID methodID_getRewardedPlayers() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getRewardedPlayers", "method_56773", "getRewardedPlayers", "m_319069_"), "()Ljava/util/Set;");
    }

    static jobject getRewardedPlayers(const jobject& obj) {
                
       const auto methodID = methodID_getRewardedPlayers();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasRewardedPlayer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "hasRewardedPlayer", "method_56769", "hasRewardedPlayer", "m_324059_"), "(Lcmx;)Z");
    }

    static jboolean hasRewardedPlayer(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_hasRewardedPlayer();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_markPlayerAsRewarded() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "addToRewardedPlayers", "method_56775", "markPlayerAsRewarded", "m_320315_"), "(Lcmx;)V");
    }

    static void markPlayerAsRewarded(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_markPlayerAsRewarded();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getStateUpdatingResumeTime() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "stateUpdatingResumesAt", "method_56777", "getStateUpdatingResumeTime", "m_318811_"), "()J");
    }

    static jlong getStateUpdatingResumeTime(const jobject& obj) {
                
       const auto methodID = methodID_getStateUpdatingResumeTime();
       return MinecraftSDK::env->CallLongMethod(obj, methodID);
    };
    
    static jmethodID methodID_setStateUpdatingResumeTime() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "pauseStateUpdatingUntil", "method_56774", "setStateUpdatingResumeTime", "m_319712_"), "(J)V");
    }

    static void setStateUpdatingResumeTime(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_setStateUpdatingResumeTime();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getItemsToEject() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getItemsToEject", "method_56779", "getItemsToEject", "m_321830_"), "()Ljava/util/List;");
    }

    static jobject getItemsToEject(const jobject& obj) {
                
       const auto methodID = methodID_getItemsToEject();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_finishEjecting() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "markEjectionFinished", "method_56781", "finishEjecting", "m_323313_"), "()V");
    }

    static void finishEjecting(const jobject& obj) {
                
       const auto methodID = methodID_finishEjecting();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_setItemsToEject() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setItemsToEject", "method_56772", "setItemsToEject", "m_322800_"), "(Ljava/util/List;)V");
    }

    static void setItemsToEject(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setItemsToEject();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getItemToDisplay() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "getNextItemToEject", "method_56783", "getItemToDisplay", "m_320646_"), "()Lcuq;");
    }

    static jobject getItemToDisplay(const jobject& obj) {
                
       const auto methodID = methodID_getItemToDisplay();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getItemToEject() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "popNextItemToEject", "method_56784", "getItemToEject", "m_319513_"), "()Lcuq;");
    }

    static jobject getItemToEject(const jobject& obj) {
                
       const auto methodID = methodID_getItemToEject();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_copyFrom() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "set", "method_56771", "copyFrom", "m_323813_"), "(Ldsn;)V");
    }

    static void copyFrom(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_copyFrom();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_markDirty() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "markChanged", "method_56786", "markDirty", "m_319478_"), "()V");
    }

    static void markDirty(const jobject& obj) {
                
       const auto methodID = methodID_markDirty();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getEjectSoundPitchModifier() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "ejectionProgress", "method_56785", "getEjectSoundPitchModifier", "m_321331_"), "()F");
    }

    static jfloat getEjectSoundPitchModifier(const jobject& obj) {
                
       const auto methodID = methodID_getEjectSoundPitchModifier();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_BLOCK_VAULT_VAULTSERVERDATA_HPP