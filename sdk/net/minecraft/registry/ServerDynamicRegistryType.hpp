// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_REGISTRY_SERVERDYNAMICREGISTRYTYPE_HPP
#define NET_MINECRAFT_REGISTRY_SERVERDYNAMICREGISTRYTYPE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.registry.ServerDynamicRegistryType
 * Remapped: ala
 */
namespace ServerDynamicRegistryType {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("ala", "net/minecraft/server/RegistryLayer", "net/minecraft/class_7659", "net/minecraft/registry/ServerDynamicRegistryType", "net/minecraft/src/C_243564_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.registry.ServerDynamicRegistryType#STATIC
    [[maybe_unused]] static jobject get_field_STATIC() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "STATIC", "field_39971", "STATIC", "STATIC"), "Lala;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.ServerDynamicRegistryType#STATIC
    [[maybe_unused]] static void set_field_STATIC(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "STATIC", "field_39971", "STATIC", "STATIC"), "Lala;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.ServerDynamicRegistryType#WORLDGEN
    [[maybe_unused]] static jobject get_field_WORLDGEN() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "WORLDGEN", "field_39972", "WORLDGEN", "WORLDGEN"), "Lala;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.ServerDynamicRegistryType#WORLDGEN
    [[maybe_unused]] static void set_field_WORLDGEN(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "WORLDGEN", "field_39972", "WORLDGEN", "WORLDGEN"), "Lala;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.ServerDynamicRegistryType#DIMENSIONS
    [[maybe_unused]] static jobject get_field_DIMENSIONS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "DIMENSIONS", "field_39973", "DIMENSIONS", "DIMENSIONS"), "Lala;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.ServerDynamicRegistryType#DIMENSIONS
    [[maybe_unused]] static void set_field_DIMENSIONS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "DIMENSIONS", "field_39973", "DIMENSIONS", "DIMENSIONS"), "Lala;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.ServerDynamicRegistryType#RELOADABLE
    [[maybe_unused]] static jobject get_field_RELOADABLE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "RELOADABLE", "field_39974", "RELOADABLE", "RELOADABLE"), "Lala;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.ServerDynamicRegistryType#RELOADABLE
    [[maybe_unused]] static void set_field_RELOADABLE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "RELOADABLE", "field_39974", "RELOADABLE", "RELOADABLE"), "Lala;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.registry.ServerDynamicRegistryType#VALUES
    [[maybe_unused]] static jobject get_field_VALUES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "VALUES", "field_39975", "VALUES", "f_244343_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.registry.ServerDynamicRegistryType#VALUES
    [[maybe_unused]] static void set_field_VALUES(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "VALUES", "field_39975", "VALUES", "f_244343_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.registry.ServerDynamicRegistryType#STATIC_REGISTRY_MANAGER
    [[maybe_unused]] static jobject get_field_STATIC_REGISTRY_MANAGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "STATIC_ACCESS", "field_39976", "STATIC_REGISTRY_MANAGER", "f_244179_"), "Lka$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.registry.ServerDynamicRegistryType#STATIC_REGISTRY_MANAGER
    [[maybe_unused]] static void set_field_STATIC_REGISTRY_MANAGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "STATIC_ACCESS", "field_39976", "STATIC_REGISTRY_MANAGER", "f_244179_"), "Lka$b;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_values() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("values", "values", "values", "values", "values"), "()[Lala;");
    }

    static jobject values() {
       const auto clazz = self();
       const auto methodID = methodID_values();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_valueOf() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("valueOf", "valueOf", "valueOf", "valueOf", "valueOf"), "(Ljava/lang/String;)Lala;");
    }

    static jobject valueOf(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_valueOf();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_createCombinedDynamicRegistries() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "createRegistryAccess", "method_45139", "createCombinedDynamicRegistries", "m_245849_"), "()Ljt;");
    }

    static jobject createCombinedDynamicRegistries() {
       const auto clazz = self();
       const auto methodID = methodID_createCombinedDynamicRegistries();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
};

#endif // NET_MINECRAFT_REGISTRY_SERVERDYNAMICREGISTRYTYPE_HPP