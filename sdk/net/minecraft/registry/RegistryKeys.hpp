// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_REGISTRY_REGISTRYKEYS_HPP
#define NET_MINECRAFT_REGISTRY_REGISTRYKEYS_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.registry.RegistryKeys
 * Remapped: lu
 */
namespace RegistryKeys {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("lu", "net/minecraft/core/registries/Registries", "net/minecraft/class_7924", "net/minecraft/registry/RegistryKeys", "net/minecraft/src/C_256686_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#ROOT
    [[maybe_unused]] static jobject get_field_ROOT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "ROOT_REGISTRY_NAME", "field_47497", "ROOT", "f_303875_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#ROOT
    [[maybe_unused]] static void set_field_ROOT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "ROOT_REGISTRY_NAME", "field_47497", "ROOT", "f_303875_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#ACTIVITY
    [[maybe_unused]] static jobject get_field_ACTIVITY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ACTIVITY", "field_41222", "ACTIVITY", "f_257025_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#ACTIVITY
    [[maybe_unused]] static void set_field_ACTIVITY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ACTIVITY", "field_41222", "ACTIVITY", "f_257025_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#ATTRIBUTE
    [[maybe_unused]] static jobject get_field_ATTRIBUTE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "ATTRIBUTE", "field_41251", "ATTRIBUTE", "f_256728_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#ATTRIBUTE
    [[maybe_unused]] static void set_field_ATTRIBUTE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "ATTRIBUTE", "field_41251", "ATTRIBUTE", "f_256728_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#BANNER_PATTERN
    [[maybe_unused]] static jobject get_field_BANNER_PATTERN() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "BANNER_PATTERN", "field_41252", "BANNER_PATTERN", "f_256969_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#BANNER_PATTERN
    [[maybe_unused]] static void set_field_BANNER_PATTERN(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "BANNER_PATTERN", "field_41252", "BANNER_PATTERN", "f_256969_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#BIOME_SOURCE
    [[maybe_unused]] static jobject get_field_BIOME_SOURCE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "BIOME_SOURCE", "field_41253", "BIOME_SOURCE", "f_256826_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#BIOME_SOURCE
    [[maybe_unused]] static void set_field_BIOME_SOURCE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "BIOME_SOURCE", "field_41253", "BIOME_SOURCE", "f_256826_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#BLOCK
    [[maybe_unused]] static jobject get_field_BLOCK() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "BLOCK", "field_41254", "BLOCK", "f_256747_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#BLOCK
    [[maybe_unused]] static void set_field_BLOCK(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "BLOCK", "field_41254", "BLOCK", "f_256747_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#BLOCK_TYPE
    [[maybe_unused]] static jobject get_field_BLOCK_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "BLOCK_TYPE", "field_46592", "BLOCK_TYPE", "f_302727_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#BLOCK_TYPE
    [[maybe_unused]] static void set_field_BLOCK_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "BLOCK_TYPE", "field_46592", "BLOCK_TYPE", "f_302727_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#BLOCK_ENTITY_TYPE
    [[maybe_unused]] static jobject get_field_BLOCK_ENTITY_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "BLOCK_ENTITY_TYPE", "field_41255", "BLOCK_ENTITY_TYPE", "f_256922_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#BLOCK_ENTITY_TYPE
    [[maybe_unused]] static void set_field_BLOCK_ENTITY_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "BLOCK_ENTITY_TYPE", "field_41255", "BLOCK_ENTITY_TYPE", "f_256922_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#BLOCK_PREDICATE_TYPE
    [[maybe_unused]] static jobject get_field_BLOCK_PREDICATE_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "BLOCK_PREDICATE_TYPE", "field_41256", "BLOCK_PREDICATE_TYPE", "f_256774_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#BLOCK_PREDICATE_TYPE
    [[maybe_unused]] static void set_field_BLOCK_PREDICATE_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "BLOCK_PREDICATE_TYPE", "field_41256", "BLOCK_PREDICATE_TYPE", "f_256774_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#BLOCK_STATE_PROVIDER_TYPE
    [[maybe_unused]] static jobject get_field_BLOCK_STATE_PROVIDER_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "BLOCK_STATE_PROVIDER_TYPE", "field_41257", "BLOCK_STATE_PROVIDER_TYPE", "f_256891_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#BLOCK_STATE_PROVIDER_TYPE
    [[maybe_unused]] static void set_field_BLOCK_STATE_PROVIDER_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "BLOCK_STATE_PROVIDER_TYPE", "field_41257", "BLOCK_STATE_PROVIDER_TYPE", "f_256891_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#CARVER
    [[maybe_unused]] static jobject get_field_CARVER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "CARVER", "field_41258", "CARVER", "f_256812_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#CARVER
    [[maybe_unused]] static void set_field_CARVER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "CARVER", "field_41258", "CARVER", "f_256812_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#CAT_VARIANT
    [[maybe_unused]] static jobject get_field_CAT_VARIANT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "CAT_VARIANT", "field_41259", "CAT_VARIANT", "f_257006_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#CAT_VARIANT
    [[maybe_unused]] static void set_field_CAT_VARIANT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "CAT_VARIANT", "field_41259", "CAT_VARIANT", "f_257006_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#WOLF_VARIANT
    [[maybe_unused]] static jobject get_field_WOLF_VARIANT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "WOLF_VARIANT", "field_49772", "WOLF_VARIANT", "f_317086_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#WOLF_VARIANT
    [[maybe_unused]] static void set_field_WOLF_VARIANT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "WOLF_VARIANT", "field_49772", "WOLF_VARIANT", "f_317086_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#CHUNK_GENERATOR
    [[maybe_unused]] static jobject get_field_CHUNK_GENERATOR() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "CHUNK_GENERATOR", "field_41260", "CHUNK_GENERATOR", "f_256783_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#CHUNK_GENERATOR
    [[maybe_unused]] static void set_field_CHUNK_GENERATOR(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "CHUNK_GENERATOR", "field_41260", "CHUNK_GENERATOR", "f_256783_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#CHUNK_STATUS
    [[maybe_unused]] static jobject get_field_CHUNK_STATUS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "CHUNK_STATUS", "field_41261", "CHUNK_STATUS", "f_256755_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#CHUNK_STATUS
    [[maybe_unused]] static void set_field_CHUNK_STATUS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "CHUNK_STATUS", "field_41261", "CHUNK_STATUS", "f_256755_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#COMMAND_ARGUMENT_TYPE
    [[maybe_unused]] static jobject get_field_COMMAND_ARGUMENT_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("p", "COMMAND_ARGUMENT_TYPE", "field_41262", "COMMAND_ARGUMENT_TYPE", "f_256982_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#COMMAND_ARGUMENT_TYPE
    [[maybe_unused]] static void set_field_COMMAND_ARGUMENT_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("p", "COMMAND_ARGUMENT_TYPE", "field_41262", "COMMAND_ARGUMENT_TYPE", "f_256982_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#ITEM_GROUP
    [[maybe_unused]] static jobject get_field_ITEM_GROUP() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("q", "CREATIVE_MODE_TAB", "field_44688", "ITEM_GROUP", "f_279569_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#ITEM_GROUP
    [[maybe_unused]] static void set_field_ITEM_GROUP(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("q", "CREATIVE_MODE_TAB", "field_44688", "ITEM_GROUP", "f_279569_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#CUSTOM_STAT
    [[maybe_unused]] static jobject get_field_CUSTOM_STAT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("r", "CUSTOM_STAT", "field_41263", "CUSTOM_STAT", "f_256887_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#CUSTOM_STAT
    [[maybe_unused]] static void set_field_CUSTOM_STAT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("r", "CUSTOM_STAT", "field_41263", "CUSTOM_STAT", "f_256887_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#DAMAGE_TYPE
    [[maybe_unused]] static jobject get_field_DAMAGE_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("s", "DAMAGE_TYPE", "field_42534", "DAMAGE_TYPE", "f_268580_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#DAMAGE_TYPE
    [[maybe_unused]] static void set_field_DAMAGE_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("s", "DAMAGE_TYPE", "field_42534", "DAMAGE_TYPE", "f_268580_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#DENSITY_FUNCTION_TYPE
    [[maybe_unused]] static jobject get_field_DENSITY_FUNCTION_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("t", "DENSITY_FUNCTION_TYPE", "field_41264", "DENSITY_FUNCTION_TYPE", "f_256746_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#DENSITY_FUNCTION_TYPE
    [[maybe_unused]] static void set_field_DENSITY_FUNCTION_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("t", "DENSITY_FUNCTION_TYPE", "field_41264", "DENSITY_FUNCTION_TYPE", "f_256746_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#ENCHANTMENT_ENTITY_EFFECT_TYPE
    [[maybe_unused]] static jobject get_field_ENCHANTMENT_ENTITY_EFFECT_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("u", "ENCHANTMENT_ENTITY_EFFECT_TYPE", "field_51840", "ENCHANTMENT_ENTITY_EFFECT_TYPE", "f_337586_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#ENCHANTMENT_ENTITY_EFFECT_TYPE
    [[maybe_unused]] static void set_field_ENCHANTMENT_ENTITY_EFFECT_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("u", "ENCHANTMENT_ENTITY_EFFECT_TYPE", "field_51840", "ENCHANTMENT_ENTITY_EFFECT_TYPE", "f_337586_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#ENCHANTMENT_LEVEL_BASED_VALUE_TYPE
    [[maybe_unused]] static jobject get_field_ENCHANTMENT_LEVEL_BASED_VALUE_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("v", "ENCHANTMENT_LEVEL_BASED_VALUE_TYPE", "field_51841", "ENCHANTMENT_LEVEL_BASED_VALUE_TYPE", "f_336864_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#ENCHANTMENT_LEVEL_BASED_VALUE_TYPE
    [[maybe_unused]] static void set_field_ENCHANTMENT_LEVEL_BASED_VALUE_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("v", "ENCHANTMENT_LEVEL_BASED_VALUE_TYPE", "field_51841", "ENCHANTMENT_LEVEL_BASED_VALUE_TYPE", "f_336864_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#ENCHANTMENT_LOCATION_BASED_EFFECT_TYPE
    [[maybe_unused]] static jobject get_field_ENCHANTMENT_LOCATION_BASED_EFFECT_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("w", "ENCHANTMENT_LOCATION_BASED_EFFECT_TYPE", "field_51842", "ENCHANTMENT_LOCATION_BASED_EFFECT_TYPE", "f_337094_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#ENCHANTMENT_LOCATION_BASED_EFFECT_TYPE
    [[maybe_unused]] static void set_field_ENCHANTMENT_LOCATION_BASED_EFFECT_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("w", "ENCHANTMENT_LOCATION_BASED_EFFECT_TYPE", "field_51842", "ENCHANTMENT_LOCATION_BASED_EFFECT_TYPE", "f_337094_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#ENCHANTMENT_PROVIDER_TYPE
    [[maybe_unused]] static jobject get_field_ENCHANTMENT_PROVIDER_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("x", "ENCHANTMENT_PROVIDER_TYPE", "field_51843", "ENCHANTMENT_PROVIDER_TYPE", "f_336912_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#ENCHANTMENT_PROVIDER_TYPE
    [[maybe_unused]] static void set_field_ENCHANTMENT_PROVIDER_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("x", "ENCHANTMENT_PROVIDER_TYPE", "field_51843", "ENCHANTMENT_PROVIDER_TYPE", "f_336912_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#ENCHANTMENT_VALUE_EFFECT_TYPE
    [[maybe_unused]] static jobject get_field_ENCHANTMENT_VALUE_EFFECT_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("y", "ENCHANTMENT_VALUE_EFFECT_TYPE", "field_51844", "ENCHANTMENT_VALUE_EFFECT_TYPE", "f_336717_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#ENCHANTMENT_VALUE_EFFECT_TYPE
    [[maybe_unused]] static void set_field_ENCHANTMENT_VALUE_EFFECT_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("y", "ENCHANTMENT_VALUE_EFFECT_TYPE", "field_51844", "ENCHANTMENT_VALUE_EFFECT_TYPE", "f_336717_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#ENTITY_TYPE
    [[maybe_unused]] static jobject get_field_ENTITY_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("z", "ENTITY_TYPE", "field_41266", "ENTITY_TYPE", "f_256939_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#ENTITY_TYPE
    [[maybe_unused]] static void set_field_ENTITY_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("z", "ENTITY_TYPE", "field_41266", "ENTITY_TYPE", "f_256939_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#FEATURE
    [[maybe_unused]] static jobject get_field_FEATURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("A", "FEATURE", "field_41267", "FEATURE", "f_256833_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#FEATURE
    [[maybe_unused]] static void set_field_FEATURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("A", "FEATURE", "field_41267", "FEATURE", "f_256833_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#FEATURE_SIZE_TYPE
    [[maybe_unused]] static jobject get_field_FEATURE_SIZE_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("B", "FEATURE_SIZE_TYPE", "field_41268", "FEATURE_SIZE_TYPE", "f_256720_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#FEATURE_SIZE_TYPE
    [[maybe_unused]] static void set_field_FEATURE_SIZE_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("B", "FEATURE_SIZE_TYPE", "field_41268", "FEATURE_SIZE_TYPE", "f_256720_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#FLOAT_PROVIDER_TYPE
    [[maybe_unused]] static jobject get_field_FLOAT_PROVIDER_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("C", "FLOAT_PROVIDER_TYPE", "field_41269", "FLOAT_PROVIDER_TYPE", "f_256892_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#FLOAT_PROVIDER_TYPE
    [[maybe_unused]] static void set_field_FLOAT_PROVIDER_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("C", "FLOAT_PROVIDER_TYPE", "field_41269", "FLOAT_PROVIDER_TYPE", "f_256892_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#FLUID
    [[maybe_unused]] static jobject get_field_FLUID() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("D", "FLUID", "field_41270", "FLUID", "f_256808_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#FLUID
    [[maybe_unused]] static void set_field_FLUID(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("D", "FLUID", "field_41270", "FLUID", "f_256808_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#FOLIAGE_PLACER_TYPE
    [[maybe_unused]] static jobject get_field_FOLIAGE_PLACER_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("E", "FOLIAGE_PLACER_TYPE", "field_41271", "FOLIAGE_PLACER_TYPE", "f_256905_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#FOLIAGE_PLACER_TYPE
    [[maybe_unused]] static void set_field_FOLIAGE_PLACER_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("E", "FOLIAGE_PLACER_TYPE", "field_41271", "FOLIAGE_PLACER_TYPE", "f_256905_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#FROG_VARIANT
    [[maybe_unused]] static jobject get_field_FROG_VARIANT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("F", "FROG_VARIANT", "field_41272", "FROG_VARIANT", "f_256732_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#FROG_VARIANT
    [[maybe_unused]] static void set_field_FROG_VARIANT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("F", "FROG_VARIANT", "field_41272", "FROG_VARIANT", "f_256732_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#GAME_EVENT
    [[maybe_unused]] static jobject get_field_GAME_EVENT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("G", "GAME_EVENT", "field_41273", "GAME_EVENT", "f_256827_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#GAME_EVENT
    [[maybe_unused]] static void set_field_GAME_EVENT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("G", "GAME_EVENT", "field_41273", "GAME_EVENT", "f_256827_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#HEIGHT_PROVIDER_TYPE
    [[maybe_unused]] static jobject get_field_HEIGHT_PROVIDER_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("H", "HEIGHT_PROVIDER_TYPE", "field_41274", "HEIGHT_PROVIDER_TYPE", "f_256757_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#HEIGHT_PROVIDER_TYPE
    [[maybe_unused]] static void set_field_HEIGHT_PROVIDER_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("H", "HEIGHT_PROVIDER_TYPE", "field_41274", "HEIGHT_PROVIDER_TYPE", "f_256757_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#INSTRUMENT
    [[maybe_unused]] static jobject get_field_INSTRUMENT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("I", "INSTRUMENT", "field_41275", "INSTRUMENT", "f_257010_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#INSTRUMENT
    [[maybe_unused]] static void set_field_INSTRUMENT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("I", "INSTRUMENT", "field_41275", "INSTRUMENT", "f_257010_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#INT_PROVIDER_TYPE
    [[maybe_unused]] static jobject get_field_INT_PROVIDER_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("J", "INT_PROVIDER_TYPE", "field_41196", "INT_PROVIDER_TYPE", "f_256949_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#INT_PROVIDER_TYPE
    [[maybe_unused]] static void set_field_INT_PROVIDER_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("J", "INT_PROVIDER_TYPE", "field_41196", "INT_PROVIDER_TYPE", "f_256949_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#ITEM
    [[maybe_unused]] static jobject get_field_ITEM() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("K", "ITEM", "field_41197", "ITEM", "f_256913_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#ITEM
    [[maybe_unused]] static void set_field_ITEM(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("K", "ITEM", "field_41197", "ITEM", "f_256913_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#JUKEBOX_SONG
    [[maybe_unused]] static jobject get_field_JUKEBOX_SONG() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("L", "JUKEBOX_SONG", "field_52176", "JUKEBOX_SONG", "f_337466_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#JUKEBOX_SONG
    [[maybe_unused]] static void set_field_JUKEBOX_SONG(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("L", "JUKEBOX_SONG", "field_52176", "JUKEBOX_SONG", "f_337466_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#LOOT_CONDITION_TYPE
    [[maybe_unused]] static jobject get_field_LOOT_CONDITION_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("M", "LOOT_CONDITION_TYPE", "field_41198", "LOOT_CONDITION_TYPE", "f_256976_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#LOOT_CONDITION_TYPE
    [[maybe_unused]] static void set_field_LOOT_CONDITION_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("M", "LOOT_CONDITION_TYPE", "field_41198", "LOOT_CONDITION_TYPE", "f_256976_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#LOOT_FUNCTION_TYPE
    [[maybe_unused]] static jobject get_field_LOOT_FUNCTION_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("N", "LOOT_FUNCTION_TYPE", "field_41199", "LOOT_FUNCTION_TYPE", "f_257015_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#LOOT_FUNCTION_TYPE
    [[maybe_unused]] static void set_field_LOOT_FUNCTION_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("N", "LOOT_FUNCTION_TYPE", "field_41199", "LOOT_FUNCTION_TYPE", "f_257015_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#LOOT_NBT_PROVIDER_TYPE
    [[maybe_unused]] static jobject get_field_LOOT_NBT_PROVIDER_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("O", "LOOT_NBT_PROVIDER_TYPE", "field_41200", "LOOT_NBT_PROVIDER_TYPE", "f_256871_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#LOOT_NBT_PROVIDER_TYPE
    [[maybe_unused]] static void set_field_LOOT_NBT_PROVIDER_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("O", "LOOT_NBT_PROVIDER_TYPE", "field_41200", "LOOT_NBT_PROVIDER_TYPE", "f_256871_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#LOOT_NUMBER_PROVIDER_TYPE
    [[maybe_unused]] static jobject get_field_LOOT_NUMBER_PROVIDER_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("P", "LOOT_NUMBER_PROVIDER_TYPE", "field_41201", "LOOT_NUMBER_PROVIDER_TYPE", "f_256829_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#LOOT_NUMBER_PROVIDER_TYPE
    [[maybe_unused]] static void set_field_LOOT_NUMBER_PROVIDER_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("P", "LOOT_NUMBER_PROVIDER_TYPE", "field_41201", "LOOT_NUMBER_PROVIDER_TYPE", "f_256829_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#LOOT_POOL_ENTRY_TYPE
    [[maybe_unused]] static jobject get_field_LOOT_POOL_ENTRY_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("Q", "LOOT_POOL_ENTRY_TYPE", "field_41202", "LOOT_POOL_ENTRY_TYPE", "f_257032_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#LOOT_POOL_ENTRY_TYPE
    [[maybe_unused]] static void set_field_LOOT_POOL_ENTRY_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("Q", "LOOT_POOL_ENTRY_TYPE", "field_41202", "LOOT_POOL_ENTRY_TYPE", "f_257032_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#LOOT_SCORE_PROVIDER_TYPE
    [[maybe_unused]] static jobject get_field_LOOT_SCORE_PROVIDER_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("R", "LOOT_SCORE_PROVIDER_TYPE", "field_41203", "LOOT_SCORE_PROVIDER_TYPE", "f_256924_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#LOOT_SCORE_PROVIDER_TYPE
    [[maybe_unused]] static void set_field_LOOT_SCORE_PROVIDER_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("R", "LOOT_SCORE_PROVIDER_TYPE", "field_41203", "LOOT_SCORE_PROVIDER_TYPE", "f_256924_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#MATERIAL_CONDITION
    [[maybe_unused]] static jobject get_field_MATERIAL_CONDITION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("S", "MATERIAL_CONDITION", "field_41204", "MATERIAL_CONDITION", "f_256793_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#MATERIAL_CONDITION
    [[maybe_unused]] static void set_field_MATERIAL_CONDITION(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("S", "MATERIAL_CONDITION", "field_41204", "MATERIAL_CONDITION", "f_256793_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#MATERIAL_RULE
    [[maybe_unused]] static jobject get_field_MATERIAL_RULE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("T", "MATERIAL_RULE", "field_41205", "MATERIAL_RULE", "f_256815_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#MATERIAL_RULE
    [[maybe_unused]] static void set_field_MATERIAL_RULE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("T", "MATERIAL_RULE", "field_41205", "MATERIAL_RULE", "f_256815_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#MEMORY_MODULE_TYPE
    [[maybe_unused]] static jobject get_field_MEMORY_MODULE_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("U", "MEMORY_MODULE_TYPE", "field_41206", "MEMORY_MODULE_TYPE", "f_257023_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#MEMORY_MODULE_TYPE
    [[maybe_unused]] static void set_field_MEMORY_MODULE_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("U", "MEMORY_MODULE_TYPE", "field_41206", "MEMORY_MODULE_TYPE", "f_257023_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#SCREEN_HANDLER
    [[maybe_unused]] static jobject get_field_SCREEN_HANDLER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("V", "MENU", "field_41207", "SCREEN_HANDLER", "f_256798_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#SCREEN_HANDLER
    [[maybe_unused]] static void set_field_SCREEN_HANDLER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("V", "MENU", "field_41207", "SCREEN_HANDLER", "f_256798_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#STATUS_EFFECT
    [[maybe_unused]] static jobject get_field_STATUS_EFFECT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("W", "MOB_EFFECT", "field_41208", "STATUS_EFFECT", "f_256929_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#STATUS_EFFECT
    [[maybe_unused]] static void set_field_STATUS_EFFECT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("W", "MOB_EFFECT", "field_41208", "STATUS_EFFECT", "f_256929_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#PAINTING_VARIANT
    [[maybe_unused]] static jobject get_field_PAINTING_VARIANT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("X", "PAINTING_VARIANT", "field_41209", "PAINTING_VARIANT", "f_256836_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#PAINTING_VARIANT
    [[maybe_unused]] static void set_field_PAINTING_VARIANT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("X", "PAINTING_VARIANT", "field_41209", "PAINTING_VARIANT", "f_256836_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#PARTICLE_TYPE
    [[maybe_unused]] static jobject get_field_PARTICLE_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("Y", "PARTICLE_TYPE", "field_41210", "PARTICLE_TYPE", "f_256890_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#PARTICLE_TYPE
    [[maybe_unused]] static void set_field_PARTICLE_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("Y", "PARTICLE_TYPE", "field_41210", "PARTICLE_TYPE", "f_256890_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#PLACEMENT_MODIFIER_TYPE
    [[maybe_unused]] static jobject get_field_PLACEMENT_MODIFIER_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("Z", "PLACEMENT_MODIFIER_TYPE", "field_41211", "PLACEMENT_MODIFIER_TYPE", "f_256843_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#PLACEMENT_MODIFIER_TYPE
    [[maybe_unused]] static void set_field_PLACEMENT_MODIFIER_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("Z", "PLACEMENT_MODIFIER_TYPE", "field_41211", "PLACEMENT_MODIFIER_TYPE", "f_256843_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#POINT_OF_INTEREST_TYPE
    [[maybe_unused]] static jobject get_field_POINT_OF_INTEREST_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aa", "POINT_OF_INTEREST_TYPE", "field_41212", "POINT_OF_INTEREST_TYPE", "f_256805_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#POINT_OF_INTEREST_TYPE
    [[maybe_unused]] static void set_field_POINT_OF_INTEREST_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aa", "POINT_OF_INTEREST_TYPE", "field_41212", "POINT_OF_INTEREST_TYPE", "f_256805_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#POSITION_SOURCE_TYPE
    [[maybe_unused]] static jobject get_field_POSITION_SOURCE_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ab", "POSITION_SOURCE_TYPE", "field_41213", "POSITION_SOURCE_TYPE", "f_256792_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#POSITION_SOURCE_TYPE
    [[maybe_unused]] static void set_field_POSITION_SOURCE_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ab", "POSITION_SOURCE_TYPE", "field_41213", "POSITION_SOURCE_TYPE", "f_256792_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#POS_RULE_TEST
    [[maybe_unused]] static jobject get_field_POS_RULE_TEST() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ac", "POS_RULE_TEST", "field_41214", "POS_RULE_TEST", "f_257009_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#POS_RULE_TEST
    [[maybe_unused]] static void set_field_POS_RULE_TEST(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ac", "POS_RULE_TEST", "field_41214", "POS_RULE_TEST", "f_257009_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#POTION
    [[maybe_unused]] static jobject get_field_POTION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ad", "POTION", "field_41215", "POTION", "f_256973_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#POTION
    [[maybe_unused]] static void set_field_POTION(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ad", "POTION", "field_41215", "POTION", "f_256973_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#RECIPE_SERIALIZER
    [[maybe_unused]] static jobject get_field_RECIPE_SERIALIZER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ae", "RECIPE_SERIALIZER", "field_41216", "RECIPE_SERIALIZER", "f_256764_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#RECIPE_SERIALIZER
    [[maybe_unused]] static void set_field_RECIPE_SERIALIZER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ae", "RECIPE_SERIALIZER", "field_41216", "RECIPE_SERIALIZER", "f_256764_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#RECIPE_TYPE
    [[maybe_unused]] static jobject get_field_RECIPE_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("af", "RECIPE_TYPE", "field_41217", "RECIPE_TYPE", "f_256954_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#RECIPE_TYPE
    [[maybe_unused]] static void set_field_RECIPE_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("af", "RECIPE_TYPE", "field_41217", "RECIPE_TYPE", "f_256954_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#ROOT_PLACER_TYPE
    [[maybe_unused]] static jobject get_field_ROOT_PLACER_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ag", "ROOT_PLACER_TYPE", "field_41218", "ROOT_PLACER_TYPE", "f_256768_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#ROOT_PLACER_TYPE
    [[maybe_unused]] static void set_field_ROOT_PLACER_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ag", "ROOT_PLACER_TYPE", "field_41218", "ROOT_PLACER_TYPE", "f_256768_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#RULE_TEST
    [[maybe_unused]] static jobject get_field_RULE_TEST() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ah", "RULE_TEST", "field_41219", "RULE_TEST", "f_256947_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#RULE_TEST
    [[maybe_unused]] static void set_field_RULE_TEST(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ah", "RULE_TEST", "field_41219", "RULE_TEST", "f_256947_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#RULE_BLOCK_ENTITY_MODIFIER
    [[maybe_unused]] static jobject get_field_RULE_BLOCK_ENTITY_MODIFIER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ai", "RULE_BLOCK_ENTITY_MODIFIER", "field_43382", "RULE_BLOCK_ENTITY_MODIFIER", "f_276428_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#RULE_BLOCK_ENTITY_MODIFIER
    [[maybe_unused]] static void set_field_RULE_BLOCK_ENTITY_MODIFIER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ai", "RULE_BLOCK_ENTITY_MODIFIER", "field_43382", "RULE_BLOCK_ENTITY_MODIFIER", "f_276428_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#SCHEDULE
    [[maybe_unused]] static jobject get_field_SCHEDULE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aj", "SCHEDULE", "field_41220", "SCHEDULE", "f_256723_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#SCHEDULE
    [[maybe_unused]] static void set_field_SCHEDULE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aj", "SCHEDULE", "field_41220", "SCHEDULE", "f_256723_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#SENSOR_TYPE
    [[maybe_unused]] static jobject get_field_SENSOR_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ak", "SENSOR_TYPE", "field_41221", "SENSOR_TYPE", "f_256937_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#SENSOR_TYPE
    [[maybe_unused]] static void set_field_SENSOR_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ak", "SENSOR_TYPE", "field_41221", "SENSOR_TYPE", "f_256937_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#SOUND_EVENT
    [[maybe_unused]] static jobject get_field_SOUND_EVENT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("al", "SOUND_EVENT", "field_41225", "SOUND_EVENT", "f_256840_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#SOUND_EVENT
    [[maybe_unused]] static void set_field_SOUND_EVENT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("al", "SOUND_EVENT", "field_41225", "SOUND_EVENT", "f_256840_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#STAT_TYPE
    [[maybe_unused]] static jobject get_field_STAT_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("am", "STAT_TYPE", "field_41226", "STAT_TYPE", "f_256849_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#STAT_TYPE
    [[maybe_unused]] static void set_field_STAT_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("am", "STAT_TYPE", "field_41226", "STAT_TYPE", "f_256849_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#STRUCTURE_PIECE
    [[maybe_unused]] static jobject get_field_STRUCTURE_PIECE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("an", "STRUCTURE_PIECE", "field_41227", "STRUCTURE_PIECE", "f_256786_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#STRUCTURE_PIECE
    [[maybe_unused]] static void set_field_STRUCTURE_PIECE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("an", "STRUCTURE_PIECE", "field_41227", "STRUCTURE_PIECE", "f_256786_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#STRUCTURE_PLACEMENT
    [[maybe_unused]] static jobject get_field_STRUCTURE_PLACEMENT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ao", "STRUCTURE_PLACEMENT", "field_41228", "STRUCTURE_PLACEMENT", "f_256888_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#STRUCTURE_PLACEMENT
    [[maybe_unused]] static void set_field_STRUCTURE_PLACEMENT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ao", "STRUCTURE_PLACEMENT", "field_41228", "STRUCTURE_PLACEMENT", "f_256888_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#STRUCTURE_POOL_ELEMENT
    [[maybe_unused]] static jobject get_field_STRUCTURE_POOL_ELEMENT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ap", "STRUCTURE_POOL_ELEMENT", "field_41229", "STRUCTURE_POOL_ELEMENT", "f_257024_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#STRUCTURE_POOL_ELEMENT
    [[maybe_unused]] static void set_field_STRUCTURE_POOL_ELEMENT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ap", "STRUCTURE_POOL_ELEMENT", "field_41229", "STRUCTURE_POOL_ELEMENT", "f_257024_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#POOL_ALIAS_BINDING
    [[maybe_unused]] static jobject get_field_POOL_ALIAS_BINDING() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aq", "POOL_ALIAS_BINDING", "field_46913", "POOL_ALIAS_BINDING", "f_302337_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#POOL_ALIAS_BINDING
    [[maybe_unused]] static void set_field_POOL_ALIAS_BINDING(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aq", "POOL_ALIAS_BINDING", "field_46913", "POOL_ALIAS_BINDING", "f_302337_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#STRUCTURE_PROCESSOR
    [[maybe_unused]] static jobject get_field_STRUCTURE_PROCESSOR() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ar", "STRUCTURE_PROCESSOR", "field_41230", "STRUCTURE_PROCESSOR", "f_256983_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#STRUCTURE_PROCESSOR
    [[maybe_unused]] static void set_field_STRUCTURE_PROCESSOR(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ar", "STRUCTURE_PROCESSOR", "field_41230", "STRUCTURE_PROCESSOR", "f_256983_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#STRUCTURE_TYPE
    [[maybe_unused]] static jobject get_field_STRUCTURE_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("as", "STRUCTURE_TYPE", "field_41231", "STRUCTURE_TYPE", "f_256938_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#STRUCTURE_TYPE
    [[maybe_unused]] static void set_field_STRUCTURE_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("as", "STRUCTURE_TYPE", "field_41231", "STRUCTURE_TYPE", "f_256938_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#TREE_DECORATOR_TYPE
    [[maybe_unused]] static jobject get_field_TREE_DECORATOR_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("at", "TREE_DECORATOR_TYPE", "field_41232", "TREE_DECORATOR_TYPE", "f_256845_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#TREE_DECORATOR_TYPE
    [[maybe_unused]] static void set_field_TREE_DECORATOR_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("at", "TREE_DECORATOR_TYPE", "field_41232", "TREE_DECORATOR_TYPE", "f_256845_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#TRUNK_PLACER_TYPE
    [[maybe_unused]] static jobject get_field_TRUNK_PLACER_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("au", "TRUNK_PLACER_TYPE", "field_41233", "TRUNK_PLACER_TYPE", "f_256963_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#TRUNK_PLACER_TYPE
    [[maybe_unused]] static void set_field_TRUNK_PLACER_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("au", "TRUNK_PLACER_TYPE", "field_41233", "TRUNK_PLACER_TYPE", "f_256963_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#VILLAGER_PROFESSION
    [[maybe_unused]] static jobject get_field_VILLAGER_PROFESSION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("av", "VILLAGER_PROFESSION", "field_41234", "VILLAGER_PROFESSION", "f_256749_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#VILLAGER_PROFESSION
    [[maybe_unused]] static void set_field_VILLAGER_PROFESSION(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("av", "VILLAGER_PROFESSION", "field_41234", "VILLAGER_PROFESSION", "f_256749_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#VILLAGER_TYPE
    [[maybe_unused]] static jobject get_field_VILLAGER_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aw", "VILLAGER_TYPE", "field_41235", "VILLAGER_TYPE", "f_257019_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#VILLAGER_TYPE
    [[maybe_unused]] static void set_field_VILLAGER_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aw", "VILLAGER_TYPE", "field_41235", "VILLAGER_TYPE", "f_257019_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#DECORATED_POT_PATTERN
    [[maybe_unused]] static jobject get_field_DECORATED_POT_PATTERN() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ax", "DECORATED_POT_PATTERN", "field_42941", "DECORATED_POT_PATTERN", "f_337584_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#DECORATED_POT_PATTERN
    [[maybe_unused]] static void set_field_DECORATED_POT_PATTERN(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ax", "DECORATED_POT_PATTERN", "field_42941", "DECORATED_POT_PATTERN", "f_337584_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#NUMBER_FORMAT_TYPE
    [[maybe_unused]] static jobject get_field_NUMBER_FORMAT_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ay", "NUMBER_FORMAT_TYPE", "field_47556", "NUMBER_FORMAT_TYPE", "f_302869_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#NUMBER_FORMAT_TYPE
    [[maybe_unused]] static void set_field_NUMBER_FORMAT_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ay", "NUMBER_FORMAT_TYPE", "field_47556", "NUMBER_FORMAT_TYPE", "f_302869_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#ARMOR_MATERIAL
    [[maybe_unused]] static jobject get_field_ARMOR_MATERIAL() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("az", "ARMOR_MATERIAL", "field_48977", "ARMOR_MATERIAL", "f_315643_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#ARMOR_MATERIAL
    [[maybe_unused]] static void set_field_ARMOR_MATERIAL(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("az", "ARMOR_MATERIAL", "field_48977", "ARMOR_MATERIAL", "f_315643_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#DATA_COMPONENT_TYPE
    [[maybe_unused]] static jobject get_field_DATA_COMPONENT_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aA", "DATA_COMPONENT_TYPE", "field_49659", "DATA_COMPONENT_TYPE", "f_316190_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#DATA_COMPONENT_TYPE
    [[maybe_unused]] static void set_field_DATA_COMPONENT_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aA", "DATA_COMPONENT_TYPE", "field_49659", "DATA_COMPONENT_TYPE", "f_316190_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#ENTITY_SUB_PREDICATE_TYPE
    [[maybe_unused]] static jobject get_field_ENTITY_SUB_PREDICATE_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aB", "ENTITY_SUB_PREDICATE_TYPE", "field_49913", "ENTITY_SUB_PREDICATE_TYPE", "f_316012_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#ENTITY_SUB_PREDICATE_TYPE
    [[maybe_unused]] static void set_field_ENTITY_SUB_PREDICATE_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aB", "ENTITY_SUB_PREDICATE_TYPE", "field_49913", "ENTITY_SUB_PREDICATE_TYPE", "f_316012_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#ITEM_SUB_PREDICATE_TYPE
    [[maybe_unused]] static jobject get_field_ITEM_SUB_PREDICATE_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aC", "ITEM_SUB_PREDICATE_TYPE", "field_49914", "ITEM_SUB_PREDICATE_TYPE", "f_316222_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#ITEM_SUB_PREDICATE_TYPE
    [[maybe_unused]] static void set_field_ITEM_SUB_PREDICATE_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aC", "ITEM_SUB_PREDICATE_TYPE", "field_49914", "ITEM_SUB_PREDICATE_TYPE", "f_316222_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#MAP_DECORATION_TYPE
    [[maybe_unused]] static jobject get_field_MAP_DECORATION_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aD", "MAP_DECORATION_TYPE", "field_50082", "MAP_DECORATION_TYPE", "f_313969_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#MAP_DECORATION_TYPE
    [[maybe_unused]] static void set_field_MAP_DECORATION_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aD", "MAP_DECORATION_TYPE", "field_50082", "MAP_DECORATION_TYPE", "f_313969_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#ENCHANTMENT_EFFECT_COMPONENT_TYPE
    [[maybe_unused]] static jobject get_field_ENCHANTMENT_EFFECT_COMPONENT_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aE", "ENCHANTMENT_EFFECT_COMPONENT_TYPE", "field_51838", "ENCHANTMENT_EFFECT_COMPONENT_TYPE", "f_337731_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#ENCHANTMENT_EFFECT_COMPONENT_TYPE
    [[maybe_unused]] static void set_field_ENCHANTMENT_EFFECT_COMPONENT_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aE", "ENCHANTMENT_EFFECT_COMPONENT_TYPE", "field_51838", "ENCHANTMENT_EFFECT_COMPONENT_TYPE", "f_337731_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#BIOME
    [[maybe_unused]] static jobject get_field_BIOME() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aF", "BIOME", "field_41236", "BIOME", "f_256952_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#BIOME
    [[maybe_unused]] static void set_field_BIOME(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aF", "BIOME", "field_41236", "BIOME", "f_256952_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#MESSAGE_TYPE
    [[maybe_unused]] static jobject get_field_MESSAGE_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aG", "CHAT_TYPE", "field_41237", "MESSAGE_TYPE", "f_256873_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#MESSAGE_TYPE
    [[maybe_unused]] static void set_field_MESSAGE_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aG", "CHAT_TYPE", "field_41237", "MESSAGE_TYPE", "f_256873_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#CONFIGURED_CARVER
    [[maybe_unused]] static jobject get_field_CONFIGURED_CARVER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aH", "CONFIGURED_CARVER", "field_41238", "CONFIGURED_CARVER", "f_257003_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#CONFIGURED_CARVER
    [[maybe_unused]] static void set_field_CONFIGURED_CARVER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aH", "CONFIGURED_CARVER", "field_41238", "CONFIGURED_CARVER", "f_257003_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#CONFIGURED_FEATURE
    [[maybe_unused]] static jobject get_field_CONFIGURED_FEATURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aI", "CONFIGURED_FEATURE", "field_41239", "CONFIGURED_FEATURE", "f_256911_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#CONFIGURED_FEATURE
    [[maybe_unused]] static void set_field_CONFIGURED_FEATURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aI", "CONFIGURED_FEATURE", "field_41239", "CONFIGURED_FEATURE", "f_256911_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#DENSITY_FUNCTION
    [[maybe_unused]] static jobject get_field_DENSITY_FUNCTION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aJ", "DENSITY_FUNCTION", "field_41240", "DENSITY_FUNCTION", "f_257040_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#DENSITY_FUNCTION
    [[maybe_unused]] static void set_field_DENSITY_FUNCTION(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aJ", "DENSITY_FUNCTION", "field_41240", "DENSITY_FUNCTION", "f_257040_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#DIMENSION_TYPE
    [[maybe_unused]] static jobject get_field_DIMENSION_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aK", "DIMENSION_TYPE", "field_41241", "DIMENSION_TYPE", "f_256787_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#DIMENSION_TYPE
    [[maybe_unused]] static void set_field_DIMENSION_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aK", "DIMENSION_TYPE", "field_41241", "DIMENSION_TYPE", "f_256787_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#ENCHANTMENT
    [[maybe_unused]] static jobject get_field_ENCHANTMENT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aL", "ENCHANTMENT", "field_41265", "ENCHANTMENT", "f_256762_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#ENCHANTMENT
    [[maybe_unused]] static void set_field_ENCHANTMENT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aL", "ENCHANTMENT", "field_41265", "ENCHANTMENT", "f_256762_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#ENCHANTMENT_PROVIDER
    [[maybe_unused]] static jobject get_field_ENCHANTMENT_PROVIDER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aM", "ENCHANTMENT_PROVIDER", "field_51839", "ENCHANTMENT_PROVIDER", "f_336718_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#ENCHANTMENT_PROVIDER
    [[maybe_unused]] static void set_field_ENCHANTMENT_PROVIDER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aM", "ENCHANTMENT_PROVIDER", "field_51839", "ENCHANTMENT_PROVIDER", "f_336718_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#FLAT_LEVEL_GENERATOR_PRESET
    [[maybe_unused]] static jobject get_field_FLAT_LEVEL_GENERATOR_PRESET() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aN", "FLAT_LEVEL_GENERATOR_PRESET", "field_41242", "FLAT_LEVEL_GENERATOR_PRESET", "f_256724_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#FLAT_LEVEL_GENERATOR_PRESET
    [[maybe_unused]] static void set_field_FLAT_LEVEL_GENERATOR_PRESET(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aN", "FLAT_LEVEL_GENERATOR_PRESET", "field_41242", "FLAT_LEVEL_GENERATOR_PRESET", "f_256724_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#CHUNK_GENERATOR_SETTINGS
    [[maybe_unused]] static jobject get_field_CHUNK_GENERATOR_SETTINGS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aO", "NOISE_SETTINGS", "field_41243", "CHUNK_GENERATOR_SETTINGS", "f_256932_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#CHUNK_GENERATOR_SETTINGS
    [[maybe_unused]] static void set_field_CHUNK_GENERATOR_SETTINGS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aO", "NOISE_SETTINGS", "field_41243", "CHUNK_GENERATOR_SETTINGS", "f_256932_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#NOISE_PARAMETERS
    [[maybe_unused]] static jobject get_field_NOISE_PARAMETERS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aP", "NOISE", "field_41244", "NOISE_PARAMETERS", "f_256865_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#NOISE_PARAMETERS
    [[maybe_unused]] static void set_field_NOISE_PARAMETERS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aP", "NOISE", "field_41244", "NOISE_PARAMETERS", "f_256865_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#PLACED_FEATURE
    [[maybe_unused]] static jobject get_field_PLACED_FEATURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aQ", "PLACED_FEATURE", "field_41245", "PLACED_FEATURE", "f_256988_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#PLACED_FEATURE
    [[maybe_unused]] static void set_field_PLACED_FEATURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aQ", "PLACED_FEATURE", "field_41245", "PLACED_FEATURE", "f_256988_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#STRUCTURE
    [[maybe_unused]] static jobject get_field_STRUCTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aR", "STRUCTURE", "field_41246", "STRUCTURE", "f_256944_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#STRUCTURE
    [[maybe_unused]] static void set_field_STRUCTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aR", "STRUCTURE", "field_41246", "STRUCTURE", "f_256944_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#PROCESSOR_LIST
    [[maybe_unused]] static jobject get_field_PROCESSOR_LIST() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aS", "PROCESSOR_LIST", "field_41247", "PROCESSOR_LIST", "f_257011_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#PROCESSOR_LIST
    [[maybe_unused]] static void set_field_PROCESSOR_LIST(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aS", "PROCESSOR_LIST", "field_41247", "PROCESSOR_LIST", "f_257011_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#STRUCTURE_SET
    [[maybe_unused]] static jobject get_field_STRUCTURE_SET() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aT", "STRUCTURE_SET", "field_41248", "STRUCTURE_SET", "f_256998_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#STRUCTURE_SET
    [[maybe_unused]] static void set_field_STRUCTURE_SET(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aT", "STRUCTURE_SET", "field_41248", "STRUCTURE_SET", "f_256998_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#TEMPLATE_POOL
    [[maybe_unused]] static jobject get_field_TEMPLATE_POOL() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aU", "TEMPLATE_POOL", "field_41249", "TEMPLATE_POOL", "f_256948_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#TEMPLATE_POOL
    [[maybe_unused]] static void set_field_TEMPLATE_POOL(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aU", "TEMPLATE_POOL", "field_41249", "TEMPLATE_POOL", "f_256948_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#CRITERION
    [[maybe_unused]] static jobject get_field_CRITERION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aV", "TRIGGER_TYPE", "field_47498", "CRITERION", "f_302828_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#CRITERION
    [[maybe_unused]] static void set_field_CRITERION(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aV", "TRIGGER_TYPE", "field_47498", "CRITERION", "f_302828_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#TRIM_MATERIAL
    [[maybe_unused]] static jobject get_field_TRIM_MATERIAL() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aW", "TRIM_MATERIAL", "field_42083", "TRIM_MATERIAL", "f_266076_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#TRIM_MATERIAL
    [[maybe_unused]] static void set_field_TRIM_MATERIAL(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aW", "TRIM_MATERIAL", "field_42083", "TRIM_MATERIAL", "f_266076_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#TRIM_PATTERN
    [[maybe_unused]] static jobject get_field_TRIM_PATTERN() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aX", "TRIM_PATTERN", "field_42082", "TRIM_PATTERN", "f_266063_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#TRIM_PATTERN
    [[maybe_unused]] static void set_field_TRIM_PATTERN(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aX", "TRIM_PATTERN", "field_42082", "TRIM_PATTERN", "f_266063_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#WORLD_PRESET
    [[maybe_unused]] static jobject get_field_WORLD_PRESET() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aY", "WORLD_PRESET", "field_41250", "WORLD_PRESET", "f_256729_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#WORLD_PRESET
    [[maybe_unused]] static void set_field_WORLD_PRESET(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aY", "WORLD_PRESET", "field_41250", "WORLD_PRESET", "f_256729_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#MULTI_NOISE_BIOME_SOURCE_PARAMETER_LIST
    [[maybe_unused]] static jobject get_field_MULTI_NOISE_BIOME_SOURCE_PARAMETER_LIST() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aZ", "MULTI_NOISE_BIOME_SOURCE_PARAMETER_LIST", "field_43089", "MULTI_NOISE_BIOME_SOURCE_PARAMETER_LIST", "f_273919_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#MULTI_NOISE_BIOME_SOURCE_PARAMETER_LIST
    [[maybe_unused]] static void set_field_MULTI_NOISE_BIOME_SOURCE_PARAMETER_LIST(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aZ", "MULTI_NOISE_BIOME_SOURCE_PARAMETER_LIST", "field_43089", "MULTI_NOISE_BIOME_SOURCE_PARAMETER_LIST", "f_273919_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#WORLD
    [[maybe_unused]] static jobject get_field_WORLD() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ba", "DIMENSION", "field_41223", "WORLD", "f_256858_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#WORLD
    [[maybe_unused]] static void set_field_WORLD(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ba", "DIMENSION", "field_41223", "WORLD", "f_256858_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#DIMENSION
    [[maybe_unused]] static jobject get_field_DIMENSION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("bb", "LEVEL_STEM", "field_41224", "DIMENSION", "f_256862_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#DIMENSION
    [[maybe_unused]] static void set_field_DIMENSION(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("bb", "LEVEL_STEM", "field_41224", "DIMENSION", "f_256862_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#LOOT_TABLE
    [[maybe_unused]] static jobject get_field_LOOT_TABLE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("bc", "LOOT_TABLE", "field_50079", "LOOT_TABLE", "f_314309_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#LOOT_TABLE
    [[maybe_unused]] static void set_field_LOOT_TABLE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("bc", "LOOT_TABLE", "field_50079", "LOOT_TABLE", "f_314309_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#ITEM_MODIFIER
    [[maybe_unused]] static jobject get_field_ITEM_MODIFIER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("bd", "ITEM_MODIFIER", "field_50080", "ITEM_MODIFIER", "f_316898_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#ITEM_MODIFIER
    [[maybe_unused]] static void set_field_ITEM_MODIFIER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("bd", "ITEM_MODIFIER", "field_50080", "ITEM_MODIFIER", "f_316898_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#PREDICATE
    [[maybe_unused]] static jobject get_field_PREDICATE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("be", "PREDICATE", "field_50081", "PREDICATE", "f_315752_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#PREDICATE
    [[maybe_unused]] static void set_field_PREDICATE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("be", "PREDICATE", "field_50081", "PREDICATE", "f_315752_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#ADVANCEMENT
    [[maybe_unused]] static jobject get_field_ADVANCEMENT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("bf", "ADVANCEMENT", "field_52177", "ADVANCEMENT", "f_336925_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#ADVANCEMENT
    [[maybe_unused]] static void set_field_ADVANCEMENT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("bf", "ADVANCEMENT", "field_52177", "ADVANCEMENT", "f_336925_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.registry.RegistryKeys#RECIPE
    [[maybe_unused]] static jobject get_field_RECIPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("bg", "RECIPE", "field_52178", "RECIPE", "f_337225_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.registry.RegistryKeys#RECIPE
    [[maybe_unused]] static void set_field_RECIPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("bg", "RECIPE", "field_52178", "RECIPE", "f_337225_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_toWorldKey() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "levelStemToLevel", "method_47516", "toWorldKey", "m_257551_"), "(Lakq;)Lakq;");
    }

    static jobject toWorldKey(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_toWorldKey();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_toDimensionKey() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "levelToLevelStem", "method_47518", "toDimensionKey", "m_257452_"), "(Lakq;)Lakq;");
    }

    static jobject toDimensionKey(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_toDimensionKey();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_of() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "createRegistryKey", "method_47517", "of", "m_257397_"), "(Ljava/lang/String;)Lakq;");
    }

    static jobject of(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_of();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getPath() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "elementsDirPath", "method_60915", "getPath", "m_339951_"), "(Lakq;)Ljava/lang/String;");
    }

    static jobject getPath(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getPath();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getTagPath() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("d", "tagsDirPath", "method_60916", "getTagPath", "m_338735_"), "(Lakq;)Ljava/lang/String;");
    }

    static jobject getTagPath(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getTagPath();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_REGISTRY_REGISTRYKEYS_HPP