// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_CHUNKUPDATESTATE_HPP
#define NET_MINECRAFT_WORLD_CHUNKUPDATESTATE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.ChunkUpdateState
 * Remapped: eju
 */
namespace ChunkUpdateState {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("eju", "net/minecraft/world/level/levelgen/structure/StructureFeatureIndexSavedData", "net/minecraft/class_3440", "net/minecraft/world/ChunkUpdateState", "net/minecraft/src/C_2584_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.world.ChunkUpdateState#REMAINING_KEY
    [[maybe_unused]] static jobject get_field_REMAINING_KEY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "TAG_REMAINING_INDEXES", "field_31660", "REMAINING_KEY", "f_163528_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.ChunkUpdateState#REMAINING_KEY
    [[maybe_unused]] static void set_field_REMAINING_KEY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "TAG_REMAINING_INDEXES", "field_31660", "REMAINING_KEY", "f_163528_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.ChunkUpdateState#ALL_KEY
    [[maybe_unused]] static jobject get_field_ALL_KEY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "TAG_All_INDEXES", "field_31661", "ALL_KEY", "f_163529_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.ChunkUpdateState#ALL_KEY
    [[maybe_unused]] static void set_field_ALL_KEY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "TAG_All_INDEXES", "field_31661", "ALL_KEY", "f_163529_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.world.ChunkUpdateState#all
    static jobject get_field_all(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "all", "field_15301", "all", "f_73360_"), "Lit/unimi/dsi/fastutil/longs/LongSet;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.ChunkUpdateState#all
    static void set_field_all(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "all", "field_15301", "all", "f_73360_"), "Lit/unimi/dsi/fastutil/longs/LongSet;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.ChunkUpdateState#remaining
    static jobject get_field_remaining(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "remaining", "field_15302", "remaining", "f_73361_"), "Lit/unimi/dsi/fastutil/longs/LongSet;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.ChunkUpdateState#remaining
    static void set_field_remaining(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "remaining", "field_15302", "remaining", "f_73361_"), "Lit/unimi/dsi/fastutil/longs/LongSet;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_getPersistentStateType() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "factory", "method_52601", "getPersistentStateType", "m_295688_"), "()Leql$a;");
    }

    static jobject getPersistentStateType() {
       const auto clazz = self();
       const auto methodID = methodID_getPersistentStateType();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_fromNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "load", "method_32358", "fromNbt", "m_163534_"), "(Lub;Ljo$a;)Leju;");
    }

    static jobject fromNbt(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_fromNbt();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_writeNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "save", "method_75", "writeNbt", "m_7176_"), "(Lub;Ljo$a;)Lub;");
    }

    static jobject writeNbt(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_writeNbt();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_add() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addIndex", "method_14896", "add", "m_73365_"), "(J)V");
    }

    static void add(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_add();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_contains() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "hasStartIndex", "method_14897", "contains", "m_73369_"), "(J)Z");
    }

    static jboolean contains(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_contains();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isRemaining() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "hasUnhandledIndex", "method_14894", "isRemaining", "m_73373_"), "(J)Z");
    }

    static jboolean isRemaining(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_isRemaining();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_markResolved() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "removeIndex", "method_14895", "markResolved", "m_73375_"), "(J)V");
    }

    static void markResolved(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_markResolved();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getAll() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getAll", "method_14898", "getAll", "m_73364_"), "()Lit/unimi/dsi/fastutil/longs/LongSet;");
    }

    static jobject getAll(const jobject& obj) {
                
       const auto methodID = methodID_getAll();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_WORLD_CHUNKUPDATESTATE_HPP