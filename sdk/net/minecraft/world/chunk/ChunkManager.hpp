// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_CHUNK_CHUNKMANAGER_HPP
#define NET_MINECRAFT_WORLD_CHUNK_CHUNKMANAGER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.chunk.ChunkManager
 * Remapped: dvc
 */
namespace ChunkManager {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dvc", "net/minecraft/world/level/chunk/ChunkSource", "net/minecraft/class_2802", "net/minecraft/world/chunk/ChunkManager", "net/minecraft/src/C_2119_"));
        }
        return cachedClass;
    };

    static jmethodID methodID_getWorldChunk() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getChunk", "method_12126", "getWorldChunk", "m_62227_"), "(IIZ)Ldvi;");
    }

    static jobject getWorldChunk(const jobject& obj, const jint& arg0, const jint& arg1, const jboolean& arg2) {
                
       const auto methodID = methodID_getWorldChunk();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__getWorldChunk() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getChunkNow", "method_21730", "getWorldChunk", "m_7131_"), "(II)Ldvi;");
    }

    static jobject _getWorldChunk(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID__getWorldChunk();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getChunk() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getChunkForLighting", "method_12246", "getChunk", "m_6196_"), "(II)Ldvk;");
    }

    static jobject getChunk(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_getChunk();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isChunkLoaded() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "hasChunk", "method_12123", "isChunkLoaded", "m_5563_"), "(II)Z");
    }

    static jboolean isChunkLoaded(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_isChunkLoaded();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__getChunk() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getChunk", "method_12121", "getChunk", "m_7587_"), "(IILdvz;Z)Lduy;");
    }

    static jobject _getChunk(const jobject& obj, const jint& arg0, const jint& arg1, const jobject& arg2, const jboolean& arg3) {
                
       const auto methodID = methodID__getChunk();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "tick", "method_12127", "tick", "m_201698_"), "(Ljava/util/function/BooleanSupplier;Z)V");
    }

    static void tick(const jobject& obj, const jobject& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_tick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getDebugString() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "gatherStats", "method_12122", "getDebugString", "m_6754_"), "()Ljava/lang/String;");
    }

    static jobject getDebugString(const jobject& obj) {
                
       const auto methodID = methodID_getDebugString();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getLoadedChunkCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "getLoadedChunksCount", "method_14151", "getLoadedChunkCount", "m_8482_"), "()I");
    }

    static jint getLoadedChunkCount(const jobject& obj) {
                
       const auto methodID = methodID_getLoadedChunkCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_close() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("close", "close", "", "", "close"), "()V");
    }

    static void close(const jobject& obj) {
                
       const auto methodID = methodID_close();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getLightingProvider() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("p", "getLightEngine", "method_12130", "getLightingProvider", "m_7827_"), "()Leot;");
    }

    static jobject getLightingProvider(const jobject& obj) {
                
       const auto methodID = methodID_getLightingProvider();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_setMobSpawnOptions() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setSpawnSettings", "method_12128", "setMobSpawnOptions", "m_6707_"), "(ZZ)V");
    }

    static void setMobSpawnOptions(const jobject& obj, const jboolean& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_setMobSpawnOptions();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_setChunkForced() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateChunkForced", "method_12124", "setChunkForced", "m_6692_"), "(Ldcd;Z)V");
    }

    static void setChunkForced(const jobject& obj, const jobject& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_setChunkForced();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_WORLD_CHUNK_CHUNKMANAGER_HPP