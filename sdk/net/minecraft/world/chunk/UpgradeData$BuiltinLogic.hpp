// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_CHUNK_UPGRADEDATA$BUILTINLOGIC_HPP
#define NET_MINECRAFT_WORLD_CHUNK_UPGRADEDATA$BUILTINLOGIC_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.chunk.UpgradeData$BuiltinLogic
 * Remapped: dvv$b
 */
namespace UpgradeData$BuiltinLogic {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dvv$b", "net/minecraft/world/level/chunk/UpgradeData$BlockFixers", "net/minecraft/class_2843$class_2845", "net/minecraft/world/chunk/UpgradeData$BuiltinLogic", "net/minecraft/src/C_2149_$C_2152_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.world.chunk.UpgradeData$BuiltinLogic#BLACKLIST
    [[maybe_unused]] static jobject get_field_BLACKLIST() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "BLACKLIST", "field_12957", "BLACKLIST", "BLACKLIST"), "Ldvv$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.chunk.UpgradeData$BuiltinLogic#BLACKLIST
    [[maybe_unused]] static void set_field_BLACKLIST(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "BLACKLIST", "field_12957", "BLACKLIST", "BLACKLIST"), "Ldvv$b;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.chunk.UpgradeData$BuiltinLogic#DEFAULT
    [[maybe_unused]] static jobject get_field_DEFAULT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "DEFAULT", "field_12962", "DEFAULT", "DEFAULT"), "Ldvv$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.chunk.UpgradeData$BuiltinLogic#DEFAULT
    [[maybe_unused]] static void set_field_DEFAULT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "DEFAULT", "field_12962", "DEFAULT", "DEFAULT"), "Ldvv$b;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.chunk.UpgradeData$BuiltinLogic#CHEST
    [[maybe_unused]] static jobject get_field_CHEST() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "CHEST", "field_12960", "CHEST", "CHEST"), "Ldvv$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.chunk.UpgradeData$BuiltinLogic#CHEST
    [[maybe_unused]] static void set_field_CHEST(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "CHEST", "field_12960", "CHEST", "CHEST"), "Ldvv$b;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.chunk.UpgradeData$BuiltinLogic#LEAVES
    [[maybe_unused]] static jobject get_field_LEAVES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "LEAVES", "field_12963", "LEAVES", "LEAVES"), "Ldvv$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.chunk.UpgradeData$BuiltinLogic#LEAVES
    [[maybe_unused]] static void set_field_LEAVES(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "LEAVES", "field_12963", "LEAVES", "LEAVES"), "Ldvv$b;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.chunk.UpgradeData$BuiltinLogic#STEM_BLOCK
    [[maybe_unused]] static jobject get_field_STEM_BLOCK() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "STEM_BLOCK", "field_12958", "STEM_BLOCK", "STEM_BLOCK"), "Ldvv$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.chunk.UpgradeData$BuiltinLogic#STEM_BLOCK
    [[maybe_unused]] static void set_field_STEM_BLOCK(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "STEM_BLOCK", "field_12958", "STEM_BLOCK", "STEM_BLOCK"), "Ldvv$b;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.chunk.UpgradeData$BuiltinLogic#DIRECTIONS
    [[maybe_unused]] static jobject get_field_DIRECTIONS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "DIRECTIONS", "field_12959", "DIRECTIONS", "f_63363_"), "[Lji;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.chunk.UpgradeData$BuiltinLogic#DIRECTIONS
    [[maybe_unused]] static void set_field_DIRECTIONS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "DIRECTIONS", "field_12959", "DIRECTIONS", "f_63363_"), "[Lji;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_values() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("values", "values", "values", "values", "values"), "()[Ldvv$b;");
    }

    static jobject values() {
       const auto clazz = self();
       const auto methodID = methodID_values();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_valueOf() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("valueOf", "valueOf", "valueOf", "valueOf", "valueOf"), "(Ljava/lang/String;)Ldvv$b;");
    }

    static jobject valueOf(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_valueOf();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_WORLD_CHUNK_UPGRADEDATA$BUILTINLOGIC_HPP