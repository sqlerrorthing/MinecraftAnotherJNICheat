// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_CHUNK_CHUNKNIBBLEARRAY_HPP
#define NET_MINECRAFT_WORLD_CHUNK_CHUNKNIBBLEARRAY_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.chunk.ChunkNibbleArray
 * Remapped: dvd
 */
namespace ChunkNibbleArray {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dvd", "net/minecraft/world/level/chunk/DataLayer", "net/minecraft/class_2804", "net/minecraft/world/chunk/ChunkNibbleArray", "net/minecraft/src/C_2131_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.world.chunk.ChunkNibbleArray#COPY_TIMES
    [[maybe_unused]] static jint get_field_COPY_TIMES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LAYER_COUNT", "field_34052", "COPY_TIMES", "f_182480_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.chunk.ChunkNibbleArray#COPY_TIMES
    [[maybe_unused]] static void set_field_COPY_TIMES(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LAYER_COUNT", "field_34052", "COPY_TIMES", "f_182480_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.chunk.ChunkNibbleArray#COPY_BLOCK_SIZE
    [[maybe_unused]] static jint get_field_COPY_BLOCK_SIZE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "LAYER_SIZE", "field_31404", "COPY_BLOCK_SIZE", "f_156339_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.chunk.ChunkNibbleArray#COPY_BLOCK_SIZE
    [[maybe_unused]] static void set_field_COPY_BLOCK_SIZE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "LAYER_SIZE", "field_31404", "COPY_BLOCK_SIZE", "f_156339_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.chunk.ChunkNibbleArray#BYTES_LENGTH
    [[maybe_unused]] static jint get_field_BYTES_LENGTH() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "SIZE", "field_31403", "BYTES_LENGTH", "f_156338_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.chunk.ChunkNibbleArray#BYTES_LENGTH
    [[maybe_unused]] static void set_field_BYTES_LENGTH(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "SIZE", "field_31403", "BYTES_LENGTH", "f_156338_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.chunk.ChunkNibbleArray#NIBBLE_BITS
    [[maybe_unused]] static jint get_field_NIBBLE_BITS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "NIBBLE_SIZE", "field_31405", "NIBBLE_BITS", "f_156340_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.ChunkNibbleArray#NIBBLE_BITS
    [[maybe_unused]] static void set_field_NIBBLE_BITS(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "NIBBLE_SIZE", "field_31405", "NIBBLE_BITS", "f_156340_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for protected field net.minecraft.world.chunk.ChunkNibbleArray#bytes
    static jbyte get_field_bytes(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "data", "field_12783", "bytes", "f_62551_"), "[B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetByteField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.world.chunk.ChunkNibbleArray#bytes
    static void set_field_bytes(const jobject &obj, const jbyte &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "data", "field_12783", "bytes", "f_62551_"), "[B");
        return MinecraftSDK::env->SetByteField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.ChunkNibbleArray#defaultValue
    static jint get_field_defaultValue(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "defaultValue", "field_44635", "defaultValue", "f_279645_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.ChunkNibbleArray#defaultValue
    static void set_field_defaultValue(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "defaultValue", "field_44635", "defaultValue", "f_279645_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    static jmethodID methodID_get() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "get", "method_12139", "get", "m_62560_"), "(III)I");
    }

    static jint get(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_get();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_set() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "set", "method_12145", "set", "m_62564_"), "(IIII)V");
    }

    static void set(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2, const jint& arg3) {
                
       const auto methodID = methodID_set();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_getIndex() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "getIndex", "method_12140", "getIndex", "m_6406_"), "(III)I");
    }

    static jint getIndex(const jint& arg0, const jint& arg1, const jint& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_getIndex();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__get() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "get", "method_12141", "get", "m_62570_"), "(I)I");
    }

    static jint _get(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID__get();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__set() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "set", "method_12142", "set", "m_62557_"), "(II)V");
    }

    static void _set(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID__set();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_occupiesSmallerBits() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("e", "getNibbleIndex", "method_37459", "occupiesSmallerBits", "m_182481_"), "(I)I");
    }

    static jint occupiesSmallerBits(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_occupiesSmallerBits();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getArrayIndex() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("f", "getByteIndex", "method_12138", "getArrayIndex", "m_62578_"), "(I)I");
    }

    static jint getArrayIndex(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getArrayIndex();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_clear() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "fill", "method_51527", "clear", "m_284173_"), "(I)V");
    }

    static void clear(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_clear();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_pack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("g", "packFilled", "method_51381", "pack", "m_280353_"), "(I)B");
    }

    static jbyte pack(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_pack();
       return MinecraftSDK::env->CallStaticByteMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_asByteArray() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getData", "method_12137", "asByteArray", "m_7877_"), "()[B");
    }

    static jbyte asByteArray(const jobject& obj) {
                
       const auto methodID = methodID_asByteArray();
       return MinecraftSDK::env->CallByteMethod(obj, methodID);
    };
    
    static jmethodID methodID_copy() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "copy", "method_12144", "copy", "m_62569_"), "()Ldvd;");
    }

    static jobject copy(const jobject& obj) {
                
       const auto methodID = methodID_copy();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_bottomToString() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "layerToString", "method_35320", "bottomToString", "m_156341_"), "(I)Ljava/lang/String;");
    }

    static jobject bottomToString(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_bottomToString();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isArrayUninitialized() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "isDefinitelyHomogenous", "method_51380", "isArrayUninitialized", "m_280098_"), "()Z");
    }

    static jboolean isArrayUninitialized(const jobject& obj) {
                
       const auto methodID = methodID_isArrayUninitialized();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isUninitialized() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "isDefinitelyFilledWith", "method_51379", "isUninitialized", "m_280484_"), "(I)Z");
    }

    static jboolean isUninitialized(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_isUninitialized();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__isUninitialized() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "isEmpty", "method_12146", "isUninitialized", "m_62575_"), "()Z");
    }

    static jboolean _isUninitialized(const jobject& obj) {
                
       const auto methodID = methodID__isUninitialized();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_WORLD_CHUNK_CHUNKNIBBLEARRAY_HPP