// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_CHUNK_ABSTRACTCHUNKHOLDER_HPP
#define NET_MINECRAFT_WORLD_CHUNK_ABSTRACTCHUNKHOLDER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.chunk.AbstractChunkHolder
 * Remapped: aqn
 */
namespace AbstractChunkHolder {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("aqn", "net/minecraft/server/level/GenerationChunkHolder", "net/minecraft/class_9761", "net/minecraft/world/chunk/AbstractChunkHolder", "net/minecraft/src/C_336526_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.world.chunk.AbstractChunkHolder#STATUSES
    [[maybe_unused]] static jobject get_field_STATUSES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CHUNK_STATUSES", "field_51865", "STATUSES", "f_336881_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.AbstractChunkHolder#STATUSES
    [[maybe_unused]] static void set_field_STATUSES(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CHUNK_STATUSES", "field_51865", "STATUSES", "f_336881_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.chunk.AbstractChunkHolder#NOT_DONE
    [[maybe_unused]] static jobject get_field_NOT_DONE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "NOT_DONE_YET", "field_51869", "NOT_DONE", "f_337211_"), "Laqc;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.AbstractChunkHolder#NOT_DONE
    [[maybe_unused]] static void set_field_NOT_DONE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "NOT_DONE_YET", "field_51869", "NOT_DONE", "f_337211_"), "Laqc;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.chunk.AbstractChunkHolder#UNLOADED
    [[maybe_unused]] static jobject get_field_UNLOADED() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "UNLOADED_CHUNK", "field_51866", "UNLOADED", "f_337099_"), "Laqc;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.chunk.AbstractChunkHolder#UNLOADED
    [[maybe_unused]] static void set_field_UNLOADED(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "UNLOADED_CHUNK", "field_51866", "UNLOADED", "f_337099_"), "Laqc;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.chunk.AbstractChunkHolder#UNLOADED_FUTURE
    [[maybe_unused]] static jobject get_field_UNLOADED_FUTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "UNLOADED_CHUNK_FUTURE", "field_51867", "UNLOADED_FUTURE", "f_336731_"), "Ljava/util/concurrent/CompletableFuture;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.chunk.AbstractChunkHolder#UNLOADED_FUTURE
    [[maybe_unused]] static void set_field_UNLOADED_FUTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "UNLOADED_CHUNK_FUTURE", "field_51867", "UNLOADED_FUTURE", "f_336731_"), "Ljava/util/concurrent/CompletableFuture;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for protected field net.minecraft.world.chunk.AbstractChunkHolder#pos
    static jobject get_field_pos(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "pos", "field_51868", "pos", "f_336683_"), "Ldcd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.world.chunk.AbstractChunkHolder#pos
    static void set_field_pos(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "pos", "field_51868", "pos", "f_336683_"), "Ldcd;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.AbstractChunkHolder#status
    static jobject get_field_status(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "highestAllowedStatus", "field_51870", "status", "f_337682_"), "Ldvz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.AbstractChunkHolder#status
    static void set_field_status(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "highestAllowedStatus", "field_51870", "status", "f_337682_"), "Ldvz;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.AbstractChunkHolder#currentStatus
    static jobject get_field_currentStatus(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "startedWork", "field_51871", "currentStatus", "f_336967_"), "Ljava/util/concurrent/atomic/AtomicReference;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.AbstractChunkHolder#currentStatus
    static void set_field_currentStatus(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "startedWork", "field_51871", "currentStatus", "f_336967_"), "Ljava/util/concurrent/atomic/AtomicReference;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.AbstractChunkHolder#chunkFuturesByStatus
    static jobject get_field_chunkFuturesByStatus(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "futures", "field_51872", "chunkFuturesByStatus", "f_337338_"), "Ljava/util/concurrent/atomic/AtomicReferenceArray;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.AbstractChunkHolder#chunkFuturesByStatus
    static void set_field_chunkFuturesByStatus(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "futures", "field_51872", "chunkFuturesByStatus", "f_337338_"), "Ljava/util/concurrent/atomic/AtomicReferenceArray;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.AbstractChunkHolder#chunkLoader
    static jobject get_field_chunkLoader(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "task", "field_51873", "chunkLoader", "f_337182_"), "Ljava/util/concurrent/atomic/AtomicReference;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.AbstractChunkHolder#chunkLoader
    static void set_field_chunkLoader(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "task", "field_51873", "chunkLoader", "f_337182_"), "Ljava/util/concurrent/atomic/AtomicReference;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.AbstractChunkHolder#refCount
    static jobject get_field_refCount(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "generationRefCount", "field_51874", "refCount", "f_336999_"), "Ljava/util/concurrent/atomic/AtomicInteger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.AbstractChunkHolder#refCount
    static void set_field_refCount(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "generationRefCount", "field_51874", "refCount", "f_336999_"), "Ljava/util/concurrent/atomic/AtomicInteger;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_load() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "scheduleChunkGenerationTask", "method_60458", "load", "m_340221_"), "(Ldvz;Laqb;)Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject load(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_load();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_generate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "applyStep", "method_60461", "generate", "m_340322_"), "(Ldwc;Laqm;Lazi;)Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject generate(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_generate();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_updateStatus() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateHighestAllowedStatus", "method_60454", "updateStatus", "m_338906_"), "(Laqb;)V");
    }

    static void updateStatus(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_updateStatus();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_replaceWith() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "replaceProtoChunk", "method_60456", "replaceWith", "m_338783_"), "(Ldvh;)V");
    }

    static void replaceWith(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_replaceWith();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_clearLoader() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "removeTask", "method_60453", "clearLoader", "m_340319_"), "(Lapy;)V");
    }

    static void clearLoader(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_clearLoader();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_createLoader() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "rescheduleChunkTask", "method_60455", "createLoader", "m_340412_"), "(Laqb;Ldvz;)V");
    }

    static void createLoader(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_createLoader();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getOrCreateFuture() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getOrCreateFuture", "method_60464", "getOrCreateFuture", "m_339225_"), "(Ldvz;)Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject getOrCreateFuture(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getOrCreateFuture();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_unload() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "failAndClearPendingFuturesBetween", "method_60460", "unload", "m_340097_"), "(Ldvz;Ldvz;)V");
    }

    static void unload(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_unload();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__unload() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "failAndClearPendingFuture", "method_60452", "unload", "m_340213_"), "(ILjava/util/concurrent/CompletableFuture;)V");
    }

    static void _unload(const jobject& obj, const jint& arg0, const jobject& arg1) {
                
       const auto methodID = methodID__unload();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_completeChunkFuture() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "completeFuture", "method_60459", "completeChunkFuture", "m_340017_"), "(Ldvz;Lduy;)V");
    }

    static void completeChunkFuture(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_completeChunkFuture();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getMaxPendingStatus() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "findHighestStatusWithPendingFuture", "method_60465", "getMaxPendingStatus", "m_340390_"), "(Ldvz;)Ldvz;");
    }

    static jobject getMaxPendingStatus(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getMaxPendingStatus();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_progressStatus() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "acquireStatusBump", "method_60466", "progressStatus", "m_338928_"), "(Ldvz;)Z");
    }

    static jboolean progressStatus(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_progressStatus();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_cannotBeLoaded() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "isStatusDisallowed", "method_60467", "cannotBeLoaded", "m_340530_"), "(Ldvz;)Z");
    }

    static jboolean cannotBeLoaded(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_cannotBeLoaded();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_incrementRefCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("m", "increaseGenerationRefCount", "method_60468", "incrementRefCount", "m_338841_"), "()V");
    }

    static void incrementRefCount(const jobject& obj) {
                
       const auto methodID = methodID_incrementRefCount();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_decrementRefCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("n", "decreaseGenerationRefCount", "method_60469", "decrementRefCount", "m_340129_"), "()V");
    }

    static void decrementRefCount(const jobject& obj) {
                
       const auto methodID = methodID_decrementRefCount();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getRefCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("o", "getGenerationRefCount", "method_60470", "getRefCount", "m_339108_"), "()I");
    }

    static jint getRefCount(const jobject& obj) {
                
       const auto methodID = methodID_getRefCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getUncheckedOrNull() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getChunkIfPresentUnchecked", "method_60457", "getUncheckedOrNull", "m_338381_"), "(Ldvz;)Lduy;");
    }

    static jobject getUncheckedOrNull(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getUncheckedOrNull();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getOrNull() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getChunkIfPresent", "method_60463", "getOrNull", "m_340522_"), "(Ldvz;)Lduy;");
    }

    static jobject getOrNull(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getOrNull();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getLatest() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("p", "getLatestChunk", "method_60471", "getLatest", "m_340032_"), "()Lduy;");
    }

    static jobject getLatest(const jobject& obj) {
                
       const auto methodID = methodID_getLatest();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getActualStatus() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("q", "getPersistedStatus", "method_60472", "getActualStatus", "m_339972_"), "()Ldvz;");
    }

    static jobject getActualStatus(const jobject& obj) {
                
       const auto methodID = methodID_getActualStatus();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("r", "getPos", "method_60473", "getPos", "m_338581_"), "()Ldcd;");
    }

    static jobject getPos(const jobject& obj) {
                
       const auto methodID = methodID_getPos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getLevelType() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("s", "getFullStatus", "method_60474", "getLevelType", "m_339537_"), "()Laql;");
    }

    static jobject getLevelType(const jobject& obj) {
                
       const auto methodID = methodID_getLevelType();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "getTicketLevel", "method_14005", "getLevel", "m_140093_"), "()I");
    }

    static jint getLevel(const jobject& obj) {
                
       const auto methodID = methodID_getLevel();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getCompletedLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "getQueueLevel", "method_17208", "getCompletedLevel", "m_140094_"), "()I");
    }

    static jint getCompletedLevel(const jobject& obj) {
                
       const auto methodID = methodID_getCompletedLevel();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_enumerateFutures() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("t", "getAllFutures", "method_60475", "enumerateFutures", "m_340094_"), "()Ljava/util/List;");
    }

    static jobject enumerateFutures(const jobject& obj) {
                
       const auto methodID = methodID_enumerateFutures();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getLatestStatus() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("u", "getLatestStatus", "method_60476", "getLatestStatus", "m_338382_"), "()Ldvz;");
    }

    static jobject getLatestStatus(const jobject& obj) {
                
       const auto methodID = methodID_getLatestStatus();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_WORLD_CHUNK_ABSTRACTCHUNKHOLDER_HPP