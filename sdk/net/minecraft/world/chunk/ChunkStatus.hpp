// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_CHUNK_CHUNKSTATUS_HPP
#define NET_MINECRAFT_WORLD_CHUNK_CHUNKSTATUS_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.chunk.ChunkStatus
 * Remapped: dvz
 */
namespace ChunkStatus {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dvz", "net/minecraft/world/level/chunk/status/ChunkStatus", "net/minecraft/class_2806", "net/minecraft/world/chunk/ChunkStatus", "net/minecraft/src/C_313554_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.world.chunk.ChunkStatus#field_35470
    [[maybe_unused]] static jint get_field_field_35470() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "MAX_STRUCTURE_DISTANCE", "field_35470", "field_35470", "f_316469_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.chunk.ChunkStatus#field_35470
    [[maybe_unused]] static void set_field_field_35470(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "MAX_STRUCTURE_DISTANCE", "field_35470", "field_35470", "f_316469_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.chunk.ChunkStatus#WORLD_GEN_HEIGHTMAP_TYPES
    [[maybe_unused]] static jobject get_field_WORLD_GEN_HEIGHTMAP_TYPES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "WORLDGEN_HEIGHTMAPS", "field_51904", "WORLD_GEN_HEIGHTMAP_TYPES", "f_336619_"), "Ljava/util/EnumSet;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.ChunkStatus#WORLD_GEN_HEIGHTMAP_TYPES
    [[maybe_unused]] static void set_field_WORLD_GEN_HEIGHTMAP_TYPES(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "WORLDGEN_HEIGHTMAPS", "field_51904", "WORLD_GEN_HEIGHTMAP_TYPES", "f_336619_"), "Ljava/util/EnumSet;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.chunk.ChunkStatus#NORMAL_HEIGHTMAP_TYPES
    [[maybe_unused]] static jobject get_field_NORMAL_HEIGHTMAP_TYPES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "FINAL_HEIGHTMAPS", "field_51903", "NORMAL_HEIGHTMAP_TYPES", "f_336838_"), "Ljava/util/EnumSet;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.chunk.ChunkStatus#NORMAL_HEIGHTMAP_TYPES
    [[maybe_unused]] static void set_field_NORMAL_HEIGHTMAP_TYPES(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "FINAL_HEIGHTMAPS", "field_51903", "NORMAL_HEIGHTMAP_TYPES", "f_336838_"), "Ljava/util/EnumSet;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.chunk.ChunkStatus#EMPTY
    [[maybe_unused]] static jobject get_field_EMPTY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "EMPTY", "field_12798", "EMPTY", "f_314297_"), "Ldvz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.chunk.ChunkStatus#EMPTY
    [[maybe_unused]] static void set_field_EMPTY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "EMPTY", "field_12798", "EMPTY", "f_314297_"), "Ldvz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.chunk.ChunkStatus#STRUCTURE_STARTS
    [[maybe_unused]] static jobject get_field_STRUCTURE_STARTS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "STRUCTURE_STARTS", "field_16423", "STRUCTURE_STARTS", "f_317114_"), "Ldvz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.chunk.ChunkStatus#STRUCTURE_STARTS
    [[maybe_unused]] static void set_field_STRUCTURE_STARTS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "STRUCTURE_STARTS", "field_16423", "STRUCTURE_STARTS", "f_317114_"), "Ldvz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.chunk.ChunkStatus#STRUCTURE_REFERENCES
    [[maybe_unused]] static jobject get_field_STRUCTURE_REFERENCES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "STRUCTURE_REFERENCES", "field_16422", "STRUCTURE_REFERENCES", "f_316571_"), "Ldvz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.chunk.ChunkStatus#STRUCTURE_REFERENCES
    [[maybe_unused]] static void set_field_STRUCTURE_REFERENCES(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "STRUCTURE_REFERENCES", "field_16422", "STRUCTURE_REFERENCES", "f_316571_"), "Ldvz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.chunk.ChunkStatus#BIOMES
    [[maybe_unused]] static jobject get_field_BIOMES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "BIOMES", "field_12794", "BIOMES", "f_316460_"), "Ldvz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.chunk.ChunkStatus#BIOMES
    [[maybe_unused]] static void set_field_BIOMES(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "BIOMES", "field_12794", "BIOMES", "f_316460_"), "Ldvz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.chunk.ChunkStatus#NOISE
    [[maybe_unused]] static jobject get_field_NOISE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "NOISE", "field_12804", "NOISE", "f_316398_"), "Ldvz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.chunk.ChunkStatus#NOISE
    [[maybe_unused]] static void set_field_NOISE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "NOISE", "field_12804", "NOISE", "f_316398_"), "Ldvz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.chunk.ChunkStatus#SURFACE
    [[maybe_unused]] static jobject get_field_SURFACE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "SURFACE", "field_12796", "SURFACE", "f_316036_"), "Ldvz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.chunk.ChunkStatus#SURFACE
    [[maybe_unused]] static void set_field_SURFACE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "SURFACE", "field_12796", "SURFACE", "f_316036_"), "Ldvz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.chunk.ChunkStatus#CARVERS
    [[maybe_unused]] static jobject get_field_CARVERS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "CARVERS", "field_12801", "CARVERS", "f_314171_"), "Ldvz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.chunk.ChunkStatus#CARVERS
    [[maybe_unused]] static void set_field_CARVERS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "CARVERS", "field_12801", "CARVERS", "f_314171_"), "Ldvz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.chunk.ChunkStatus#FEATURES
    [[maybe_unused]] static jobject get_field_FEATURES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "FEATURES", "field_12795", "FEATURES", "f_314060_"), "Ldvz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.chunk.ChunkStatus#FEATURES
    [[maybe_unused]] static void set_field_FEATURES(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "FEATURES", "field_12795", "FEATURES", "f_314060_"), "Ldvz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.chunk.ChunkStatus#INITIALIZE_LIGHT
    [[maybe_unused]] static jobject get_field_INITIALIZE_LIGHT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "INITIALIZE_LIGHT", "field_44633", "INITIALIZE_LIGHT", "f_315473_"), "Ldvz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.chunk.ChunkStatus#INITIALIZE_LIGHT
    [[maybe_unused]] static void set_field_INITIALIZE_LIGHT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "INITIALIZE_LIGHT", "field_44633", "INITIALIZE_LIGHT", "f_315473_"), "Ldvz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.chunk.ChunkStatus#LIGHT
    [[maybe_unused]] static jobject get_field_LIGHT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "LIGHT", "field_12805", "LIGHT", "f_316967_"), "Ldvz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.chunk.ChunkStatus#LIGHT
    [[maybe_unused]] static void set_field_LIGHT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "LIGHT", "field_12805", "LIGHT", "f_316967_"), "Ldvz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.chunk.ChunkStatus#SPAWN
    [[maybe_unused]] static jobject get_field_SPAWN() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "SPAWN", "field_12786", "SPAWN", "f_316387_"), "Ldvz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.chunk.ChunkStatus#SPAWN
    [[maybe_unused]] static void set_field_SPAWN(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "SPAWN", "field_12786", "SPAWN", "f_316387_"), "Ldvz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.chunk.ChunkStatus#FULL
    [[maybe_unused]] static jobject get_field_FULL() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "FULL", "field_12803", "FULL", "f_315432_"), "Ldvz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.chunk.ChunkStatus#FULL
    [[maybe_unused]] static void set_field_FULL(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "FULL", "field_12803", "FULL", "f_315432_"), "Ldvz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.ChunkStatus#index
    static jint get_field_index(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "index", "field_16646", "index", "f_317089_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.ChunkStatus#index
    static void set_field_index(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "index", "field_16646", "index", "f_317089_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.ChunkStatus#previous
    static jobject get_field_previous(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "parent", "field_16647", "previous", "f_316061_"), "Ldvz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.ChunkStatus#previous
    static void set_field_previous(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "parent", "field_16647", "previous", "f_316061_"), "Ldvz;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.ChunkStatus#chunkType
    static jobject get_field_chunkType(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "chunkType", "field_12787", "chunkType", "f_316704_"), "Ldwd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.ChunkStatus#chunkType
    static void set_field_chunkType(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "chunkType", "field_12787", "chunkType", "f_316704_"), "Ldwd;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.ChunkStatus#heightMapTypes
    static jobject get_field_heightMapTypes(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "heightmapsAfter", "field_12793", "heightMapTypes", "f_317064_"), "Ljava/util/EnumSet;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.ChunkStatus#heightMapTypes
    static void set_field_heightMapTypes(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "heightmapsAfter", "field_12793", "heightMapTypes", "f_317064_"), "Ljava/util/EnumSet;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_register() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "register", "method_60546", "register", "m_324712_"), "(Ljava/lang/String;Ldvz;Ljava/util/EnumSet;Ldwd;)Ldvz;");
    }

    static jobject register(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_register();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_createOrderedList() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getStatusList", "method_16558", "createOrderedList", "m_323667_"), "()Ljava/util/List;");
    }

    static jobject createOrderedList() {
       const auto clazz = self();
       const auto methodID = methodID_createOrderedList();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_getIndex() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getIndex", "method_16559", "getIndex", "m_323297_"), "()I");
    }

    static jint getIndex(const jobject& obj) {
                
       const auto methodID = methodID_getIndex();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getPrevious() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getParent", "method_16560", "getPrevious", "m_322072_"), "()Ldvz;");
    }

    static jobject getPrevious(const jobject& obj) {
                
       const auto methodID = methodID_getPrevious();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getChunkType() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getChunkType", "method_12164", "getChunkType", "m_321717_"), "()Ldwd;");
    }

    static jobject getChunkType(const jobject& obj) {
                
       const auto methodID = methodID_getChunkType();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_byId() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "byName", "method_12168", "byId", "m_322436_"), "(Ljava/lang/String;)Ldvz;");
    }

    static jobject byId(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_byId();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getHeightmapTypes() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "heightmapsAfter", "method_12160", "getHeightmapTypes", "m_324137_"), "()Ljava/util/EnumSet;");
    }

    static jobject getHeightmapTypes(const jobject& obj) {
                
       const auto methodID = methodID_getHeightmapTypes();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_isAtLeast() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isOrAfter", "method_12165", "isAtLeast", "m_319325_"), "(Ldvz;)Z");
    }

    static jboolean isAtLeast(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isAtLeast();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isLaterThan() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "isAfter", "method_60547", "isLaterThan", "m_339986_"), "(Ldvz;)Z");
    }

    static jboolean isLaterThan(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isLaterThan();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isAtMost() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "isOrBefore", "method_60548", "isAtMost", "m_340517_"), "(Ldvz;)Z");
    }

    static jboolean isAtMost(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isAtMost();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isEarlierThan() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "isBefore", "method_60549", "isEarlierThan", "m_340167_"), "(Ldvz;)Z");
    }

    static jboolean isEarlierThan(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isEarlierThan();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_max() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "max", "method_60545", "max", "m_339614_"), "(Ldvz;Ldvz;)Ldvz;");
    }

    static jobject max(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_max();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getId() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "getName", "method_60550", "getId", "m_339742_"), "()Ljava/lang/String;");
    }

    static jobject getId(const jobject& obj) {
                
       const auto methodID = methodID_getId();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_WORLD_CHUNK_CHUNKSTATUS_HPP