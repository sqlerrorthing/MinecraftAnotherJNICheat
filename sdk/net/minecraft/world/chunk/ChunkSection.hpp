// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_CHUNK_CHUNKSECTION_HPP
#define NET_MINECRAFT_WORLD_CHUNK_CHUNKSECTION_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.chunk.ChunkSection
 * Remapped: dvj
 */
namespace ChunkSection {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dvj", "net/minecraft/world/level/chunk/LevelChunkSection", "net/minecraft/class_2826", "net/minecraft/world/chunk/ChunkSection", "net/minecraft/src/C_2139_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.world.chunk.ChunkSection#field_31406
    [[maybe_unused]] static jint get_field_field_31406() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "SECTION_WIDTH", "field_31406", "field_31406", "f_156455_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.chunk.ChunkSection#field_31406
    [[maybe_unused]] static void set_field_field_31406(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "SECTION_WIDTH", "field_31406", "field_31406", "f_156455_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.chunk.ChunkSection#field_31407
    [[maybe_unused]] static jint get_field_field_31407() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "SECTION_HEIGHT", "field_31407", "field_31407", "f_156456_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.chunk.ChunkSection#field_31407
    [[maybe_unused]] static void set_field_field_31407(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "SECTION_HEIGHT", "field_31407", "field_31407", "f_156456_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.chunk.ChunkSection#field_31408
    [[maybe_unused]] static jint get_field_field_31408() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "SECTION_SIZE", "field_31408", "field_31408", "f_156457_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.chunk.ChunkSection#field_31408
    [[maybe_unused]] static void set_field_field_31408(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "SECTION_SIZE", "field_31408", "field_31408", "f_156457_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.chunk.ChunkSection#field_34555
    [[maybe_unused]] static jint get_field_field_34555() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "BIOME_CONTAINER_BITS", "field_34555", "field_34555", "f_187994_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.chunk.ChunkSection#field_34555
    [[maybe_unused]] static void set_field_field_34555(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "BIOME_CONTAINER_BITS", "field_34555", "field_34555", "f_187994_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.ChunkSection#nonEmptyBlockCount
    static jshort get_field_nonEmptyBlockCount(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "nonEmptyBlockCount", "field_12877", "nonEmptyBlockCount", "f_62969_"), "S");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetShortField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.ChunkSection#nonEmptyBlockCount
    static void set_field_nonEmptyBlockCount(const jobject &obj, const jshort &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "nonEmptyBlockCount", "field_12877", "nonEmptyBlockCount", "f_62969_"), "S");
        return MinecraftSDK::env->SetShortField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.ChunkSection#randomTickableBlockCount
    static jshort get_field_randomTickableBlockCount(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "tickingBlockCount", "field_12882", "randomTickableBlockCount", "f_62970_"), "S");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetShortField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.ChunkSection#randomTickableBlockCount
    static void set_field_randomTickableBlockCount(const jobject &obj, const jshort &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "tickingBlockCount", "field_12882", "randomTickableBlockCount", "f_62970_"), "S");
        return MinecraftSDK::env->SetShortField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.ChunkSection#nonEmptyFluidCount
    static jshort get_field_nonEmptyFluidCount(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "tickingFluidCount", "field_12881", "nonEmptyFluidCount", "f_62971_"), "S");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetShortField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.ChunkSection#nonEmptyFluidCount
    static void set_field_nonEmptyFluidCount(const jobject &obj, const jshort &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "tickingFluidCount", "field_12881", "nonEmptyFluidCount", "f_62971_"), "S");
        return MinecraftSDK::env->SetShortField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.ChunkSection#blockStateContainer
    static jobject get_field_blockStateContainer(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "states", "field_12878", "blockStateContainer", "f_62972_"), "Ldvq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.ChunkSection#blockStateContainer
    static void set_field_blockStateContainer(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "states", "field_12878", "blockStateContainer", "f_62972_"), "Ldvq;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.ChunkSection#biomeContainer
    static jobject get_field_biomeContainer(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "biomes", "field_34556", "biomeContainer", "f_187995_"), "Ldvr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.ChunkSection#biomeContainer
    static void set_field_biomeContainer(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "biomes", "field_34556", "biomeContainer", "f_187995_"), "Ldvr;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_getBlockState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getBlockState", "method_12254", "getBlockState", "m_62982_"), "(III)Ldtc;");
    }

    static jobject getBlockState(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_getBlockState();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getFluidState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getFluidState", "method_12255", "getFluidState", "m_63007_"), "(III)Lepe;");
    }

    static jobject getFluidState(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_getFluidState();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_lock() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "acquire", "method_16676", "lock", "m_62981_"), "()V");
    }

    static void lock(const jobject& obj) {
                
       const auto methodID = methodID_lock();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_unlock() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "release", "method_16677", "unlock", "m_63006_"), "()V");
    }

    static void unlock(const jobject& obj) {
                
       const auto methodID = methodID_unlock();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_setBlockState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setBlockState", "method_16675", "setBlockState", "m_62986_"), "(IIILdtc;)Ldtc;");
    }

    static jobject setBlockState(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_setBlockState();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID__setBlockState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setBlockState", "method_12256", "setBlockState", "m_62991_"), "(IIILdtc;Z)Ldtc;");
    }

    static jobject _setBlockState(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2, const jobject& arg3, const jboolean& arg4) {
                
       const auto methodID = methodID__setBlockState();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_isEmpty() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "hasOnlyAir", "method_38292", "isEmpty", "m_188008_"), "()Z");
    }

    static jboolean isEmpty(const jobject& obj) {
                
       const auto methodID = methodID_isEmpty();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasRandomTicks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "isRandomlyTicking", "method_12262", "hasRandomTicks", "m_63014_"), "()Z");
    }

    static jboolean hasRandomTicks(const jobject& obj) {
                
       const auto methodID = methodID_hasRandomTicks();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasRandomBlockTicks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "isRandomlyTickingBlocks", "method_12263", "hasRandomBlockTicks", "m_63015_"), "()Z");
    }

    static jboolean hasRandomBlockTicks(const jobject& obj) {
                
       const auto methodID = methodID_hasRandomBlockTicks();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasRandomFluidTicks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "isRandomlyTickingFluids", "method_12264", "hasRandomFluidTicks", "m_63016_"), "()Z");
    }

    static jboolean hasRandomFluidTicks(const jobject& obj) {
                
       const auto methodID = methodID_hasRandomFluidTicks();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_calculateCounts() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "recalcBlockCounts", "method_12253", "calculateCounts", "m_63018_"), "()V");
    }

    static void calculateCounts(const jobject& obj) {
                
       const auto methodID = methodID_calculateCounts();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getBlockStateContainer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "getStates", "method_12265", "getBlockStateContainer", "m_63019_"), "()Ldvq;");
    }

    static jobject getBlockStateContainer(const jobject& obj) {
                
       const auto methodID = methodID_getBlockStateContainer();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getBiomeContainer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "getBiomes", "method_38294", "getBiomeContainer", "m_187996_"), "()Ldvr;");
    }

    static jobject getBiomeContainer(const jobject& obj) {
                
       const auto methodID = methodID_getBiomeContainer();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_readDataPacket() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "read", "method_12258", "readDataPacket", "m_63004_"), "(Lvw;)V");
    }

    static void readDataPacket(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_readDataPacket();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_readBiomePacket() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "readBiomes", "method_49526", "readBiomePacket", "m_274599_"), "(Lvw;)V");
    }

    static void readBiomePacket(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_readBiomePacket();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_toPacket() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "write", "method_12257", "toPacket", "m_63011_"), "(Lvw;)V");
    }

    static void toPacket(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_toPacket();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getPacketSize() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "getSerializedSize", "method_12260", "getPacketSize", "m_63020_"), "()I");
    }

    static jint getPacketSize(const jobject& obj) {
                
       const auto methodID = methodID_getPacketSize();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasAny() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "maybeHas", "method_19523", "hasAny", "m_63002_"), "(Ljava/util/function/Predicate;)Z");
    }

    static jboolean hasAny(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_hasAny();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getBiome() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getNoiseBiome", "method_38293", "getBiome", "m_204433_"), "(III)Ljm;");
    }

    static jobject getBiome(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_getBiome();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_populateBiomes() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "fillBiomesFromNoise", "method_38291", "populateBiomes", "m_280631_"), "(Lddz;Ldef$f;III)V");
    }

    static void populateBiomes(const jobject& obj, const jobject& arg0, const jobject& arg1, const jint& arg2, const jint& arg3, const jint& arg4) {
                
       const auto methodID = methodID_populateBiomes();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
};

#endif // NET_MINECRAFT_WORLD_CHUNK_CHUNKSECTION_HPP