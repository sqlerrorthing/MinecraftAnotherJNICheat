// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_CHUNK_UPGRADEDATA_HPP
#define NET_MINECRAFT_WORLD_CHUNK_UPGRADEDATA_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.chunk.UpgradeData
 * Remapped: dvv
 */
namespace UpgradeData {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dvv", "net/minecraft/world/level/chunk/UpgradeData", "net/minecraft/class_2843", "net/minecraft/world/chunk/UpgradeData", "net/minecraft/src/C_2149_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.world.chunk.UpgradeData#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "LOGGER", "field_12956", "LOGGER", "f_63321_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.UpgradeData#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "LOGGER", "field_12956", "LOGGER", "f_63321_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.chunk.UpgradeData#NO_UPGRADE_DATA
    [[maybe_unused]] static jobject get_field_NO_UPGRADE_DATA() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "EMPTY", "field_12950", "NO_UPGRADE_DATA", "f_63320_"), "Ldvv;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.chunk.UpgradeData#NO_UPGRADE_DATA
    [[maybe_unused]] static void set_field_NO_UPGRADE_DATA(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "EMPTY", "field_12950", "NO_UPGRADE_DATA", "f_63320_"), "Ldvv;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.chunk.UpgradeData#INDICES_KEY
    [[maybe_unused]] static jobject get_field_INDICES_KEY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "TAG_INDICES", "field_31412", "INDICES_KEY", "f_156504_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.UpgradeData#INDICES_KEY
    [[maybe_unused]] static void set_field_INDICES_KEY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "TAG_INDICES", "field_31412", "INDICES_KEY", "f_156504_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.chunk.UpgradeData#EIGHT_WAYS
    [[maybe_unused]] static jobject get_field_EIGHT_WAYS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "DIRECTIONS", "field_12952", "EIGHT_WAYS", "f_63322_"), "[Ljj;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.UpgradeData#EIGHT_WAYS
    [[maybe_unused]] static void set_field_EIGHT_WAYS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "DIRECTIONS", "field_12952", "EIGHT_WAYS", "f_63322_"), "[Ljj;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.UpgradeData#sidesToUpgrade
    static jobject get_field_sidesToUpgrade(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "sides", "field_12951", "sidesToUpgrade", "f_63323_"), "Ljava/util/EnumSet;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.UpgradeData#sidesToUpgrade
    static void set_field_sidesToUpgrade(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "sides", "field_12951", "sidesToUpgrade", "f_63323_"), "Ljava/util/EnumSet;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.UpgradeData#blockTicks
    static jobject get_field_blockTicks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "neighborBlockTicks", "field_36538", "blockTicks", "f_208118_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.UpgradeData#blockTicks
    static void set_field_blockTicks(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "neighborBlockTicks", "field_36538", "blockTicks", "f_208118_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.UpgradeData#fluidTicks
    static jobject get_field_fluidTicks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "neighborFluidTicks", "field_36539", "fluidTicks", "f_208119_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.UpgradeData#fluidTicks
    static void set_field_fluidTicks(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "neighborFluidTicks", "field_36539", "fluidTicks", "f_208119_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.UpgradeData#centerIndicesToUpgrade
    static jint get_field_centerIndicesToUpgrade(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "index", "field_12955", "centerIndicesToUpgrade", "f_63324_"), "[[I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.UpgradeData#centerIndicesToUpgrade
    static void set_field_centerIndicesToUpgrade(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "index", "field_12955", "centerIndicesToUpgrade", "f_63324_"), "[[I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for static default field net.minecraft.world.chunk.UpgradeData#BLOCK_TO_LOGIC
    [[maybe_unused]] static jobject get_field_BLOCK_TO_LOGIC() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "MAP", "field_12953", "BLOCK_TO_LOGIC", "f_63325_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.world.chunk.UpgradeData#BLOCK_TO_LOGIC
    [[maybe_unused]] static void set_field_BLOCK_TO_LOGIC(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "MAP", "field_12953", "BLOCK_TO_LOGIC", "f_63325_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.world.chunk.UpgradeData#CALLBACK_LOGICS
    [[maybe_unused]] static jobject get_field_CALLBACK_LOGICS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "CHUNKY_FIXERS", "field_12954", "CALLBACK_LOGICS", "f_63326_"), "Ljava/util/Set;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.world.chunk.UpgradeData#CALLBACK_LOGICS
    [[maybe_unused]] static void set_field_CALLBACK_LOGICS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "CHUNKY_FIXERS", "field_12954", "CALLBACK_LOGICS", "f_63326_"), "Ljava/util/Set;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_addNeighborTicks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "loadTicks", "method_40456", "addNeighborTicks", "m_208132_"), "(Lub;Ljava/lang/String;Ljava/util/function/Function;Ljava/util/List;)V");
    }

    static void addNeighborTicks(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_addNeighborTicks();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_upgrade() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "upgrade", "method_12356", "upgrade", "m_63341_"), "(Ldvi;)V");
    }

    static void upgrade(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_upgrade();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_upgradeSide() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "upgradeSides", "method_12352", "upgradeSide", "m_63343_"), "(Ldvi;Ljj;)V");
    }

    static void upgradeSide(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_upgradeSide();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_applyAdjacentBlock() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "updateState", "method_12351", "applyAdjacentBlock", "m_63335_"), "(Ldtc;Lji;Ldcx;Ljd;Ljd;)Ldtc;");
    }

    static jobject applyAdjacentBlock(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4) {
       const auto clazz = self();
       const auto methodID = methodID_applyAdjacentBlock();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_upgradeCenter() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "upgradeInside", "method_12348", "upgradeCenter", "m_63347_"), "(Ldvi;)V");
    }

    static void upgradeCenter(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_upgradeCenter();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isDone() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isEmpty", "method_12349", "isDone", "m_63331_"), "()Z");
    }

    static jboolean isDone(const jobject& obj) {
                
       const auto methodID = methodID_isDone();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_toNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "write", "method_12350", "toNbt", "m_63346_"), "()Lub;");
    }

    static jobject toNbt(const jobject& obj) {
                
       const auto methodID = methodID_toNbt();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_WORLD_CHUNK_UPGRADEDATA_HPP