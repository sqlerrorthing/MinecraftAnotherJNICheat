// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_CHUNK_CHUNKLOADER_HPP
#define NET_MINECRAFT_WORLD_CHUNK_CHUNKLOADER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.chunk.ChunkLoader
 * Remapped: apy
 */
namespace ChunkLoader {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("apy", "net/minecraft/server/level/ChunkGenerationTask", "net/minecraft/class_9759", "net/minecraft/world/chunk/ChunkLoader", "net/minecraft/src/C_336542_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.world.chunk.ChunkLoader#chunkLoadingManager
    static jobject get_field_chunkLoadingManager(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "chunkMap", "field_51851", "chunkLoadingManager", "f_337096_"), "Laqm;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.ChunkLoader#chunkLoadingManager
    static void set_field_chunkLoadingManager(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "chunkMap", "field_51851", "chunkLoadingManager", "f_337096_"), "Laqm;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.ChunkLoader#pos
    static jobject get_field_pos(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "pos", "field_51852", "pos", "f_337169_"), "Ldcd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.ChunkLoader#pos
    static void set_field_pos(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "pos", "field_51852", "pos", "f_337169_"), "Ldcd;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.ChunkLoader#currentlyLoadingStatus
    static jobject get_field_currentlyLoadingStatus(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "scheduledStatus", "field_51853", "currentlyLoadingStatus", "f_336986_"), "Ldvz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.ChunkLoader#currentlyLoadingStatus
    static void set_field_currentlyLoadingStatus(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "scheduledStatus", "field_51853", "currentlyLoadingStatus", "f_336986_"), "Ldvz;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.world.chunk.ChunkLoader#targetStatus
    static jobject get_field_targetStatus(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "targetStatus", "field_51850", "targetStatus", "f_337141_"), "Ldvz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static public field net.minecraft.world.chunk.ChunkLoader#targetStatus
    static void set_field_targetStatus(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "targetStatus", "field_51850", "targetStatus", "f_337141_"), "Ldvz;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.ChunkLoader#pendingDisposal
    static jboolean get_field_pendingDisposal(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "markedForCancellation", "field_51854", "pendingDisposal", "f_336853_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.ChunkLoader#pendingDisposal
    static void set_field_pendingDisposal(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "markedForCancellation", "field_51854", "pendingDisposal", "f_336853_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.ChunkLoader#futures
    static jobject get_field_futures(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "scheduledLayer", "field_51855", "futures", "f_337420_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.ChunkLoader#futures
    static void set_field_futures(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "scheduledLayer", "field_51855", "futures", "f_337420_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.ChunkLoader#chunks
    static jobject get_field_chunks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "cache", "field_51856", "chunks", "f_337137_"), "Lazi;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.ChunkLoader#chunks
    static void set_field_chunks(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "cache", "field_51856", "chunks", "f_337137_"), "Lazi;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.ChunkLoader#allowGeneration
    static jboolean get_field_allowGeneration(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "needsGeneration", "field_51857", "allowGeneration", "f_337333_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.ChunkLoader#allowGeneration
    static void set_field_allowGeneration(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "needsGeneration", "field_51857", "allowGeneration", "f_337333_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    static jmethodID methodID_create() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "create", "method_60426", "create", "m_339931_"), "(Laqm;Ldvz;Ldcd;)Lapy;");
    }

    static jobject create(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_create();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_run() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "runUntilWait", "method_60424", "run", "m_340381_"), "()Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject run(const jobject& obj) {
                
       const auto methodID = methodID_run();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_loadNextStatus() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "scheduleNextLayer", "method_60432", "loadNextStatus", "m_339326_"), "()V");
    }

    static void loadNextStatus(const jobject& obj) {
                
       const auto methodID = methodID_loadNextStatus();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_markPendingDisposal() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "markForCancellation", "method_60429", "markPendingDisposal", "m_339480_"), "()V");
    }

    static void markPendingDisposal(const jobject& obj) {
                
       const auto methodID = methodID_markPendingDisposal();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_dispose() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "releaseClaim", "method_60433", "dispose", "m_340204_"), "()V");
    }

    static void dispose(const jobject& obj) {
                
       const auto methodID = methodID_dispose();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_isGenerationUnnecessary() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "canLoadWithoutGeneration", "method_60434", "isGenerationUnnecessary", "m_339361_"), "()Z");
    }

    static jboolean isGenerationUnnecessary(const jobject& obj) {
                
       const auto methodID = methodID_isGenerationUnnecessary();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getHolder() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getCenter", "method_60431", "getHolder", "m_340452_"), "()Laqn;");
    }

    static jobject getHolder(const jobject& obj) {
                
       const auto methodID = methodID_getHolder();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_loadAll() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "scheduleLayer", "method_60427", "loadAll", "m_339141_"), "(Ldvz;Z)V");
    }

    static void loadAll(const jobject& obj, const jobject& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_loadAll();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getAdditionalLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getRadiusForLayer", "method_60430", "getAdditionalLevel", "m_339492_"), "(Ldvz;Z)I");
    }

    static jint getAdditionalLevel(const jobject& obj, const jobject& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_getAdditionalLevel();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_load() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "scheduleChunkInLayer", "method_60428", "load", "m_338763_"), "(Ldvz;ZLaqn;)Z");
    }

    static jboolean load(const jobject& obj, const jobject& arg0, const jboolean& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_load();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getLatestPendingFuture() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "waitForScheduledLayer", "method_60435", "getLatestPendingFuture", "m_339254_"), "()Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject getLatestPendingFuture(const jobject& obj) {
                
       const auto methodID = methodID_getLatestPendingFuture();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_WORLD_CHUNK_CHUNKLOADER_HPP