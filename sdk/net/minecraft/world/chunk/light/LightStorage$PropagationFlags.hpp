// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_CHUNK_LIGHT_LIGHTSTORAGE$PROPAGATIONFLAGS_HPP
#define NET_MINECRAFT_WORLD_CHUNK_LIGHT_LIGHTSTORAGE$PROPAGATIONFLAGS_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.chunk.light.LightStorage$PropagationFlags
 * Remapped: eos$a
 */
namespace LightStorage$PropagationFlags {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("eos$a", "net/minecraft/world/level/lighting/LayerLightSectionStorage$SectionState", "net/minecraft/class_3560$class_8529", "net/minecraft/world/chunk/light/LightStorage$PropagationFlags", "net/minecraft/src/C_2679_$C_283727_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.world.chunk.light.LightStorage$PropagationFlags#field_44719
    [[maybe_unused]] static jbyte get_field_field_44719() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "EMPTY", "field_44719", "field_44719", "f_283943_"), "B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticByteField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.chunk.light.LightStorage$PropagationFlags#field_44719
    [[maybe_unused]] static void set_field_field_44719(const jbyte &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "EMPTY", "field_44719", "field_44719", "f_283943_"), "B");
        return MinecraftSDK::env->SetStaticByteField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.chunk.light.LightStorage$PropagationFlags#MIN_NEIGHBOR_COUNT
    [[maybe_unused]] static jint get_field_MIN_NEIGHBOR_COUNT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "MIN_NEIGHBORS", "field_44720", "MIN_NEIGHBOR_COUNT", "f_283742_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.light.LightStorage$PropagationFlags#MIN_NEIGHBOR_COUNT
    [[maybe_unused]] static void set_field_MIN_NEIGHBOR_COUNT(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "MIN_NEIGHBORS", "field_44720", "MIN_NEIGHBOR_COUNT", "f_283742_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.chunk.light.LightStorage$PropagationFlags#MAX_NEIGHBOR_COUNT
    [[maybe_unused]] static jint get_field_MAX_NEIGHBOR_COUNT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "MAX_NEIGHBORS", "field_44721", "MAX_NEIGHBOR_COUNT", "f_283815_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.light.LightStorage$PropagationFlags#MAX_NEIGHBOR_COUNT
    [[maybe_unused]] static void set_field_MAX_NEIGHBOR_COUNT(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "MAX_NEIGHBORS", "field_44721", "MAX_NEIGHBOR_COUNT", "f_283815_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.chunk.light.LightStorage$PropagationFlags#field_44722
    [[maybe_unused]] static jbyte get_field_field_44722() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "HAS_DATA_BIT", "field_44722", "field_44722", "f_283868_"), "B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticByteField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.light.LightStorage$PropagationFlags#field_44722
    [[maybe_unused]] static void set_field_field_44722(const jbyte &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "HAS_DATA_BIT", "field_44722", "field_44722", "f_283868_"), "B");
        return MinecraftSDK::env->SetStaticByteField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.chunk.light.LightStorage$PropagationFlags#NEIGHBOR_COUNT_MASK
    [[maybe_unused]] static jbyte get_field_NEIGHBOR_COUNT_MASK() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "NEIGHBOR_COUNT_BITS", "field_44723", "NEIGHBOR_COUNT_MASK", "f_283852_"), "B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticByteField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.light.LightStorage$PropagationFlags#NEIGHBOR_COUNT_MASK
    [[maybe_unused]] static void set_field_NEIGHBOR_COUNT_MASK(const jbyte &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "NEIGHBOR_COUNT_BITS", "field_44723", "NEIGHBOR_COUNT_MASK", "f_283852_"), "B");
        return MinecraftSDK::env->SetStaticByteField(clazz, fieldID, value);
    };

    static jmethodID methodID_setReady() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "hasData", "method_51554", "setReady", "m_284365_"), "(BZ)B");
    }

    static jbyte setReady(const jbyte& arg0, const jboolean& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_setReady();
       return MinecraftSDK::env->CallStaticByteMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_withNeighborCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "neighborCount", "method_51553", "withNeighborCount", "m_284236_"), "(BI)B");
    }

    static jbyte withNeighborCount(const jbyte& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_withNeighborCount();
       return MinecraftSDK::env->CallStaticByteMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isReady() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "hasData", "method_51552", "isReady", "m_284490_"), "(B)Z");
    }

    static jboolean isReady(const jbyte& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_isReady();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getNeighborCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "neighborCount", "method_51555", "getNeighborCount", "m_284522_"), "(B)I");
    }

    static jint getNeighborCount(const jbyte& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getNeighborCount();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getStatus() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "type", "method_51556", "getStatus", "m_284376_"), "(B)Leos$b;");
    }

    static jobject getStatus(const jbyte& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getStatus();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_WORLD_CHUNK_LIGHT_LIGHTSTORAGE$PROPAGATIONFLAGS_HPP