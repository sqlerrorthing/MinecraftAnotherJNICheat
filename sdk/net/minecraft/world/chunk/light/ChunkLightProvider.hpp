// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_CHUNK_LIGHT_CHUNKLIGHTPROVIDER_HPP
#define NET_MINECRAFT_WORLD_CHUNK_LIGHT_CHUNKLIGHTPROVIDER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.chunk.light.ChunkLightProvider
 * Remapped: eov
 */
namespace ChunkLightProvider {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("eov", "net/minecraft/world/level/lighting/LightEngine", "net/minecraft/class_3558", "net/minecraft/world/chunk/light/ChunkLightProvider", "net/minecraft/src/C_283721_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.world.chunk.light.ChunkLightProvider#field_44729
    [[maybe_unused]] static jint get_field_field_44729() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "MAX_LEVEL", "field_44729", "field_44729", "f_283746_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.chunk.light.ChunkLightProvider#field_44729
    [[maybe_unused]] static void set_field_field_44729(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "MAX_LEVEL", "field_44729", "field_44729", "f_283746_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static protected field net.minecraft.world.chunk.light.ChunkLightProvider#field_44730
    [[maybe_unused]] static jint get_field_field_44730() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "MIN_OPACITY", "field_44730", "field_44730", "f_283739_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static protected field net.minecraft.world.chunk.light.ChunkLightProvider#field_44730
    [[maybe_unused]] static void set_field_field_44730(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "MIN_OPACITY", "field_44730", "field_44730", "f_283739_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static protected field net.minecraft.world.chunk.light.ChunkLightProvider#field_44731
    [[maybe_unused]] static jlong get_field_field_44731() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "PULL_LIGHT_IN_ENTRY", "field_44731", "field_44731", "f_283854_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticLongField(clazz, fieldID);
    };

    // setter for static protected field net.minecraft.world.chunk.light.ChunkLightProvider#field_44731
    [[maybe_unused]] static void set_field_field_44731(const jlong &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "PULL_LIGHT_IN_ENTRY", "field_44731", "field_44731", "f_283854_"), "J");
        return MinecraftSDK::env->SetStaticLongField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.chunk.light.ChunkLightProvider#field_44732
    [[maybe_unused]] static jint get_field_field_44732() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "MIN_QUEUE_SIZE", "field_44732", "field_44732", "f_283747_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.light.ChunkLightProvider#field_44732
    [[maybe_unused]] static void set_field_field_44732(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "MIN_QUEUE_SIZE", "field_44732", "field_44732", "f_283747_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static protected field net.minecraft.world.chunk.light.ChunkLightProvider#DIRECTIONS
    [[maybe_unused]] static jobject get_field_DIRECTIONS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "PROPAGATION_DIRECTIONS", "field_16513", "DIRECTIONS", "f_283814_"), "[Lji;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static protected field net.minecraft.world.chunk.light.ChunkLightProvider#DIRECTIONS
    [[maybe_unused]] static void set_field_DIRECTIONS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "PROPAGATION_DIRECTIONS", "field_16513", "DIRECTIONS", "f_283814_"), "[Lji;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for protected field net.minecraft.world.chunk.light.ChunkLightProvider#chunkProvider
    static jobject get_field_chunkProvider(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "chunkSource", "field_15795", "chunkProvider", "f_283884_"), "Ldvl;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.world.chunk.light.ChunkLightProvider#chunkProvider
    static void set_field_chunkProvider(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "chunkSource", "field_15795", "chunkProvider", "f_283884_"), "Ldvl;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.world.chunk.light.ChunkLightProvider#lightStorage
    static jobject get_field_lightStorage(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "storage", "field_15793", "lightStorage", "f_283849_"), "Leos;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.world.chunk.light.ChunkLightProvider#lightStorage
    static void set_field_lightStorage(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "storage", "field_15793", "lightStorage", "f_283849_"), "Leos;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.light.ChunkLightProvider#blockPositionsToCheck
    static jobject get_field_blockPositionsToCheck(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "blockNodesToCheck", "field_44733", "blockPositionsToCheck", "f_283863_"), "Lit/unimi/dsi/fastutil/longs/LongOpenHashSet;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.light.ChunkLightProvider#blockPositionsToCheck
    static void set_field_blockPositionsToCheck(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "blockNodesToCheck", "field_44733", "blockPositionsToCheck", "f_283863_"), "Lit/unimi/dsi/fastutil/longs/LongOpenHashSet;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.light.ChunkLightProvider#field_44734
    static jobject get_field_field_44734(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "decreaseQueue", "field_44734", "field_44734", "f_283823_"), "Lit/unimi/dsi/fastutil/longs/LongArrayFIFOQueue;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.light.ChunkLightProvider#field_44734
    static void set_field_field_44734(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "decreaseQueue", "field_44734", "field_44734", "f_283823_"), "Lit/unimi/dsi/fastutil/longs/LongArrayFIFOQueue;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.light.ChunkLightProvider#field_44735
    static jobject get_field_field_44735(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "increaseQueue", "field_44735", "field_44735", "f_283934_"), "Lit/unimi/dsi/fastutil/longs/LongArrayFIFOQueue;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.light.ChunkLightProvider#field_44735
    static void set_field_field_44735(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "increaseQueue", "field_44735", "field_44735", "f_283934_"), "Lit/unimi/dsi/fastutil/longs/LongArrayFIFOQueue;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.light.ChunkLightProvider#reusableBlockPos
    static jobject get_field_reusableBlockPos(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "mutablePos", "field_19284", "reusableBlockPos", "f_283920_"), "Ljd$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.light.ChunkLightProvider#reusableBlockPos
    static void set_field_reusableBlockPos(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "mutablePos", "field_19284", "reusableBlockPos", "f_283920_"), "Ljd$a;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for static private field net.minecraft.world.chunk.light.ChunkLightProvider#field_31709
    [[maybe_unused]] static jint get_field_field_31709() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "CACHE_SIZE", "field_31709", "field_31709", "f_283860_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.light.ChunkLightProvider#field_31709
    [[maybe_unused]] static void set_field_field_31709(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "CACHE_SIZE", "field_31709", "field_31709", "f_283860_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.light.ChunkLightProvider#cachedChunkPositions
    static jlong get_field_cachedChunkPositions(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "lastChunkPos", "field_17397", "cachedChunkPositions", "f_283833_"), "[J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.light.ChunkLightProvider#cachedChunkPositions
    static void set_field_cachedChunkPositions(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "lastChunkPos", "field_17397", "cachedChunkPositions", "f_283833_"), "[J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.light.ChunkLightProvider#cachedChunks
    static jobject get_field_cachedChunks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "lastChunk", "field_17398", "cachedChunks", "f_283888_"), "[Ldvk;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.light.ChunkLightProvider#cachedChunks
    static void set_field_cachedChunks(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "lastChunk", "field_17398", "cachedChunks", "f_283888_"), "[Ldvk;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_needsLightUpdate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "hasDifferentLightProperties", "method_51561", "needsLightUpdate", "m_284387_"), "(Ldcc;Ljd;Ldtc;Ldtc;)Z");
    }

    static jboolean needsLightUpdate(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_needsLightUpdate();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_getRealisticOpacity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getLightBlockInto", "method_20049", "getRealisticOpacity", "m_284282_"), "(Ldcc;Ldtc;Ljd;Ldtc;Ljd;Lji;I)I");
    }

    static jint getRealisticOpacity(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4, const jobject& arg5, const jint& arg6) {
       const auto clazz = self();
       const auto methodID = methodID_getRealisticOpacity();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    };
    
    static jmethodID methodID_getOpaqueShape() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getOcclusionShape", "method_51562", "getOpaqueShape", "m_284189_"), "(Ldcc;Ljd;Ldtc;Lji;)Lexv;");
    }

    static jobject getOpaqueShape(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_getOpaqueShape();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_isTrivialForLighting() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "isEmptyShape", "method_51563", "isTrivialForLighting", "m_284265_"), "(Ldtc;)Z");
    }

    static jboolean isTrivialForLighting(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_isTrivialForLighting();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getStateForLighting() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getState", "method_50018", "getStateForLighting", "m_284512_"), "(Ljd;)Ldtc;");
    }

    static jobject getStateForLighting(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getStateForLighting();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getOpacity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getOpacity", "method_50017", "getOpacity", "m_284404_"), "(Ldtc;Ljd;)I");
    }

    static jint getOpacity(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_getOpacity();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_shapesCoverFullCube() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "shapeOccludes", "method_50016", "shapesCoverFullCube", "m_284187_"), "(JLdtc;JLdtc;Lji;)Z");
    }

    static jboolean shapesCoverFullCube(const jobject& obj, const jlong& arg0, const jobject& arg1, const jlong& arg2, const jobject& arg3, const jobject& arg4) {
                
       const auto methodID = methodID_shapesCoverFullCube();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID__getOpaqueShape() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getOcclusionShape", "method_20710", "getOpaqueShape", "m_284428_"), "(Ldtc;JLji;)Lexv;");
    }

    static jobject _getOpaqueShape(const jobject& obj, const jobject& arg0, const jlong& arg1, const jobject& arg2) {
                
       const auto methodID = methodID__getOpaqueShape();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getChunk() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getChunk", "method_17529", "getChunk", "m_284303_"), "(II)Ldvk;");
    }

    static jobject getChunk(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_getChunk();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_clearChunkCache() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "clearChunkCache", "method_17530", "clearChunkCache", "m_284550_"), "()V");
    }

    static void clearChunkCache(const jobject& obj) {
                
       const auto methodID = methodID_clearChunkCache();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_checkBlock() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "checkBlock", "method_15513", "checkBlock", "m_7174_"), "(Ljd;)V");
    }

    static void checkBlock(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_checkBlock();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_enqueueSectionData() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "queueSectionData", "method_15515", "enqueueSectionData", "m_284203_"), "(JLdvd;)V");
    }

    static void enqueueSectionData(const jobject& obj, const jlong& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_enqueueSectionData();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_setRetainColumn() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "retainData", "method_20599", "setRetainColumn", "m_284245_"), "(Ldcd;Z)V");
    }

    static void setRetainColumn(const jobject& obj, const jobject& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_setRetainColumn();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_setSectionStatus() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateSectionStatus", "method_15551", "setSectionStatus", "m_6191_"), "(Lkf;Z)V");
    }

    static void setSectionStatus(const jobject& obj, const jobject& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_setSectionStatus();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_setColumnEnabled() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setLightEnabled", "method_15512", "setColumnEnabled", "m_9335_"), "(Ldcd;Z)V");
    }

    static void setColumnEnabled(const jobject& obj, const jobject& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_setColumnEnabled();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_doLightUpdates() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "runLightUpdates", "method_15516", "doLightUpdates", "m_9323_"), "()I");
    }

    static jint doLightUpdates(const jobject& obj) {
                
       const auto methodID = methodID_doLightUpdates();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_method_51567() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "propagateIncreases", "method_51567", "method_51567", "m_284361_"), "()I");
    }

    static jint method_51567(const jobject& obj) {
                
       const auto methodID = methodID_method_51567();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_method_51570() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "propagateDecreases", "method_51570", "method_51570", "m_284399_"), "()I");
    }

    static jint method_51570(const jobject& obj) {
                
       const auto methodID = methodID_method_51570();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_method_51565() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "enqueueDecrease", "method_51565", "method_51565", "m_284343_"), "(JJ)V");
    }

    static void method_51565(const jobject& obj, const jlong& arg0, const jlong& arg1) {
                
       const auto methodID = methodID_method_51565();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_method_51566() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "enqueueIncrease", "method_51566", "method_51566", "m_284218_"), "(JJ)V");
    }

    static void method_51566(const jobject& obj, const jlong& arg0, const jlong& arg1) {
                
       const auto methodID = methodID_method_51566();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_hasUpdates() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("K_", "hasLightWork", "method_15518", "hasUpdates", "m_75808_"), "()Z");
    }

    static jboolean hasUpdates(const jobject& obj) {
                
       const auto methodID = methodID_hasUpdates();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getLightSection() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getDataLayerData", "method_15544", "getLightSection", "m_8079_"), "(Lkf;)Ldvd;");
    }

    static jobject getLightSection(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getLightSection();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getLightLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getLightValue", "method_15543", "getLightLevel", "m_7768_"), "(Ljd;)I");
    }

    static jint getLightLevel(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getLightLevel();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_displaySectionLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getDebugData", "method_22875", "displaySectionLevel", "m_284216_"), "(J)Ljava/lang/String;");
    }

    static jobject displaySectionLevel(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_displaySectionLevel();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getStatus() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getDebugSectionType", "method_51568", "getStatus", "m_284437_"), "(J)Leos$b;");
    }

    static jobject getStatus(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_getStatus();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_method_51529() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "checkNode", "method_51529", "method_51529", "m_75858_"), "(J)V");
    }

    static void method_51529(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_method_51529();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_method_51531() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "propagateIncrease", "method_51531", "method_51531", "m_284316_"), "(JJI)V");
    }

    static void method_51531(const jobject& obj, const jlong& arg0, const jlong& arg1, const jint& arg2) {
                
       const auto methodID = methodID_method_51531();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_method_51530() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "propagateDecrease", "method_51530", "method_51530", "m_284321_"), "(JJ)V");
    }

    static void method_51530(const jobject& obj, const jlong& arg0, const jlong& arg1) {
                
       const auto methodID = methodID_method_51530();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_WORLD_CHUNK_LIGHT_CHUNKLIGHTPROVIDER_HPP