// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_CHUNK_LIGHT_LIGHTSTORAGE_HPP
#define NET_MINECRAFT_WORLD_CHUNK_LIGHT_LIGHTSTORAGE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.chunk.light.LightStorage
 * Remapped: eos
 */
namespace LightStorage {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("eos", "net/minecraft/world/level/lighting/LayerLightSectionStorage", "net/minecraft/class_3560", "net/minecraft/world/chunk/light/LightStorage", "net/minecraft/src/C_2679_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.world.chunk.light.LightStorage#lightType
    static jobject get_field_lightType(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "layer", "field_15805", "lightType", "f_75738_"), "Lddf;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.light.LightStorage#lightType
    static void set_field_lightType(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "layer", "field_15805", "lightType", "f_75738_"), "Lddf;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.world.chunk.light.LightStorage#chunkProvider
    static jobject get_field_chunkProvider(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "chunkSource", "field_15803", "chunkProvider", "f_75739_"), "Ldvl;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.world.chunk.light.LightStorage#chunkProvider
    static void set_field_chunkProvider(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "chunkSource", "field_15803", "chunkProvider", "f_75739_"), "Ldvl;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.world.chunk.light.LightStorage#sectionPropagations
    static jobject get_field_sectionPropagations(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "sectionStates", "field_44716", "sectionPropagations", "f_283872_"), "Lit/unimi/dsi/fastutil/longs/Long2ByteMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.world.chunk.light.LightStorage#sectionPropagations
    static void set_field_sectionPropagations(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "sectionStates", "field_44716", "sectionPropagations", "f_283872_"), "Lit/unimi/dsi/fastutil/longs/Long2ByteMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.light.LightStorage#enabledColumns
    static jobject get_field_enabledColumns(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "columnsWithSources", "field_44718", "enabledColumns", "f_283775_"), "Lit/unimi/dsi/fastutil/longs/LongSet;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.light.LightStorage#enabledColumns
    static void set_field_enabledColumns(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "columnsWithSources", "field_44718", "enabledColumns", "f_283775_"), "Lit/unimi/dsi/fastutil/longs/LongSet;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.world.chunk.light.LightStorage#uncachedStorage
    static jobject get_field_uncachedStorage(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "visibleSectionData", "field_15806", "uncachedStorage", "f_75731_"), "Leop;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.world.chunk.light.LightStorage#uncachedStorage
    static void set_field_uncachedStorage(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "visibleSectionData", "field_15806", "uncachedStorage", "f_75731_"), "Leop;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.world.chunk.light.LightStorage#storage
    static jobject get_field_storage(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "updatingSectionData", "field_15796", "storage", "f_75732_"), "Leop;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.world.chunk.light.LightStorage#storage
    static void set_field_storage(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "updatingSectionData", "field_15796", "storage", "f_75732_"), "Leop;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.world.chunk.light.LightStorage#dirtySections
    static jobject get_field_dirtySections(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "changedSections", "field_15802", "dirtySections", "f_75733_"), "Lit/unimi/dsi/fastutil/longs/LongSet;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.world.chunk.light.LightStorage#dirtySections
    static void set_field_dirtySections(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "changedSections", "field_15802", "dirtySections", "f_75733_"), "Lit/unimi/dsi/fastutil/longs/LongSet;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.world.chunk.light.LightStorage#notifySections
    static jobject get_field_notifySections(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "sectionsAffectedByLightUpdates", "field_16448", "notifySections", "f_75734_"), "Lit/unimi/dsi/fastutil/longs/LongSet;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.world.chunk.light.LightStorage#notifySections
    static void set_field_notifySections(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "sectionsAffectedByLightUpdates", "field_16448", "notifySections", "f_75734_"), "Lit/unimi/dsi/fastutil/longs/LongSet;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.world.chunk.light.LightStorage#queuedSections
    static jobject get_field_queuedSections(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "queuedSections", "field_15807", "queuedSections", "f_75735_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.world.chunk.light.LightStorage#queuedSections
    static void set_field_queuedSections(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "queuedSections", "field_15807", "queuedSections", "f_75735_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.light.LightStorage#columnsToRetain
    static jobject get_field_columnsToRetain(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "columnsToRetainQueuedDataFor", "field_19342", "columnsToRetain", "f_75741_"), "Lit/unimi/dsi/fastutil/longs/LongSet;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.light.LightStorage#columnsToRetain
    static void set_field_columnsToRetain(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "columnsToRetainQueuedDataFor", "field_19342", "columnsToRetain", "f_75741_"), "Lit/unimi/dsi/fastutil/longs/LongSet;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.light.LightStorage#sectionsToRemove
    static jobject get_field_sectionsToRemove(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "toRemove", "field_15798", "sectionsToRemove", "f_75742_"), "Lit/unimi/dsi/fastutil/longs/LongSet;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.light.LightStorage#sectionsToRemove
    static void set_field_sectionsToRemove(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "toRemove", "field_15798", "sectionsToRemove", "f_75742_"), "Lit/unimi/dsi/fastutil/longs/LongSet;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.world.chunk.light.LightStorage#hasLightUpdates
    static jboolean get_field_hasLightUpdates(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "hasInconsistencies", "field_44717", "hasLightUpdates", "f_283847_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.world.chunk.light.LightStorage#hasLightUpdates
    static void set_field_hasLightUpdates(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "hasInconsistencies", "field_44717", "hasLightUpdates", "f_283847_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    static jmethodID methodID_hasSection() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "storingLightForSection", "method_15524", "hasSection", "m_75791_"), "(J)Z");
    }

    static jboolean hasSection(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_hasSection();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getLightSection() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getDataLayer", "method_15522", "getLightSection", "m_75758_"), "(JZ)Ldvd;");
    }

    static jobject getLightSection(const jobject& obj, const jlong& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_getLightSection();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__getLightSection() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getDataLayer", "method_15533", "getLightSection", "m_75761_"), "(Leop;J)Ldvd;");
    }

    static jobject _getLightSection(const jobject& obj, const jobject& arg0, const jlong& arg1) {
                
       const auto methodID = methodID__getLightSection();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_method_51547() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getDataLayerToWrite", "method_51547", "method_51547", "m_284157_"), "(J)Ldvd;");
    }

    static jobject method_51547(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_method_51547();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID___getLightSection() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getDataLayerData", "method_20533", "getLightSection", "m_75793_"), "(J)Ldvd;");
    }

    static jobject __getLightSection(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID___getLightSection();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getLight() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getLightValue", "method_15538", "getLight", "m_6181_"), "(J)I");
    }

    static jint getLight(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_getLight();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_get() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "getStoredLevel", "method_15537", "get", "m_75795_"), "(J)I");
    }

    static jint get(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_get();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_set() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setStoredLevel", "method_15525", "set", "m_75772_"), "(JI)V");
    }

    static void set(const jobject& obj, const jlong& arg0, const jint& arg1) {
                
       const auto methodID = methodID_set();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_addNotifySections() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "markSectionAndNeighborsAsAffected", "method_51415", "addNotifySections", "m_280483_"), "(J)V");
    }

    static void addNotifySections(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_addNotifySections();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_createSection() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "createDataLayer", "method_15529", "createSection", "m_7667_"), "(J)Ldvd;");
    }

    static jobject createSection(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_createSection();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__hasLightUpdates() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "hasInconsistencies", "method_15528", "hasLightUpdates", "m_6808_"), "()Z");
    }

    static jboolean _hasLightUpdates(const jobject& obj) {
                
       const auto methodID = methodID__hasLightUpdates();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_updateLight() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "markNewInconsistencies", "method_15527", "updateLight", "m_284283_"), "(Leov;)V");
    }

    static void updateLight(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_updateLight();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onLoadSection() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "onNodeAdded", "method_15523", "onLoadSection", "m_6177_"), "(J)V");
    }

    static void onLoadSection(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_onLoadSection();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onUnloadSection() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "onNodeRemoved", "method_15534", "onUnloadSection", "m_6187_"), "(J)V");
    }

    static void onUnloadSection(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_onUnloadSection();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setColumnEnabled() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setLightEnabled", "method_15535", "setColumnEnabled", "m_284259_"), "(JZ)V");
    }

    static void setColumnEnabled(const jobject& obj, const jlong& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_setColumnEnabled();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isSectionInEnabledColumn() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "lightOnInSection", "method_51548", "isSectionInEnabledColumn", "m_284382_"), "(J)Z");
    }

    static jboolean isSectionInEnabledColumn(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_isSectionInEnabledColumn();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setRetainColumn() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "retainData", "method_20600", "setRetainColumn", "m_75782_"), "(JZ)V");
    }

    static void setRetainColumn(const jobject& obj, const jlong& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_setRetainColumn();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_enqueueSectionData() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "queueSectionData", "method_15532", "enqueueSectionData", "m_284542_"), "(JLdvd;)V");
    }

    static void enqueueSectionData(const jobject& obj, const jlong& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_enqueueSectionData();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_setSectionStatus() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "updateSectionStatus", "method_15526", "setSectionStatus", "m_75787_"), "(JZ)V");
    }

    static void setSectionStatus(const jobject& obj, const jlong& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_setSectionStatus();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_setSectionPropagation() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "putSectionState", "method_51546", "setSectionPropagation", "m_284336_"), "(JB)V");
    }

    static void setSectionPropagation(const jobject& obj, const jlong& arg0, const jbyte& arg1) {
                
       const auto methodID = methodID_setSectionPropagation();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_queueForUpdate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "initializeSection", "method_51550", "queueForUpdate", "m_284497_"), "(J)V");
    }

    static void queueForUpdate(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_queueForUpdate();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_queueForRemoval() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("m", "removeSection", "method_51551", "queueForRemoval", "m_284475_"), "(J)V");
    }

    static void queueForRemoval(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_queueForRemoval();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_notifyChanges() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "swapSectionMap", "method_15530", "notifyChanges", "m_75790_"), "()V");
    }

    static void notifyChanges(const jobject& obj) {
                
       const auto methodID = methodID_notifyChanges();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getStatus() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "getDebugSectionType", "method_51549", "getStatus", "m_284291_"), "(J)Leos$b;");
    }

    static jobject getStatus(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_getStatus();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_WORLD_CHUNK_LIGHT_LIGHTSTORAGE_HPP