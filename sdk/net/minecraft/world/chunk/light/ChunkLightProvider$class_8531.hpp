// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_CHUNK_LIGHT_CHUNKLIGHTPROVIDER$CLASS_8531_HPP
#define NET_MINECRAFT_WORLD_CHUNK_LIGHT_CHUNKLIGHTPROVIDER$CLASS_8531_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.chunk.light.ChunkLightProvider$class_8531
 * Remapped: eov$a
 */
namespace ChunkLightProvider$class_8531 {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("eov$a", "net/minecraft/world/level/lighting/LightEngine$QueueEntry", "net/minecraft/class_3558$class_8531", "net/minecraft/world/chunk/light/ChunkLightProvider$class_8531", "net/minecraft/src/C_283721_$C_283716_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.world.chunk.light.ChunkLightProvider$class_8531#DIRECTION_BIT_OFFSET
    [[maybe_unused]] static jint get_field_DIRECTION_BIT_OFFSET() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "FROM_LEVEL_BITS", "field_44737", "DIRECTION_BIT_OFFSET", "f_283813_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.light.ChunkLightProvider$class_8531#DIRECTION_BIT_OFFSET
    [[maybe_unused]] static void set_field_DIRECTION_BIT_OFFSET(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "FROM_LEVEL_BITS", "field_44737", "DIRECTION_BIT_OFFSET", "f_283813_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.chunk.light.ChunkLightProvider$class_8531#field_44738
    [[maybe_unused]] static jint get_field_field_44738() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "DIRECTION_BITS", "field_44738", "field_44738", "f_283763_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.light.ChunkLightProvider$class_8531#field_44738
    [[maybe_unused]] static void set_field_field_44738(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "DIRECTION_BITS", "field_44738", "field_44738", "f_283763_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.chunk.light.ChunkLightProvider$class_8531#field_44739
    [[maybe_unused]] static jlong get_field_field_44739() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "LEVEL_MASK", "field_44739", "field_44739", "f_283912_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticLongField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.light.ChunkLightProvider$class_8531#field_44739
    [[maybe_unused]] static void set_field_field_44739(const jlong &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "LEVEL_MASK", "field_44739", "field_44739", "f_283912_"), "J");
        return MinecraftSDK::env->SetStaticLongField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.chunk.light.ChunkLightProvider$class_8531#DIRECTION_BIT_MASK
    [[maybe_unused]] static jlong get_field_DIRECTION_BIT_MASK() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "DIRECTIONS_MASK", "field_44740", "DIRECTION_BIT_MASK", "f_283794_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticLongField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.light.ChunkLightProvider$class_8531#DIRECTION_BIT_MASK
    [[maybe_unused]] static void set_field_DIRECTION_BIT_MASK(const jlong &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "DIRECTIONS_MASK", "field_44740", "DIRECTION_BIT_MASK", "f_283794_"), "J");
        return MinecraftSDK::env->SetStaticLongField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.chunk.light.ChunkLightProvider$class_8531#field_44741
    [[maybe_unused]] static jlong get_field_field_44741() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "FLAG_FROM_EMPTY_SHAPE", "field_44741", "field_44741", "f_283865_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticLongField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.light.ChunkLightProvider$class_8531#field_44741
    [[maybe_unused]] static void set_field_field_44741(const jlong &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "FLAG_FROM_EMPTY_SHAPE", "field_44741", "field_44741", "f_283865_"), "J");
        return MinecraftSDK::env->SetStaticLongField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.chunk.light.ChunkLightProvider$class_8531#field_44742
    [[maybe_unused]] static jlong get_field_field_44742() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "FLAG_INCREASE_FROM_EMISSION", "field_44742", "field_44742", "f_283793_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticLongField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.light.ChunkLightProvider$class_8531#field_44742
    [[maybe_unused]] static void set_field_field_44742(const jlong &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "FLAG_INCREASE_FROM_EMISSION", "field_44742", "field_44742", "f_283793_"), "J");
        return MinecraftSDK::env->SetStaticLongField(clazz, fieldID, value);
    };

    static jmethodID methodID_packWithOneDirectionCleared() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "decreaseSkipOneDirection", "method_51572", "packWithOneDirectionCleared", "m_284546_"), "(ILji;)J");
    }

    static jlong packWithOneDirectionCleared(const jint& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_packWithOneDirectionCleared();
       return MinecraftSDK::env->CallStaticLongMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_packWithAllDirectionsSet() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "decreaseAllDirections", "method_51571", "packWithAllDirectionsSet", "m_284290_"), "(I)J");
    }

    static jlong packWithAllDirectionsSet(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_packWithAllDirectionsSet();
       return MinecraftSDK::env->CallStaticLongMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_method_51573() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "increaseLightFromEmission", "method_51573", "method_51573", "m_284185_"), "(IZ)J");
    }

    static jlong method_51573(const jint& arg0, const jboolean& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_method_51573();
       return MinecraftSDK::env->CallStaticLongMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_method_51574() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "increaseSkipOneDirection", "method_51574", "method_51574", "m_284188_"), "(IZLji;)J");
    }

    static jlong method_51574(const jint& arg0, const jboolean& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_method_51574();
       return MinecraftSDK::env->CallStaticLongMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_method_51579() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "increaseOnlyOneDirection", "method_51579", "method_51579", "m_284128_"), "(IZLji;)J");
    }

    static jlong method_51579(const jint& arg0, const jboolean& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_method_51579();
       return MinecraftSDK::env->CallStaticLongMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_method_51578() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "increaseSkySourceInDirections", "method_51578", "method_51578", "m_284543_"), "(ZZZZZ)J");
    }

    static jlong method_51578(const jboolean& arg0, const jboolean& arg1, const jboolean& arg2, const jboolean& arg3, const jboolean& arg4) {
       const auto clazz = self();
       const auto methodID = methodID_method_51578();
       return MinecraftSDK::env->CallStaticLongMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_getLightLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getFromLevel", "method_51575", "getLightLevel", "m_284170_"), "(J)I");
    }

    static jint getLightLevel(const jlong& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getLightLevel();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_isTrivial() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "isFromEmptyShape", "method_51580", "isTrivial", "m_284390_"), "(J)Z");
    }

    static jboolean isTrivial(const jlong& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_isTrivial();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_method_51582() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "isIncreaseFromEmission", "method_51582", "method_51582", "m_284312_"), "(J)Z");
    }

    static jboolean method_51582(const jlong& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_method_51582();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_isDirectionBitSet() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "shouldPropagateInDirection", "method_51577", "isDirectionBitSet", "m_284416_"), "(JLji;)Z");
    }

    static jboolean isDirectionBitSet(const jlong& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_isDirectionBitSet();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_withLightLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "withLevel", "method_51576", "withLightLevel", "m_284455_"), "(JI)J");
    }

    static jlong withLightLevel(const jlong& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_withLightLevel();
       return MinecraftSDK::env->CallStaticLongMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_setDirectionBit() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "withDirection", "method_51581", "setDirectionBit", "m_284335_"), "(JLji;)J");
    }

    static jlong setDirectionBit(const jlong& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_setDirectionBit();
       return MinecraftSDK::env->CallStaticLongMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_clearDirectionBit() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "withoutDirection", "method_51583", "clearDirectionBit", "m_284441_"), "(JLji;)J");
    }

    static jlong clearDirectionBit(const jlong& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_clearDirectionBit();
       return MinecraftSDK::env->CallStaticLongMethod(clazz, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_WORLD_CHUNK_LIGHT_CHUNKLIGHTPROVIDER$CLASS_8531_HPP