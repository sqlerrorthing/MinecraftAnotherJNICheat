// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_CHUNK_LIGHT_LEVELPROPAGATOR_HPP
#define NET_MINECRAFT_WORLD_CHUNK_LIGHT_LEVELPROPAGATOR_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.chunk.light.LevelPropagator
 * Remapped: eoq
 */
namespace LevelPropagator {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("eoq", "net/minecraft/world/level/lighting/DynamicGraphMinFixedPoint", "net/minecraft/class_3554", "net/minecraft/world/chunk/light/LevelPropagator", "net/minecraft/src/C_2672_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.world.chunk.light.LevelPropagator#field_43397
    [[maybe_unused]] static jlong get_field_field_43397() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "SOURCE", "field_43397", "field_43397", "f_278132_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticLongField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.chunk.light.LevelPropagator#field_43397
    [[maybe_unused]] static void set_field_field_43397(const jlong &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "SOURCE", "field_43397", "field_43397", "f_278132_"), "J");
        return MinecraftSDK::env->SetStaticLongField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.chunk.light.LevelPropagator#MAX_LEVEL
    [[maybe_unused]] static jint get_field_MAX_LEVEL() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "NO_COMPUTED_LEVEL", "field_31706", "MAX_LEVEL", "f_164422_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.light.LevelPropagator#MAX_LEVEL
    [[maybe_unused]] static void set_field_MAX_LEVEL(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "NO_COMPUTED_LEVEL", "field_31706", "MAX_LEVEL", "f_164422_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for protected field net.minecraft.world.chunk.light.LevelPropagator#levelCount
    static jint get_field_levelCount(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "levelCount", "field_15783", "levelCount", "f_75537_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.world.chunk.light.LevelPropagator#levelCount
    static void set_field_levelCount(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "levelCount", "field_15783", "levelCount", "f_75537_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.light.LevelPropagator#pendingUpdateQueue
    static jobject get_field_pendingUpdateQueue(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "priorityQueue", "field_43396", "pendingUpdateQueue", "f_278118_"), "Leou;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.light.LevelPropagator#pendingUpdateQueue
    static void set_field_pendingUpdateQueue(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "priorityQueue", "field_43396", "pendingUpdateQueue", "f_278118_"), "Leou;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.light.LevelPropagator#pendingUpdates
    static jobject get_field_pendingUpdates(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "computedLevels", "field_15784", "pendingUpdates", "f_75539_"), "Lit/unimi/dsi/fastutil/longs/Long2ByteMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.light.LevelPropagator#pendingUpdates
    static void set_field_pendingUpdates(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "computedLevels", "field_15784", "pendingUpdates", "f_75539_"), "Lit/unimi/dsi/fastutil/longs/Long2ByteMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.light.LevelPropagator#hasPendingUpdates
    static jboolean get_field_hasPendingUpdates(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "hasWork", "field_15782", "hasPendingUpdates", "f_75541_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.light.LevelPropagator#hasPendingUpdates
    static void set_field_hasPendingUpdates(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "hasWork", "field_15782", "hasPendingUpdates", "f_75541_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    static jmethodID methodID_removePendingUpdate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "removeFromQueue", "method_15483", "removePendingUpdate", "m_75600_"), "(J)V");
    }

    static void removePendingUpdate(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_removePendingUpdate();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_removePendingUpdateIf() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "removeIf", "method_24206", "removePendingUpdateIf", "m_75581_"), "(Ljava/util/function/LongPredicate;)V");
    }

    static void removePendingUpdateIf(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_removePendingUpdateIf();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_calculateLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "calculatePriority", "method_50014", "calculateLevel", "m_278160_"), "(II)I");
    }

    static jint calculateLevel(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_calculateLevel();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_resetLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "checkNode", "method_15491", "resetLevel", "m_6185_"), "(J)V");
    }

    static void resetLevel(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_resetLevel();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_updateLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "checkEdge", "method_15478", "updateLevel", "m_75576_"), "(JJIZ)V");
    }

    static void updateLevel(const jobject& obj, const jlong& arg0, const jlong& arg1, const jint& arg2, const jboolean& arg3) {
                
       const auto methodID = methodID_updateLevel();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID__updateLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "checkEdge", "method_15482", "updateLevel", "m_75569_"), "(JJIIIZ)V");
    }

    static void _updateLevel(const jobject& obj, const jlong& arg0, const jlong& arg1, const jint& arg2, const jint& arg3, const jint& arg4, const jboolean& arg5) {
                
       const auto methodID = methodID__updateLevel();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
    static jmethodID methodID_propagateLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "checkNeighbor", "method_15484", "propagateLevel", "m_75593_"), "(JJIZ)V");
    }

    static void propagateLevel(const jobject& obj, const jlong& arg0, const jlong& arg1, const jint& arg2, const jboolean& arg3) {
                
       const auto methodID = methodID_propagateLevel();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID__hasPendingUpdates() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "hasWork", "method_15489", "hasPendingUpdates", "m_75587_"), "()Z");
    }

    static jboolean _hasPendingUpdates(const jobject& obj) {
                
       const auto methodID = methodID__hasPendingUpdates();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_applyPendingUpdates() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "runUpdates", "method_15492", "applyPendingUpdates", "m_75588_"), "(I)I");
    }

    static jint applyPendingUpdates(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_applyPendingUpdates();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getPendingUpdateCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getQueueSize", "method_24208", "getPendingUpdateCount", "m_75598_"), "()I");
    }

    static jint getPendingUpdateCount(const jobject& obj) {
                
       const auto methodID = methodID_getPendingUpdateCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_isMarker() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isSource", "method_15494", "isMarker", "m_6163_"), "(J)Z");
    }

    static jboolean isMarker(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_isMarker();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_recalculateLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getComputedLevel", "method_15486", "recalculateLevel", "m_6357_"), "(JJI)I");
    }

    static jint recalculateLevel(const jobject& obj, const jlong& arg0, const jlong& arg1, const jint& arg2) {
                
       const auto methodID = methodID_recalculateLevel();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__propagateLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "checkNeighborsAfterUpdate", "method_15487", "propagateLevel", "m_7900_"), "(JIZ)V");
    }

    static void _propagateLevel(const jobject& obj, const jlong& arg0, const jint& arg1, const jboolean& arg2) {
                
       const auto methodID = methodID__propagateLevel();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getLevel", "method_15480", "getLevel", "m_6172_"), "(J)I");
    }

    static jint getLevel(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_getLevel();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setLevel", "method_15485", "setLevel", "m_7351_"), "(JI)V");
    }

    static void setLevel(const jobject& obj, const jlong& arg0, const jint& arg1) {
                
       const auto methodID = methodID_setLevel();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getPropagatedLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "computeLevelFromNeighbor", "method_15488", "getPropagatedLevel", "m_6359_"), "(JJI)I");
    }

    static jint getPropagatedLevel(const jobject& obj, const jlong& arg0, const jlong& arg1, const jint& arg2) {
                
       const auto methodID = methodID_getPropagatedLevel();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1, arg2);
    };
    
};

#endif // NET_MINECRAFT_WORLD_CHUNK_LIGHT_LEVELPROPAGATOR_HPP