// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_CHUNK_LIGHT_LIGHTSOURCEVIEW_HPP
#define NET_MINECRAFT_WORLD_CHUNK_LIGHT_LIGHTSOURCEVIEW_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.chunk.light.LightSourceView
 * Remapped: dvk
 */
namespace LightSourceView {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dvk", "net/minecraft/world/level/chunk/LightChunk", "net/minecraft/class_8527", "net/minecraft/world/chunk/light/LightSourceView", "net/minecraft/src/C_283728_"));
        }
        return cachedClass;
    };

    static jmethodID methodID_forEachLightSource() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "findBlockLightSources", "method_51524", "forEachLightSource", "m_284254_"), "(Ljava/util/function/BiConsumer;)V");
    }

    static void forEachLightSource(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_forEachLightSource();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getChunkSkyLight() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("B", "getSkyLightSources", "method_12018", "getChunkSkyLight", "m_284400_"), "()Leoo;");
    }

    static jobject getChunkSkyLight(const jobject& obj) {
                
       const auto methodID = methodID_getChunkSkyLight();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_WORLD_CHUNK_LIGHT_LIGHTSOURCEVIEW_HPP