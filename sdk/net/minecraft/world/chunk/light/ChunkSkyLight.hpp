// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_CHUNK_LIGHT_CHUNKSKYLIGHT_HPP
#define NET_MINECRAFT_WORLD_CHUNK_LIGHT_CHUNKSKYLIGHT_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.chunk.light.ChunkSkyLight
 * Remapped: eoo
 */
namespace ChunkSkyLight {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("eoo", "net/minecraft/world/level/lighting/ChunkSkyLightSources", "net/minecraft/class_8528", "net/minecraft/world/chunk/light/ChunkSkyLight", "net/minecraft/src/C_283715_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.world.chunk.light.ChunkSkyLight#field_44711
    [[maybe_unused]] static jint get_field_field_44711() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "SIZE", "field_44711", "field_44711", "f_283752_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.light.ChunkSkyLight#field_44711
    [[maybe_unused]] static void set_field_field_44711(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "SIZE", "field_44711", "field_44711", "f_283752_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.chunk.light.ChunkSkyLight#field_44710
    [[maybe_unused]] static jint get_field_field_44710() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "NEGATIVE_INFINITY", "field_44710", "field_44710", "f_283790_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.chunk.light.ChunkSkyLight#field_44710
    [[maybe_unused]] static void set_field_field_44710(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "NEGATIVE_INFINITY", "field_44710", "field_44710", "f_283790_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.light.ChunkSkyLight#minY
    static jint get_field_minY(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "minY", "field_44712", "minY", "f_283758_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.light.ChunkSkyLight#minY
    static void set_field_minY(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "minY", "field_44712", "minY", "f_283758_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.light.ChunkSkyLight#palette
    static jobject get_field_palette(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "heightmap", "field_44713", "palette", "f_283905_"), "Laxc;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.light.ChunkSkyLight#palette
    static void set_field_palette(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "heightmap", "field_44713", "palette", "f_283905_"), "Laxc;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.light.ChunkSkyLight#reusableBlockPos1
    static jobject get_field_reusableBlockPos1(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "mutablePos1", "field_44714", "reusableBlockPos1", "f_283859_"), "Ljd$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.light.ChunkSkyLight#reusableBlockPos1
    static void set_field_reusableBlockPos1(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "mutablePos1", "field_44714", "reusableBlockPos1", "f_283859_"), "Ljd$a;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.light.ChunkSkyLight#reusableBlockPos2
    static jobject get_field_reusableBlockPos2(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "mutablePos2", "field_44715", "reusableBlockPos2", "f_283783_"), "Ljd$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.light.ChunkSkyLight#reusableBlockPos2
    static void set_field_reusableBlockPos2(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "mutablePos2", "field_44715", "reusableBlockPos2", "f_283783_"), "Ljd$a;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_refreshSurfaceY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "fillFrom", "method_51540", "refreshSurfaceY", "m_284271_"), "(Lduy;)V");
    }

    static void refreshSurfaceY(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_refreshSurfaceY();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_calculateSurfaceY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "findLowestSourceY", "method_51541", "calculateSurfaceY", "m_284264_"), "(Lduy;III)I");
    }

    static jint calculateSurfaceY(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2, const jint& arg3) {
                
       const auto methodID = methodID_calculateSurfaceY();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_isSkyLightAccessible() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "update", "method_51536", "isSkyLightAccessible", "m_284521_"), "(Ldcc;III)Z");
    }

    static jboolean isSkyLightAccessible(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2, const jint& arg3) {
                
       const auto methodID = methodID_isSkyLightAccessible();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID__isSkyLightAccessible() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateEdge", "method_51537", "isSkyLightAccessible", "m_284301_"), "(Ldcc;IILjd;Ldtc;Ljd;Ldtc;)Z");
    }

    static jboolean _isSkyLightAccessible(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2, const jobject& arg3, const jobject& arg4, const jobject& arg5, const jobject& arg6) {
                
       const auto methodID = methodID__isSkyLightAccessible();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    };
    
    static jmethodID methodID_locateLightBlockingBlockBelow() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "findLowestSourceBelow", "method_51538", "locateLightBlockingBlockBelow", "m_284300_"), "(Ldcc;Ljd;Ldtc;)I");
    }

    static jint locateLightBlockingBlockBelow(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_locateLightBlockingBlockBelow();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_faceBlocksLight() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "isEdgeOccluded", "method_51539", "faceBlocksLight", "m_284529_"), "(Ldcc;Ljd;Ldtc;Ljd;Ldtc;)Z");
    }

    static jboolean faceBlocksLight(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4) {
       const auto clazz = self();
       const auto methodID = methodID_faceBlocksLight();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_get() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getLowestSourceY", "method_51535", "get", "m_284402_"), "(II)I");
    }

    static jint get(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_get();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getMaxSurfaceY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getHighestLowestSourceY", "method_51533", "getMaxSurfaceY", "m_284191_"), "()I");
    }

    static jint getMaxSurfaceY(const jobject& obj) {
                
       const auto methodID = methodID_getMaxSurfaceY();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_fill() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "fill", "method_51534", "fill", "m_284134_"), "(I)V");
    }

    static void fill(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_fill();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_set() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "set", "method_51543", "set", "m_284514_"), "(II)V");
    }

    static void set(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_set();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__get() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "get", "method_51542", "get", "m_284474_"), "(I)I");
    }

    static jint _get(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID__get();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_convertMinY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "extendSourcesBelowWorld", "method_51544", "convertMinY", "m_284557_"), "(I)I");
    }

    static jint convertMinY(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_convertMinY();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getPackedIndex() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "index", "method_51545", "getPackedIndex", "m_284186_"), "(II)I");
    }

    static jint getPackedIndex(const jint& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_getPackedIndex();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_WORLD_CHUNK_LIGHT_CHUNKSKYLIGHT_HPP