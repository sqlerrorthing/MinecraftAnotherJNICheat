// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_CHUNK_CHUNKTONIBBLEARRAYMAP_HPP
#define NET_MINECRAFT_WORLD_CHUNK_CHUNKTONIBBLEARRAYMAP_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.chunk.ChunkToNibbleArrayMap
 * Remapped: eop
 */
namespace ChunkToNibbleArrayMap {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("eop", "net/minecraft/world/level/lighting/DataLayerStorageMap", "net/minecraft/class_3556", "net/minecraft/world/chunk/ChunkToNibbleArrayMap", "net/minecraft/src/C_2671_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.world.chunk.ChunkToNibbleArrayMap#field_31705
    [[maybe_unused]] static jint get_field_field_31705() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "CACHE_SIZE", "field_31705", "field_31705", "f_164421_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.ChunkToNibbleArrayMap#field_31705
    [[maybe_unused]] static void set_field_field_31705(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "CACHE_SIZE", "field_31705", "field_31705", "f_164421_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.ChunkToNibbleArrayMap#cachePositions
    static jlong get_field_cachePositions(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "lastSectionKeys", "field_15789", "cachePositions", "f_75519_"), "[J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.ChunkToNibbleArrayMap#cachePositions
    static void set_field_cachePositions(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "lastSectionKeys", "field_15789", "cachePositions", "f_75519_"), "[J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.ChunkToNibbleArrayMap#cacheArrays
    static jobject get_field_cacheArrays(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "lastSections", "field_15790", "cacheArrays", "f_75520_"), "[Ldvd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.ChunkToNibbleArrayMap#cacheArrays
    static void set_field_cacheArrays(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "lastSections", "field_15790", "cacheArrays", "f_75520_"), "[Ldvd;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.ChunkToNibbleArrayMap#cacheEnabled
    static jboolean get_field_cacheEnabled(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "cacheEnabled", "field_16447", "cacheEnabled", "f_75521_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.ChunkToNibbleArrayMap#cacheEnabled
    static void set_field_cacheEnabled(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "cacheEnabled", "field_16447", "cacheEnabled", "f_75521_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.world.chunk.ChunkToNibbleArrayMap#arrays
    static jobject get_field_arrays(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "map", "field_15791", "arrays", "f_75518_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectOpenHashMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.world.chunk.ChunkToNibbleArrayMap#arrays
    static void set_field_arrays(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "map", "field_15791", "arrays", "f_75518_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectOpenHashMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_copy() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "copy", "method_15504", "copy", "m_5972_"), "()Leop;");
    }

    static jobject copy(const jobject& obj) {
                
       const auto methodID = methodID_copy();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_replaceWithCopy() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "copyDataLayer", "method_15502", "replaceWithCopy", "m_75524_"), "(J)Ldvd;");
    }

    static jobject replaceWithCopy(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_replaceWithCopy();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_containsKey() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "hasLayer", "method_15503", "containsKey", "m_75529_"), "(J)Z");
    }

    static jboolean containsKey(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_containsKey();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_get() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getLayer", "method_15501", "get", "m_75532_"), "(J)Ldvd;");
    }

    static jobject get(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_get();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_removeChunk() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "removeLayer", "method_15500", "removeChunk", "m_75535_"), "(J)Ldvd;");
    }

    static jobject removeChunk(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_removeChunk();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_put() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setLayer", "method_15499", "put", "m_75526_"), "(JLdvd;)V");
    }

    static void put(const jobject& obj, const jlong& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_put();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_clearCache() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "clearCache", "method_15505", "clearCache", "m_75531_"), "()V");
    }

    static void clearCache(const jobject& obj) {
                
       const auto methodID = methodID_clearCache();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_disableCache() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "disableCache", "method_16188", "disableCache", "m_75534_"), "()V");
    }

    static void disableCache(const jobject& obj) {
                
       const auto methodID = methodID_disableCache();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_WORLD_CHUNK_CHUNKTONIBBLEARRAYMAP_HPP