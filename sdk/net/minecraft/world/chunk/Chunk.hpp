// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_CHUNK_CHUNK_HPP
#define NET_MINECRAFT_WORLD_CHUNK_CHUNK_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.chunk.Chunk
 * Remapped: duy
 */
namespace Chunk {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("duy", "net/minecraft/world/level/chunk/ChunkAccess", "net/minecraft/class_2791", "net/minecraft/world/chunk/Chunk", "net/minecraft/src/C_2116_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.world.chunk.Chunk#MISSING_SECTION
    [[maybe_unused]] static jint get_field_MISSING_SECTION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "NO_FILLED_SECTION", "field_44632", "MISSING_SECTION", "f_279635_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.chunk.Chunk#MISSING_SECTION
    [[maybe_unused]] static void set_field_MISSING_SECTION(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "NO_FILLED_SECTION", "field_44632", "MISSING_SECTION", "f_279635_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.chunk.Chunk#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "LOGGER", "field_34548", "LOGGER", "f_187613_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.Chunk#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "LOGGER", "field_34548", "LOGGER", "f_187613_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.chunk.Chunk#EMPTY_STRUCTURE_REFERENCES
    [[maybe_unused]] static jobject get_field_EMPTY_STRUCTURE_REFERENCES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "EMPTY_REFERENCE_SET", "field_37052", "EMPTY_STRUCTURE_REFERENCES", "f_207932_"), "Lit/unimi/dsi/fastutil/longs/LongSet;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.Chunk#EMPTY_STRUCTURE_REFERENCES
    [[maybe_unused]] static void set_field_EMPTY_STRUCTURE_REFERENCES(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "EMPTY_REFERENCE_SET", "field_37052", "EMPTY_STRUCTURE_REFERENCES", "f_207932_"), "Lit/unimi/dsi/fastutil/longs/LongSet;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for protected field net.minecraft.world.chunk.Chunk#postProcessingLists
    static jobject get_field_postProcessingLists(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "postProcessing", "field_34536", "postProcessingLists", "f_187602_"), "[Lit/unimi/dsi/fastutil/shorts/ShortList;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.world.chunk.Chunk#postProcessingLists
    static void set_field_postProcessingLists(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "postProcessing", "field_34536", "postProcessingLists", "f_187602_"), "[Lit/unimi/dsi/fastutil/shorts/ShortList;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.world.chunk.Chunk#needsSaving
    static jboolean get_field_needsSaving(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "unsaved", "field_34537", "needsSaving", "f_187603_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.world.chunk.Chunk#needsSaving
    static void set_field_needsSaving(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "unsaved", "field_34537", "needsSaving", "f_187603_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.Chunk#lightOn
    static jboolean get_field_lightOn(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "isLightCorrect", "field_34549", "lightOn", "f_187614_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.Chunk#lightOn
    static void set_field_lightOn(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "isLightCorrect", "field_34549", "lightOn", "f_187614_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.world.chunk.Chunk#pos
    static jobject get_field_pos(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "chunkPos", "field_34538", "pos", "f_187604_"), "Ldcd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.world.chunk.Chunk#pos
    static void set_field_pos(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "chunkPos", "field_34538", "pos", "f_187604_"), "Ldcd;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.Chunk#inhabitedTime
    static jlong get_field_inhabitedTime(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "inhabitedTime", "field_34550", "inhabitedTime", "f_187615_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.Chunk#inhabitedTime
    static void set_field_inhabitedTime(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "inhabitedTime", "field_34550", "inhabitedTime", "f_187615_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.Chunk#generationSettings
    static jobject get_field_generationSettings(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "carverBiomeSettings", "field_39411", "generationSettings", "f_223003_"), "Lddx;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.Chunk#generationSettings
    static void set_field_generationSettings(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "carverBiomeSettings", "field_39411", "generationSettings", "f_223003_"), "Lddx;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.world.chunk.Chunk#chunkNoiseSampler
    static jobject get_field_chunkNoiseSampler(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "noiseChunk", "field_34539", "chunkNoiseSampler", "f_187605_"), "Ldzc;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.world.chunk.Chunk#chunkNoiseSampler
    static void set_field_chunkNoiseSampler(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "noiseChunk", "field_34539", "chunkNoiseSampler", "f_187605_"), "Ldzc;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.world.chunk.Chunk#upgradeData
    static jobject get_field_upgradeData(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "upgradeData", "field_34540", "upgradeData", "f_187606_"), "Ldvv;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.world.chunk.Chunk#upgradeData
    static void set_field_upgradeData(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "upgradeData", "field_34540", "upgradeData", "f_187606_"), "Ldvv;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.world.chunk.Chunk#blendingData
    static jobject get_field_blendingData(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "blendingData", "field_35468", "blendingData", "f_187607_"), "Leab;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.world.chunk.Chunk#blendingData
    static void set_field_blendingData(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "blendingData", "field_35468", "blendingData", "f_187607_"), "Leab;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.world.chunk.Chunk#heightmaps
    static jobject get_field_heightmaps(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "heightmaps", "field_34541", "heightmaps", "f_187608_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.world.chunk.Chunk#heightmaps
    static void set_field_heightmaps(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "heightmaps", "field_34541", "heightmaps", "f_187608_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.world.chunk.Chunk#chunkSkyLight
    static jobject get_field_chunkSkyLight(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "skyLightSources", "field_44708", "chunkSkyLight", "f_283754_"), "Leoo;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.world.chunk.Chunk#chunkSkyLight
    static void set_field_chunkSkyLight(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "skyLightSources", "field_44708", "chunkSkyLight", "f_283754_"), "Leoo;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.Chunk#structureStarts
    static jobject get_field_structureStarts(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "structureStarts", "field_34552", "structureStarts", "f_187617_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.Chunk#structureStarts
    static void set_field_structureStarts(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "structureStarts", "field_34552", "structureStarts", "f_187617_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.chunk.Chunk#structureReferences
    static jobject get_field_structureReferences(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "structuresRefences", "field_34553", "structureReferences", "f_187618_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.chunk.Chunk#structureReferences
    static void set_field_structureReferences(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "structuresRefences", "field_34553", "structureReferences", "f_187618_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.world.chunk.Chunk#blockEntityNbts
    static jobject get_field_blockEntityNbts(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "pendingBlockEntities", "field_34542", "blockEntityNbts", "f_187609_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.world.chunk.Chunk#blockEntityNbts
    static void set_field_blockEntityNbts(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "pendingBlockEntities", "field_34542", "blockEntityNbts", "f_187609_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.world.chunk.Chunk#blockEntities
    static jobject get_field_blockEntities(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "blockEntities", "field_34543", "blockEntities", "f_187610_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.world.chunk.Chunk#blockEntities
    static void set_field_blockEntities(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "blockEntities", "field_34543", "blockEntities", "f_187610_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.world.chunk.Chunk#heightLimitView
    static jobject get_field_heightLimitView(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "levelHeightAccessor", "field_34544", "heightLimitView", "f_187611_"), "Ldcy;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.world.chunk.Chunk#heightLimitView
    static void set_field_heightLimitView(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "levelHeightAccessor", "field_34544", "heightLimitView", "f_187611_"), "Ldcy;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.world.chunk.Chunk#sectionArray
    static jobject get_field_sectionArray(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "sections", "field_34545", "sectionArray", "f_187612_"), "[Ldvj;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.world.chunk.Chunk#sectionArray
    static void set_field_sectionArray(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "sections", "field_34545", "sectionArray", "f_187612_"), "[Ldvj;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_fillSectionArray() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "replaceMissingSections", "method_38256", "fillSectionArray", "m_280116_"), "(Ljz;[Ldvj;)V");
    }

    static void fillSectionArray(const jobject& arg0, const jarray& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_fillSectionArray();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getGameEventDispatcher() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getListenerRegistry", "method_32914", "getGameEventDispatcher", "m_246686_"), "(I)Ldyc;");
    }

    static jobject getGameEventDispatcher(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_getGameEventDispatcher();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setBlockState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setBlockState", "method_12010", "setBlockState", "m_6978_"), "(Ljd;Ldtc;Z)Ldtc;");
    }

    static jobject setBlockState(const jobject& obj, const jobject& arg0, const jobject& arg1, const jboolean& arg2) {
                
       const auto methodID = methodID_setBlockState();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_setBlockEntity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setBlockEntity", "method_12007", "setBlockEntity", "m_142169_"), "(Ldqh;)V");
    }

    static void setBlockEntity(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setBlockEntity();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_addEntity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addEntity", "method_12002", "addEntity", "m_6286_"), "(Lbsr;)V");
    }

    static void addEntity(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addEntity();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getHighestNonEmptySection() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getHighestFilledSectionIndex", "method_12040", "getHighestNonEmptySection", "m_280525_"), "()I");
    }

    static jint getHighestNonEmptySection(const jobject& obj) {
                
       const auto methodID = methodID_getHighestNonEmptySection();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getHighestNonEmptySectionYOffset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getHighestSectionPosition", "method_12031", "getHighestNonEmptySectionYOffset", "m_62098_"), "()I");
    }

    static jint getHighestNonEmptySectionYOffset(const jobject& obj) {
                
       const auto methodID = methodID_getHighestNonEmptySectionYOffset();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getBlockEntityPositions() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getBlockEntitiesPos", "method_12021", "getBlockEntityPositions", "m_5928_"), "()Ljava/util/Set;");
    }

    static jobject getBlockEntityPositions(const jobject& obj) {
                
       const auto methodID = methodID_getBlockEntityPositions();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getSectionArray() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getSections", "method_12006", "getSectionArray", "m_7103_"), "()[Ldvj;");
    }

    static jobject getSectionArray(const jobject& obj) {
                
       const auto methodID = methodID_getSectionArray();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getSection() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getSection", "method_38259", "getSection", "m_183278_"), "(I)Ldvj;");
    }

    static jobject getSection(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_getSection();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getHeightmaps() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "getHeightmaps", "method_12011", "getHeightmaps", "m_6890_"), "()Ljava/util/Collection;");
    }

    static jobject getHeightmaps(const jobject& obj) {
                
       const auto methodID = methodID_getHeightmaps();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_setHeightmap() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setHeightmap", "method_12037", "setHeightmap", "m_6511_"), "(Ldyy$a;[J)V");
    }

    static void setHeightmap(const jobject& obj, const jobject& arg0, const jarray& arg1, const jlong& arg2) {
                
       const auto methodID = methodID_setHeightmap();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getHeightmap() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getOrCreateHeightmapUnprimed", "method_12032", "getHeightmap", "m_6005_"), "(Ldyy$a;)Ldyy;");
    }

    static jobject getHeightmap(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getHeightmap();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_hasHeightmap() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "hasPrimedHeightmap", "method_39295", "hasHeightmap", "m_187658_"), "(Ldyy$a;)Z");
    }

    static jboolean hasHeightmap(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_hasHeightmap();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_sampleHeightmap() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getHeight", "method_12005", "sampleHeightmap", "m_5885_"), "(Ldyy$a;II)I");
    }

    static jint sampleHeightmap(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_sampleHeightmap();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "getPos", "method_12004", "getPos", "m_7697_"), "()Ldcd;");
    }

    static jobject getPos(const jobject& obj) {
                
       const auto methodID = methodID_getPos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getStructureStart() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getStartForStructure", "method_12181", "getStructureStart", "m_213652_"), "(Lejr;)Lejz;");
    }

    static jobject getStructureStart(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getStructureStart();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setStructureStart() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setStartForStructure", "method_12184", "setStructureStart", "m_213792_"), "(Lejr;Lejz;)V");
    }

    static void setStructureStart(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_setStructureStart();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getStructureStarts() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "getAllStarts", "method_12016", "getStructureStarts", "m_6633_"), "()Ljava/util/Map;");
    }

    static jobject getStructureStarts(const jobject& obj) {
                
       const auto methodID = methodID_getStructureStarts();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_setStructureStarts() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setAllStarts", "method_12034", "setStructureStarts", "m_8040_"), "(Ljava/util/Map;)V");
    }

    static void setStructureStarts(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setStructureStarts();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getStructureReferences() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getReferencesForStructure", "method_12180", "getStructureReferences", "m_213649_"), "(Lejr;)Lit/unimi/dsi/fastutil/longs/LongSet;");
    }

    static jobject getStructureReferences(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getStructureReferences();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_addStructureReference() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addReferenceForStructure", "method_12182", "addStructureReference", "m_213843_"), "(Lejr;J)V");
    }

    static void addStructureReference(const jobject& obj, const jobject& arg0, const jlong& arg1) {
                
       const auto methodID = methodID_addStructureReference();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__getStructureReferences() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "getAllReferences", "method_12179", "getStructureReferences", "m_62769_"), "()Ljava/util/Map;");
    }

    static jobject _getStructureReferences(const jobject& obj) {
                
       const auto methodID = methodID__getStructureReferences();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_setStructureReferences() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setAllReferences", "method_12183", "setStructureReferences", "m_62737_"), "(Ljava/util/Map;)V");
    }

    static void setStructureReferences(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setStructureReferences();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_areSectionsEmptyBetween() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isYSpaceEmpty", "method_12228", "areSectionsEmptyBetween", "m_5566_"), "(II)Z");
    }

    static jboolean areSectionsEmptyBetween(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_areSectionsEmptyBetween();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isSectionEmpty() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "isSectionEmpty", "method_60791", "isSectionEmpty", "m_339293_"), "(I)Z");
    }

    static jboolean isSectionEmpty(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_isSectionEmpty();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setNeedsSaving() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setUnsaved", "method_12008", "setNeedsSaving", "m_8092_"), "(Z)V");
    }

    static void setNeedsSaving(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setNeedsSaving();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__needsSaving() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "isUnsaved", "method_12044", "needsSaving", "m_6344_"), "()Z");
    }

    static jboolean _needsSaving(const jobject& obj) {
                
       const auto methodID = methodID__needsSaving();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getStatus() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "getPersistedStatus", "method_12009", "getStatus", "m_6415_"), "()Ldvz;");
    }

    static jobject getStatus(const jobject& obj) {
                
       const auto methodID = methodID_getStatus();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getMaxStatus() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "getHighestGeneratedStatus", "method_51526", "getMaxStatus", "m_284331_"), "()Ldvz;");
    }

    static jobject getMaxStatus(const jobject& obj) {
                
       const auto methodID = methodID_getMaxStatus();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_removeBlockEntity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "removeBlockEntity", "method_12041", "removeBlockEntity", "m_8114_"), "(Ljd;)V");
    }

    static void removeBlockEntity(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_removeBlockEntity();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_markBlockForPostProcessing() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "markPosForPostprocessing", "method_12039", "markBlockForPostProcessing", "m_8113_"), "(Ljd;)V");
    }

    static void markBlockForPostProcessing(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_markBlockForPostProcessing();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getPostProcessingLists() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("n", "getPostProcessing", "method_12012", "getPostProcessingLists", "m_6720_"), "()[Lit/unimi/dsi/fastutil/shorts/ShortList;");
    }

    static jobject getPostProcessingLists(const jobject& obj) {
                
       const auto methodID = methodID_getPostProcessingLists();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__markBlockForPostProcessing() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addPackedPostProcess", "method_12029", "markBlockForPostProcessing", "m_6561_"), "(SI)V");
    }

    static void _markBlockForPostProcessing(const jobject& obj, const jshort& arg0, const jint& arg1) {
                
       const auto methodID = methodID__markBlockForPostProcessing();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_addPendingBlockEntityNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setBlockEntityNbt", "method_12042", "addPendingBlockEntityNbt", "m_5604_"), "(Lub;)V");
    }

    static void addPendingBlockEntityNbt(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addPendingBlockEntityNbt();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getBlockEntityNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "getBlockEntityNbt", "method_12024", "getBlockEntityNbt", "m_8049_"), "(Ljd;)Lub;");
    }

    static jobject getBlockEntityNbt(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getBlockEntityNbt();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getPackedBlockEntityNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getBlockEntityNbtForSaving", "method_20598", "getPackedBlockEntityNbt", "m_8051_"), "(Ljd;Ljo$a;)Lub;");
    }

    static jobject getPackedBlockEntityNbt(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_getPackedBlockEntityNbt();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_forEachLightSource() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "findBlockLightSources", "method_51524", "forEachLightSource", "m_284254_"), "(Ljava/util/function/BiConsumer;)V");
    }

    static void forEachLightSource(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_forEachLightSource();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_forEachBlockMatchingPredicate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "findBlocks", "method_51525", "forEachBlockMatchingPredicate", "m_284478_"), "(Ljava/util/function/Predicate;Ljava/util/function/BiConsumer;)V");
    }

    static void forEachBlockMatchingPredicate(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_forEachBlockMatchingPredicate();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getBlockTickScheduler() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("o", "getBlockTicks", "method_12013", "getBlockTickScheduler", "m_183531_"), "()Leyw;");
    }

    static jobject getBlockTickScheduler(const jobject& obj) {
                
       const auto methodID = methodID_getBlockTickScheduler();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getFluidTickScheduler() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("p", "getFluidTicks", "method_12014", "getFluidTickScheduler", "m_183526_"), "()Leyw;");
    }

    static jobject getFluidTickScheduler(const jobject& obj) {
                
       const auto methodID = methodID_getFluidTickScheduler();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getTickSchedulers() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("q", "getTicksForSerialization", "method_39296", "getTickSchedulers", "m_183568_"), "()Lduy$a;");
    }

    static jobject getTickSchedulers(const jobject& obj) {
                
       const auto methodID = methodID_getTickSchedulers();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getUpgradeData() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("r", "getUpgradeData", "method_12003", "getUpgradeData", "m_7387_"), "()Ldvv;");
    }

    static jobject getUpgradeData(const jobject& obj) {
                
       const auto methodID = methodID_getUpgradeData();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_usesOldNoise() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("s", "isOldNoiseGeneration", "method_39297", "usesOldNoise", "m_187675_"), "()Z");
    }

    static jboolean usesOldNoise(const jobject& obj) {
                
       const auto methodID = methodID_usesOldNoise();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getBlendingData() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("t", "getBlendingData", "method_39299", "getBlendingData", "m_183407_"), "()Leab;");
    }

    static jobject getBlendingData(const jobject& obj) {
                
       const auto methodID = methodID_getBlendingData();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_setBlendingData() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setBlendingData", "method_39294", "setBlendingData", "m_183400_"), "(Leab;)V");
    }

    static void setBlendingData(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setBlendingData();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getInhabitedTime() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("u", "getInhabitedTime", "method_12033", "getInhabitedTime", "m_6319_"), "()J");
    }

    static jlong getInhabitedTime(const jobject& obj) {
                
       const auto methodID = methodID_getInhabitedTime();
       return MinecraftSDK::env->CallLongMethod(obj, methodID);
    };
    
    static jmethodID methodID_increaseInhabitedTime() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "incrementInhabitedTime", "method_38870", "increaseInhabitedTime", "m_187632_"), "(J)V");
    }

    static void increaseInhabitedTime(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_increaseInhabitedTime();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setInhabitedTime() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setInhabitedTime", "method_12028", "setInhabitedTime", "m_6141_"), "(J)V");
    }

    static void setInhabitedTime(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_setInhabitedTime();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getList() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getOrCreateOffsetList", "method_12026", "getList", "m_62095_"), "([Lit/unimi/dsi/fastutil/shorts/ShortList;I)Lit/unimi/dsi/fastutil/shorts/ShortList;");
    }

    static jobject getList(const jarray& arg0, const jobject& arg1, const jint& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_getList();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_isLightOn() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("v", "isLightCorrect", "method_12038", "isLightOn", "m_6332_"), "()Z");
    }

    static jboolean isLightOn(const jobject& obj) {
                
       const auto methodID = methodID_isLightOn();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setLightOn() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setLightCorrect", "method_12020", "setLightOn", "m_8094_"), "(Z)V");
    }

    static void setLightOn(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setLightOn();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getBottomY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("I_", "getMinBuildHeight", "method_31607", "getBottomY", "m_141937_"), "()I");
    }

    static jint getBottomY(const jobject& obj) {
                
       const auto methodID = methodID_getBottomY();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getHeight() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("J_", "getHeight", "method_31605", "getHeight", "m_141928_"), "()I");
    }

    static jint getHeight(const jobject& obj) {
                
       const auto methodID = methodID_getHeight();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getOrCreateChunkNoiseSampler() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getOrCreateNoiseChunk", "method_38255", "getOrCreateChunkNoiseSampler", "m_223012_"), "(Ljava/util/function/Function;)Ldzc;");
    }

    static jobject getOrCreateChunkNoiseSampler(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getOrCreateChunkNoiseSampler();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getOrCreateGenerationSettings() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "carverBiome", "method_44214", "getOrCreateGenerationSettings", "m_223014_"), "(Ljava/util/function/Supplier;)Lddx;");
    }

    static jobject getOrCreateGenerationSettings(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getOrCreateGenerationSettings();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getBiomeForNoiseGen() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("getNoiseBiome", "getNoiseBiome", "method_16359", "getBiomeForNoiseGen", "m_203495_"), "(III)Ljm;");
    }

    static jobject getBiomeForNoiseGen(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_getBiomeForNoiseGen();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_populateBiomes() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "fillBiomesFromNoise", "method_38257", "populateBiomes", "m_183442_"), "(Lddz;Ldef$f;)V");
    }

    static void populateBiomes(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_populateBiomes();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_hasStructureReferences() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("w", "hasAnyStructureReferences", "method_38871", "hasStructureReferences", "m_187678_"), "()Z");
    }

    static jboolean hasStructureReferences(const jobject& obj) {
                
       const auto methodID = methodID_hasStructureReferences();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getBelowZeroRetrogen() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("x", "getBelowZeroRetrogen", "method_39300", "getBelowZeroRetrogen", "m_183376_"), "()Ldym;");
    }

    static jobject getBelowZeroRetrogen(const jobject& obj) {
                
       const auto methodID = methodID_getBelowZeroRetrogen();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasBelowZeroRetrogen() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("y", "isUpgrading", "method_39461", "hasBelowZeroRetrogen", "m_187679_"), "()Z");
    }

    static jboolean hasBelowZeroRetrogen(const jobject& obj) {
                
       const auto methodID = methodID_hasBelowZeroRetrogen();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getHeightLimitView() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("z", "getHeightAccessorForGeneration", "method_39460", "getHeightLimitView", "m_183618_"), "()Ldcy;");
    }

    static jobject getHeightLimitView(const jobject& obj) {
                
       const auto methodID = methodID_getHeightLimitView();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_refreshSurfaceY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("A", "initializeLightSources", "method_51522", "refreshSurfaceY", "m_284190_"), "()V");
    }

    static void refreshSurfaceY(const jobject& obj) {
                
       const auto methodID = methodID_refreshSurfaceY();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getChunkSkyLight() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("B", "getSkyLightSources", "method_12018", "getChunkSkyLight", "m_284400_"), "()Leoo;");
    }

    static jobject getChunkSkyLight(const jobject& obj) {
                
       const auto methodID = methodID_getChunkSkyLight();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_WORLD_CHUNK_CHUNK_HPP