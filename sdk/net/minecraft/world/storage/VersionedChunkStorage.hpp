// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_STORAGE_VERSIONEDCHUNKSTORAGE_HPP
#define NET_MINECRAFT_WORLD_STORAGE_VERSIONEDCHUNKSTORAGE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.storage.VersionedChunkStorage
 * Remapped: dwj
 */
namespace VersionedChunkStorage {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dwj", "net/minecraft/world/level/chunk/storage/ChunkStorage", "net/minecraft/class_3977", "net/minecraft/world/storage/VersionedChunkStorage", "net/minecraft/src/C_2159_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.world.storage.VersionedChunkStorage#FEATURE_UPDATING_VERSION
    [[maybe_unused]] static jint get_field_FEATURE_UPDATING_VERSION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "LAST_MONOLYTH_STRUCTURE_DATA_VERSION", "field_36219", "FEATURE_UPDATING_VERSION", "f_196910_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.storage.VersionedChunkStorage#FEATURE_UPDATING_VERSION
    [[maybe_unused]] static void set_field_FEATURE_UPDATING_VERSION(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "LAST_MONOLYTH_STRUCTURE_DATA_VERSION", "field_36219", "FEATURE_UPDATING_VERSION", "f_196910_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.world.storage.VersionedChunkStorage#worker
    static jobject get_field_worker(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "worker", "field_21494", "worker", "f_63495_"), "Ldwl;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.storage.VersionedChunkStorage#worker
    static void set_field_worker(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "worker", "field_21494", "worker", "f_63495_"), "Ldwl;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.world.storage.VersionedChunkStorage#dataFixer
    static jobject get_field_dataFixer(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "fixerUpper", "field_17655", "dataFixer", "f_63496_"), "Lcom/mojang/datafixers/DataFixer;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.world.storage.VersionedChunkStorage#dataFixer
    static void set_field_dataFixer(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "fixerUpper", "field_17655", "dataFixer", "f_63496_"), "Lcom/mojang/datafixers/DataFixer;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.storage.VersionedChunkStorage#featureUpdater
    static jobject get_field_featureUpdater(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "legacyStructureHandler", "field_17654", "featureUpdater", "f_63497_"), "Lejm;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.storage.VersionedChunkStorage#featureUpdater
    static void set_field_featureUpdater(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "legacyStructureHandler", "field_17654", "featureUpdater", "f_63497_"), "Lejm;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_needsBlending() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "isOldChunkAround", "method_42328", "needsBlending", "m_223451_"), "(Ldcd;I)Z");
    }

    static jboolean needsBlending(const jobject& obj, const jobject& arg0, const jint& arg1) {
                
       const auto methodID = methodID_needsBlending();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_updateChunkNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "upgradeChunkTag", "method_17907", "updateChunkNbt", "m_188288_"), "(Lakq;Ljava/util/function/Supplier;Lub;Ljava/util/Optional;)Lub;");
    }

    static jobject updateChunkNbt(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_updateChunkNbt();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_getFeatureUpdater() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getLegacyStructureHandler", "method_43411", "getFeatureUpdater", "m_223448_"), "(Lakq;Ljava/util/function/Supplier;)Lejm;");
    }

    static jobject getFeatureUpdater(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_getFeatureUpdater();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_saveContextToNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "injectDatafixingContext", "method_39799", "saveContextToNbt", "m_196918_"), "(Lub;Lakq;Ljava/util/Optional;)V");
    }

    static void saveContextToNbt(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_saveContextToNbt();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_removeContext() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "removeDatafixingContext", "method_60626", "removeContext", "m_340518_"), "(Lub;)V");
    }

    static void removeContext(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_removeContext();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getDataVersion() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getVersion", "method_17908", "getDataVersion", "m_63505_"), "(Lub;)I");
    }

    static jint getDataVersion(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getDataVersion();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "read", "method_23696", "getNbt", "m_223454_"), "(Ldcd;)Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject getNbt(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getNbt();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "write", "method_17910", "setNbt", "m_63502_"), "(Ldcd;Lub;)Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject setNbt(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_setNbt();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_markFeatureUpdateResolved() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "handleLegacyStructureIndex", "method_56564", "markFeatureUpdateResolved", "m_320556_"), "(Ldcd;)V");
    }

    static void markFeatureUpdateResolved(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_markFeatureUpdateResolved();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_completeAll() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("o", "flushWorker", "method_23697", "completeAll", "m_63514_"), "()V");
    }

    static void completeAll(const jobject& obj) {
                
       const auto methodID = methodID_completeAll();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_close() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("close", "close", "", "", "close"), "()V");
    }

    static void close(const jobject& obj) {
                
       const auto methodID = methodID_close();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getWorker() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("p", "chunkScanner", "method_39800", "getWorker", "m_196922_"), "()Ldwh;");
    }

    static jobject getWorker(const jobject& obj) {
                
       const auto methodID = methodID_getWorker();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getStorageKey() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("q", "storageInfo", "method_60999", "getStorageKey", "m_340375_"), "()Ldws;");
    }

    static jobject getStorageKey(const jobject& obj) {
                
       const auto methodID = methodID_getStorageKey();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_WORLD_STORAGE_VERSIONEDCHUNKSTORAGE_HPP