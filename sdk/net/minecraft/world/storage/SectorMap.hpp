// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_STORAGE_SECTORMAP_HPP
#define NET_MINECRAFT_WORLD_STORAGE_SECTORMAP_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.storage.SectorMap
 * Remapped: dwo
 */
namespace SectorMap {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dwo", "net/minecraft/world/level/chunk/storage/RegionBitmap", "net/minecraft/class_4485", "net/minecraft/world/storage/SectorMap", "net/minecraft/src/C_2165_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.world.storage.SectorMap#bitSet
    static jobject get_field_bitSet(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "used", "field_20433", "bitSet", "f_63608_"), "Ljava/util/BitSet;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.storage.SectorMap#bitSet
    static void set_field_bitSet(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "used", "field_20433", "bitSet", "f_63608_"), "Ljava/util/BitSet;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_allocate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "force", "method_21868", "allocate", "m_63612_"), "(II)V");
    }

    static void allocate(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_allocate();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_free() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "free", "method_21869", "free", "m_63615_"), "(II)V");
    }

    static void free(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_free();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__allocate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "allocate", "method_21867", "allocate", "m_63610_"), "(I)I");
    }

    static jint _allocate(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID__allocate();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getAllocatedBits() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getUsed", "method_35322", "getAllocatedBits", "m_156603_"), "()Lit/unimi/dsi/fastutil/ints/IntSet;");
    }

    static jobject getAllocatedBits(const jobject& obj) {
                
       const auto methodID = methodID_getAllocatedBits();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_WORLD_STORAGE_SECTORMAP_HPP