// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_STORAGE_REGIONFILE_HPP
#define NET_MINECRAFT_WORLD_STORAGE_REGIONFILE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.storage.RegionFile
 * Remapped: dwp
 */
namespace RegionFile {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dwp", "net/minecraft/world/level/chunk/storage/RegionFile", "net/minecraft/class_2861", "net/minecraft/world/storage/RegionFile", "net/minecraft/src/C_2166_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.world.storage.RegionFile#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "LOGGER", "field_20434", "LOGGER", "f_63619_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.storage.RegionFile#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "LOGGER", "field_20434", "LOGGER", "f_63619_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.storage.RegionFile#field_31418
    [[maybe_unused]] static jint get_field_field_31418() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "SECTOR_BYTES", "field_31418", "field_31418", "f_156605_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.storage.RegionFile#field_31418
    [[maybe_unused]] static void set_field_field_31418(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "SECTOR_BYTES", "field_31418", "field_31418", "f_156605_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static protected field net.minecraft.world.storage.RegionFile#SECTOR_DATA_LIMIT
    [[maybe_unused]] static jint get_field_SECTOR_DATA_LIMIT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "SECTOR_INTS", "field_31417", "SECTOR_DATA_LIMIT", "f_156604_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static protected field net.minecraft.world.storage.RegionFile#SECTOR_DATA_LIMIT
    [[maybe_unused]] static void set_field_SECTOR_DATA_LIMIT(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "SECTOR_INTS", "field_31417", "SECTOR_DATA_LIMIT", "f_156604_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.storage.RegionFile#field_31419
    [[maybe_unused]] static jint get_field_field_31419() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "CHUNK_HEADER_SIZE", "field_31419", "field_31419", "f_156606_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.storage.RegionFile#field_31419
    [[maybe_unused]] static void set_field_field_31419(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "CHUNK_HEADER_SIZE", "field_31419", "field_31419", "f_156606_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.storage.RegionFile#field_31420
    [[maybe_unused]] static jint get_field_field_31420() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "HEADER_OFFSET", "field_31420", "field_31420", "f_156607_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.storage.RegionFile#field_31420
    [[maybe_unused]] static void set_field_field_31420(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "HEADER_OFFSET", "field_31420", "field_31420", "f_156607_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.storage.RegionFile#ZERO
    [[maybe_unused]] static jobject get_field_ZERO() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "PADDING_BUFFER", "field_20435", "ZERO", "f_63620_"), "Ljava/nio/ByteBuffer;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.storage.RegionFile#ZERO
    [[maybe_unused]] static void set_field_ZERO(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "PADDING_BUFFER", "field_20435", "ZERO", "f_63620_"), "Ljava/nio/ByteBuffer;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.storage.RegionFile#FILE_EXTENSION
    [[maybe_unused]] static jobject get_field_FILE_EXTENSION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "EXTERNAL_FILE_EXTENSION", "field_31421", "FILE_EXTENSION", "f_156608_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.storage.RegionFile#FILE_EXTENSION
    [[maybe_unused]] static void set_field_FILE_EXTENSION(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "EXTERNAL_FILE_EXTENSION", "field_31421", "FILE_EXTENSION", "f_156608_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.storage.RegionFile#field_31422
    [[maybe_unused]] static jint get_field_field_31422() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "EXTERNAL_STREAM_FLAG", "field_31422", "field_31422", "f_156609_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.storage.RegionFile#field_31422
    [[maybe_unused]] static void set_field_field_31422(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "EXTERNAL_STREAM_FLAG", "field_31422", "field_31422", "f_156609_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.storage.RegionFile#field_31423
    [[maybe_unused]] static jint get_field_field_31423() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "EXTERNAL_CHUNK_THRESHOLD", "field_31423", "field_31423", "f_156610_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.storage.RegionFile#field_31423
    [[maybe_unused]] static void set_field_field_31423(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "EXTERNAL_CHUNK_THRESHOLD", "field_31423", "field_31423", "f_156610_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.storage.RegionFile#field_31424
    [[maybe_unused]] static jint get_field_field_31424() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "CHUNK_NOT_PRESENT", "field_31424", "field_31424", "f_156611_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.storage.RegionFile#field_31424
    [[maybe_unused]] static void set_field_field_31424(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "CHUNK_NOT_PRESENT", "field_31424", "field_31424", "f_156611_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for default field net.minecraft.world.storage.RegionFile#storageKey
    static jobject get_field_storageKey(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "info", "field_49102", "storageKey", "f_315685_"), "Ldws;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.storage.RegionFile#storageKey
    static void set_field_storageKey(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "info", "field_49102", "storageKey", "f_315685_"), "Ldws;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.storage.RegionFile#path
    static jobject get_field_path(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "path", "field_48752", "path", "f_315672_"), "Ljava/nio/file/Path;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.storage.RegionFile#path
    static void set_field_path(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "path", "field_48752", "path", "f_315672_"), "Ljava/nio/file/Path;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.storage.RegionFile#channel
    static jobject get_field_channel(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "file", "field_20436", "channel", "f_63621_"), "Ljava/nio/channels/FileChannel;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.storage.RegionFile#channel
    static void set_field_channel(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "file", "field_20436", "channel", "f_63621_"), "Ljava/nio/channels/FileChannel;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.storage.RegionFile#directory
    static jobject get_field_directory(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "externalFileDir", "field_20657", "directory", "f_63622_"), "Ljava/nio/file/Path;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.storage.RegionFile#directory
    static void set_field_directory(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "externalFileDir", "field_20657", "directory", "f_63622_"), "Ljava/nio/file/Path;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.world.storage.RegionFile#compressionFormat
    static jobject get_field_compressionFormat(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "version", "field_20437", "compressionFormat", "f_63623_"), "Ldwr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.storage.RegionFile#compressionFormat
    static void set_field_compressionFormat(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "version", "field_20437", "compressionFormat", "f_63623_"), "Ldwr;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.storage.RegionFile#header
    static jobject get_field_header(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "header", "field_20438", "header", "f_63624_"), "Ljava/nio/ByteBuffer;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.storage.RegionFile#header
    static void set_field_header(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "header", "field_20438", "header", "f_63624_"), "Ljava/nio/ByteBuffer;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.storage.RegionFile#sectorData
    static jobject get_field_sectorData(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "offsets", "field_20439", "sectorData", "f_63625_"), "Ljava/nio/IntBuffer;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.storage.RegionFile#sectorData
    static void set_field_sectorData(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "offsets", "field_20439", "sectorData", "f_63625_"), "Ljava/nio/IntBuffer;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.storage.RegionFile#saveTimes
    static jobject get_field_saveTimes(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "timestamps", "field_20440", "saveTimes", "f_63626_"), "Ljava/nio/IntBuffer;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.storage.RegionFile#saveTimes
    static void set_field_saveTimes(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "timestamps", "field_20440", "saveTimes", "f_63626_"), "Ljava/nio/IntBuffer;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.world.storage.RegionFile#sectors
    static jobject get_field_sectors(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "usedSectors", "field_20441", "sectors", "f_63618_"), "Ldwo;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.world.storage.RegionFile#sectors
    static void set_field_sectors(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "usedSectors", "field_20441", "sectors", "f_63618_"), "Ldwo;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_getPath() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getPath", "method_56566", "getPath", "m_321600_"), "()Ljava/nio/file/Path;");
    }

    static jobject getPath(const jobject& obj) {
                
       const auto methodID = methodID_getPath();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getExternalChunkPath() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "getExternalChunkPath", "method_22413", "getExternalChunkPath", "m_63684_"), "(Ldcd;)Ljava/nio/file/Path;");
    }

    static jobject getExternalChunkPath(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getExternalChunkPath();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getChunkInputStream() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getChunkDataInputStream", "method_21873", "getChunkInputStream", "m_63645_"), "(Ldcd;)Ljava/io/DataInputStream;");
    }

    static jobject getChunkInputStream(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getChunkInputStream();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getEpochTimeSeconds() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "getTimestamp", "method_31739", "getEpochTimeSeconds", "m_156612_"), "()I");
    }

    static jint getEpochTimeSeconds() {
       const auto clazz = self();
       const auto methodID = methodID_getEpochTimeSeconds();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID);
    };
    
    static jmethodID methodID_hasChunkStreamVersionId() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "isExternalStreamChunk", "method_22407", "hasChunkStreamVersionId", "m_63638_"), "(B)Z");
    }

    static jboolean hasChunkStreamVersionId(const jbyte& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_hasChunkStreamVersionId();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getChunkStreamVersionId() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "getExternalChunkVersion", "method_22412", "getChunkStreamVersionId", "m_63669_"), "(B)B");
    }

    static jbyte getChunkStreamVersionId(const jbyte& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getChunkStreamVersionId();
       return MinecraftSDK::env->CallStaticByteMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_decompress() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "createChunkInputStream", "method_22409", "decompress", "m_63650_"), "(Ldcd;BLjava/io/InputStream;)Ljava/io/DataInputStream;");
    }

    static jobject decompress(const jobject& obj, const jobject& arg0, const jbyte& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_decompress();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getInputStream() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "createExternalChunkInputStream", "method_22408", "getInputStream", "m_63647_"), "(Ldcd;B)Ljava/io/DataInputStream;");
    }

    static jobject getInputStream(const jobject& obj, const jobject& arg0, const jbyte& arg1) {
                
       const auto methodID = methodID_getInputStream();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__getInputStream() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "createStream", "method_21876", "getInputStream", "m_63659_"), "(Ljava/nio/ByteBuffer;I)Ljava/io/ByteArrayInputStream;");
    }

    static jobject _getInputStream(const jobject& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID__getInputStream();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_packSectorData() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "packSectorOffset", "method_21872", "packSectorData", "m_63642_"), "(II)I");
    }

    static jint packSectorData(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_packSectorData();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getSize() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getNumSectors", "method_21871", "getSize", "m_63640_"), "(I)I");
    }

    static jint getSize(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getSize();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getOffset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "getSectorNumber", "method_21878", "getOffset", "m_63671_"), "(I)I");
    }

    static jint getOffset(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getOffset();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getSectorCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "sizeToSectors", "method_21880", "getSectorCount", "m_63676_"), "(I)I");
    }

    static jint getSectorCount(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getSectorCount();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_isChunkValid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "doesChunkExist", "method_21879", "isChunkValid", "m_63673_"), "(Ldcd;)Z");
    }

    static jboolean isChunkValid(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isChunkValid();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getChunkOutputStream() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getChunkDataOutputStream", "method_21881", "getChunkOutputStream", "m_63678_"), "(Ldcd;)Ljava/io/DataOutputStream;");
    }

    static jobject getChunkOutputStream(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getChunkOutputStream();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_sync() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "flush", "method_26981", "sync", "m_63637_"), "()V");
    }

    static void sync(const jobject& obj) {
                
       const auto methodID = methodID_sync();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_delete() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "clear", "method_31740", "delete", "m_156613_"), "(Ldcd;)V");
    }

    static void delete(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_delete();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_writeChunk() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "write", "method_21874", "writeChunk", "m_63654_"), "(Ldcd;Ljava/nio/ByteBuffer;)V");
    }

    static void writeChunk(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_writeChunk();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getHeaderBuf() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "createExternalStub", "method_22406", "getHeaderBuf", "m_63668_"), "()Ljava/nio/ByteBuffer;");
    }

    static jobject getHeaderBuf(const jobject& obj) {
                
       const auto methodID = methodID_getHeaderBuf();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_writeSafely() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "writeToExternalFile", "method_22410", "writeSafely", "m_63662_"), "(Ljava/nio/file/Path;Ljava/nio/ByteBuffer;)Ldwp$b;");
    }

    static jobject writeSafely(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_writeSafely();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_writeHeader() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "writeHeader", "method_21870", "writeHeader", "m_63675_"), "()V");
    }

    static void writeHeader(const jobject& obj) {
                
       const auto methodID = methodID_writeHeader();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getSectorData() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "getOffset", "method_12419", "getSectorData", "m_63686_"), "(Ldcd;)I");
    }

    static jint getSectorData(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getSectorData();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_hasChunk() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "hasChunk", "method_12423", "hasChunk", "m_63682_"), "(Ldcd;)Z");
    }

    static jboolean hasChunk(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_hasChunk();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getIndex() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("h", "getOffsetIndex", "method_17909", "getIndex", "m_63688_"), "(Ldcd;)I");
    }

    static jint getIndex(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getIndex();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_close() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("close", "close", "", "", "close"), "()V");
    }

    static void close(const jobject& obj) {
                
       const auto methodID = methodID_close();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_fillLastSector() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "padToFullSector", "method_21877", "fillLastSector", "m_63681_"), "()V");
    }

    static void fillLastSector(const jobject& obj) {
                
       const auto methodID = methodID_fillLastSector();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_WORLD_STORAGE_REGIONFILE_HPP