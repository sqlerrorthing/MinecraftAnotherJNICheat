// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_UPDATER_WORLDUPDATER_HPP
#define NET_MINECRAFT_WORLD_UPDATER_WORLDUPDATER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.updater.WorldUpdater
 * Remapped: bqf
 */
namespace WorldUpdater {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("bqf", "net/minecraft/util/worldupdate/WorldUpgrader", "net/minecraft/class_1257", "net/minecraft/world/updater/WorldUpdater", "net/minecraft/src/C_458_"));
        }
        return cachedClass;
    };

    // getter for static default field net.minecraft.world.updater.WorldUpdater#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_5756", "LOGGER", "f_18797_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.world.updater.WorldUpdater#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_5756", "LOGGER", "f_18797_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.updater.WorldUpdater#UPDATE_THREAD_FACTORY
    [[maybe_unused]] static jobject get_field_UPDATE_THREAD_FACTORY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "THREAD_FACTORY", "field_5757", "UPDATE_THREAD_FACTORY", "f_18798_"), "Ljava/util/concurrent/ThreadFactory;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.updater.WorldUpdater#UPDATE_THREAD_FACTORY
    [[maybe_unused]] static void set_field_UPDATE_THREAD_FACTORY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "THREAD_FACTORY", "field_5757", "UPDATE_THREAD_FACTORY", "f_18798_"), "Ljava/util/concurrent/ThreadFactory;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.updater.WorldUpdater#NEW_PREFIX
    [[maybe_unused]] static jobject get_field_NEW_PREFIX() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "NEW_DIRECTORY_PREFIX", "field_48723", "NEW_PREFIX", "f_315260_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.updater.WorldUpdater#NEW_PREFIX
    [[maybe_unused]] static void set_field_NEW_PREFIX(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "NEW_DIRECTORY_PREFIX", "field_48723", "NEW_PREFIX", "f_315260_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.world.updater.WorldUpdater#UPGRADING_POI_TEXT
    [[maybe_unused]] static jobject get_field_UPGRADING_POI_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "STATUS_UPGRADING_POI", "field_48724", "UPGRADING_POI_TEXT", "f_314932_"), "Lxn;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.world.updater.WorldUpdater#UPGRADING_POI_TEXT
    [[maybe_unused]] static void set_field_UPGRADING_POI_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "STATUS_UPGRADING_POI", "field_48724", "UPGRADING_POI_TEXT", "f_314932_"), "Lxn;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.world.updater.WorldUpdater#FINISHED_POI_TEXT
    [[maybe_unused]] static jobject get_field_FINISHED_POI_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "STATUS_FINISHED_POI", "field_48725", "FINISHED_POI_TEXT", "f_316185_"), "Lxn;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.world.updater.WorldUpdater#FINISHED_POI_TEXT
    [[maybe_unused]] static void set_field_FINISHED_POI_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "STATUS_FINISHED_POI", "field_48725", "FINISHED_POI_TEXT", "f_316185_"), "Lxn;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.world.updater.WorldUpdater#UPGRADING_ENTITIES_TEXT
    [[maybe_unused]] static jobject get_field_UPGRADING_ENTITIES_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "STATUS_UPGRADING_ENTITIES", "field_48726", "UPGRADING_ENTITIES_TEXT", "f_315886_"), "Lxn;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.world.updater.WorldUpdater#UPGRADING_ENTITIES_TEXT
    [[maybe_unused]] static void set_field_UPGRADING_ENTITIES_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "STATUS_UPGRADING_ENTITIES", "field_48726", "UPGRADING_ENTITIES_TEXT", "f_315886_"), "Lxn;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.world.updater.WorldUpdater#FINISHED_ENTITIES_TEXT
    [[maybe_unused]] static jobject get_field_FINISHED_ENTITIES_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "STATUS_FINISHED_ENTITIES", "field_48727", "FINISHED_ENTITIES_TEXT", "f_317146_"), "Lxn;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.world.updater.WorldUpdater#FINISHED_ENTITIES_TEXT
    [[maybe_unused]] static void set_field_FINISHED_ENTITIES_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "STATUS_FINISHED_ENTITIES", "field_48727", "FINISHED_ENTITIES_TEXT", "f_317146_"), "Lxn;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.world.updater.WorldUpdater#UPGRADING_CHUNKS_TEXT
    [[maybe_unused]] static jobject get_field_UPGRADING_CHUNKS_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "STATUS_UPGRADING_CHUNKS", "field_48728", "UPGRADING_CHUNKS_TEXT", "f_314844_"), "Lxn;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.world.updater.WorldUpdater#UPGRADING_CHUNKS_TEXT
    [[maybe_unused]] static void set_field_UPGRADING_CHUNKS_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "STATUS_UPGRADING_CHUNKS", "field_48728", "UPGRADING_CHUNKS_TEXT", "f_314844_"), "Lxn;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.world.updater.WorldUpdater#FINISHED_CHUNKS_TEXT
    [[maybe_unused]] static jobject get_field_FINISHED_CHUNKS_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "STATUS_FINISHED_CHUNKS", "field_48729", "FINISHED_CHUNKS_TEXT", "f_316515_"), "Lxn;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.world.updater.WorldUpdater#FINISHED_CHUNKS_TEXT
    [[maybe_unused]] static void set_field_FINISHED_CHUNKS_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "STATUS_FINISHED_CHUNKS", "field_48729", "FINISHED_CHUNKS_TEXT", "f_316515_"), "Lxn;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for default field net.minecraft.world.updater.WorldUpdater#dimensionOptionsRegistry
    static jobject get_field_dimensionOptionsRegistry(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "dimensions", "field_40113", "dimensionOptionsRegistry", "f_243889_"), "Ljz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.updater.WorldUpdater#dimensionOptionsRegistry
    static void set_field_dimensionOptionsRegistry(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "dimensions", "field_40113", "dimensionOptionsRegistry", "f_243889_"), "Ljz;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.world.updater.WorldUpdater#worldKeys
    static jobject get_field_worldKeys(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "levels", "field_40114", "worldKeys", "f_243666_"), "Ljava/util/Set;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.updater.WorldUpdater#worldKeys
    static void set_field_worldKeys(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "levels", "field_40114", "worldKeys", "f_243666_"), "Ljava/util/Set;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.world.updater.WorldUpdater#eraseCache
    static jboolean get_field_eraseCache(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "eraseCache", "field_19225", "eraseCache", "f_18800_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.updater.WorldUpdater#eraseCache
    static void set_field_eraseCache(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "eraseCache", "field_19225", "eraseCache", "f_18800_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.world.updater.WorldUpdater#recreateRegionFiles
    static jboolean get_field_recreateRegionFiles(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "recreateRegionFiles", "field_48730", "recreateRegionFiles", "f_316532_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.updater.WorldUpdater#recreateRegionFiles
    static void set_field_recreateRegionFiles(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "recreateRegionFiles", "field_48730", "recreateRegionFiles", "f_316532_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.world.updater.WorldUpdater#session
    static jobject get_field_session(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "levelStorage", "field_24083", "session", "f_18801_"), "Lerf$c;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.updater.WorldUpdater#session
    static void set_field_session(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "levelStorage", "field_24083", "session", "f_18801_"), "Lerf$c;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.updater.WorldUpdater#updateThread
    static jobject get_field_updateThread(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "thread", "field_5767", "updateThread", "f_18802_"), "Ljava/lang/Thread;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.updater.WorldUpdater#updateThread
    static void set_field_updateThread(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "thread", "field_5767", "updateThread", "f_18802_"), "Ljava/lang/Thread;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.world.updater.WorldUpdater#dataFixer
    static jobject get_field_dataFixer(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "dataFixer", "field_24084", "dataFixer", "f_18803_"), "Lcom/mojang/datafixers/DataFixer;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.updater.WorldUpdater#dataFixer
    static void set_field_dataFixer(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "dataFixer", "field_24084", "dataFixer", "f_18803_"), "Lcom/mojang/datafixers/DataFixer;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.world.updater.WorldUpdater#keepUpgradingChunks
    static jboolean get_field_keepUpgradingChunks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "running", "field_5760", "keepUpgradingChunks", "f_18804_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.updater.WorldUpdater#keepUpgradingChunks
    static void set_field_keepUpgradingChunks(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "running", "field_5760", "keepUpgradingChunks", "f_18804_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.updater.WorldUpdater#done
    static jboolean get_field_done(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "finished", "field_5759", "done", "f_18805_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.updater.WorldUpdater#done
    static void set_field_done(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "finished", "field_5759", "done", "f_18805_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.world.updater.WorldUpdater#progress
    static jfloat get_field_progress(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "progress", "field_5763", "progress", "f_18806_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.updater.WorldUpdater#progress
    static void set_field_progress(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "progress", "field_5763", "progress", "f_18806_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.world.updater.WorldUpdater#totalChunkCount
    static jint get_field_totalChunkCount(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "totalChunks", "field_5768", "totalChunkCount", "f_18807_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.updater.WorldUpdater#totalChunkCount
    static void set_field_totalChunkCount(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "totalChunks", "field_5768", "totalChunkCount", "f_18807_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.world.updater.WorldUpdater#totalRegionCount
    static jint get_field_totalRegionCount(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "totalFiles", "field_48731", "totalRegionCount", "f_314234_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.updater.WorldUpdater#totalRegionCount
    static void set_field_totalRegionCount(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "totalFiles", "field_48731", "totalRegionCount", "f_314234_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.world.updater.WorldUpdater#upgradedChunkCount
    static jint get_field_upgradedChunkCount(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "converted", "field_5766", "upgradedChunkCount", "f_18808_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.updater.WorldUpdater#upgradedChunkCount
    static void set_field_upgradedChunkCount(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "converted", "field_5766", "upgradedChunkCount", "f_18808_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.world.updater.WorldUpdater#skippedChunkCount
    static jint get_field_skippedChunkCount(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("w", "skipped", "field_5764", "skippedChunkCount", "f_18809_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.updater.WorldUpdater#skippedChunkCount
    static void set_field_skippedChunkCount(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("w", "skipped", "field_5764", "skippedChunkCount", "f_18809_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.world.updater.WorldUpdater#dimensionProgress
    static jobject get_field_dimensionProgress(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("x", "progressMap", "field_5762", "dimensionProgress", "f_18810_"), "Lit/unimi/dsi/fastutil/objects/Reference2FloatMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.updater.WorldUpdater#dimensionProgress
    static void set_field_dimensionProgress(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("x", "progressMap", "field_5762", "dimensionProgress", "f_18810_"), "Lit/unimi/dsi/fastutil/objects/Reference2FloatMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.world.updater.WorldUpdater#status
    static jobject get_field_status(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("y", "status", "field_5765", "status", "f_18811_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.updater.WorldUpdater#status
    static void set_field_status(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("y", "status", "field_5765", "status", "f_18811_"), "Lwz;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for static default field net.minecraft.world.updater.WorldUpdater#REGION_FILE_PATTERN
    [[maybe_unused]] static jobject get_field_REGION_FILE_PATTERN() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("z", "REGEX", "field_17622", "REGION_FILE_PATTERN", "f_18812_"), "Ljava/util/regex/Pattern;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.world.updater.WorldUpdater#REGION_FILE_PATTERN
    [[maybe_unused]] static void set_field_REGION_FILE_PATTERN(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("z", "REGEX", "field_17622", "REGION_FILE_PATTERN", "f_18812_"), "Ljava/util/regex/Pattern;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for default field net.minecraft.world.updater.WorldUpdater#persistentStateManager
    static jobject get_field_persistentStateManager(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("A", "overworldDataStorage", "field_5755", "persistentStateManager", "f_18813_"), "Leqz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.updater.WorldUpdater#persistentStateManager
    static void set_field_persistentStateManager(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("A", "overworldDataStorage", "field_5755", "persistentStateManager", "f_18813_"), "Leqz;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_cancel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "cancel", "method_5402", "cancel", "m_18820_"), "()V");
    }

    static void cancel(const jobject& obj) {
                
       const auto methodID = methodID_cancel();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_updateWorld() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "work", "method_5404", "updateWorld", "m_18838_"), "()V");
    }

    static void updateWorld(const jobject& obj) {
                
       const auto methodID = methodID_updateWorld();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_isDone() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "isFinished", "method_5403", "isDone", "m_18829_"), "()Z");
    }

    static jboolean isDone(const jobject& obj) {
                
       const auto methodID = methodID_isDone();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getWorlds() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "levels", "method_28304", "getWorlds", "m_246941_"), "()Ljava/util/Set;");
    }

    static jobject getWorlds(const jobject& obj) {
                
       const auto methodID = methodID_getWorlds();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getProgress() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "dimensionProgress", "method_5393", "getProgress", "m_18827_"), "(Lakq;)F");
    }

    static jfloat getProgress(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getProgress();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__getProgress() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getProgress", "method_5401", "getProgress", "m_18833_"), "()F");
    }

    static jfloat _getProgress(const jobject& obj) {
                
       const auto methodID = methodID__getProgress();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID_getTotalChunkCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "getTotalChunks", "method_5397", "getTotalChunkCount", "m_18834_"), "()I");
    }

    static jint getTotalChunkCount(const jobject& obj) {
                
       const auto methodID = methodID_getTotalChunkCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getUpgradedChunkCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "getConverted", "method_5400", "getUpgradedChunkCount", "m_18835_"), "()I");
    }

    static jint getUpgradedChunkCount(const jobject& obj) {
                
       const auto methodID = methodID_getUpgradedChunkCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getSkippedChunkCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "getSkipped", "method_5399", "getSkippedChunkCount", "m_18836_"), "()I");
    }

    static jint getSkippedChunkCount(const jobject& obj) {
                
       const auto methodID = methodID_getSkippedChunkCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getStatus() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "getStatus", "method_5394", "getStatus", "m_18837_"), "()Lwz;");
    }

    static jobject getStatus(const jobject& obj) {
                
       const auto methodID = methodID_getStatus();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getNewDirectoryPath() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "resolveRecreateDirectory", "method_56987", "getNewDirectoryPath", "m_324714_"), "(Ljava/nio/file/Path;)Ljava/nio/file/Path;");
    }

    static jobject getNewDirectoryPath(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getNewDirectoryPath();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_WORLD_UPDATER_WORLDUPDATER_HPP