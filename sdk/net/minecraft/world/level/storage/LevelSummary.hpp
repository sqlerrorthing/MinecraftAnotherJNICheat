// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_LEVEL_STORAGE_LEVELSUMMARY_HPP
#define NET_MINECRAFT_WORLD_LEVEL_STORAGE_LEVELSUMMARY_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.level.storage.LevelSummary
 * Remapped: erg
 */
namespace LevelSummary {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("erg", "net/minecraft/world/level/storage/LevelSummary", "net/minecraft/class_34", "net/minecraft/world/level/storage/LevelSummary", "net/minecraft/src/C_2789_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.world.level.storage.LevelSummary#SELECT_WORLD_TEXT
    [[maybe_unused]] static jobject get_field_SELECT_WORLD_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "PLAY_WORLD", "field_46832", "SELECT_WORLD_TEXT", "f_303340_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.level.storage.LevelSummary#SELECT_WORLD_TEXT
    [[maybe_unused]] static void set_field_SELECT_WORLD_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "PLAY_WORLD", "field_46832", "SELECT_WORLD_TEXT", "f_303340_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.world.level.storage.LevelSummary#levelInfo
    static jobject get_field_levelInfo(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "settings", "field_25022", "levelInfo", "f_78344_"), "Ldda;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.level.storage.LevelSummary#levelInfo
    static void set_field_levelInfo(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "settings", "field_25022", "levelInfo", "f_78344_"), "Ldda;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.level.storage.LevelSummary#versionInfo
    static jobject get_field_versionInfo(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "levelVersion", "field_25023", "versionInfo", "f_78345_"), "Lerh;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.level.storage.LevelSummary#versionInfo
    static void set_field_versionInfo(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "levelVersion", "field_25023", "versionInfo", "f_78345_"), "Lerh;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.level.storage.LevelSummary#name
    static jobject get_field_name(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "levelId", "field_205", "name", "f_78346_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.level.storage.LevelSummary#name
    static void set_field_name(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "levelId", "field_205", "name", "f_78346_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.level.storage.LevelSummary#requiresConversion
    static jboolean get_field_requiresConversion(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "requiresManualConversion", "field_209", "requiresConversion", "f_193019_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.level.storage.LevelSummary#requiresConversion
    static void set_field_requiresConversion(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "requiresManualConversion", "field_209", "requiresConversion", "f_193019_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.level.storage.LevelSummary#locked
    static jboolean get_field_locked(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "locked", "field_23772", "locked", "f_78348_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.level.storage.LevelSummary#locked
    static void set_field_locked(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "locked", "field_23772", "locked", "f_78348_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.level.storage.LevelSummary#experimental
    static jboolean get_field_experimental(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "experimental", "field_40371", "experimental", "f_244135_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.level.storage.LevelSummary#experimental
    static void set_field_experimental(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "experimental", "field_40371", "experimental", "f_244135_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.level.storage.LevelSummary#iconPath
    static jobject get_field_iconPath(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "icon", "field_23773", "iconPath", "f_78349_"), "Ljava/nio/file/Path;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.level.storage.LevelSummary#iconPath
    static void set_field_iconPath(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "icon", "field_23773", "iconPath", "f_78349_"), "Ljava/nio/file/Path;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.level.storage.LevelSummary#details
    static jobject get_field_details(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "info", "field_24191", "details", "f_78350_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.level.storage.LevelSummary#details
    static void set_field_details(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "info", "field_24191", "details", "f_78350_"), "Lwz;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_getName() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getLevelId", "method_248", "getName", "m_78358_"), "()Ljava/lang/String;");
    }

    static jobject getName(const jobject& obj) {
                
       const auto methodID = methodID_getName();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getDisplayName() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getLevelName", "method_252", "getDisplayName", "m_78361_"), "()Ljava/lang/String;");
    }

    static jobject getDisplayName(const jobject& obj) {
                
       const auto methodID = methodID_getDisplayName();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getIconPath() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getIcon", "method_27020", "getIconPath", "m_230875_"), "()Ljava/nio/file/Path;");
    }

    static jobject getIconPath(const jobject& obj) {
                
       const auto methodID = methodID_getIconPath();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__requiresConversion() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "requiresManualConversion", "method_255", "requiresConversion", "m_193020_"), "()Z");
    }

    static jboolean _requiresConversion(const jobject& obj) {
                
       const auto methodID = methodID__requiresConversion();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isExperimental() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "isExperimental", "method_45554", "isExperimental", "m_246454_"), "()Z");
    }

    static jboolean isExperimental(const jobject& obj) {
                
       const auto methodID = methodID_isExperimental();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getLastPlayed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "getLastPlayed", "method_249", "getLastPlayed", "m_78366_"), "()J");
    }

    static jlong getLastPlayed(const jobject& obj) {
                
       const auto methodID = methodID_getLastPlayed();
       return MinecraftSDK::env->CallLongMethod(obj, methodID);
    };
    
    static jmethodID methodID_compareTo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "compareTo", "method_251", "compareTo", "compareTo"), "(Lerg;)I");
    }

    static jint compareTo(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_compareTo();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getLevelInfo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "getSettings", "method_35505", "getLevelInfo", "m_164913_"), "()Ldda;");
    }

    static jobject getLevelInfo(const jobject& obj) {
                
       const auto methodID = methodID_getLevelInfo();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getGameMode() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "getGameMode", "method_247", "getGameMode", "m_78367_"), "()Ldct;");
    }

    static jobject getGameMode(const jobject& obj) {
                
       const auto methodID = methodID_getGameMode();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_isHardcore() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "isHardcore", "method_257", "isHardcore", "m_78368_"), "()Z");
    }

    static jboolean isHardcore(const jobject& obj) {
                
       const auto methodID = methodID_isHardcore();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasCheats() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "hasCommands", "method_259", "hasCheats", "m_78369_"), "()Z");
    }

    static jboolean hasCheats(const jobject& obj) {
                
       const auto methodID = methodID_hasCheats();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getVersion() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "getWorldVersionName", "method_258", "getVersion", "m_78370_"), "()Lxn;");
    }

    static jobject getVersion(const jobject& obj) {
                
       const auto methodID = methodID_getVersion();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getVersionInfo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "levelVersion", "method_29586", "getVersionInfo", "m_78371_"), "()Lerh;");
    }

    static jobject getVersionInfo(const jobject& obj) {
                
       const auto methodID = methodID_getVersionInfo();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_shouldPromptBackup() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("m", "shouldBackup", "method_54549", "shouldPromptBackup", "m_306713_"), "()Z");
    }

    static jboolean shouldPromptBackup(const jobject& obj) {
                
       const auto methodID = methodID_shouldPromptBackup();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_wouldBeDowngraded() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("n", "isDowngrade", "method_54550", "wouldBeDowngraded", "m_305825_"), "()Z");
    }

    static jboolean wouldBeDowngraded(const jobject& obj) {
                
       const auto methodID = methodID_wouldBeDowngraded();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getConversionWarning() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("o", "backupStatus", "method_33405", "getConversionWarning", "m_164914_"), "()Lerg$a;");
    }

    static jobject getConversionWarning(const jobject& obj) {
                
       const auto methodID = methodID_getConversionWarning();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_isLocked() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("p", "isLocked", "method_27021", "isLocked", "m_78375_"), "()Z");
    }

    static jboolean isLocked(const jobject& obj) {
                
       const auto methodID = methodID_isLocked();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isUnavailable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("q", "isDisabled", "method_33784", "isUnavailable", "m_164916_"), "()Z");
    }

    static jboolean isUnavailable(const jobject& obj) {
                
       const auto methodID = methodID_isUnavailable();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isVersionAvailable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("r", "isCompatible", "method_38496", "isVersionAvailable", "m_193021_"), "()Z");
    }

    static jboolean isVersionAvailable(const jobject& obj) {
                
       const auto methodID = methodID_isVersionAvailable();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getDetails() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("s", "getInfo", "method_27429", "getDetails", "m_78376_"), "()Lwz;");
    }

    static jobject getDetails(const jobject& obj) {
                
       const auto methodID = methodID_getDetails();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_createDetails() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("z", "createInfo", "method_27430", "createDetails", "m_78377_"), "()Lwz;");
    }

    static jobject createDetails(const jobject& obj) {
                
       const auto methodID = methodID_createDetails();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getSelectWorldText() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("t", "primaryActionMessage", "method_54551", "getSelectWorldText", "m_304777_"), "()Lwz;");
    }

    static jobject getSelectWorldText(const jobject& obj) {
                
       const auto methodID = methodID_getSelectWorldText();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_isSelectable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("u", "primaryActionActive", "method_54552", "isSelectable", "m_305960_"), "()Z");
    }

    static jboolean isSelectable(const jobject& obj) {
                
       const auto methodID = methodID_isSelectable();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isImmediatelyLoadable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("v", "canUpload", "method_56127", "isImmediatelyLoadable", "m_322465_"), "()Z");
    }

    static jboolean isImmediatelyLoadable(const jobject& obj) {
                
       const auto methodID = methodID_isImmediatelyLoadable();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isEditable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("w", "canEdit", "method_54553", "isEditable", "m_305680_"), "()Z");
    }

    static jboolean isEditable(const jobject& obj) {
                
       const auto methodID = methodID_isEditable();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isRecreatable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("x", "canRecreate", "method_54554", "isRecreatable", "m_306795_"), "()Z");
    }

    static jboolean isRecreatable(const jobject& obj) {
                
       const auto methodID = methodID_isRecreatable();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isDeletable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("y", "canDelete", "method_54555", "isDeletable", "m_305615_"), "()Z");
    }

    static jboolean isDeletable(const jobject& obj) {
                
       const auto methodID = methodID_isDeletable();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_WORLD_LEVEL_STORAGE_LEVELSUMMARY_HPP