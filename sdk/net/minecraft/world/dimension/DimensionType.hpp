// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_DIMENSION_DIMENSIONTYPE_HPP
#define NET_MINECRAFT_WORLD_DIMENSION_DIMENSIONTYPE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.dimension.DimensionType
 * Remapped: dwy
 */
namespace DimensionType {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dwy", "net/minecraft/world/level/dimension/DimensionType", "net/minecraft/class_2874", "net/minecraft/world/dimension/DimensionType", "net/minecraft/src/C_2175_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.world.dimension.DimensionType#fixedTime
    static jobject get_field_fixedTime(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "fixedTime", "comp_641", "fixedTime", "f_63854_"), "Ljava/util/OptionalLong;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.dimension.DimensionType#fixedTime
    static void set_field_fixedTime(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "fixedTime", "comp_641", "fixedTime", "f_63854_"), "Ljava/util/OptionalLong;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.dimension.DimensionType#hasSkyLight
    static jboolean get_field_hasSkyLight(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "hasSkyLight", "comp_642", "hasSkyLight", "f_223549_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.dimension.DimensionType#hasSkyLight
    static void set_field_hasSkyLight(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "hasSkyLight", "comp_642", "hasSkyLight", "f_223549_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.dimension.DimensionType#hasCeiling
    static jboolean get_field_hasCeiling(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "hasCeiling", "comp_643", "hasCeiling", "f_63856_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.dimension.DimensionType#hasCeiling
    static void set_field_hasCeiling(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "hasCeiling", "comp_643", "hasCeiling", "f_63856_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.dimension.DimensionType#ultrawarm
    static jboolean get_field_ultrawarm(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "ultraWarm", "comp_644", "ultrawarm", "f_63857_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.dimension.DimensionType#ultrawarm
    static void set_field_ultrawarm(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "ultraWarm", "comp_644", "ultrawarm", "f_63857_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.dimension.DimensionType#natural
    static jboolean get_field_natural(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "natural", "comp_645", "natural", "f_63858_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.dimension.DimensionType#natural
    static void set_field_natural(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "natural", "comp_645", "natural", "f_63858_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.dimension.DimensionType#coordinateScale
    static jdouble get_field_coordinateScale(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "coordinateScale", "comp_646", "coordinateScale", "f_63859_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.dimension.DimensionType#coordinateScale
    static void set_field_coordinateScale(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "coordinateScale", "comp_646", "coordinateScale", "f_63859_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.dimension.DimensionType#bedWorks
    static jboolean get_field_bedWorks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "bedWorks", "comp_648", "bedWorks", "f_63862_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.dimension.DimensionType#bedWorks
    static void set_field_bedWorks(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "bedWorks", "comp_648", "bedWorks", "f_63862_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.dimension.DimensionType#respawnAnchorWorks
    static jboolean get_field_respawnAnchorWorks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "respawnAnchorWorks", "comp_649", "respawnAnchorWorks", "f_63863_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.dimension.DimensionType#respawnAnchorWorks
    static void set_field_respawnAnchorWorks(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "respawnAnchorWorks", "comp_649", "respawnAnchorWorks", "f_63863_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.dimension.DimensionType#minY
    static jint get_field_minY(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "minY", "comp_651", "minY", "f_156647_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.dimension.DimensionType#minY
    static void set_field_minY(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "minY", "comp_651", "minY", "f_156647_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.dimension.DimensionType#height
    static jint get_field_height(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "height", "comp_652", "height", "f_156648_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.dimension.DimensionType#height
    static void set_field_height(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "height", "comp_652", "height", "f_156648_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.dimension.DimensionType#logicalHeight
    static jint get_field_logicalHeight(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "logicalHeight", "comp_653", "logicalHeight", "f_63865_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.dimension.DimensionType#logicalHeight
    static void set_field_logicalHeight(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "logicalHeight", "comp_653", "logicalHeight", "f_63865_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.dimension.DimensionType#infiniburn
    static jobject get_field_infiniburn(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("w", "infiniburn", "comp_654", "infiniburn", "f_63836_"), "Lawu;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.dimension.DimensionType#infiniburn
    static void set_field_infiniburn(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("w", "infiniburn", "comp_654", "infiniburn", "f_63836_"), "Lawu;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.dimension.DimensionType#effects
    static jobject get_field_effects(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("x", "effectsLocation", "comp_655", "effects", "f_63837_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.dimension.DimensionType#effects
    static void set_field_effects(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("x", "effectsLocation", "comp_655", "effects", "f_63837_"), "Lakr;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.dimension.DimensionType#ambientLight
    static jfloat get_field_ambientLight(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("y", "ambientLight", "comp_656", "ambientLight", "f_63838_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.dimension.DimensionType#ambientLight
    static void set_field_ambientLight(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("y", "ambientLight", "comp_656", "ambientLight", "f_63838_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.dimension.DimensionType#monsterSettings
    static jobject get_field_monsterSettings(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("z", "monsterSettings", "comp_847", "monsterSettings", "f_223550_"), "Ldwy$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.dimension.DimensionType#monsterSettings
    static void set_field_monsterSettings(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("z", "monsterSettings", "comp_847", "monsterSettings", "f_223550_"), "Ldwy$a;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for static public field net.minecraft.world.dimension.DimensionType#SIZE_BITS_Y
    [[maybe_unused]] static jint get_field_SIZE_BITS_Y() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "BITS_FOR_Y", "field_28133", "SIZE_BITS_Y", "f_156649_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.dimension.DimensionType#SIZE_BITS_Y
    [[maybe_unused]] static void set_field_SIZE_BITS_Y(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "BITS_FOR_Y", "field_28133", "SIZE_BITS_Y", "f_156649_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.dimension.DimensionType#field_33411
    [[maybe_unused]] static jint get_field_field_33411() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "MIN_HEIGHT", "field_33411", "field_33411", "f_156650_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.dimension.DimensionType#field_33411
    [[maybe_unused]] static void set_field_field_33411(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "MIN_HEIGHT", "field_33411", "field_33411", "f_156650_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.dimension.DimensionType#MAX_HEIGHT
    [[maybe_unused]] static jint get_field_MAX_HEIGHT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "Y_SIZE", "field_28134", "MAX_HEIGHT", "f_156651_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.dimension.DimensionType#MAX_HEIGHT
    [[maybe_unused]] static void set_field_MAX_HEIGHT(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "Y_SIZE", "field_28134", "MAX_HEIGHT", "f_156651_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.dimension.DimensionType#MAX_COLUMN_HEIGHT
    [[maybe_unused]] static jint get_field_MAX_COLUMN_HEIGHT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "MAX_Y", "field_28135", "MAX_COLUMN_HEIGHT", "f_156652_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.dimension.DimensionType#MAX_COLUMN_HEIGHT
    [[maybe_unused]] static void set_field_MAX_COLUMN_HEIGHT(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "MAX_Y", "field_28135", "MAX_COLUMN_HEIGHT", "f_156652_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.dimension.DimensionType#MIN_HEIGHT
    [[maybe_unused]] static jint get_field_MIN_HEIGHT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "MIN_Y", "field_28136", "MIN_HEIGHT", "f_156653_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.dimension.DimensionType#MIN_HEIGHT
    [[maybe_unused]] static void set_field_MIN_HEIGHT(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "MIN_Y", "field_28136", "MIN_HEIGHT", "f_156653_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.dimension.DimensionType#field_35478
    [[maybe_unused]] static jint get_field_field_35478() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "WAY_ABOVE_MAX_Y", "field_35478", "field_35478", "f_188293_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.dimension.DimensionType#field_35478
    [[maybe_unused]] static void set_field_field_35478(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "WAY_ABOVE_MAX_Y", "field_35478", "field_35478", "f_188293_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.dimension.DimensionType#field_35479
    [[maybe_unused]] static jint get_field_field_35479() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "WAY_BELOW_MIN_Y", "field_35479", "field_35479", "f_188294_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.dimension.DimensionType#field_35479
    [[maybe_unused]] static void set_field_field_35479(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "WAY_BELOW_MIN_Y", "field_35479", "field_35479", "f_188294_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.dimension.DimensionType#CODEC
    [[maybe_unused]] static jobject get_field_CODEC() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "DIRECT_CODEC", "field_24757", "CODEC", "f_63843_"), "Lcom/mojang/serialization/Codec;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.dimension.DimensionType#CODEC
    [[maybe_unused]] static void set_field_CODEC(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "DIRECT_CODEC", "field_24757", "CODEC", "f_63843_"), "Lcom/mojang/serialization/Codec;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.dimension.DimensionType#PACKET_CODEC
    [[maybe_unused]] static jobject get_field_PACKET_CODEC() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "STREAM_CODEC", "field_51951", "PACKET_CODEC", "f_337068_"), "Lyx;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.dimension.DimensionType#PACKET_CODEC
    [[maybe_unused]] static void set_field_PACKET_CODEC(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "STREAM_CODEC", "field_51951", "PACKET_CODEC", "f_337068_"), "Lyx;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.dimension.DimensionType#field_31440
    [[maybe_unused]] static jint get_field_field_31440() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("A", "MOON_PHASES", "field_31440", "field_31440", "f_156654_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.dimension.DimensionType#field_31440
    [[maybe_unused]] static void set_field_field_31440(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("A", "MOON_PHASES", "field_31440", "field_31440", "f_156654_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.dimension.DimensionType#MOON_SIZES
    [[maybe_unused]] static jfloat get_field_MOON_SIZES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "MOON_BRIGHTNESS_PER_PHASE", "field_24752", "MOON_SIZES", "f_63844_"), "[F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.dimension.DimensionType#MOON_SIZES
    [[maybe_unused]] static void set_field_MOON_SIZES(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "MOON_BRIGHTNESS_PER_PHASE", "field_24752", "MOON_SIZES", "f_63844_"), "[F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.dimension.DimensionType#REGISTRY_CODEC
    [[maybe_unused]] static jobject get_field_REGISTRY_CODEC() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "CODEC", "field_24756", "REGISTRY_CODEC", "f_63853_"), "Lcom/mojang/serialization/Codec;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.dimension.DimensionType#REGISTRY_CODEC
    [[maybe_unused]] static void set_field_REGISTRY_CODEC(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "CODEC", "field_24756", "REGISTRY_CODEC", "f_63853_"), "Lcom/mojang/serialization/Codec;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_worldFromDimensionNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "parseLegacy", "method_28521", "worldFromDimensionNbt", "m_63911_"), "(Lcom/mojang/serialization/Dynamic;)Lcom/mojang/serialization/DataResult;");
    }

    static jobject worldFromDimensionNbt(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_worldFromDimensionNbt();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getCoordinateScaleFactor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getTeleportationScale", "method_31109", "getCoordinateScaleFactor", "m_63908_"), "(Ldwy;Ldwy;)D");
    }

    static jdouble getCoordinateScaleFactor(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_getCoordinateScaleFactor();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getSaveDirectory() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getStorageFolder", "method_12488", "getSaveDirectory", "m_196975_"), "(Lakq;Ljava/nio/file/Path;)Ljava/nio/file/Path;");
    }

    static jobject getSaveDirectory(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_getSaveDirectory();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_hasFixedTime() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "hasFixedTime", "method_29960", "hasFixedTime", "m_63967_"), "()Z");
    }

    static jboolean hasFixedTime(const jobject& obj) {
                
       const auto methodID = methodID_hasFixedTime();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getSkyAngle() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "timeOfDay", "method_28528", "getSkyAngle", "m_63904_"), "(J)F");
    }

    static jfloat getSkyAngle(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_getSkyAngle();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getMoonPhase() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "moonPhase", "method_28531", "getMoonPhase", "m_63936_"), "(J)I");
    }

    static jint getMoonPhase(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_getMoonPhase();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_piglinSafe() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "piglinSafe", "method_44220", "piglinSafe", "m_63960_"), "()Z");
    }

    static jboolean piglinSafe(const jobject& obj) {
                
       const auto methodID = methodID_piglinSafe();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasRaids() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "hasRaids", "method_44221", "hasRaids", "m_63963_"), "()Z");
    }

    static jboolean hasRaids(const jobject& obj) {
                
       const auto methodID = methodID_hasRaids();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_monsterSpawnLightTest() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "monsterSpawnLightTest", "method_44222", "monsterSpawnLightTest", "m_223569_"), "()Lbpw;");
    }

    static jobject monsterSpawnLightTest(const jobject& obj) {
                
       const auto methodID = methodID_monsterSpawnLightTest();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_monsterSpawnBlockLightLimit() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "monsterSpawnBlockLightLimit", "method_44223", "monsterSpawnBlockLightLimit", "m_223570_"), "()I");
    }

    static jint monsterSpawnBlockLightLimit(const jobject& obj) {
                
       const auto methodID = methodID_monsterSpawnBlockLightLimit();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID__fixedTime() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "fixedTime", "comp_641", "fixedTime", "f_63854_"), "()Ljava/util/OptionalLong;");
    }

    static jobject _fixedTime(const jobject& obj) {
                
       const auto methodID = methodID__fixedTime();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__hasSkyLight() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "hasSkyLight", "comp_642", "hasSkyLight", "f_223549_"), "()Z");
    }

    static jboolean _hasSkyLight(const jobject& obj) {
                
       const auto methodID = methodID__hasSkyLight();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID__hasCeiling() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "hasCeiling", "comp_643", "hasCeiling", "f_63856_"), "()Z");
    }

    static jboolean _hasCeiling(const jobject& obj) {
                
       const auto methodID = methodID__hasCeiling();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID__ultrawarm() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "ultraWarm", "comp_644", "ultrawarm", "f_63857_"), "()Z");
    }

    static jboolean _ultrawarm(const jobject& obj) {
                
       const auto methodID = methodID__ultrawarm();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID__natural() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "natural", "comp_645", "natural", "f_63858_"), "()Z");
    }

    static jboolean _natural(const jobject& obj) {
                
       const auto methodID = methodID__natural();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID__coordinateScale() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "coordinateScale", "comp_646", "coordinateScale", "f_63859_"), "()D");
    }

    static jdouble _coordinateScale(const jobject& obj) {
                
       const auto methodID = methodID__coordinateScale();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID);
    };
    
    static jmethodID methodID__bedWorks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "bedWorks", "comp_648", "bedWorks", "f_63862_"), "()Z");
    }

    static jboolean _bedWorks(const jobject& obj) {
                
       const auto methodID = methodID__bedWorks();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID__respawnAnchorWorks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("m", "respawnAnchorWorks", "comp_649", "respawnAnchorWorks", "f_63863_"), "()Z");
    }

    static jboolean _respawnAnchorWorks(const jobject& obj) {
                
       const auto methodID = methodID__respawnAnchorWorks();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID__minY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("n", "minY", "comp_651", "minY", "f_156647_"), "()I");
    }

    static jint _minY(const jobject& obj) {
                
       const auto methodID = methodID__minY();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID__height() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("o", "height", "comp_652", "height", "f_156648_"), "()I");
    }

    static jint _height(const jobject& obj) {
                
       const auto methodID = methodID__height();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID__logicalHeight() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("p", "logicalHeight", "comp_653", "logicalHeight", "f_63865_"), "()I");
    }

    static jint _logicalHeight(const jobject& obj) {
                
       const auto methodID = methodID__logicalHeight();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID__infiniburn() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("q", "infiniburn", "comp_654", "infiniburn", "f_63836_"), "()Lawu;");
    }

    static jobject _infiniburn(const jobject& obj) {
                
       const auto methodID = methodID__infiniburn();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__effects() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("r", "effectsLocation", "comp_655", "effects", "f_63837_"), "()Lakr;");
    }

    static jobject _effects(const jobject& obj) {
                
       const auto methodID = methodID__effects();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__ambientLight() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("s", "ambientLight", "comp_656", "ambientLight", "f_63838_"), "()F");
    }

    static jfloat _ambientLight(const jobject& obj) {
                
       const auto methodID = methodID__ambientLight();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID);
    };
    
    static jmethodID methodID__monsterSettings() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("t", "monsterSettings", "comp_847", "monsterSettings", "f_223550_"), "()Ldwy$a;");
    }

    static jobject _monsterSettings(const jobject& obj) {
                
       const auto methodID = methodID__monsterSettings();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_WORLD_DIMENSION_DIMENSIONTYPE_HPP