// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_TICK_EMPTYTICKSCHEDULERS_HPP
#define NET_MINECRAFT_WORLD_TICK_EMPTYTICKSCHEDULERS_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.tick.EmptyTickSchedulers
 * Remapped: eym
 */
namespace EmptyTickSchedulers {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("eym", "net/minecraft/world/ticks/BlackholeTickAccess", "net/minecraft/class_6754", "net/minecraft/world/tick/EmptyTickSchedulers", "net/minecraft/src/C_183037_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.world.tick.EmptyTickSchedulers#EMPTY_BASIC_TICK_SCHEDULER
    [[maybe_unused]] static jobject get_field_EMPTY_BASIC_TICK_SCHEDULER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CONTAINER_BLACKHOLE", "field_35525", "EMPTY_BASIC_TICK_SCHEDULER", "f_193140_"), "Leyw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.tick.EmptyTickSchedulers#EMPTY_BASIC_TICK_SCHEDULER
    [[maybe_unused]] static void set_field_EMPTY_BASIC_TICK_SCHEDULER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CONTAINER_BLACKHOLE", "field_35525", "EMPTY_BASIC_TICK_SCHEDULER", "f_193140_"), "Leyw;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.tick.EmptyTickSchedulers#EMPTY_QUERYABLE_TICK_SCHEDULER
    [[maybe_unused]] static jobject get_field_EMPTY_QUERYABLE_TICK_SCHEDULER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "LEVEL_BLACKHOLE", "field_35526", "EMPTY_QUERYABLE_TICK_SCHEDULER", "f_193141_"), "Leyp;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.tick.EmptyTickSchedulers#EMPTY_QUERYABLE_TICK_SCHEDULER
    [[maybe_unused]] static void set_field_EMPTY_QUERYABLE_TICK_SCHEDULER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "LEVEL_BLACKHOLE", "field_35526", "EMPTY_QUERYABLE_TICK_SCHEDULER", "f_193141_"), "Leyp;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_getReadOnlyTickScheduler() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "emptyContainer", "method_39361", "getReadOnlyTickScheduler", "m_193144_"), "()Leyw;");
    }

    static jobject getReadOnlyTickScheduler() {
       const auto clazz = self();
       const auto methodID = methodID_getReadOnlyTickScheduler();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_getClientTickScheduler() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "emptyLevelList", "method_39362", "getClientTickScheduler", "m_193145_"), "()Leyp;");
    }

    static jobject getClientTickScheduler() {
       const auto clazz = self();
       const auto methodID = methodID_getClientTickScheduler();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
};

#endif // NET_MINECRAFT_WORLD_TICK_EMPTYTICKSCHEDULERS_HPP