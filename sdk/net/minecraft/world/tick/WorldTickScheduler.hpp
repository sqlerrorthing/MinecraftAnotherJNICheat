// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_TICK_WORLDTICKSCHEDULER_HPP
#define NET_MINECRAFT_WORLD_TICK_WORLDTICKSCHEDULER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.tick.WorldTickScheduler
 * Remapped: eyq
 */
namespace WorldTickScheduler {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("eyq", "net/minecraft/world/ticks/LevelTicks", "net/minecraft/class_6757", "net/minecraft/world/tick/WorldTickScheduler", "net/minecraft/src/C_183042_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.world.tick.WorldTickScheduler#COMPARATOR
    [[maybe_unused]] static jobject get_field_COMPARATOR() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CONTAINER_DRAIN_ORDER", "field_35531", "COMPARATOR", "f_193199_"), "Ljava/util/Comparator;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.tick.WorldTickScheduler#COMPARATOR
    [[maybe_unused]] static void set_field_COMPARATOR(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CONTAINER_DRAIN_ORDER", "field_35531", "COMPARATOR", "f_193199_"), "Ljava/util/Comparator;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.world.tick.WorldTickScheduler#tickingFutureReadyPredicate
    static jobject get_field_tickingFutureReadyPredicate(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "tickCheck", "field_35532", "tickingFutureReadyPredicate", "f_193200_"), "Ljava/util/function/LongPredicate;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.tick.WorldTickScheduler#tickingFutureReadyPredicate
    static void set_field_tickingFutureReadyPredicate(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "tickCheck", "field_35532", "tickingFutureReadyPredicate", "f_193200_"), "Ljava/util/function/LongPredicate;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.tick.WorldTickScheduler#profilerGetter
    static jobject get_field_profilerGetter(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "profiler", "field_35533", "profilerGetter", "f_193201_"), "Ljava/util/function/Supplier;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.tick.WorldTickScheduler#profilerGetter
    static void set_field_profilerGetter(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "profiler", "field_35533", "profilerGetter", "f_193201_"), "Ljava/util/function/Supplier;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.tick.WorldTickScheduler#chunkTickSchedulers
    static jobject get_field_chunkTickSchedulers(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "allContainers", "field_35534", "chunkTickSchedulers", "f_193202_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.tick.WorldTickScheduler#chunkTickSchedulers
    static void set_field_chunkTickSchedulers(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "allContainers", "field_35534", "chunkTickSchedulers", "f_193202_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.tick.WorldTickScheduler#nextTriggerTickByChunkPos
    static jobject get_field_nextTriggerTickByChunkPos(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "nextTickForContainer", "field_35535", "nextTriggerTickByChunkPos", "f_193203_"), "Lit/unimi/dsi/fastutil/longs/Long2LongMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.tick.WorldTickScheduler#nextTriggerTickByChunkPos
    static void set_field_nextTriggerTickByChunkPos(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "nextTickForContainer", "field_35535", "nextTriggerTickByChunkPos", "f_193203_"), "Lit/unimi/dsi/fastutil/longs/Long2LongMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.tick.WorldTickScheduler#tickableChunkTickSchedulers
    static jobject get_field_tickableChunkTickSchedulers(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "containersToTick", "field_35536", "tickableChunkTickSchedulers", "f_193204_"), "Ljava/util/Queue;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.tick.WorldTickScheduler#tickableChunkTickSchedulers
    static void set_field_tickableChunkTickSchedulers(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "containersToTick", "field_35536", "tickableChunkTickSchedulers", "f_193204_"), "Ljava/util/Queue;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.tick.WorldTickScheduler#tickableTicks
    static jobject get_field_tickableTicks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "toRunThisTick", "field_35537", "tickableTicks", "f_193205_"), "Ljava/util/Queue;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.tick.WorldTickScheduler#tickableTicks
    static void set_field_tickableTicks(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "toRunThisTick", "field_35537", "tickableTicks", "f_193205_"), "Ljava/util/Queue;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.tick.WorldTickScheduler#tickedTicks
    static jobject get_field_tickedTicks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "alreadyRunThisTick", "field_35538", "tickedTicks", "f_193206_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.tick.WorldTickScheduler#tickedTicks
    static void set_field_tickedTicks(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "alreadyRunThisTick", "field_35538", "tickedTicks", "f_193206_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.tick.WorldTickScheduler#copiedTickableTicksList
    static jobject get_field_copiedTickableTicksList(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "toRunThisTickSet", "field_35539", "copiedTickableTicksList", "f_193207_"), "Ljava/util/Set;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.tick.WorldTickScheduler#copiedTickableTicksList
    static void set_field_copiedTickableTicksList(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "toRunThisTickSet", "field_35539", "copiedTickableTicksList", "f_193207_"), "Ljava/util/Set;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.tick.WorldTickScheduler#queuedTickConsumer
    static jobject get_field_queuedTickConsumer(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "chunkScheduleUpdater", "field_35540", "queuedTickConsumer", "f_193208_"), "Ljava/util/function/BiConsumer;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.tick.WorldTickScheduler#queuedTickConsumer
    static void set_field_queuedTickConsumer(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "chunkScheduleUpdater", "field_35540", "queuedTickConsumer", "f_193208_"), "Ljava/util/function/BiConsumer;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_addChunkTickScheduler() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addContainer", "method_39379", "addChunkTickScheduler", "m_193231_"), "(Ldcd;Leyo;)V");
    }

    static void addChunkTickScheduler(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_addChunkTickScheduler();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_removeChunkTickScheduler() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "removeContainer", "method_39378", "removeChunkTickScheduler", "m_193229_"), "(Ldcd;)V");
    }

    static void removeChunkTickScheduler(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_removeChunkTickScheduler();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_scheduleTick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "schedule", "method_39363", "scheduleTick", "m_183393_"), "(Leyt;)V");
    }

    static void scheduleTick(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_scheduleTick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "tick", "method_39377", "tick", "m_193225_"), "(JILjava/util/function/BiConsumer;)V");
    }

    static void tick(const jobject& obj, const jlong& arg0, const jint& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_tick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_collectTickableTicks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "collectTicks", "method_39376", "collectTickableTicks", "m_193221_"), "(JILbnf;)V");
    }

    static void collectTickableTicks(const jobject& obj, const jlong& arg0, const jint& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_collectTickableTicks();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_collectTickableChunkTickSchedulers() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "sortContainersToTick", "method_39374", "collectTickableChunkTickSchedulers", "m_193216_"), "(J)V");
    }

    static void collectTickableChunkTickSchedulers(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_collectTickableChunkTickSchedulers();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_addTickableTicks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "drainContainers", "method_39375", "addTickableTicks", "m_193218_"), "(JI)V");
    }

    static void addTickableTicks(const jobject& obj, const jlong& arg0, const jint& arg1) {
                
       const auto methodID = methodID_addTickableTicks();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_delayAllTicks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "rescheduleLeftoverContainers", "method_39392", "delayAllTicks", "m_193278_"), "()V");
    }

    static void delayAllTicks(const jobject& obj) {
                
       const auto methodID = methodID_delayAllTicks();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_schedule() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "updateContainerScheduling", "method_39393", "schedule", "m_193279_"), "(Leyt;)V");
    }

    static void schedule(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_schedule();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__addTickableTicks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "drainFromCurrentContainer", "method_39389", "addTickableTicks", "m_193267_"), "(Ljava/util/Queue;Leyo;JI)V");
    }

    static void _addTickableTicks(const jobject& obj, const jobject& arg0, const jobject& arg1, const jlong& arg2, const jint& arg3) {
                
       const auto methodID = methodID__addTickableTicks();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_addTickableTick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "scheduleForThisTick", "method_39395", "addTickableTick", "m_193285_"), "(Leyt;)V");
    }

    static void addTickableTick(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addTickableTick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isTickableTicksCountUnder() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "canScheduleMoreTicks", "method_39373", "isTickableTicksCountUnder", "m_193214_"), "(I)Z");
    }

    static jboolean isTickableTicksCountUnder(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_isTickableTicksCountUnder();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "runCollectedTicks", "method_39390", "tick", "m_193272_"), "(Ljava/util/function/BiConsumer;)V");
    }

    static void _tick(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__tick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_clear() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "cleanupAfterTick", "method_39394", "clear", "m_193284_"), "()V");
    }

    static void clear(const jobject& obj) {
                
       const auto methodID = methodID_clear();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_isQueued() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "hasScheduledTick", "method_8674", "isQueued", "m_183582_"), "(Ljd;Ljava/lang/Object;)Z");
    }

    static jboolean isQueued(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_isQueued();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isTicking() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "willTickThisTick", "method_8677", "isTicking", "m_183588_"), "(Ljd;Ljava/lang/Object;)Z");
    }

    static jboolean isTicking(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_isTicking();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_copyTickableTicksList() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "calculateTickSetIfNeeded", "method_39396", "copyTickableTicksList", "m_193287_"), "()V");
    }

    static void copyTickableTicksList(const jobject& obj) {
                
       const auto methodID = methodID_copyTickableTicksList();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_visitChunks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "forContainersInArea", "method_39381", "visitChunks", "m_193236_"), "(Lejj;Leyq$a;)V");
    }

    static void visitChunks(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_visitChunks();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_clearNextTicks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "clearArea", "method_39380", "clearNextTicks", "m_193234_"), "(Lejj;)V");
    }

    static void clearNextTicks(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_clearNextTicks();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_scheduleTicks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "copyArea", "method_39383", "scheduleTicks", "m_193242_"), "(Lejj;Lkh;)V");
    }

    static void scheduleTicks(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_scheduleTicks();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__scheduleTicks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "copyAreaFrom", "method_48167", "scheduleTicks", "m_264560_"), "(Leyq;Lejj;Lkh;)V");
    }

    static void _scheduleTicks(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID__scheduleTicks();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getTickCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "count", "method_20825", "getTickCount", "m_183574_"), "()I");
    }

    static jint getTickCount(const jobject& obj) {
                
       const auto methodID = methodID_getTickCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_WORLD_TICK_WORLDTICKSCHEDULER_HPP