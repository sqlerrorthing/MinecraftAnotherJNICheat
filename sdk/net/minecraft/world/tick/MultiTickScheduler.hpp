// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_TICK_MULTITICKSCHEDULER_HPP
#define NET_MINECRAFT_WORLD_TICK_MULTITICKSCHEDULER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.tick.MultiTickScheduler
 * Remapped: eyy
 */
namespace MultiTickScheduler {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("eyy", "net/minecraft/world/ticks/WorldGenTickAccess", "net/minecraft/class_3235", "net/minecraft/world/tick/MultiTickScheduler", "net/minecraft/src/C_183053_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.world.tick.MultiTickScheduler#mapper
    static jobject get_field_mapper(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "containerGetter", "field_35552", "mapper", "f_193452_"), "Ljava/util/function/Function;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.tick.MultiTickScheduler#mapper
    static void set_field_mapper(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "containerGetter", "field_35552", "mapper", "f_193452_"), "Ljava/util/function/Function;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_isQueued() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "hasScheduledTick", "method_8674", "isQueued", "m_183582_"), "(Ljd;Ljava/lang/Object;)Z");
    }

    static jboolean isQueued(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_isQueued();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_scheduleTick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "schedule", "method_39363", "scheduleTick", "m_183393_"), "(Leyt;)V");
    }

    static void scheduleTick(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_scheduleTick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isTicking() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "willTickThisTick", "method_8677", "isTicking", "m_183588_"), "(Ljd;Ljava/lang/Object;)Z");
    }

    static jboolean isTicking(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_isTicking();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getTickCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "count", "method_20825", "getTickCount", "m_183574_"), "()I");
    }

    static jint getTickCount(const jobject& obj) {
                
       const auto methodID = methodID_getTickCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_WORLD_TICK_MULTITICKSCHEDULER_HPP