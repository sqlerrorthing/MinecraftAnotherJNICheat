// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_TICK_CHUNKTICKSCHEDULER_HPP
#define NET_MINECRAFT_WORLD_TICK_CHUNKTICKSCHEDULER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.tick.ChunkTickScheduler
 * Remapped: eyo
 */
namespace ChunkTickScheduler {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("eyo", "net/minecraft/world/ticks/LevelChunkTicks", "net/minecraft/class_6755", "net/minecraft/world/tick/ChunkTickScheduler", "net/minecraft/src/C_183040_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.world.tick.ChunkTickScheduler#tickQueue
    static jobject get_field_tickQueue(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "tickQueue", "field_35527", "tickQueue", "f_193163_"), "Ljava/util/Queue;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.tick.ChunkTickScheduler#tickQueue
    static void set_field_tickQueue(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "tickQueue", "field_35527", "tickQueue", "f_193163_"), "Ljava/util/Queue;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.tick.ChunkTickScheduler#ticks
    static jobject get_field_ticks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "pendingTicks", "field_35528", "ticks", "f_193164_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.tick.ChunkTickScheduler#ticks
    static void set_field_ticks(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "pendingTicks", "field_35528", "ticks", "f_193164_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.tick.ChunkTickScheduler#queuedTicks
    static jobject get_field_queuedTicks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "ticksPerPosition", "field_35529", "queuedTicks", "f_193165_"), "Ljava/util/Set;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.tick.ChunkTickScheduler#queuedTicks
    static void set_field_queuedTicks(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "ticksPerPosition", "field_35529", "queuedTicks", "f_193165_"), "Ljava/util/Set;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.tick.ChunkTickScheduler#tickConsumer
    static jobject get_field_tickConsumer(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "onTickAdded", "field_35530", "tickConsumer", "f_193166_"), "Ljava/util/function/BiConsumer;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.tick.ChunkTickScheduler#tickConsumer
    static void set_field_tickConsumer(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "onTickAdded", "field_35530", "tickConsumer", "f_193166_"), "Ljava/util/function/BiConsumer;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_setTickConsumer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setOnTickAdded", "method_39366", "setTickConsumer", "m_193181_"), "(Ljava/util/function/BiConsumer;)V");
    }

    static void setTickConsumer(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setTickConsumer();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_peekNextTick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "peek", "method_39369", "peekNextTick", "m_193189_"), "()Leyt;");
    }

    static jobject peekNextTick(const jobject& obj) {
                
       const auto methodID = methodID_peekNextTick();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_pollNextTick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "poll", "method_39371", "pollNextTick", "m_193195_"), "()Leyt;");
    }

    static jobject pollNextTick(const jobject& obj) {
                
       const auto methodID = methodID_pollNextTick();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_scheduleTick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "schedule", "method_39363", "scheduleTick", "m_183393_"), "(Leyt;)V");
    }

    static void scheduleTick(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_scheduleTick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_queueTick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "scheduleUnchecked", "method_39370", "queueTick", "m_193193_"), "(Leyt;)V");
    }

    static void queueTick(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_queueTick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isQueued() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "hasScheduledTick", "method_8674", "isQueued", "m_183582_"), "(Ljd;Ljava/lang/Object;)Z");
    }

    static jboolean isQueued(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_isQueued();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_removeTicksIf() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "removeIf", "method_39367", "removeTicksIf", "m_193183_"), "(Ljava/util/function/Predicate;)V");
    }

    static void removeTicksIf(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_removeTicksIf();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getQueueAsStream() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getAll", "method_39372", "getQueueAsStream", "m_193196_"), "()Ljava/util/stream/Stream;");
    }

    static jobject getQueueAsStream(const jobject& obj) {
                
       const auto methodID = methodID_getQueueAsStream();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getTickCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "count", "method_20825", "getTickCount", "m_183574_"), "()I");
    }

    static jint getTickCount(const jobject& obj) {
                
       const auto methodID = methodID_getTickCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_toNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "save", "method_39365", "toNbt", "m_183237_"), "(JLjava/util/function/Function;)Luh;");
    }

    static jobject toNbt(const jobject& obj, const jlong& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_toNbt();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_disable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "unpack", "method_39364", "disable", "m_193171_"), "(J)V");
    }

    static void disable(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_disable();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_create() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "load", "method_39368", "create", "m_193185_"), "(Luh;Ljava/util/function/Function;Ldcd;)Leyo;");
    }

    static jobject create(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_create();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
};

#endif // NET_MINECRAFT_WORLD_TICK_CHUNKTICKSCHEDULER_HPP