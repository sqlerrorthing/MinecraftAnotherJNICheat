// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_BIOME_SOURCE_BIOMEACCESS_HPP
#define NET_MINECRAFT_WORLD_BIOME_SOURCE_BIOMEACCESS_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.biome.source.BiomeAccess
 * Remapped: ddy
 */
namespace BiomeAccess {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("ddy", "net/minecraft/world/level/biome/BiomeManager", "net/minecraft/class_4543", "net/minecraft/world/biome/source/BiomeAccess", "net/minecraft/src/C_1642_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.world.biome.source.BiomeAccess#CHUNK_CENTER_OFFSET
    [[maybe_unused]] static jint get_field_CHUNK_CENTER_OFFSET() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CHUNK_CENTER_QUART", "field_28106", "CHUNK_CENTER_OFFSET", "f_151750_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.source.BiomeAccess#CHUNK_CENTER_OFFSET
    [[maybe_unused]] static void set_field_CHUNK_CENTER_OFFSET(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CHUNK_CENTER_QUART", "field_28106", "CHUNK_CENTER_OFFSET", "f_151750_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.biome.source.BiomeAccess#field_34466
    [[maybe_unused]] static jint get_field_field_34466() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ZOOM_BITS", "field_34466", "field_34466", "f_186673_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.BiomeAccess#field_34466
    [[maybe_unused]] static void set_field_field_34466(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ZOOM_BITS", "field_34466", "field_34466", "f_186673_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.biome.source.BiomeAccess#field_34467
    [[maybe_unused]] static jint get_field_field_34467() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "ZOOM", "field_34467", "field_34467", "f_186674_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.BiomeAccess#field_34467
    [[maybe_unused]] static void set_field_field_34467(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "ZOOM", "field_34467", "field_34467", "f_186674_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.biome.source.BiomeAccess#field_34468
    [[maybe_unused]] static jint get_field_field_34468() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "ZOOM_MASK", "field_34468", "field_34468", "f_186675_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.BiomeAccess#field_34468
    [[maybe_unused]] static void set_field_field_34468(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "ZOOM_MASK", "field_34468", "field_34468", "f_186675_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.world.biome.source.BiomeAccess#storage
    static jobject get_field_storage(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "noiseBiomeSource", "field_20640", "storage", "f_47862_"), "Lddy$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.BiomeAccess#storage
    static void set_field_storage(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "noiseBiomeSource", "field_20640", "storage", "f_47862_"), "Lddy$a;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.biome.source.BiomeAccess#seed
    static jlong get_field_seed(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "biomeZoomSeed", "field_20641", "seed", "f_47863_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.BiomeAccess#seed
    static void set_field_seed(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "biomeZoomSeed", "field_20641", "seed", "f_47863_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    static jmethodID methodID_hashSeed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "obfuscateSeed", "method_27984", "hashSeed", "m_47877_"), "(J)J");
    }

    static jlong hashSeed(const jlong& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_hashSeed();
       return MinecraftSDK::env->CallStaticLongMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_withSource() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "withDifferentSource", "method_38107", "withSource", "m_186687_"), "(Lddy$a;)Lddy;");
    }

    static jobject withSource(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_withSource();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getBiome() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getBiome", "method_22393", "getBiome", "m_204214_"), "(Ljd;)Ljm;");
    }

    static jobject getBiome(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getBiome();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getBiomeForNoiseGen() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getNoiseBiomeAtPosition", "method_24938", "getBiomeForNoiseGen", "m_204206_"), "(DDD)Ljm;");
    }

    static jobject getBiomeForNoiseGen(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2) {
                
       const auto methodID = methodID_getBiomeForNoiseGen();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__getBiomeForNoiseGen() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getNoiseBiomeAtPosition", "method_27344", "getBiomeForNoiseGen", "m_204216_"), "(Ljd;)Ljm;");
    }

    static jobject _getBiomeForNoiseGen(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__getBiomeForNoiseGen();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID___getBiomeForNoiseGen() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getNoiseBiomeAtQuart", "method_24854", "getBiomeForNoiseGen", "m_204210_"), "(III)Ljm;");
    }

    static jobject __getBiomeForNoiseGen(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID___getBiomeForNoiseGen();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_method_38106() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getFiddledDistance", "method_38106", "method_38106", "m_186679_"), "(JIIIDDD)D");
    }

    static jdouble method_38106(const jlong& arg0, const jint& arg1, const jint& arg2, const jint& arg3, const jdouble& arg4, const jdouble& arg5, const jdouble& arg6) {
       const auto clazz = self();
       const auto methodID = methodID_method_38106();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    };
    
    static jmethodID methodID_method_38108() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "getFiddle", "method_38108", "method_38108", "m_186689_"), "(J)D");
    }

    static jdouble method_38108(const jlong& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_method_38108();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_WORLD_BIOME_SOURCE_BIOMEACCESS_HPP