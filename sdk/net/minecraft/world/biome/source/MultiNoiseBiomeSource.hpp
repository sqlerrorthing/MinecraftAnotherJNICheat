// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_BIOME_SOURCE_MULTINOISEBIOMESOURCE_HPP
#define NET_MINECRAFT_WORLD_BIOME_SOURCE_MULTINOISEBIOMESOURCE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.biome.source.MultiNoiseBiomeSource
 * Remapped: dej
 */
namespace MultiNoiseBiomeSource {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dej", "net/minecraft/world/level/biome/MultiNoiseBiomeSource", "net/minecraft/class_4766", "net/minecraft/world/biome/source/MultiNoiseBiomeSource", "net/minecraft/src/C_1665_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.world.biome.source.MultiNoiseBiomeSource#BIOME_CODEC
    [[maybe_unused]] static jobject get_field_BIOME_CODEC() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "ENTRY_CODEC", "field_42984", "BIOME_CODEC", "f_273882_"), "Lcom/mojang/serialization/MapCodec;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.MultiNoiseBiomeSource#BIOME_CODEC
    [[maybe_unused]] static void set_field_BIOME_CODEC(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "ENTRY_CODEC", "field_42984", "BIOME_CODEC", "f_273882_"), "Lcom/mojang/serialization/MapCodec;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.source.MultiNoiseBiomeSource#CUSTOM_CODEC
    [[maybe_unused]] static jobject get_field_CUSTOM_CODEC() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "DIRECT_CODEC", "field_24718", "CUSTOM_CODEC", "f_48424_"), "Lcom/mojang/serialization/MapCodec;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.source.MultiNoiseBiomeSource#CUSTOM_CODEC
    [[maybe_unused]] static void set_field_CUSTOM_CODEC(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "DIRECT_CODEC", "field_24718", "CUSTOM_CODEC", "f_48424_"), "Lcom/mojang/serialization/MapCodec;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.biome.source.MultiNoiseBiomeSource#PRESET_CODEC
    [[maybe_unused]] static jobject get_field_PRESET_CODEC() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "PRESET_CODEC", "field_42985", "PRESET_CODEC", "f_273891_"), "Lcom/mojang/serialization/MapCodec;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.MultiNoiseBiomeSource#PRESET_CODEC
    [[maybe_unused]] static void set_field_PRESET_CODEC(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "PRESET_CODEC", "field_42985", "PRESET_CODEC", "f_273891_"), "Lcom/mojang/serialization/MapCodec;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.source.MultiNoiseBiomeSource#CODEC
    [[maybe_unused]] static jobject get_field_CODEC() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "CODEC", "field_24719", "CODEC", "f_48425_"), "Lcom/mojang/serialization/MapCodec;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.source.MultiNoiseBiomeSource#CODEC
    [[maybe_unused]] static void set_field_CODEC(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "CODEC", "field_24719", "CODEC", "f_48425_"), "Lcom/mojang/serialization/MapCodec;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.world.biome.source.MultiNoiseBiomeSource#biomeEntries
    static jobject get_field_biomeEntries(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "parameters", "field_34498", "biomeEntries", "f_48435_"), "Lcom/mojang/datafixers/util/Either;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.MultiNoiseBiomeSource#biomeEntries
    static void set_field_biomeEntries(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "parameters", "field_34498", "biomeEntries", "f_48435_"), "Lcom/mojang/datafixers/util/Either;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_create() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "createFromList", "method_49501", "create", "m_274596_"), "(Ldef$c;)Ldej;");
    }

    static jobject create(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_create();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID__create() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "createFromPreset", "method_49503", "create", "m_274591_"), "(Ljm;)Ldej;");
    }

    static jobject _create(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID__create();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getBiomeEntries() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "parameters", "method_49506", "getBiomeEntries", "m_274409_"), "()Ldef$c;");
    }

    static jobject getBiomeEntries(const jobject& obj) {
                
       const auto methodID = methodID_getBiomeEntries();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_biomeStream() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "collectPossibleBiomes", "method_49494", "biomeStream", "m_274359_"), "()Ljava/util/stream/Stream;");
    }

    static jobject biomeStream(const jobject& obj) {
                
       const auto methodID = methodID_biomeStream();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getCodec() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "codec", "method_28442", "getCodec", "m_5820_"), "()Lcom/mojang/serialization/MapCodec;");
    }

    static jobject getCodec(const jobject& obj) {
                
       const auto methodID = methodID_getCodec();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_matchesInstance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "stable", "method_38168", "matchesInstance", "m_274493_"), "(Lakq;)Z");
    }

    static jboolean matchesInstance(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_matchesInstance();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getBiome() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("getNoiseBiome", "getNoiseBiome", "method_38109", "getBiome", "m_203407_"), "(IIILdef$f;)Ljm;");
    }

    static jobject getBiome(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_getBiome();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_getBiomeAtPoint() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getNoiseBiome", "method_38167", "getBiomeAtPoint", "m_204269_"), "(Ldef$h;)Ljm;");
    }

    static jobject getBiomeAtPoint(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getBiomeAtPoint();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_addDebugInfo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addDebugInfo", "method_38114", "addDebugInfo", "m_207301_"), "(Ljava/util/List;Ljd;Ldef$f;)V");
    }

    static void addDebugInfo(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_addDebugInfo();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
};

#endif // NET_MINECRAFT_WORLD_BIOME_SOURCE_MULTINOISEBIOMESOURCE_HPP