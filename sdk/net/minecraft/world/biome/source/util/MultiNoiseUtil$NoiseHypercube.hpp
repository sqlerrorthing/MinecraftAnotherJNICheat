// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_BIOME_SOURCE_UTIL_MULTINOISEUTIL$NOISEHYPERCUBE_HPP
#define NET_MINECRAFT_WORLD_BIOME_SOURCE_UTIL_MULTINOISEUTIL$NOISEHYPERCUBE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.biome.source.util.MultiNoiseUtil$NoiseHypercube
 * Remapped: def$d
 */
namespace MultiNoiseUtil$NoiseHypercube {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("def$d", "net/minecraft/world/level/biome/Climate$ParameterPoint", "net/minecraft/class_6544$class_4762", "net/minecraft/world/biome/source/util/MultiNoiseUtil$NoiseHypercube", "net/minecraft/src/C_182857_$C_182861_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.world.biome.source.util.MultiNoiseUtil$NoiseHypercube#temperature
    static jobject get_field_temperature(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "temperature", "comp_105", "temperature", "f_186863_"), "Ldef$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.MultiNoiseUtil$NoiseHypercube#temperature
    static void set_field_temperature(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "temperature", "comp_105", "temperature", "f_186863_"), "Ldef$b;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.biome.source.util.MultiNoiseUtil$NoiseHypercube#humidity
    static jobject get_field_humidity(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "humidity", "comp_106", "humidity", "f_186864_"), "Ldef$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.MultiNoiseUtil$NoiseHypercube#humidity
    static void set_field_humidity(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "humidity", "comp_106", "humidity", "f_186864_"), "Ldef$b;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.biome.source.util.MultiNoiseUtil$NoiseHypercube#continentalness
    static jobject get_field_continentalness(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "continentalness", "comp_107", "continentalness", "f_186865_"), "Ldef$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.MultiNoiseUtil$NoiseHypercube#continentalness
    static void set_field_continentalness(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "continentalness", "comp_107", "continentalness", "f_186865_"), "Ldef$b;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.biome.source.util.MultiNoiseUtil$NoiseHypercube#erosion
    static jobject get_field_erosion(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "erosion", "comp_108", "erosion", "f_186866_"), "Ldef$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.MultiNoiseUtil$NoiseHypercube#erosion
    static void set_field_erosion(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "erosion", "comp_108", "erosion", "f_186866_"), "Ldef$b;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.biome.source.util.MultiNoiseUtil$NoiseHypercube#depth
    static jobject get_field_depth(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "depth", "comp_109", "depth", "f_186867_"), "Ldef$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.MultiNoiseUtil$NoiseHypercube#depth
    static void set_field_depth(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "depth", "comp_109", "depth", "f_186867_"), "Ldef$b;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.biome.source.util.MultiNoiseUtil$NoiseHypercube#weirdness
    static jobject get_field_weirdness(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "weirdness", "comp_110", "weirdness", "f_186868_"), "Ldef$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.MultiNoiseUtil$NoiseHypercube#weirdness
    static void set_field_weirdness(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "weirdness", "comp_110", "weirdness", "f_186868_"), "Ldef$b;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.biome.source.util.MultiNoiseUtil$NoiseHypercube#offset
    static jlong get_field_offset(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "offset", "comp_111", "offset", "f_186869_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.MultiNoiseUtil$NoiseHypercube#offset
    static void set_field_offset(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "offset", "comp_111", "offset", "f_186869_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.source.util.MultiNoiseUtil$NoiseHypercube#CODEC
    [[maybe_unused]] static jobject get_field_CODEC() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CODEC", "field_24679", "CODEC", "f_186862_"), "Lcom/mojang/serialization/Codec;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.source.util.MultiNoiseUtil$NoiseHypercube#CODEC
    [[maybe_unused]] static void set_field_CODEC(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CODEC", "field_24679", "CODEC", "f_186862_"), "Lcom/mojang/serialization/Codec;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_getSquaredDistance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "fitness", "method_24381", "getSquaredDistance", "m_186882_"), "(Ldef$h;)J");
    }

    static jlong getSquaredDistance(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getSquaredDistance();
       return MinecraftSDK::env->CallLongMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getParameters() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "parameterSpace", "method_38145", "getParameters", "m_186879_"), "()Ljava/util/List;");
    }

    static jobject getParameters(const jobject& obj) {
                
       const auto methodID = methodID_getParameters();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__temperature() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "temperature", "comp_105", "temperature", "f_186863_"), "()Ldef$b;");
    }

    static jobject _temperature(const jobject& obj) {
                
       const auto methodID = methodID__temperature();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__humidity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "humidity", "comp_106", "humidity", "f_186864_"), "()Ldef$b;");
    }

    static jobject _humidity(const jobject& obj) {
                
       const auto methodID = methodID__humidity();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__continentalness() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "continentalness", "comp_107", "continentalness", "f_186865_"), "()Ldef$b;");
    }

    static jobject _continentalness(const jobject& obj) {
                
       const auto methodID = methodID__continentalness();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__erosion() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "erosion", "comp_108", "erosion", "f_186866_"), "()Ldef$b;");
    }

    static jobject _erosion(const jobject& obj) {
                
       const auto methodID = methodID__erosion();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__depth() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "depth", "comp_109", "depth", "f_186867_"), "()Ldef$b;");
    }

    static jobject _depth(const jobject& obj) {
                
       const auto methodID = methodID__depth();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__weirdness() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "weirdness", "comp_110", "weirdness", "f_186868_"), "()Ldef$b;");
    }

    static jobject _weirdness(const jobject& obj) {
                
       const auto methodID = methodID__weirdness();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__offset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "offset", "comp_111", "offset", "f_186869_"), "()J");
    }

    static jlong _offset(const jobject& obj) {
                
       const auto methodID = methodID__offset();
       return MinecraftSDK::env->CallLongMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_WORLD_BIOME_SOURCE_UTIL_MULTINOISEUTIL$NOISEHYPERCUBE_HPP