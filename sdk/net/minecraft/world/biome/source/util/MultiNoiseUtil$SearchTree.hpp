// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_BIOME_SOURCE_UTIL_MULTINOISEUTIL$SEARCHTREE_HPP
#define NET_MINECRAFT_WORLD_BIOME_SOURCE_UTIL_MULTINOISEUTIL$SEARCHTREE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.biome.source.util.MultiNoiseUtil$SearchTree
 * Remapped: def$e
 */
namespace MultiNoiseUtil$SearchTree {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("def$e", "net/minecraft/world/level/biome/Climate$RTree", "net/minecraft/class_6544$class_6548", "net/minecraft/world/biome/source/util/MultiNoiseUtil$SearchTree", "net/minecraft/src/C_182857_$C_182862_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.world.biome.source.util.MultiNoiseUtil$SearchTree#MAX_NODES_FOR_SIMPLE_TREE
    [[maybe_unused]] static jint get_field_MAX_NODES_FOR_SIMPLE_TREE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CHILDREN_PER_NODE", "field_34486", "MAX_NODES_FOR_SIMPLE_TREE", "f_186909_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.MultiNoiseUtil$SearchTree#MAX_NODES_FOR_SIMPLE_TREE
    [[maybe_unused]] static void set_field_MAX_NODES_FOR_SIMPLE_TREE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CHILDREN_PER_NODE", "field_34486", "MAX_NODES_FOR_SIMPLE_TREE", "f_186909_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.world.biome.source.util.MultiNoiseUtil$SearchTree#firstNode
    static jobject get_field_firstNode(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "root", "field_34487", "firstNode", "f_186910_"), "Ldef$e$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.MultiNoiseUtil$SearchTree#firstNode
    static void set_field_firstNode(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "root", "field_34487", "firstNode", "f_186910_"), "Ldef$e$b;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.biome.source.util.MultiNoiseUtil$SearchTree#previousResultNode
    static jobject get_field_previousResultNode(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "lastResult", "field_34488", "previousResultNode", "f_186911_"), "Ljava/lang/ThreadLocal;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.MultiNoiseUtil$SearchTree#previousResultNode
    static void set_field_previousResultNode(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "lastResult", "field_34488", "previousResultNode", "f_186911_"), "Ljava/lang/ThreadLocal;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_create() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "create", "method_38153", "create", "m_186935_"), "(Ljava/util/List;)Ldef$e;");
    }

    static jobject create(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_create();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_createNode() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "build", "method_38148", "createNode", "m_186920_"), "(ILjava/util/List;)Ldef$e$b;");
    }

    static jobject createNode(const jint& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_createNode();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_sortTree() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "sort", "method_38154", "sortTree", "m_186937_"), "(Ljava/util/List;IIZ)V");
    }

    static void sortTree(const jobject& arg0, const jint& arg1, const jint& arg2, const jboolean& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_sortTree();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_createNodeComparator() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "comparator", "method_38149", "createNodeComparator", "m_186923_"), "(IZ)Ljava/util/Comparator;");
    }

    static jobject createNodeComparator(const jint& arg0, const jboolean& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_createNodeComparator();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getBatchedTree() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "bucketize", "method_38156", "getBatchedTree", "m_186944_"), "(Ljava/util/List;)Ljava/util/List;");
    }

    static jobject getBatchedTree(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getBatchedTree();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getRangeLengthSum() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "cost", "method_38155", "getRangeLengthSum", "m_186942_"), "([Ldef$b;)J");
    }

    static jlong getRangeLengthSum(const jarray& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_getRangeLengthSum();
       return MinecraftSDK::env->CallStaticLongMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getEnclosingParameters() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "buildParameterSpace", "method_38157", "getEnclosingParameters", "m_186946_"), "(Ljava/util/List;)Ljava/util/List;");
    }

    static jobject getEnclosingParameters(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getEnclosingParameters();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_get() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "search", "method_38151", "get", "m_186930_"), "(Ldef$h;Ldef$a;)Ljava/lang/Object;");
    }

    static jobject get(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_get();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_WORLD_BIOME_SOURCE_UTIL_MULTINOISEUTIL$SEARCHTREE_HPP