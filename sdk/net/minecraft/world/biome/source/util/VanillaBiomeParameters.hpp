// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_BIOME_SOURCE_UTIL_VANILLABIOMEPARAMETERS_HPP
#define NET_MINECRAFT_WORLD_BIOME_SOURCE_UTIL_VANILLABIOMEPARAMETERS_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.biome.source.util.VanillaBiomeParameters
 * Remapped: dem
 */
namespace VanillaBiomeParameters {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dem", "net/minecraft/world/level/biome/OverworldBiomeBuilder", "net/minecraft/class_6554", "net/minecraft/world/biome/source/util/VanillaBiomeParameters", "net/minecraft/src/C_182870_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#MAX_VALLEY_WEIRDNESS
    [[maybe_unused]] static jfloat get_field_MAX_VALLEY_WEIRDNESS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "VALLEY_SIZE", "field_34500", "MAX_VALLEY_WEIRDNESS", "f_187134_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#MAX_VALLEY_WEIRDNESS
    [[maybe_unused]] static void set_field_MAX_VALLEY_WEIRDNESS(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "VALLEY_SIZE", "field_34500", "MAX_VALLEY_WEIRDNESS", "f_187134_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#MAX_LOW_WEIRDNESS
    [[maybe_unused]] static jfloat get_field_MAX_LOW_WEIRDNESS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "LOW_START", "field_35047", "MAX_LOW_WEIRDNESS", "f_187135_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#MAX_LOW_WEIRDNESS
    [[maybe_unused]] static void set_field_MAX_LOW_WEIRDNESS(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "LOW_START", "field_35047", "MAX_LOW_WEIRDNESS", "f_187135_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.source.util.VanillaBiomeParameters#MAX_MID_WEIRDNESS
    [[maybe_unused]] static jfloat get_field_MAX_MID_WEIRDNESS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "HIGH_START", "field_35041", "MAX_MID_WEIRDNESS", "f_187127_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.source.util.VanillaBiomeParameters#MAX_MID_WEIRDNESS
    [[maybe_unused]] static void set_field_MAX_MID_WEIRDNESS(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "HIGH_START", "field_35041", "MAX_MID_WEIRDNESS", "f_187127_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#MAX_SECOND_HIGH_WEIRDNESS
    [[maybe_unused]] static jfloat get_field_MAX_SECOND_HIGH_WEIRDNESS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "HIGH_END", "field_35048", "MAX_SECOND_HIGH_WEIRDNESS", "f_187136_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#MAX_SECOND_HIGH_WEIRDNESS
    [[maybe_unused]] static void set_field_MAX_SECOND_HIGH_WEIRDNESS(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "HIGH_END", "field_35048", "MAX_SECOND_HIGH_WEIRDNESS", "f_187136_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#field_34501
    [[maybe_unused]] static jfloat get_field_field_34501() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "PEAK_SIZE", "field_34501", "field_34501", "f_187137_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#field_34501
    [[maybe_unused]] static void set_field_field_34501(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "PEAK_SIZE", "field_34501", "field_34501", "f_187137_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.source.util.VanillaBiomeParameters#MAX_HIGH_WEIRDNESS
    [[maybe_unused]] static jfloat get_field_MAX_HIGH_WEIRDNESS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "PEAK_START", "field_34502", "MAX_HIGH_WEIRDNESS", "f_187128_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.source.util.VanillaBiomeParameters#MAX_HIGH_WEIRDNESS
    [[maybe_unused]] static void set_field_MAX_HIGH_WEIRDNESS(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "PEAK_START", "field_34502", "MAX_HIGH_WEIRDNESS", "f_187128_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#MAX_PEAK_WEIRDNESS
    [[maybe_unused]] static jfloat get_field_MAX_PEAK_WEIRDNESS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "PEAK_END", "field_34503", "MAX_PEAK_WEIRDNESS", "f_187138_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#MAX_PEAK_WEIRDNESS
    [[maybe_unused]] static void set_field_MAX_PEAK_WEIRDNESS(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "PEAK_END", "field_34503", "MAX_PEAK_WEIRDNESS", "f_187138_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.source.util.VanillaBiomeParameters#field_35042
    [[maybe_unused]] static jfloat get_field_field_35042() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "NEAR_INLAND_START", "field_35042", "field_35042", "f_187129_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.source.util.VanillaBiomeParameters#field_35042
    [[maybe_unused]] static void set_field_field_35042(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "NEAR_INLAND_START", "field_35042", "field_35042", "f_187129_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.source.util.VanillaBiomeParameters#field_35043
    [[maybe_unused]] static jfloat get_field_field_35043() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "MID_INLAND_START", "field_35043", "field_35043", "f_187130_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.source.util.VanillaBiomeParameters#field_35043
    [[maybe_unused]] static void set_field_field_35043(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "MID_INLAND_START", "field_35043", "field_35043", "f_187130_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.source.util.VanillaBiomeParameters#field_35044
    [[maybe_unused]] static jfloat get_field_field_35044() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "FAR_INLAND_START", "field_35044", "field_35044", "f_187131_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.source.util.VanillaBiomeParameters#field_35044
    [[maybe_unused]] static void set_field_field_35044(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "FAR_INLAND_START", "field_35044", "field_35044", "f_187131_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.source.util.VanillaBiomeParameters#field_35045
    [[maybe_unused]] static jfloat get_field_field_35045() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "EROSION_INDEX_1_START", "field_35045", "field_35045", "f_187132_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.source.util.VanillaBiomeParameters#field_35045
    [[maybe_unused]] static void set_field_field_35045(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "EROSION_INDEX_1_START", "field_35045", "field_35045", "f_187132_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.source.util.VanillaBiomeParameters#field_35046
    [[maybe_unused]] static jfloat get_field_field_35046() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "EROSION_INDEX_2_START", "field_35046", "field_35046", "f_187133_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.source.util.VanillaBiomeParameters#field_35046
    [[maybe_unused]] static void set_field_field_35046(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "EROSION_INDEX_2_START", "field_35046", "field_35046", "f_187133_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#field_39134
    [[maybe_unused]] static jfloat get_field_field_39134() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "EROSION_DEEP_DARK_DRYNESS_THRESHOLD", "field_39134", "field_39134", "f_220663_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#field_39134
    [[maybe_unused]] static void set_field_field_39134(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "EROSION_DEEP_DARK_DRYNESS_THRESHOLD", "field_39134", "field_39134", "f_220663_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#field_39135
    [[maybe_unused]] static jfloat get_field_field_39135() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "DEPTH_DEEP_DARK_DRYNESS_THRESHOLD", "field_39135", "field_39135", "f_220664_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#field_39135
    [[maybe_unused]] static void set_field_field_39135(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "DEPTH_DEEP_DARK_DRYNESS_THRESHOLD", "field_39135", "field_39135", "f_220664_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#defaultParameter
    static jobject get_field_defaultParameter(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "FULL_RANGE", "field_34504", "defaultParameter", "f_187139_"), "Ldef$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#defaultParameter
    static void set_field_defaultParameter(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "FULL_RANGE", "field_34504", "defaultParameter", "f_187139_"), "Ldef$b;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#temperatureParameters
    static jobject get_field_temperatureParameters(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "temperatures", "field_34505", "temperatureParameters", "f_187140_"), "[Ldef$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#temperatureParameters
    static void set_field_temperatureParameters(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "temperatures", "field_34505", "temperatureParameters", "f_187140_"), "[Ldef$b;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#humidityParameters
    static jobject get_field_humidityParameters(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "humidities", "field_34506", "humidityParameters", "f_187141_"), "[Ldef$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#humidityParameters
    static void set_field_humidityParameters(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "humidities", "field_34506", "humidityParameters", "f_187141_"), "[Ldef$b;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#erosionParameters
    static jobject get_field_erosionParameters(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "erosions", "field_34507", "erosionParameters", "f_187142_"), "[Ldef$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#erosionParameters
    static void set_field_erosionParameters(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "erosions", "field_34507", "erosionParameters", "f_187142_"), "[Ldef$b;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#frozenTemperature
    static jobject get_field_frozenTemperature(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "FROZEN_RANGE", "field_34508", "frozenTemperature", "f_187143_"), "Ldef$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#frozenTemperature
    static void set_field_frozenTemperature(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "FROZEN_RANGE", "field_34508", "frozenTemperature", "f_187143_"), "Ldef$b;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#nonFrozenTemperatureParameters
    static jobject get_field_nonFrozenTemperatureParameters(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "UNFROZEN_RANGE", "field_34509", "nonFrozenTemperatureParameters", "f_187144_"), "Ldef$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#nonFrozenTemperatureParameters
    static void set_field_nonFrozenTemperatureParameters(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "UNFROZEN_RANGE", "field_34509", "nonFrozenTemperatureParameters", "f_187144_"), "Ldef$b;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#mushroomFieldsContinentalness
    static jobject get_field_mushroomFieldsContinentalness(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "mushroomFieldsContinentalness", "field_34510", "mushroomFieldsContinentalness", "f_187145_"), "Ldef$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#mushroomFieldsContinentalness
    static void set_field_mushroomFieldsContinentalness(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "mushroomFieldsContinentalness", "field_34510", "mushroomFieldsContinentalness", "f_187145_"), "Ldef$b;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#deepOceanContinentalness
    static jobject get_field_deepOceanContinentalness(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "deepOceanContinentalness", "field_34511", "deepOceanContinentalness", "f_187146_"), "Ldef$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#deepOceanContinentalness
    static void set_field_deepOceanContinentalness(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "deepOceanContinentalness", "field_34511", "deepOceanContinentalness", "f_187146_"), "Ldef$b;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#oceanContinentalness
    static jobject get_field_oceanContinentalness(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("w", "oceanContinentalness", "field_34512", "oceanContinentalness", "f_187147_"), "Ldef$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#oceanContinentalness
    static void set_field_oceanContinentalness(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("w", "oceanContinentalness", "field_34512", "oceanContinentalness", "f_187147_"), "Ldef$b;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#coastContinentalness
    static jobject get_field_coastContinentalness(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("x", "coastContinentalness", "field_34513", "coastContinentalness", "f_187148_"), "Ldef$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#coastContinentalness
    static void set_field_coastContinentalness(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("x", "coastContinentalness", "field_34513", "coastContinentalness", "f_187148_"), "Ldef$b;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#riverContinentalness
    static jobject get_field_riverContinentalness(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("y", "inlandContinentalness", "field_34514", "riverContinentalness", "f_187149_"), "Ldef$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#riverContinentalness
    static void set_field_riverContinentalness(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("y", "inlandContinentalness", "field_34514", "riverContinentalness", "f_187149_"), "Ldef$b;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#nearInlandContinentalness
    static jobject get_field_nearInlandContinentalness(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("z", "nearInlandContinentalness", "field_34515", "nearInlandContinentalness", "f_187150_"), "Ldef$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#nearInlandContinentalness
    static void set_field_nearInlandContinentalness(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("z", "nearInlandContinentalness", "field_34515", "nearInlandContinentalness", "f_187150_"), "Ldef$b;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#midInlandContinentalness
    static jobject get_field_midInlandContinentalness(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("A", "midInlandContinentalness", "field_34516", "midInlandContinentalness", "f_187151_"), "Ldef$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#midInlandContinentalness
    static void set_field_midInlandContinentalness(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("A", "midInlandContinentalness", "field_34516", "midInlandContinentalness", "f_187151_"), "Ldef$b;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#farInlandContinentalness
    static jobject get_field_farInlandContinentalness(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("B", "farInlandContinentalness", "field_34517", "farInlandContinentalness", "f_187152_"), "Ldef$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#farInlandContinentalness
    static void set_field_farInlandContinentalness(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("B", "farInlandContinentalness", "field_34517", "farInlandContinentalness", "f_187152_"), "Ldef$b;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#oceanBiomes
    static jobject get_field_oceanBiomes(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("C", "OCEANS", "field_34518", "oceanBiomes", "f_187121_"), "[[Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#oceanBiomes
    static void set_field_oceanBiomes(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("C", "OCEANS", "field_34518", "oceanBiomes", "f_187121_"), "[[Lakq;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#commonBiomes
    static jobject get_field_commonBiomes(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("D", "MIDDLE_BIOMES", "field_34519", "commonBiomes", "f_187122_"), "[[Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#commonBiomes
    static void set_field_commonBiomes(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("D", "MIDDLE_BIOMES", "field_34519", "commonBiomes", "f_187122_"), "[[Lakq;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#uncommonBiomes
    static jobject get_field_uncommonBiomes(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("E", "MIDDLE_BIOMES_VARIANT", "field_34520", "uncommonBiomes", "f_187123_"), "[[Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#uncommonBiomes
    static void set_field_uncommonBiomes(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("E", "MIDDLE_BIOMES_VARIANT", "field_34520", "uncommonBiomes", "f_187123_"), "[[Lakq;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#nearMountainBiomes
    static jobject get_field_nearMountainBiomes(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("F", "PLATEAU_BIOMES", "field_34521", "nearMountainBiomes", "f_187124_"), "[[Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#nearMountainBiomes
    static void set_field_nearMountainBiomes(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("F", "PLATEAU_BIOMES", "field_34521", "nearMountainBiomes", "f_187124_"), "[[Lakq;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#specialNearMountainBiomes
    static jobject get_field_specialNearMountainBiomes(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("G", "PLATEAU_BIOMES_VARIANT", "field_34522", "specialNearMountainBiomes", "f_187125_"), "[[Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#specialNearMountainBiomes
    static void set_field_specialNearMountainBiomes(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("G", "PLATEAU_BIOMES_VARIANT", "field_34522", "specialNearMountainBiomes", "f_187125_"), "[[Lakq;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#windsweptBiomes
    static jobject get_field_windsweptBiomes(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("H", "SHATTERED_BIOMES", "field_36339", "windsweptBiomes", "f_201989_"), "[[Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.biome.source.util.VanillaBiomeParameters#windsweptBiomes
    static void set_field_windsweptBiomes(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("H", "SHATTERED_BIOMES", "field_36339", "windsweptBiomes", "f_201989_"), "[[Lakq;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_getSpawnSuitabilityNoises() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "spawnTarget", "method_39168", "getSpawnSuitabilityNoises", "m_187154_"), "()Ljava/util/List;");
    }

    static jobject getSpawnSuitabilityNoises(const jobject& obj) {
                
       const auto methodID = methodID_getSpawnSuitabilityNoises();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_writeOverworldBiomeParameters() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addBiomes", "method_38185", "writeOverworldBiomeParameters", "m_187175_"), "(Ljava/util/function/Consumer;)V");
    }

    static void writeOverworldBiomeParameters(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_writeOverworldBiomeParameters();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_writeDebug() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "addDebugBiomes", "method_46678", "writeDebug", "m_255158_"), "(Ljava/util/function/Consumer;)V");
    }

    static void writeDebug(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_writeDebug();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_writeOceanBiomes() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "addOffCoastBiomes", "method_38190", "writeOceanBiomes", "m_187195_"), "(Ljava/util/function/Consumer;)V");
    }

    static void writeOceanBiomes(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_writeOceanBiomes();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_writeLandBiomes() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "addInlandBiomes", "method_38195", "writeLandBiomes", "m_187215_"), "(Ljava/util/function/Consumer;)V");
    }

    static void writeLandBiomes(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_writeLandBiomes();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_writePeakBiomes() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addPeaks", "method_38186", "writePeakBiomes", "m_187177_"), "(Ljava/util/function/Consumer;Ldef$b;)V");
    }

    static void writePeakBiomes(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_writePeakBiomes();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_writeHighBiomes() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "addHighSlice", "method_38191", "writeHighBiomes", "m_187197_"), "(Ljava/util/function/Consumer;Ldef$b;)V");
    }

    static void writeHighBiomes(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_writeHighBiomes();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_writeMidBiomes() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "addMidSlice", "method_38196", "writeMidBiomes", "m_187217_"), "(Ljava/util/function/Consumer;Ldef$b;)V");
    }

    static void writeMidBiomes(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_writeMidBiomes();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_writeLowBiomes() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "addLowSlice", "method_38200", "writeLowBiomes", "m_187228_"), "(Ljava/util/function/Consumer;Ldef$b;)V");
    }

    static void writeLowBiomes(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_writeLowBiomes();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_writeValleyBiomes() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "addValleys", "method_38203", "writeValleyBiomes", "m_187237_"), "(Ljava/util/function/Consumer;Ldef$b;)V");
    }

    static void writeValleyBiomes(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_writeValleyBiomes();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_writeCaveBiomes() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "addUndergroundBiomes", "method_38199", "writeCaveBiomes", "m_187226_"), "(Ljava/util/function/Consumer;)V");
    }

    static void writeCaveBiomes(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_writeCaveBiomes();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getRegularBiome() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "pickMiddleBiome", "method_38182", "getRegularBiome", "m_187163_"), "(IILdef$b;)Lakq;");
    }

    static jobject getRegularBiome(const jobject& obj, const jint& arg0, const jint& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_getRegularBiome();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getBadlandsOrRegularBiome() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "pickMiddleBiomeOrBadlandsIfHot", "method_38189", "getBadlandsOrRegularBiome", "m_187191_"), "(IILdef$b;)Lakq;");
    }

    static jobject getBadlandsOrRegularBiome(const jobject& obj, const jint& arg0, const jint& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_getBadlandsOrRegularBiome();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getMountainStartBiome() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "pickMiddleBiomeOrBadlandsIfHotOrSlopeIfCold", "method_38194", "getMountainStartBiome", "m_187211_"), "(IILdef$b;)Lakq;");
    }

    static jobject getMountainStartBiome(const jobject& obj, const jint& arg0, const jint& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_getMountainStartBiome();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getBiomeOrWindsweptSavanna() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "maybePickWindsweptSavannaBiome", "method_40009", "getBiomeOrWindsweptSavanna", "m_201990_"), "(IILdef$b;Lakq;)Lakq;");
    }

    static jobject getBiomeOrWindsweptSavanna(const jobject& obj, const jint& arg0, const jint& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_getBiomeOrWindsweptSavanna();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_getErodedShoreBiome() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "pickShatteredCoastBiome", "method_38198", "getErodedShoreBiome", "m_187222_"), "(IILdef$b;)Lakq;");
    }

    static jobject getErodedShoreBiome(const jobject& obj, const jint& arg0, const jint& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_getErodedShoreBiome();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getShoreBiome() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "pickBeachBiome", "method_38181", "getShoreBiome", "m_187160_"), "(II)Lakq;");
    }

    static jobject getShoreBiome(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_getShoreBiome();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getBadlandsBiome() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "pickBadlandsBiome", "method_38184", "getBadlandsBiome", "m_187172_"), "(ILdef$b;)Lakq;");
    }

    static jobject getBadlandsBiome(const jobject& obj, const jint& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_getBadlandsBiome();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getNearMountainBiome() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "pickPlateauBiome", "method_38202", "getNearMountainBiome", "m_187233_"), "(IILdef$b;)Lakq;");
    }

    static jobject getNearMountainBiome(const jobject& obj, const jint& arg0, const jint& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_getNearMountainBiome();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getPeakBiome() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "pickPeakBiome", "method_38204", "getPeakBiome", "m_187240_"), "(IILdef$b;)Lakq;");
    }

    static jobject getPeakBiome(const jobject& obj, const jint& arg0, const jint& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_getPeakBiome();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getMountainSlopeBiome() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "pickSlopeBiome", "method_38205", "getMountainSlopeBiome", "m_187244_"), "(IILdef$b;)Lakq;");
    }

    static jobject getMountainSlopeBiome(const jobject& obj, const jint& arg0, const jint& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_getMountainSlopeBiome();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getWindsweptOrRegularBiome() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "pickShatteredBiome", "method_38183", "getWindsweptOrRegularBiome", "m_202001_"), "(IILdef$b;)Lakq;");
    }

    static jobject getWindsweptOrRegularBiome(const jobject& obj, const jint& arg0, const jint& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_getWindsweptOrRegularBiome();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_writeBiomeParameters() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addSurfaceBiome", "method_38187", "writeBiomeParameters", "m_187180_"), "(Ljava/util/function/Consumer;Ldef$b;Ldef$b;Ldef$b;Ldef$b;Ldef$b;FLakq;)V");
    }

    static void writeBiomeParameters(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4, const jobject& arg5, const jfloat& arg6, const jobject& arg7) {
                
       const auto methodID = methodID_writeBiomeParameters();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    };
    
    static jmethodID methodID_writeCaveBiomeParameters() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "addUndergroundBiome", "method_38192", "writeCaveBiomeParameters", "m_187200_"), "(Ljava/util/function/Consumer;Ldef$b;Ldef$b;Ldef$b;Ldef$b;Ldef$b;FLakq;)V");
    }

    static void writeCaveBiomeParameters(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4, const jobject& arg5, const jfloat& arg6, const jobject& arg7) {
                
       const auto methodID = methodID_writeCaveBiomeParameters();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    };
    
    static jmethodID methodID_writeDeepDarkParameters() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "addBottomBiome", "method_41419", "writeDeepDarkParameters", "m_220668_"), "(Ljava/util/function/Consumer;Ldef$b;Ldef$b;Ldef$b;Ldef$b;Ldef$b;FLakq;)V");
    }

    static void writeDeepDarkParameters(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4, const jobject& arg5, const jfloat& arg6, const jobject& arg7) {
                
       const auto methodID = methodID_writeDeepDarkParameters();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    };
    
    static jmethodID methodID_inDeepDarkParameters() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "isDeepDarkRegion", "method_43718", "inDeepDarkParameters", "m_246093_"), "(Ldyr;Ldyr;Ldyr$b;)Z");
    }

    static jboolean inDeepDarkParameters(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_inDeepDarkParameters();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getPeaksValleysDescription() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getDebugStringForPeaksAndValleys", "method_38179", "getPeaksValleysDescription", "m_187155_"), "(D)Ljava/lang/String;");
    }

    static jobject getPeaksValleysDescription(const jdouble& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getPeaksValleysDescription();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getContinentalnessDescription() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getDebugStringForContinentalness", "method_38188", "getContinentalnessDescription", "m_187189_"), "(D)Ljava/lang/String;");
    }

    static jobject getContinentalnessDescription(const jobject& obj, const jdouble& arg0) {
                
       const auto methodID = methodID_getContinentalnessDescription();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getErosionDescription() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getDebugStringForErosion", "method_38193", "getErosionDescription", "m_187209_"), "(D)Ljava/lang/String;");
    }

    static jobject getErosionDescription(const jobject& obj, const jdouble& arg0) {
                
       const auto methodID = methodID_getErosionDescription();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getTemperatureDescription() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getDebugStringForTemperature", "method_38197", "getTemperatureDescription", "m_187220_"), "(D)Ljava/lang/String;");
    }

    static jobject getTemperatureDescription(const jobject& obj, const jdouble& arg0) {
                
       const auto methodID = methodID_getTemperatureDescription();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getHumidityDescription() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "getDebugStringForHumidity", "method_38201", "getHumidityDescription", "m_187231_"), "(D)Ljava/lang/String;");
    }

    static jobject getHumidityDescription(const jobject& obj, const jdouble& arg0) {
                
       const auto methodID = methodID_getHumidityDescription();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getNoiseRangeIndex() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getDebugStringForNoiseValue", "method_38180", "getNoiseRangeIndex", "m_187157_"), "(D[Ldef$b;)Ljava/lang/String;");
    }

    static jobject getNoiseRangeIndex(const jdouble& arg0, const jarray& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_getNoiseRangeIndex();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getTemperatureParameters() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getTemperatureThresholds", "method_40010", "getTemperatureParameters", "m_201995_"), "()[Ldef$b;");
    }

    static jobject getTemperatureParameters(const jobject& obj) {
                
       const auto methodID = methodID_getTemperatureParameters();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getHumidityParameters() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getHumidityThresholds", "method_40011", "getHumidityParameters", "m_201996_"), "()[Ldef$b;");
    }

    static jobject getHumidityParameters(const jobject& obj) {
                
       const auto methodID = methodID_getHumidityParameters();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getErosionParameters() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getErosionThresholds", "method_40012", "getErosionParameters", "m_201997_"), "()[Ldef$b;");
    }

    static jobject getErosionParameters(const jobject& obj) {
                
       const auto methodID = methodID_getErosionParameters();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getContinentalnessParameters() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "getContinentalnessThresholds", "method_40013", "getContinentalnessParameters", "m_201998_"), "()[Ldef$b;");
    }

    static jobject getContinentalnessParameters(const jobject& obj) {
                
       const auto methodID = methodID_getContinentalnessParameters();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getPeaksValleysParameters() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "getPeaksAndValleysThresholds", "method_40014", "getPeaksValleysParameters", "m_201999_"), "()[Ldef$b;");
    }

    static jobject getPeaksValleysParameters(const jobject& obj) {
                
       const auto methodID = methodID_getPeaksValleysParameters();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getWeirdnessParameters() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "getWeirdnessThresholds", "method_40015", "getWeirdnessParameters", "m_202000_"), "()[Ldef$b;");
    }

    static jobject getWeirdnessParameters(const jobject& obj) {
                
       const auto methodID = methodID_getWeirdnessParameters();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_WORLD_BIOME_SOURCE_UTIL_VANILLABIOMEPARAMETERS_HPP