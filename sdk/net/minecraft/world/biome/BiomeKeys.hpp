// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_BIOME_BIOMEKEYS_HPP
#define NET_MINECRAFT_WORLD_BIOME_BIOMEKEYS_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.biome.BiomeKeys
 * Remapped: ded
 */
namespace BiomeKeys {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("ded", "net/minecraft/world/level/biome/Biomes", "net/minecraft/class_1972", "net/minecraft/world/biome/BiomeKeys", "net/minecraft/src/C_1655_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#THE_VOID
    [[maybe_unused]] static jobject get_field_THE_VOID() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "THE_VOID", "field_9473", "THE_VOID", "f_48173_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#THE_VOID
    [[maybe_unused]] static void set_field_THE_VOID(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "THE_VOID", "field_9473", "THE_VOID", "f_48173_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#PLAINS
    [[maybe_unused]] static jobject get_field_PLAINS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "PLAINS", "field_9451", "PLAINS", "f_48202_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#PLAINS
    [[maybe_unused]] static void set_field_PLAINS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "PLAINS", "field_9451", "PLAINS", "f_48202_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#SUNFLOWER_PLAINS
    [[maybe_unused]] static jobject get_field_SUNFLOWER_PLAINS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "SUNFLOWER_PLAINS", "field_9455", "SUNFLOWER_PLAINS", "f_48176_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#SUNFLOWER_PLAINS
    [[maybe_unused]] static void set_field_SUNFLOWER_PLAINS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "SUNFLOWER_PLAINS", "field_9455", "SUNFLOWER_PLAINS", "f_48176_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#SNOWY_PLAINS
    [[maybe_unused]] static jobject get_field_SNOWY_PLAINS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "SNOWY_PLAINS", "field_35117", "SNOWY_PLAINS", "f_186761_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#SNOWY_PLAINS
    [[maybe_unused]] static void set_field_SNOWY_PLAINS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "SNOWY_PLAINS", "field_35117", "SNOWY_PLAINS", "f_186761_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#ICE_SPIKES
    [[maybe_unused]] static jobject get_field_ICE_SPIKES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "ICE_SPIKES", "field_9453", "ICE_SPIKES", "f_48182_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#ICE_SPIKES
    [[maybe_unused]] static void set_field_ICE_SPIKES(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "ICE_SPIKES", "field_9453", "ICE_SPIKES", "f_48182_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#DESERT
    [[maybe_unused]] static jobject get_field_DESERT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "DESERT", "field_9424", "DESERT", "f_48203_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#DESERT
    [[maybe_unused]] static void set_field_DESERT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "DESERT", "field_9424", "DESERT", "f_48203_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#SWAMP
    [[maybe_unused]] static jobject get_field_SWAMP() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "SWAMP", "field_9471", "SWAMP", "f_48207_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#SWAMP
    [[maybe_unused]] static void set_field_SWAMP(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "SWAMP", "field_9471", "SWAMP", "f_48207_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#MANGROVE_SWAMP
    [[maybe_unused]] static jobject get_field_MANGROVE_SWAMP() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "MANGROVE_SWAMP", "field_38748", "MANGROVE_SWAMP", "f_220595_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#MANGROVE_SWAMP
    [[maybe_unused]] static void set_field_MANGROVE_SWAMP(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "MANGROVE_SWAMP", "field_38748", "MANGROVE_SWAMP", "f_220595_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#FOREST
    [[maybe_unused]] static jobject get_field_FOREST() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "FOREST", "field_9409", "FOREST", "f_48205_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#FOREST
    [[maybe_unused]] static void set_field_FOREST(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "FOREST", "field_9409", "FOREST", "f_48205_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#FLOWER_FOREST
    [[maybe_unused]] static jobject get_field_FLOWER_FOREST() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "FLOWER_FOREST", "field_9414", "FLOWER_FOREST", "f_48179_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#FLOWER_FOREST
    [[maybe_unused]] static void set_field_FLOWER_FOREST(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "FLOWER_FOREST", "field_9414", "FLOWER_FOREST", "f_48179_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#BIRCH_FOREST
    [[maybe_unused]] static jobject get_field_BIRCH_FOREST() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "BIRCH_FOREST", "field_9412", "BIRCH_FOREST", "f_48149_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#BIRCH_FOREST
    [[maybe_unused]] static void set_field_BIRCH_FOREST(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "BIRCH_FOREST", "field_9412", "BIRCH_FOREST", "f_48149_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#DARK_FOREST
    [[maybe_unused]] static jobject get_field_DARK_FOREST() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "DARK_FOREST", "field_9475", "DARK_FOREST", "f_48151_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#DARK_FOREST
    [[maybe_unused]] static void set_field_DARK_FOREST(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "DARK_FOREST", "field_9475", "DARK_FOREST", "f_48151_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#OLD_GROWTH_BIRCH_FOREST
    [[maybe_unused]] static jobject get_field_OLD_GROWTH_BIRCH_FOREST() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "OLD_GROWTH_BIRCH_FOREST", "field_35112", "OLD_GROWTH_BIRCH_FOREST", "f_186762_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#OLD_GROWTH_BIRCH_FOREST
    [[maybe_unused]] static void set_field_OLD_GROWTH_BIRCH_FOREST(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "OLD_GROWTH_BIRCH_FOREST", "field_35112", "OLD_GROWTH_BIRCH_FOREST", "f_186762_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#OLD_GROWTH_PINE_TAIGA
    [[maybe_unused]] static jobject get_field_OLD_GROWTH_PINE_TAIGA() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "OLD_GROWTH_PINE_TAIGA", "field_35119", "OLD_GROWTH_PINE_TAIGA", "f_186763_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#OLD_GROWTH_PINE_TAIGA
    [[maybe_unused]] static void set_field_OLD_GROWTH_PINE_TAIGA(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "OLD_GROWTH_PINE_TAIGA", "field_35119", "OLD_GROWTH_PINE_TAIGA", "f_186763_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#OLD_GROWTH_SPRUCE_TAIGA
    [[maybe_unused]] static jobject get_field_OLD_GROWTH_SPRUCE_TAIGA() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "OLD_GROWTH_SPRUCE_TAIGA", "field_35113", "OLD_GROWTH_SPRUCE_TAIGA", "f_186764_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#OLD_GROWTH_SPRUCE_TAIGA
    [[maybe_unused]] static void set_field_OLD_GROWTH_SPRUCE_TAIGA(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "OLD_GROWTH_SPRUCE_TAIGA", "field_35113", "OLD_GROWTH_SPRUCE_TAIGA", "f_186764_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#TAIGA
    [[maybe_unused]] static jobject get_field_TAIGA() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("p", "TAIGA", "field_9420", "TAIGA", "f_48206_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#TAIGA
    [[maybe_unused]] static void set_field_TAIGA(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("p", "TAIGA", "field_9420", "TAIGA", "f_48206_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#SNOWY_TAIGA
    [[maybe_unused]] static jobject get_field_SNOWY_TAIGA() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("q", "SNOWY_TAIGA", "field_9454", "SNOWY_TAIGA", "f_48152_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#SNOWY_TAIGA
    [[maybe_unused]] static void set_field_SNOWY_TAIGA(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("q", "SNOWY_TAIGA", "field_9454", "SNOWY_TAIGA", "f_48152_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#SAVANNA
    [[maybe_unused]] static jobject get_field_SAVANNA() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("r", "SAVANNA", "field_9449", "SAVANNA", "f_48157_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#SAVANNA
    [[maybe_unused]] static void set_field_SAVANNA(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("r", "SAVANNA", "field_9449", "SAVANNA", "f_48157_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#SAVANNA_PLATEAU
    [[maybe_unused]] static jobject get_field_SAVANNA_PLATEAU() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("s", "SAVANNA_PLATEAU", "field_9430", "SAVANNA_PLATEAU", "f_48158_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#SAVANNA_PLATEAU
    [[maybe_unused]] static void set_field_SAVANNA_PLATEAU(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("s", "SAVANNA_PLATEAU", "field_9430", "SAVANNA_PLATEAU", "f_48158_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#WINDSWEPT_HILLS
    [[maybe_unused]] static jobject get_field_WINDSWEPT_HILLS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("t", "WINDSWEPT_HILLS", "field_35116", "WINDSWEPT_HILLS", "f_186765_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#WINDSWEPT_HILLS
    [[maybe_unused]] static void set_field_WINDSWEPT_HILLS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("t", "WINDSWEPT_HILLS", "field_35116", "WINDSWEPT_HILLS", "f_186765_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#WINDSWEPT_GRAVELLY_HILLS
    [[maybe_unused]] static jobject get_field_WINDSWEPT_GRAVELLY_HILLS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("u", "WINDSWEPT_GRAVELLY_HILLS", "field_35111", "WINDSWEPT_GRAVELLY_HILLS", "f_186766_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#WINDSWEPT_GRAVELLY_HILLS
    [[maybe_unused]] static void set_field_WINDSWEPT_GRAVELLY_HILLS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("u", "WINDSWEPT_GRAVELLY_HILLS", "field_35111", "WINDSWEPT_GRAVELLY_HILLS", "f_186766_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#WINDSWEPT_FOREST
    [[maybe_unused]] static jobject get_field_WINDSWEPT_FOREST() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("v", "WINDSWEPT_FOREST", "field_35120", "WINDSWEPT_FOREST", "f_186767_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#WINDSWEPT_FOREST
    [[maybe_unused]] static void set_field_WINDSWEPT_FOREST(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("v", "WINDSWEPT_FOREST", "field_35120", "WINDSWEPT_FOREST", "f_186767_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#WINDSWEPT_SAVANNA
    [[maybe_unused]] static jobject get_field_WINDSWEPT_SAVANNA() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("w", "WINDSWEPT_SAVANNA", "field_35114", "WINDSWEPT_SAVANNA", "f_186768_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#WINDSWEPT_SAVANNA
    [[maybe_unused]] static void set_field_WINDSWEPT_SAVANNA(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("w", "WINDSWEPT_SAVANNA", "field_35114", "WINDSWEPT_SAVANNA", "f_186768_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#JUNGLE
    [[maybe_unused]] static jobject get_field_JUNGLE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("x", "JUNGLE", "field_9417", "JUNGLE", "f_48222_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#JUNGLE
    [[maybe_unused]] static void set_field_JUNGLE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("x", "JUNGLE", "field_9417", "JUNGLE", "f_48222_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#SPARSE_JUNGLE
    [[maybe_unused]] static jobject get_field_SPARSE_JUNGLE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("y", "SPARSE_JUNGLE", "field_35118", "SPARSE_JUNGLE", "f_186769_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#SPARSE_JUNGLE
    [[maybe_unused]] static void set_field_SPARSE_JUNGLE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("y", "SPARSE_JUNGLE", "field_35118", "SPARSE_JUNGLE", "f_186769_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#BAMBOO_JUNGLE
    [[maybe_unused]] static jobject get_field_BAMBOO_JUNGLE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("z", "BAMBOO_JUNGLE", "field_9440", "BAMBOO_JUNGLE", "f_48197_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#BAMBOO_JUNGLE
    [[maybe_unused]] static void set_field_BAMBOO_JUNGLE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("z", "BAMBOO_JUNGLE", "field_9440", "BAMBOO_JUNGLE", "f_48197_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#BADLANDS
    [[maybe_unused]] static jobject get_field_BADLANDS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("A", "BADLANDS", "field_9415", "BADLANDS", "f_48159_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#BADLANDS
    [[maybe_unused]] static void set_field_BADLANDS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("A", "BADLANDS", "field_9415", "BADLANDS", "f_48159_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#ERODED_BADLANDS
    [[maybe_unused]] static jobject get_field_ERODED_BADLANDS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("B", "ERODED_BADLANDS", "field_9443", "ERODED_BADLANDS", "f_48194_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#ERODED_BADLANDS
    [[maybe_unused]] static void set_field_ERODED_BADLANDS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("B", "ERODED_BADLANDS", "field_9443", "ERODED_BADLANDS", "f_48194_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#WOODED_BADLANDS
    [[maybe_unused]] static jobject get_field_WOODED_BADLANDS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("C", "WOODED_BADLANDS", "field_35110", "WOODED_BADLANDS", "f_186753_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#WOODED_BADLANDS
    [[maybe_unused]] static void set_field_WOODED_BADLANDS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("C", "WOODED_BADLANDS", "field_35110", "WOODED_BADLANDS", "f_186753_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#MEADOW
    [[maybe_unused]] static jobject get_field_MEADOW() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("D", "MEADOW", "field_34470", "MEADOW", "f_186754_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#MEADOW
    [[maybe_unused]] static void set_field_MEADOW(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("D", "MEADOW", "field_34470", "MEADOW", "f_186754_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#CHERRY_GROVE
    [[maybe_unused]] static jobject get_field_CHERRY_GROVE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("E", "CHERRY_GROVE", "field_42720", "CHERRY_GROVE", "f_271432_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#CHERRY_GROVE
    [[maybe_unused]] static void set_field_CHERRY_GROVE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("E", "CHERRY_GROVE", "field_42720", "CHERRY_GROVE", "f_271432_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#GROVE
    [[maybe_unused]] static jobject get_field_GROVE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("F", "GROVE", "field_34471", "GROVE", "f_186755_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#GROVE
    [[maybe_unused]] static void set_field_GROVE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("F", "GROVE", "field_34471", "GROVE", "f_186755_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#SNOWY_SLOPES
    [[maybe_unused]] static jobject get_field_SNOWY_SLOPES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("G", "SNOWY_SLOPES", "field_34472", "SNOWY_SLOPES", "f_186756_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#SNOWY_SLOPES
    [[maybe_unused]] static void set_field_SNOWY_SLOPES(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("G", "SNOWY_SLOPES", "field_34472", "SNOWY_SLOPES", "f_186756_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#FROZEN_PEAKS
    [[maybe_unused]] static jobject get_field_FROZEN_PEAKS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("H", "FROZEN_PEAKS", "field_35115", "FROZEN_PEAKS", "f_186757_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#FROZEN_PEAKS
    [[maybe_unused]] static void set_field_FROZEN_PEAKS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("H", "FROZEN_PEAKS", "field_35115", "FROZEN_PEAKS", "f_186757_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#JAGGED_PEAKS
    [[maybe_unused]] static jobject get_field_JAGGED_PEAKS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("I", "JAGGED_PEAKS", "field_34474", "JAGGED_PEAKS", "f_186758_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#JAGGED_PEAKS
    [[maybe_unused]] static void set_field_JAGGED_PEAKS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("I", "JAGGED_PEAKS", "field_34474", "JAGGED_PEAKS", "f_186758_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#STONY_PEAKS
    [[maybe_unused]] static jobject get_field_STONY_PEAKS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("J", "STONY_PEAKS", "field_34475", "STONY_PEAKS", "f_186759_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#STONY_PEAKS
    [[maybe_unused]] static void set_field_STONY_PEAKS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("J", "STONY_PEAKS", "field_34475", "STONY_PEAKS", "f_186759_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#RIVER
    [[maybe_unused]] static jobject get_field_RIVER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("K", "RIVER", "field_9438", "RIVER", "f_48208_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#RIVER
    [[maybe_unused]] static void set_field_RIVER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("K", "RIVER", "field_9438", "RIVER", "f_48208_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#FROZEN_RIVER
    [[maybe_unused]] static jobject get_field_FROZEN_RIVER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("L", "FROZEN_RIVER", "field_9463", "FROZEN_RIVER", "f_48212_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#FROZEN_RIVER
    [[maybe_unused]] static void set_field_FROZEN_RIVER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("L", "FROZEN_RIVER", "field_9463", "FROZEN_RIVER", "f_48212_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#BEACH
    [[maybe_unused]] static jobject get_field_BEACH() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("M", "BEACH", "field_9434", "BEACH", "f_48217_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#BEACH
    [[maybe_unused]] static void set_field_BEACH(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("M", "BEACH", "field_9434", "BEACH", "f_48217_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#SNOWY_BEACH
    [[maybe_unused]] static jobject get_field_SNOWY_BEACH() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("N", "SNOWY_BEACH", "field_9478", "SNOWY_BEACH", "f_48148_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#SNOWY_BEACH
    [[maybe_unused]] static void set_field_SNOWY_BEACH(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("N", "SNOWY_BEACH", "field_9478", "SNOWY_BEACH", "f_48148_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#STONY_SHORE
    [[maybe_unused]] static jobject get_field_STONY_SHORE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("O", "STONY_SHORE", "field_9419", "STONY_SHORE", "f_186760_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#STONY_SHORE
    [[maybe_unused]] static void set_field_STONY_SHORE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("O", "STONY_SHORE", "field_9419", "STONY_SHORE", "f_186760_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#WARM_OCEAN
    [[maybe_unused]] static jobject get_field_WARM_OCEAN() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("P", "WARM_OCEAN", "field_9408", "WARM_OCEAN", "f_48166_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#WARM_OCEAN
    [[maybe_unused]] static void set_field_WARM_OCEAN(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("P", "WARM_OCEAN", "field_9408", "WARM_OCEAN", "f_48166_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#LUKEWARM_OCEAN
    [[maybe_unused]] static jobject get_field_LUKEWARM_OCEAN() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("Q", "LUKEWARM_OCEAN", "field_9441", "LUKEWARM_OCEAN", "f_48167_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#LUKEWARM_OCEAN
    [[maybe_unused]] static void set_field_LUKEWARM_OCEAN(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("Q", "LUKEWARM_OCEAN", "field_9441", "LUKEWARM_OCEAN", "f_48167_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#DEEP_LUKEWARM_OCEAN
    [[maybe_unused]] static jobject get_field_DEEP_LUKEWARM_OCEAN() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("R", "DEEP_LUKEWARM_OCEAN", "field_9439", "DEEP_LUKEWARM_OCEAN", "f_48170_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#DEEP_LUKEWARM_OCEAN
    [[maybe_unused]] static void set_field_DEEP_LUKEWARM_OCEAN(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("R", "DEEP_LUKEWARM_OCEAN", "field_9439", "DEEP_LUKEWARM_OCEAN", "f_48170_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#OCEAN
    [[maybe_unused]] static jobject get_field_OCEAN() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("S", "OCEAN", "field_9423", "OCEAN", "f_48174_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#OCEAN
    [[maybe_unused]] static void set_field_OCEAN(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("S", "OCEAN", "field_9423", "OCEAN", "f_48174_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#DEEP_OCEAN
    [[maybe_unused]] static jobject get_field_DEEP_OCEAN() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("T", "DEEP_OCEAN", "field_9446", "DEEP_OCEAN", "f_48225_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#DEEP_OCEAN
    [[maybe_unused]] static void set_field_DEEP_OCEAN(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("T", "DEEP_OCEAN", "field_9446", "DEEP_OCEAN", "f_48225_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#COLD_OCEAN
    [[maybe_unused]] static jobject get_field_COLD_OCEAN() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("U", "COLD_OCEAN", "field_9467", "COLD_OCEAN", "f_48168_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#COLD_OCEAN
    [[maybe_unused]] static void set_field_COLD_OCEAN(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("U", "COLD_OCEAN", "field_9467", "COLD_OCEAN", "f_48168_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#DEEP_COLD_OCEAN
    [[maybe_unused]] static jobject get_field_DEEP_COLD_OCEAN() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("V", "DEEP_COLD_OCEAN", "field_9470", "DEEP_COLD_OCEAN", "f_48171_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#DEEP_COLD_OCEAN
    [[maybe_unused]] static void set_field_DEEP_COLD_OCEAN(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("V", "DEEP_COLD_OCEAN", "field_9470", "DEEP_COLD_OCEAN", "f_48171_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#FROZEN_OCEAN
    [[maybe_unused]] static jobject get_field_FROZEN_OCEAN() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("W", "FROZEN_OCEAN", "field_9435", "FROZEN_OCEAN", "f_48211_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#FROZEN_OCEAN
    [[maybe_unused]] static void set_field_FROZEN_OCEAN(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("W", "FROZEN_OCEAN", "field_9435", "FROZEN_OCEAN", "f_48211_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#DEEP_FROZEN_OCEAN
    [[maybe_unused]] static jobject get_field_DEEP_FROZEN_OCEAN() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("X", "DEEP_FROZEN_OCEAN", "field_9418", "DEEP_FROZEN_OCEAN", "f_48172_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#DEEP_FROZEN_OCEAN
    [[maybe_unused]] static void set_field_DEEP_FROZEN_OCEAN(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("X", "DEEP_FROZEN_OCEAN", "field_9418", "DEEP_FROZEN_OCEAN", "f_48172_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#MUSHROOM_FIELDS
    [[maybe_unused]] static jobject get_field_MUSHROOM_FIELDS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("Y", "MUSHROOM_FIELDS", "field_9462", "MUSHROOM_FIELDS", "f_48215_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#MUSHROOM_FIELDS
    [[maybe_unused]] static void set_field_MUSHROOM_FIELDS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("Y", "MUSHROOM_FIELDS", "field_9462", "MUSHROOM_FIELDS", "f_48215_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#DRIPSTONE_CAVES
    [[maybe_unused]] static jobject get_field_DRIPSTONE_CAVES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("Z", "DRIPSTONE_CAVES", "field_28107", "DRIPSTONE_CAVES", "f_151784_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#DRIPSTONE_CAVES
    [[maybe_unused]] static void set_field_DRIPSTONE_CAVES(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("Z", "DRIPSTONE_CAVES", "field_28107", "DRIPSTONE_CAVES", "f_151784_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#LUSH_CAVES
    [[maybe_unused]] static jobject get_field_LUSH_CAVES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aa", "LUSH_CAVES", "field_29218", "LUSH_CAVES", "f_151785_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#LUSH_CAVES
    [[maybe_unused]] static void set_field_LUSH_CAVES(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aa", "LUSH_CAVES", "field_29218", "LUSH_CAVES", "f_151785_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#DEEP_DARK
    [[maybe_unused]] static jobject get_field_DEEP_DARK() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ab", "DEEP_DARK", "field_37543", "DEEP_DARK", "f_220594_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#DEEP_DARK
    [[maybe_unused]] static void set_field_DEEP_DARK(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ab", "DEEP_DARK", "field_37543", "DEEP_DARK", "f_220594_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#NETHER_WASTES
    [[maybe_unused]] static jobject get_field_NETHER_WASTES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ac", "NETHER_WASTES", "field_9461", "NETHER_WASTES", "f_48209_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#NETHER_WASTES
    [[maybe_unused]] static void set_field_NETHER_WASTES(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ac", "NETHER_WASTES", "field_9461", "NETHER_WASTES", "f_48209_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#WARPED_FOREST
    [[maybe_unused]] static jobject get_field_WARPED_FOREST() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ad", "WARPED_FOREST", "field_22075", "WARPED_FOREST", "f_48201_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#WARPED_FOREST
    [[maybe_unused]] static void set_field_WARPED_FOREST(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ad", "WARPED_FOREST", "field_22075", "WARPED_FOREST", "f_48201_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#CRIMSON_FOREST
    [[maybe_unused]] static jobject get_field_CRIMSON_FOREST() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ae", "CRIMSON_FOREST", "field_22077", "CRIMSON_FOREST", "f_48200_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#CRIMSON_FOREST
    [[maybe_unused]] static void set_field_CRIMSON_FOREST(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ae", "CRIMSON_FOREST", "field_22077", "CRIMSON_FOREST", "f_48200_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#SOUL_SAND_VALLEY
    [[maybe_unused]] static jobject get_field_SOUL_SAND_VALLEY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("af", "SOUL_SAND_VALLEY", "field_22076", "SOUL_SAND_VALLEY", "f_48199_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#SOUL_SAND_VALLEY
    [[maybe_unused]] static void set_field_SOUL_SAND_VALLEY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("af", "SOUL_SAND_VALLEY", "field_22076", "SOUL_SAND_VALLEY", "f_48199_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#BASALT_DELTAS
    [[maybe_unused]] static jobject get_field_BASALT_DELTAS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ag", "BASALT_DELTAS", "field_23859", "BASALT_DELTAS", "f_48175_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#BASALT_DELTAS
    [[maybe_unused]] static void set_field_BASALT_DELTAS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ag", "BASALT_DELTAS", "field_23859", "BASALT_DELTAS", "f_48175_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#THE_END
    [[maybe_unused]] static jobject get_field_THE_END() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ah", "THE_END", "field_9411", "THE_END", "f_48210_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#THE_END
    [[maybe_unused]] static void set_field_THE_END(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ah", "THE_END", "field_9411", "THE_END", "f_48210_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#END_HIGHLANDS
    [[maybe_unused]] static jobject get_field_END_HIGHLANDS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ai", "END_HIGHLANDS", "field_9442", "END_HIGHLANDS", "f_48164_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#END_HIGHLANDS
    [[maybe_unused]] static void set_field_END_HIGHLANDS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ai", "END_HIGHLANDS", "field_9442", "END_HIGHLANDS", "f_48164_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#END_MIDLANDS
    [[maybe_unused]] static jobject get_field_END_MIDLANDS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aj", "END_MIDLANDS", "field_9447", "END_MIDLANDS", "f_48163_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#END_MIDLANDS
    [[maybe_unused]] static void set_field_END_MIDLANDS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aj", "END_MIDLANDS", "field_9447", "END_MIDLANDS", "f_48163_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#SMALL_END_ISLANDS
    [[maybe_unused]] static jobject get_field_SMALL_END_ISLANDS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ak", "SMALL_END_ISLANDS", "field_9457", "SMALL_END_ISLANDS", "f_48162_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#SMALL_END_ISLANDS
    [[maybe_unused]] static void set_field_SMALL_END_ISLANDS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ak", "SMALL_END_ISLANDS", "field_9457", "SMALL_END_ISLANDS", "f_48162_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.biome.BiomeKeys#END_BARRENS
    [[maybe_unused]] static jobject get_field_END_BARRENS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("al", "END_BARRENS", "field_9465", "END_BARRENS", "f_48165_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.biome.BiomeKeys#END_BARRENS
    [[maybe_unused]] static void set_field_END_BARRENS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("al", "END_BARRENS", "field_9465", "END_BARRENS", "f_48165_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_register() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "register", "method_8775", "register", "m_48228_"), "(Ljava/lang/String;)Lakq;");
    }

    static jobject register(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_register();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_WORLD_BIOME_BIOMEKEYS_HPP