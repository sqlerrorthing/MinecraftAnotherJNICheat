// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_ENTITY_SECTIONEDENTITYCACHE_HPP
#define NET_MINECRAFT_WORLD_ENTITY_SECTIONEDENTITYCACHE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.entity.SectionedEntityCache
 * Remapped: dxl
 */
namespace SectionedEntityCache {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dxl", "net/minecraft/world/level/entity/EntitySectionStorage", "net/minecraft/class_5573", "net/minecraft/world/entity/SectionedEntityCache", "net/minecraft/src/C_141285_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.world.entity.SectionedEntityCache#entityClass
    static jobject get_field_entityClass(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "entityClass", "field_27250", "entityClass", "f_156850_"), "Ljava/lang/Class;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.entity.SectionedEntityCache#entityClass
    static void set_field_entityClass(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "entityClass", "field_27250", "entityClass", "f_156850_"), "Ljava/lang/Class;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.entity.SectionedEntityCache#posToStatus
    static jobject get_field_posToStatus(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "intialSectionVisibility", "field_27251", "posToStatus", "f_156851_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectFunction;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.entity.SectionedEntityCache#posToStatus
    static void set_field_posToStatus(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "intialSectionVisibility", "field_27251", "posToStatus", "f_156851_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectFunction;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.entity.SectionedEntityCache#trackingSections
    static jobject get_field_trackingSections(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "sections", "field_27252", "trackingSections", "f_156852_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.entity.SectionedEntityCache#trackingSections
    static void set_field_trackingSections(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "sections", "field_27252", "trackingSections", "f_156852_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.entity.SectionedEntityCache#trackedPositions
    static jobject get_field_trackedPositions(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "sectionIds", "field_27253", "trackedPositions", "f_156853_"), "Lit/unimi/dsi/fastutil/longs/LongSortedSet;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.entity.SectionedEntityCache#trackedPositions
    static void set_field_trackedPositions(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "sectionIds", "field_27253", "trackedPositions", "f_156853_"), "Lit/unimi/dsi/fastutil/longs/LongSortedSet;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_forEachInBox() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "forEachAccessibleNonEmptySection", "method_31777", "forEachInBox", "m_188362_"), "(Lewx;Laxa;)V");
    }

    static void forEachInBox(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_forEachInBox();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getSections() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getExistingSectionPositionsInChunk", "method_31772", "getSections", "m_156861_"), "(J)Ljava/util/stream/LongStream;");
    }

    static jobject getSections(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_getSections();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__getSections() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getChunkSections", "method_31771", "getSections", "m_156858_"), "(II)Lit/unimi/dsi/fastutil/longs/LongSortedSet;");
    }

    static jobject _getSections(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID__getSections();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getTrackingSections() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getExistingSectionsInChunk", "method_31782", "getTrackingSections", "m_156888_"), "(J)Ljava/util/stream/Stream;");
    }

    static jobject getTrackingSections(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_getTrackingSections();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_chunkPosFromSectionPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("f", "getChunkKeyFromSectionKey", "method_31787", "chunkPosFromSectionPos", "m_156899_"), "(J)J");
    }

    static jlong chunkPosFromSectionPos(const jlong& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_chunkPosFromSectionPos();
       return MinecraftSDK::env->CallStaticLongMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getTrackingSection() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getOrCreateSection", "method_31784", "getTrackingSection", "m_156893_"), "(J)Ldxk;");
    }

    static jobject getTrackingSection(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_getTrackingSection();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_findTrackingSection() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getSection", "method_31785", "findTrackingSection", "m_156895_"), "(J)Ldxk;");
    }

    static jobject findTrackingSection(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_findTrackingSection();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_addSection() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "createSection", "method_31788", "addSection", "m_156901_"), "(J)Ldxk;");
    }

    static jobject addSection(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_addSection();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getChunkPositions() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getAllChunksWithExistingSections", "method_31770", "getChunkPositions", "m_156857_"), "()Lit/unimi/dsi/fastutil/longs/LongSet;");
    }

    static jobject getChunkPositions(const jobject& obj) {
                
       const auto methodID = methodID_getChunkPositions();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_forEachIntersects() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getEntities", "method_31783", "forEachIntersects", "m_261111_"), "(Lewx;Laxa;)V");
    }

    static void forEachIntersects(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_forEachIntersects();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__forEachIntersects() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getEntities", "method_31773", "forEachIntersects", "m_261191_"), "(Ldxn;Lewx;Laxa;)V");
    }

    static void _forEachIntersects(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID__forEachIntersects();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_removeSection() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "remove", "method_31786", "removeSection", "m_156897_"), "(J)V");
    }

    static void removeSection(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_removeSection();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_sectionCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "count", "method_31781", "sectionCount", "m_156887_"), "()I");
    }

    static jint sectionCount(const jobject& obj) {
                
       const auto methodID = methodID_sectionCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_WORLD_ENTITY_SECTIONEDENTITYCACHE_HPP