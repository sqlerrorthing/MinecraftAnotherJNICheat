// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_ENTITY_ENTITYTRACKINGSTATUS_HPP
#define NET_MINECRAFT_WORLD_ENTITY_ENTITYTRACKINGSTATUS_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.entity.EntityTrackingStatus
 * Remapped: dxt
 */
namespace EntityTrackingStatus {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dxt", "net/minecraft/world/level/entity/Visibility", "net/minecraft/class_5584", "net/minecraft/world/entity/EntityTrackingStatus", "net/minecraft/src/C_141300_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.world.entity.EntityTrackingStatus#HIDDEN
    [[maybe_unused]] static jobject get_field_HIDDEN() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "HIDDEN", "field_27289", "HIDDEN", "HIDDEN"), "Ldxt;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.entity.EntityTrackingStatus#HIDDEN
    [[maybe_unused]] static void set_field_HIDDEN(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "HIDDEN", "field_27289", "HIDDEN", "HIDDEN"), "Ldxt;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.entity.EntityTrackingStatus#TRACKED
    [[maybe_unused]] static jobject get_field_TRACKED() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "TRACKED", "field_27290", "TRACKED", "TRACKED"), "Ldxt;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.entity.EntityTrackingStatus#TRACKED
    [[maybe_unused]] static void set_field_TRACKED(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "TRACKED", "field_27290", "TRACKED", "TRACKED"), "Ldxt;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.entity.EntityTrackingStatus#TICKING
    [[maybe_unused]] static jobject get_field_TICKING() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "TICKING", "field_27291", "TICKING", "TICKING"), "Ldxt;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.entity.EntityTrackingStatus#TICKING
    [[maybe_unused]] static void set_field_TICKING(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "TICKING", "field_27291", "TICKING", "TICKING"), "Ldxt;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.world.entity.EntityTrackingStatus#tracked
    static jboolean get_field_tracked(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "accessible", "field_27292", "tracked", "f_157682_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.entity.EntityTrackingStatus#tracked
    static void set_field_tracked(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "accessible", "field_27292", "tracked", "f_157682_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.entity.EntityTrackingStatus#tick
    static jboolean get_field_tick(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "ticking", "field_27293", "tick", "f_157683_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.entity.EntityTrackingStatus#tick
    static void set_field_tick(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "ticking", "field_27293", "tick", "f_157683_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    static jmethodID methodID_values() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("values", "values", "values", "values", "values"), "()[Ldxt;");
    }

    static jobject values() {
       const auto clazz = self();
       const auto methodID = methodID_values();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_valueOf() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("valueOf", "valueOf", "valueOf", "valueOf", "valueOf"), "(Ljava/lang/String;)Ldxt;");
    }

    static jobject valueOf(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_valueOf();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_shouldTick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isTicking", "method_31883", "shouldTick", "m_157691_"), "()Z");
    }

    static jboolean shouldTick(const jobject& obj) {
                
       const auto methodID = methodID_shouldTick();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_shouldTrack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "isAccessible", "method_31885", "shouldTrack", "m_157694_"), "()Z");
    }

    static jboolean shouldTrack(const jobject& obj) {
                
       const auto methodID = methodID_shouldTrack();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_fromLevelType() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "fromFullChunkStatus", "method_31884", "fromLevelType", "m_287140_"), "(Laql;)Ldxt;");
    }

    static jobject fromLevelType(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_fromLevelType();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_WORLD_ENTITY_ENTITYTRACKINGSTATUS_HPP