// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_CHUNKREGION_HPP
#define NET_MINECRAFT_WORLD_CHUNKREGION_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.ChunkRegion
 * Remapped: arb
 */
namespace ChunkRegion {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("arb", "net/minecraft/server/level/WorldGenRegion", "net/minecraft/class_3233", "net/minecraft/world/ChunkRegion", "net/minecraft/src/C_19_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.world.ChunkRegion#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_14092", "LOGGER", "f_9474_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.ChunkRegion#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_14092", "LOGGER", "f_9474_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.world.ChunkRegion#chunks
    static jobject get_field_chunks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "cache", "field_14098", "chunks", "f_9475_"), "Lazi;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.ChunkRegion#chunks
    static void set_field_chunks(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "cache", "field_14098", "chunks", "f_9475_"), "Lazi;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.ChunkRegion#centerPos
    static jobject get_field_centerPos(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "center", "field_28557", "centerPos", "f_143479_"), "Lduy;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.ChunkRegion#centerPos
    static void set_field_centerPos(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "center", "field_28557", "centerPos", "f_143479_"), "Lduy;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.ChunkRegion#world
    static jobject get_field_world(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "level", "field_14093", "world", "f_9479_"), "Laqu;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.ChunkRegion#world
    static void set_field_world(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "level", "field_14093", "world", "f_9479_"), "Laqu;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.ChunkRegion#seed
    static jlong get_field_seed(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "seed", "field_14087", "seed", "f_9480_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.ChunkRegion#seed
    static void set_field_seed(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "seed", "field_14087", "seed", "f_9480_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.ChunkRegion#levelProperties
    static jobject get_field_levelProperties(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "levelData", "field_14097", "levelProperties", "f_9481_"), "Lerb;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.ChunkRegion#levelProperties
    static void set_field_levelProperties(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "levelData", "field_14097", "levelProperties", "f_9481_"), "Lerb;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.ChunkRegion#random
    static jobject get_field_random(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "random", "field_14091", "random", "f_9482_"), "Layw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.ChunkRegion#random
    static void set_field_random(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "random", "field_14091", "random", "f_9482_"), "Layw;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.ChunkRegion#dimension
    static jobject get_field_dimension(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "dimensionType", "field_14096", "dimension", "f_9483_"), "Ldwy;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.ChunkRegion#dimension
    static void set_field_dimension(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "dimensionType", "field_14096", "dimension", "f_9483_"), "Ldwy;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.ChunkRegion#blockTickScheduler
    static jobject get_field_blockTickScheduler(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "blockTicks", "field_14099", "blockTickScheduler", "f_9484_"), "Leyy;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.ChunkRegion#blockTickScheduler
    static void set_field_blockTickScheduler(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "blockTicks", "field_14099", "blockTickScheduler", "f_9484_"), "Leyy;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.ChunkRegion#fluidTickScheduler
    static jobject get_field_fluidTickScheduler(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "fluidTicks", "field_14094", "fluidTickScheduler", "f_184181_"), "Leyy;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.ChunkRegion#fluidTickScheduler
    static void set_field_fluidTickScheduler(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "fluidTicks", "field_14094", "fluidTickScheduler", "f_184181_"), "Leyy;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.ChunkRegion#biomeAccess
    static jobject get_field_biomeAccess(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "biomeManager", "field_20668", "biomeAccess", "f_9486_"), "Lddy;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.ChunkRegion#biomeAccess
    static void set_field_biomeAccess(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "biomeManager", "field_20668", "biomeAccess", "f_9486_"), "Lddy;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.ChunkRegion#generationStep
    static jobject get_field_generationStep(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "generatingStep", "field_51876", "generationStep", "f_337357_"), "Ldwc;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.ChunkRegion#generationStep
    static void set_field_generationStep(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "generatingStep", "field_51876", "generationStep", "f_337357_"), "Ldwc;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.ChunkRegion#currentlyGeneratingStructureName
    static jobject get_field_currentlyGeneratingStructureName(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "currentlyGenerating", "field_33756", "currentlyGeneratingStructureName", "f_143482_"), "Ljava/util/function/Supplier;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.ChunkRegion#currentlyGeneratingStructureName
    static void set_field_currentlyGeneratingStructureName(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "currentlyGenerating", "field_33756", "currentlyGeneratingStructureName", "f_143482_"), "Ljava/util/function/Supplier;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.ChunkRegion#tickOrder
    static jobject get_field_tickOrder(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "subTickCount", "field_35442", "tickOrder", "f_184182_"), "Ljava/util/concurrent/atomic/AtomicLong;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.ChunkRegion#tickOrder
    static void set_field_tickOrder(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "subTickCount", "field_35442", "tickOrder", "f_184182_"), "Ljava/util/concurrent/atomic/AtomicLong;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for static private field net.minecraft.world.ChunkRegion#WORLDGEN_REGION_RANDOM_ID
    [[maybe_unused]] static jobject get_field_WORLDGEN_REGION_RANDOM_ID() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "WORLDGEN_REGION_RANDOM", "field_38683", "WORLDGEN_REGION_RANDOM_ID", "f_215158_"), "Lakr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.ChunkRegion#WORLDGEN_REGION_RANDOM_ID
    [[maybe_unused]] static void set_field_WORLDGEN_REGION_RANDOM_ID(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "WORLDGEN_REGION_RANDOM", "field_38683", "WORLDGEN_REGION_RANDOM_ID", "f_215158_"), "Lakr;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_needsBlending() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isOldChunkAround", "method_42109", "needsBlending", "m_215159_"), "(Ldcd;I)Z");
    }

    static jboolean needsBlending(const jobject& obj, const jobject& arg0, const jint& arg1) {
                
       const auto methodID = methodID_needsBlending();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getCenterPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getCenter", "method_33561", "getCenterPos", "m_143488_"), "()Ldcd;");
    }

    static jobject getCenterPos(const jobject& obj) {
                
       const auto methodID = methodID_getCenterPos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_setCurrentlyGeneratingStructureName() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setCurrentlyGenerating", "method_36972", "setCurrentlyGeneratingStructureName", "m_143497_"), "(Ljava/util/function/Supplier;)V");
    }

    static void setCurrentlyGeneratingStructureName(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setCurrentlyGeneratingStructureName();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getChunk() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getChunk", "method_8392", "getChunk", "m_6325_"), "(II)Lduy;");
    }

    static jobject getChunk(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_getChunk();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__getChunk() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getChunk", "method_8402", "getChunk", "m_6522_"), "(IILdvz;Z)Lduy;");
    }

    static jobject _getChunk(const jobject& obj, const jint& arg0, const jint& arg1, const jobject& arg2, const jboolean& arg3) {
                
       const auto methodID = methodID__getChunk();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_isChunkLoaded() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "hasChunk", "method_8393", "isChunkLoaded", "m_7232_"), "(II)Z");
    }

    static jboolean isChunkLoaded(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_isChunkLoaded();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getBlockState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a_", "getBlockState", "method_8320", "getBlockState", "m_8055_"), "(Ljd;)Ldtc;");
    }

    static jobject getBlockState(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getBlockState();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getFluidState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b_", "getFluidState", "method_8316", "getFluidState", "m_6425_"), "(Ljd;)Lepe;");
    }

    static jobject getFluidState(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getFluidState();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getClosestPlayer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getNearestPlayer", "method_8604", "getClosestPlayer", "m_5788_"), "(DDDDLjava/util/function/Predicate;)Lcmx;");
    }

    static jobject getClosestPlayer(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2, const jdouble& arg3, const jobject& arg4) {
                
       const auto methodID = methodID_getClosestPlayer();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_getAmbientDarkness() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("B_", "getSkyDarken", "method_8594", "getAmbientDarkness", "m_7445_"), "()I");
    }

    static jint getAmbientDarkness(const jobject& obj) {
                
       const auto methodID = methodID_getAmbientDarkness();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getBiomeAccess() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("F_", "getBiomeManager", "method_22385", "getBiomeAccess", "m_7062_"), "()Lddy;");
    }

    static jobject getBiomeAccess(const jobject& obj) {
                
       const auto methodID = methodID_getBiomeAccess();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getGeneratorStoredBiome() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getUncachedNoiseBiome", "method_22387", "getGeneratorStoredBiome", "m_203675_"), "(III)Ljm;");
    }

    static jobject getGeneratorStoredBiome(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_getGeneratorStoredBiome();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getBrightness() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getShade", "method_24852", "getBrightness", "m_7717_"), "(Lji;Z)F");
    }

    static jfloat getBrightness(const jobject& obj, const jobject& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_getBrightness();
       return MinecraftSDK::env->CallFloatMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getLightingProvider() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("y_", "getLightEngine", "method_22336", "getLightingProvider", "m_5518_"), "()Leot;");
    }

    static jobject getLightingProvider(const jobject& obj) {
                
       const auto methodID = methodID_getLightingProvider();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_breakBlock() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "destroyBlock", "method_30093", "breakBlock", "m_7740_"), "(Ljd;ZLbsr;I)Z");
    }

    static jboolean breakBlock(const jobject& obj, const jobject& arg0, const jboolean& arg1, const jobject& arg2, const jint& arg3) {
                
       const auto methodID = methodID_breakBlock();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_getBlockEntity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c_", "getBlockEntity", "method_8321", "getBlockEntity", "m_7702_"), "(Ljd;)Ldqh;");
    }

    static jobject getBlockEntity(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getBlockEntity();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isValidForSetBlock() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f_", "ensureCanWrite", "method_37368", "isValidForSetBlock", "m_180807_"), "(Ljd;)Z");
    }

    static jboolean isValidForSetBlock(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isValidForSetBlock();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setBlockState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setBlock", "method_30092", "setBlockState", "m_6933_"), "(Ljd;Ldtc;II)Z");
    }

    static jboolean setBlockState(const jobject& obj, const jobject& arg0, const jobject& arg1, const jint& arg2, const jint& arg3) {
                
       const auto methodID = methodID_setBlockState();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_markBlockForPostProcessing() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "markPosForPostprocessing", "method_14338", "markBlockForPostProcessing", "m_9591_"), "(Ljd;)V");
    }

    static void markBlockForPostProcessing(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_markBlockForPostProcessing();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_spawnEntity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "addFreshEntity", "method_8649", "spawnEntity", "m_7967_"), "(Lbsr;)Z");
    }

    static jboolean spawnEntity(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_spawnEntity();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_removeBlock() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "removeBlock", "method_8650", "removeBlock", "m_7471_"), "(Ljd;Z)Z");
    }

    static jboolean removeBlock(const jobject& obj, const jobject& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_removeBlock();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getWorldBorder() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("C_", "getWorldBorder", "method_8621", "getWorldBorder", "m_6857_"), "()Ldut;");
    }

    static jobject getWorldBorder(const jobject& obj) {
                
       const auto methodID = methodID_getWorldBorder();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_isClient() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("x_", "isClientSide", "method_8608", "isClient", "m_5776_"), "()Z");
    }

    static jboolean isClient(const jobject& obj) {
                
       const auto methodID = methodID_isClient();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_toServerWorld() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("E", "getLevel", "method_8410", "toServerWorld", "m_6018_"), "()Laqu;");
    }

    static jobject toServerWorld(const jobject& obj) {
                
       const auto methodID = methodID_toServerWorld();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getRegistryManager() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("H_", "registryAccess", "method_30349", "getRegistryManager", "m_9598_"), "()Lka;");
    }

    static jobject getRegistryManager(const jobject& obj) {
                
       const auto methodID = methodID_getRegistryManager();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getEnabledFeatures() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("J", "enabledFeatures", "method_45162", "getEnabledFeatures", "m_246046_"), "()Lcpl;");
    }

    static jobject getEnabledFeatures(const jobject& obj) {
                
       const auto methodID = methodID_getEnabledFeatures();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getLevelProperties() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("A_", "getLevelData", "method_8401", "getLevelProperties", "m_6106_"), "()Lerb;");
    }

    static jobject getLevelProperties(const jobject& obj) {
                
       const auto methodID = methodID_getLevelProperties();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getLocalDifficulty() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d_", "getCurrentDifficultyAt", "method_8404", "getLocalDifficulty", "m_6436_"), "(Ljd;)Lbqp;");
    }

    static jobject getLocalDifficulty(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getLocalDifficulty();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getServer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("o", "getServer", "method_8503", "getServer", "m_7654_"), "()Lnet/minecraft/server/MinecraftServer;");
    }

    static jobject getServer(const jobject& obj) {
                
       const auto methodID = methodID_getServer();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getChunkManager() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("N", "getChunkSource", "method_8398", "getChunkManager", "m_7726_"), "()Ldvc;");
    }

    static jobject getChunkManager(const jobject& obj) {
                
       const auto methodID = methodID_getChunkManager();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getSeed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("C", "getSeed", "method_8412", "getSeed", "m_7328_"), "()J");
    }

    static jlong getSeed(const jobject& obj) {
                
       const auto methodID = methodID_getSeed();
       return MinecraftSDK::env->CallLongMethod(obj, methodID);
    };
    
    static jmethodID methodID_getBlockTickScheduler() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("P", "getBlockTicks", "method_8397", "getBlockTickScheduler", "m_183326_"), "()Leyp;");
    }

    static jobject getBlockTickScheduler(const jobject& obj) {
                
       const auto methodID = methodID_getBlockTickScheduler();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getFluidTickScheduler() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("O", "getFluidTicks", "method_8405", "getFluidTickScheduler", "m_183324_"), "()Leyp;");
    }

    static jobject getFluidTickScheduler(const jobject& obj) {
                
       const auto methodID = methodID_getFluidTickScheduler();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getSeaLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("z_", "getSeaLevel", "method_8615", "getSeaLevel", "m_5736_"), "()I");
    }

    static jint getSeaLevel(const jobject& obj) {
                
       const auto methodID = methodID_getSeaLevel();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getRandom() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("E_", "getRandom", "method_8409", "getRandom", "m_213780_"), "()Layw;");
    }

    static jobject getRandom(const jobject& obj) {
                
       const auto methodID = methodID_getRandom();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getTopY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getHeight", "method_8624", "getTopY", "m_6924_"), "(Ldyy$a;II)I");
    }

    static jint getTopY(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_getTopY();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_playSound() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "playSound", "method_8396", "playSound", "m_5594_"), "(Lcmx;Ljd;Lavo;Lavq;FF)V");
    }

    static void playSound(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jfloat& arg4, const jfloat& arg5) {
                
       const auto methodID = methodID_playSound();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
    static jmethodID methodID_addParticle() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addParticle", "method_8406", "addParticle", "m_7106_"), "(Llk;DDDDDD)V");
    }

    static void addParticle(const jobject& obj, const jobject& arg0, const jdouble& arg1, const jdouble& arg2, const jdouble& arg3, const jdouble& arg4, const jdouble& arg5, const jdouble& arg6) {
                
       const auto methodID = methodID_addParticle();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    };
    
    static jmethodID methodID_syncWorldEvent() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "levelEvent", "method_8444", "syncWorldEvent", "m_5898_"), "(Lcmx;ILjd;I)V");
    }

    static void syncWorldEvent(const jobject& obj, const jobject& arg0, const jint& arg1, const jobject& arg2, const jint& arg3) {
                
       const auto methodID = methodID_syncWorldEvent();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_emitGameEvent() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "gameEvent", "method_32888", "emitGameEvent", "m_214171_"), "(Ljm;Lexc;Ldxz$a;)V");
    }

    static void emitGameEvent(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_emitGameEvent();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getDimension() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("D_", "dimensionType", "method_8597", "getDimension", "m_6042_"), "()Ldwy;");
    }

    static jobject getDimension(const jobject& obj) {
                
       const auto methodID = methodID_getDimension();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_testBlockState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isStateAtPosition", "method_16358", "testBlockState", "m_7433_"), "(Ljd;Ljava/util/function/Predicate;)Z");
    }

    static jboolean testBlockState(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_testBlockState();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_testFluidState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "isFluidAtPosition", "method_35237", "testFluidState", "m_142433_"), "(Ljd;Ljava/util/function/Predicate;)Z");
    }

    static jboolean testFluidState(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_testFluidState();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getEntitiesByType() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getEntities", "method_18023", "getEntitiesByType", "m_142425_"), "(Ldxn;Lewx;Ljava/util/function/Predicate;)Ljava/util/List;");
    }

    static jobject getEntitiesByType(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_getEntitiesByType();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getOtherEntities() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getEntities", "method_8333", "getOtherEntities", "m_6249_"), "(Lbsr;Lewx;Ljava/util/function/Predicate;)Ljava/util/List;");
    }

    static jobject getOtherEntities(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_getOtherEntities();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getPlayers() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("x", "players", "method_18456", "getPlayers", "m_6907_"), "()Ljava/util/List;");
    }

    static jobject getPlayers(const jobject& obj) {
                
       const auto methodID = methodID_getPlayers();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getBottomY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("I_", "getMinBuildHeight", "method_31607", "getBottomY", "m_141937_"), "()I");
    }

    static jint getBottomY(const jobject& obj) {
                
       const auto methodID = methodID_getBottomY();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getHeight() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("J_", "getHeight", "method_31605", "getHeight", "m_141928_"), "()I");
    }

    static jint getHeight(const jobject& obj) {
                
       const auto methodID = methodID_getHeight();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getTickOrder() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("G_", "nextSubTickCount", "method_39224", "getTickOrder", "m_183596_"), "()J");
    }

    static jlong getTickOrder(const jobject& obj) {
                
       const auto methodID = methodID_getTickOrder();
       return MinecraftSDK::env->CallLongMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_WORLD_CHUNKREGION_HPP