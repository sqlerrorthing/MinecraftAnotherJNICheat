// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_STRUCTURELOCATOR_HPP
#define NET_MINECRAFT_WORLD_STRUCTURELOCATOR_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.StructureLocator
 * Remapped: ejs
 */
namespace StructureLocator {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("ejs", "net/minecraft/world/level/levelgen/structure/StructureCheck", "net/minecraft/class_6832", "net/minecraft/world/StructureLocator", "net/minecraft/src/C_196112_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.world.StructureLocator#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_36225", "LOGGER", "f_197235_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.StructureLocator#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_36225", "LOGGER", "f_197235_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.StructureLocator#START_NOT_PRESENT_REFERENCE
    [[maybe_unused]] static jint get_field_START_NOT_PRESENT_REFERENCE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "NO_STRUCTURE", "field_36226", "START_NOT_PRESENT_REFERENCE", "f_197236_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.StructureLocator#START_NOT_PRESENT_REFERENCE
    [[maybe_unused]] static void set_field_START_NOT_PRESENT_REFERENCE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "NO_STRUCTURE", "field_36226", "START_NOT_PRESENT_REFERENCE", "f_197236_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.world.StructureLocator#chunkIoWorker
    static jobject get_field_chunkIoWorker(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "storageAccess", "field_36227", "chunkIoWorker", "f_197237_"), "Ldwh;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.StructureLocator#chunkIoWorker
    static void set_field_chunkIoWorker(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "storageAccess", "field_36227", "chunkIoWorker", "f_197237_"), "Ldwh;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.StructureLocator#registryManager
    static jobject get_field_registryManager(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "registryAccess", "field_36228", "registryManager", "f_197238_"), "Lka;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.StructureLocator#registryManager
    static void set_field_registryManager(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "registryAccess", "field_36228", "registryManager", "f_197238_"), "Lka;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.StructureLocator#structureTemplateManager
    static jobject get_field_structureTemplateManager(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "structureTemplateManager", "field_36230", "structureTemplateManager", "f_226709_"), "Lenu;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.StructureLocator#structureTemplateManager
    static void set_field_structureTemplateManager(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "structureTemplateManager", "field_36230", "structureTemplateManager", "f_226709_"), "Lenu;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.StructureLocator#worldKey
    static jobject get_field_worldKey(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "dimension", "field_36231", "worldKey", "f_197241_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.StructureLocator#worldKey
    static void set_field_worldKey(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "dimension", "field_36231", "worldKey", "f_197241_"), "Lakq;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.StructureLocator#chunkGenerator
    static jobject get_field_chunkGenerator(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "chunkGenerator", "field_36232", "chunkGenerator", "f_197242_"), "Lduz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.StructureLocator#chunkGenerator
    static void set_field_chunkGenerator(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "chunkGenerator", "field_36232", "chunkGenerator", "f_197242_"), "Lduz;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.StructureLocator#noiseConfig
    static jobject get_field_noiseConfig(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "randomState", "field_37750", "noiseConfig", "f_226710_"), "Ldzm;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.StructureLocator#noiseConfig
    static void set_field_noiseConfig(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "randomState", "field_37750", "noiseConfig", "f_226710_"), "Ldzm;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.StructureLocator#world
    static jobject get_field_world(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "heightAccessor", "field_36233", "world", "f_197243_"), "Ldcy;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.StructureLocator#world
    static void set_field_world(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "heightAccessor", "field_36233", "world", "f_197243_"), "Ldcy;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.StructureLocator#biomeSource
    static jobject get_field_biomeSource(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "biomeSource", "field_36234", "biomeSource", "f_197244_"), "Ldea;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.StructureLocator#biomeSource
    static void set_field_biomeSource(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "biomeSource", "field_36234", "biomeSource", "f_197244_"), "Ldea;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.StructureLocator#seed
    static jlong get_field_seed(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "seed", "field_36235", "seed", "f_197245_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.StructureLocator#seed
    static void set_field_seed(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "seed", "field_36235", "seed", "f_197245_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.StructureLocator#dataFixer
    static jobject get_field_dataFixer(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "fixerUpper", "field_36236", "dataFixer", "f_197246_"), "Lcom/mojang/datafixers/DataFixer;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.StructureLocator#dataFixer
    static void set_field_dataFixer(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "fixerUpper", "field_36236", "dataFixer", "f_197246_"), "Lcom/mojang/datafixers/DataFixer;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.StructureLocator#cachedStructuresByChunkPos
    static jobject get_field_cachedStructuresByChunkPos(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "loadedChunks", "field_36237", "cachedStructuresByChunkPos", "f_197247_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.StructureLocator#cachedStructuresByChunkPos
    static void set_field_cachedStructuresByChunkPos(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "loadedChunks", "field_36237", "cachedStructuresByChunkPos", "f_197247_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.StructureLocator#generationPossibilityByStructure
    static jobject get_field_generationPossibilityByStructure(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "featureChecks", "field_36238", "generationPossibilityByStructure", "f_197248_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.StructureLocator#generationPossibilityByStructure
    static void set_field_generationPossibilityByStructure(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "featureChecks", "field_36238", "generationPossibilityByStructure", "f_197248_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_getStructurePresence() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "checkStart", "method_39831", "getStructurePresence", "m_226729_"), "(Ldcd;Lejr;Leko;Z)Lejt;");
    }

    static jobject getStructurePresence(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jboolean& arg3) {
                
       const auto methodID = methodID_getStructurePresence();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_isGenerationPossible() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "canCreateStructure", "method_39829", "isGenerationPossible", "m_226755_"), "(Ldcd;Lejr;)Z");
    }

    static jboolean isGenerationPossible(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_isGenerationPossible();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__getStructurePresence() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "tryLoadFromStorage", "method_39832", "getStructurePresence", "m_226733_"), "(Ldcd;Lejr;ZJ)Lejt;");
    }

    static jobject _getStructurePresence(const jobject& obj, const jobject& arg0, const jobject& arg1, const jboolean& arg2, const jlong& arg3) {
                
       const auto methodID = methodID__getStructurePresence();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_collectStructuresAndReferences() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "loadStructures", "method_39842", "collectStructuresAndReferences", "m_197311_"), "(Lub;)Lit/unimi/dsi/fastutil/objects/Object2IntMap;");
    }

    static jobject collectStructuresAndReferences(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_collectStructuresAndReferences();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_createMapIfEmpty() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "deduplicateEmptyMap", "method_39838", "createMapIfEmpty", "m_197298_"), "(Lit/unimi/dsi/fastutil/objects/Object2IntMap;)Lit/unimi/dsi/fastutil/objects/Object2IntMap;");
    }

    static jobject createMapIfEmpty(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_createMapIfEmpty();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID___getStructurePresence() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "checkStructureInfo", "method_39840", "getStructurePresence", "m_226751_"), "(Lit/unimi/dsi/fastutil/objects/Object2IntMap;Lejr;Z)Lejt;");
    }

    static jobject __getStructurePresence(const jobject& obj, const jobject& arg0, const jobject& arg1, const jboolean& arg2) {
                
       const auto methodID = methodID___getStructurePresence();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_cache() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onStructureLoad", "method_39833", "cache", "m_197282_"), "(Ldcd;Ljava/util/Map;)V");
    }

    static void cache(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_cache();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__cache() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "storeFullResults", "method_39828", "cache", "m_197263_"), "(JLit/unimi/dsi/fastutil/objects/Object2IntMap;)V");
    }

    static void _cache(const jobject& obj, const jlong& arg0, const jobject& arg1) {
                
       const auto methodID = methodID__cache();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_incrementReferences() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "incrementReference", "method_39830", "incrementReferences", "m_226722_"), "(Ldcd;Lejr;)V");
    }

    static void incrementReferences(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_incrementReferences();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_WORLD_STRUCTURELOCATOR_HPP