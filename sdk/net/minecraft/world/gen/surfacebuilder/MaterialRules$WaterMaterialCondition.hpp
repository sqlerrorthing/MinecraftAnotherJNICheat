// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_GEN_SURFACEBUILDER_MATERIALRULES$WATERMATERIALCONDITION_HPP
#define NET_MINECRAFT_WORLD_GEN_SURFACEBUILDER_MATERIALRULES$WATERMATERIALCONDITION_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.gen.surfacebuilder.MaterialRules$WaterMaterialCondition
 * Remapped: dzp$z
 */
namespace MaterialRules$WaterMaterialCondition {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dzp$z", "net/minecraft/world/level/levelgen/SurfaceRules$WaterConditionSource", "net/minecraft/class_6686$class_6720", "net/minecraft/world/gen/surfacebuilder/MaterialRules$WaterMaterialCondition", "net/minecraft/src/C_182910_$C_182946_"));
        }
        return cachedClass;
    };

    // getter for default field net.minecraft.world.gen.surfacebuilder.MaterialRules$WaterMaterialCondition#offset
    static jint get_field_offset(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "offset", "comp_217", "offset", "f_189863_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.gen.surfacebuilder.MaterialRules$WaterMaterialCondition#offset
    static void set_field_offset(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "offset", "comp_217", "offset", "f_189863_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.world.gen.surfacebuilder.MaterialRules$WaterMaterialCondition#surfaceDepthMultiplier
    static jint get_field_surfaceDepthMultiplier(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "surfaceDepthMultiplier", "comp_218", "surfaceDepthMultiplier", "f_189864_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.gen.surfacebuilder.MaterialRules$WaterMaterialCondition#surfaceDepthMultiplier
    static void set_field_surfaceDepthMultiplier(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "surfaceDepthMultiplier", "comp_218", "surfaceDepthMultiplier", "f_189864_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.world.gen.surfacebuilder.MaterialRules$WaterMaterialCondition#addStoneDepth
    static jboolean get_field_addStoneDepth(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "addStoneDepth", "comp_219", "addStoneDepth", "f_189865_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.gen.surfacebuilder.MaterialRules$WaterMaterialCondition#addStoneDepth
    static void set_field_addStoneDepth(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "addStoneDepth", "comp_219", "addStoneDepth", "f_189865_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for static default field net.minecraft.world.gen.surfacebuilder.MaterialRules$WaterMaterialCondition#CODEC
    [[maybe_unused]] static jobject get_field_CODEC() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "CODEC", "field_35264", "CODEC", "f_189866_"), "Layh;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.world.gen.surfacebuilder.MaterialRules$WaterMaterialCondition#CODEC
    [[maybe_unused]] static void set_field_CODEC(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "CODEC", "field_35264", "CODEC", "f_189866_"), "Layh;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_codec() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "codec", "method_39064", "codec", "m_213794_"), "()Layh;");
    }

    static jobject codec(const jobject& obj) {
                
       const auto methodID = methodID_codec();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_apply() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "apply", "method_39097", "apply", "apply"), "(Ldzp$g;)Ldzp$e;");
    }

    static jobject apply(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_apply();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__offset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "offset", "comp_217", "offset", "f_189863_"), "()I");
    }

    static jint _offset(const jobject& obj) {
                
       const auto methodID = methodID__offset();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID__surfaceDepthMultiplier() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "surfaceDepthMultiplier", "comp_218", "surfaceDepthMultiplier", "f_189864_"), "()I");
    }

    static jint _surfaceDepthMultiplier(const jobject& obj) {
                
       const auto methodID = methodID__surfaceDepthMultiplier();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID__addStoneDepth() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "addStoneDepth", "comp_219", "addStoneDepth", "f_189865_"), "()Z");
    }

    static jboolean _addStoneDepth(const jobject& obj) {
                
       const auto methodID = methodID__addStoneDepth();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_WORLD_GEN_SURFACEBUILDER_MATERIALRULES$WATERMATERIALCONDITION_HPP