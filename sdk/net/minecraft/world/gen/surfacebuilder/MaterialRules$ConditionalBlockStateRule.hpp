// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_GEN_SURFACEBUILDER_MATERIALRULES$CONDITIONALBLOCKSTATERULE_HPP
#define NET_MINECRAFT_WORLD_GEN_SURFACEBUILDER_MATERIALRULES$CONDITIONALBLOCKSTATERULE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.gen.surfacebuilder.MaterialRules$ConditionalBlockStateRule
 * Remapped: dzp$w
 */
namespace MaterialRules$ConditionalBlockStateRule {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dzp$w", "net/minecraft/world/level/levelgen/SurfaceRules$TestRule", "net/minecraft/class_6686$class_6717", "net/minecraft/world/gen/surfacebuilder/MaterialRules$ConditionalBlockStateRule", "net/minecraft/src/C_182910_$C_182942_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.world.gen.surfacebuilder.MaterialRules$ConditionalBlockStateRule#condition
    static jobject get_field_condition(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "condition", "comp_213", "condition", "f_189793_"), "Ldzp$e;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.surfacebuilder.MaterialRules$ConditionalBlockStateRule#condition
    static void set_field_condition(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "condition", "comp_213", "condition", "f_189793_"), "Ldzp$e;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.surfacebuilder.MaterialRules$ConditionalBlockStateRule#followup
    static jobject get_field_followup(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "followup", "comp_214", "followup", "f_189794_"), "Ldzp$u;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.surfacebuilder.MaterialRules$ConditionalBlockStateRule#followup
    static void set_field_followup(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "followup", "comp_214", "followup", "f_189794_"), "Ldzp$u;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_tryApply() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("tryApply", "tryApply", "tryApply", "tryApply", "m_183550_"), "(III)Ldtc;");
    }

    static jobject tryApply(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_tryApply();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__condition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "condition", "comp_213", "condition", "f_189793_"), "()Ldzp$e;");
    }

    static jobject _condition(const jobject& obj) {
                
       const auto methodID = methodID__condition();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__followup() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "followup", "comp_214", "followup", "f_189794_"), "()Ldzp$u;");
    }

    static jobject _followup(const jobject& obj) {
                
       const auto methodID = methodID__followup();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_WORLD_GEN_SURFACEBUILDER_MATERIALRULES$CONDITIONALBLOCKSTATERULE_HPP