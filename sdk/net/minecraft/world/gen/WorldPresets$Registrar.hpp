// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_GEN_WORLDPRESETS$REGISTRAR_HPP
#define NET_MINECRAFT_WORLD_GEN_WORLDPRESETS$REGISTRAR_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.gen.WorldPresets$Registrar
 * Remapped: ejh$a
 */
namespace WorldPresets$Registrar {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("ejh$a", "net/minecraft/world/level/levelgen/presets/WorldPresets$Bootstrap", "net/minecraft/class_5317$class_7146", "net/minecraft/world/gen/WorldPresets$Registrar", "net/minecraft/src/C_213160_$C_213161_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.world.gen.WorldPresets$Registrar#presetRegisterable
    static jobject get_field_presetRegisterable(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "context", "field_40919", "presetRegisterable", "f_254745_"), "Lqq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.WorldPresets$Registrar#presetRegisterable
    static void set_field_presetRegisterable(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "context", "field_40919", "presetRegisterable", "f_254745_"), "Lqq;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.WorldPresets$Registrar#chunkGeneratorSettingsLookup
    static jobject get_field_chunkGeneratorSettingsLookup(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "noiseSettings", "field_37732", "chunkGeneratorSettingsLookup", "f_226469_"), "Ljn;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.WorldPresets$Registrar#chunkGeneratorSettingsLookup
    static void set_field_chunkGeneratorSettingsLookup(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "noiseSettings", "field_37732", "chunkGeneratorSettingsLookup", "f_226469_"), "Ljn;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.WorldPresets$Registrar#biomeLookup
    static jobject get_field_biomeLookup(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "biomes", "field_37730", "biomeLookup", "f_226467_"), "Ljn;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.WorldPresets$Registrar#biomeLookup
    static void set_field_biomeLookup(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "biomes", "field_37730", "biomeLookup", "f_226467_"), "Ljn;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.WorldPresets$Registrar#featureLookup
    static jobject get_field_featureLookup(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "placedFeatures", "field_40920", "featureLookup", "f_254750_"), "Ljn;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.WorldPresets$Registrar#featureLookup
    static void set_field_featureLookup(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "placedFeatures", "field_40920", "featureLookup", "f_254750_"), "Ljn;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.WorldPresets$Registrar#structureSetLookup
    static jobject get_field_structureSetLookup(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "structureSets", "field_37731", "structureSetLookup", "f_226468_"), "Ljn;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.WorldPresets$Registrar#structureSetLookup
    static void set_field_structureSetLookup(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "structureSets", "field_37731", "structureSetLookup", "f_226468_"), "Ljn;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.WorldPresets$Registrar#multiNoisePresetLookup
    static jobject get_field_multiNoisePresetLookup(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "multiNoiseBiomeSourceParameterLists", "field_42993", "multiNoisePresetLookup", "f_273886_"), "Ljn;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.WorldPresets$Registrar#multiNoisePresetLookup
    static void set_field_multiNoisePresetLookup(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "multiNoiseBiomeSourceParameterLists", "field_42993", "multiNoisePresetLookup", "f_273886_"), "Ljn;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.WorldPresets$Registrar#overworldDimensionType
    static jobject get_field_overworldDimensionType(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "overworldDimensionType", "field_37734", "overworldDimensionType", "f_226471_"), "Ljm;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.WorldPresets$Registrar#overworldDimensionType
    static void set_field_overworldDimensionType(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "overworldDimensionType", "field_37734", "overworldDimensionType", "f_226471_"), "Ljm;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.WorldPresets$Registrar#netherDimensionOptions
    static jobject get_field_netherDimensionOptions(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "netherStem", "field_37737", "netherDimensionOptions", "f_226474_"), "Ldwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.WorldPresets$Registrar#netherDimensionOptions
    static void set_field_netherDimensionOptions(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "netherStem", "field_37737", "netherDimensionOptions", "f_226474_"), "Ldwz;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.WorldPresets$Registrar#endDimensionOptions
    static jobject get_field_endDimensionOptions(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "endStem", "field_37740", "endDimensionOptions", "f_226477_"), "Ldwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.WorldPresets$Registrar#endDimensionOptions
    static void set_field_endDimensionOptions(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "endStem", "field_37740", "endDimensionOptions", "f_226477_"), "Ldwz;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_createOverworldOptions() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "makeOverworld", "method_41602", "createOverworldOptions", "m_226487_"), "(Lduz;)Ldwz;");
    }

    static jobject createOverworldOptions(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_createOverworldOptions();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__createOverworldOptions() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "makeNoiseBasedOverworld", "method_41601", "createOverworldOptions", "m_226484_"), "(Ldea;Ljm;)Ldwz;");
    }

    static jobject _createOverworldOptions(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID__createOverworldOptions();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_createPreset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "createPresetWithCustomOverworld", "method_41603", "createPreset", "m_226489_"), "(Ldwz;)Lejg;");
    }

    static jobject createPreset(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_createPreset();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_register() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "registerCustomOverworldPreset", "method_41604", "register", "m_254854_"), "(Lakq;Ldwz;)V");
    }

    static void register(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_register();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_bootstrap() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "registerOverworlds", "method_49257", "bootstrap", "m_271739_"), "(Ldea;)V");
    }

    static void bootstrap(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_bootstrap();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__bootstrap() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "bootstrap", "method_41600", "bootstrap", "m_271735_"), "()V");
    }

    static void _bootstrap(const jobject& obj) {
                
       const auto methodID = methodID__bootstrap();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_WORLD_GEN_WORLDPRESETS$REGISTRAR_HPP