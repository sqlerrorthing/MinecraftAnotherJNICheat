// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_GEN_FEATURE_FEATURE_HPP
#define NET_MINECRAFT_WORLD_GEN_FEATURE_FEATURE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.gen.feature.Feature
 * Remapped: ece
 */
namespace Feature {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("ece", "net/minecraft/world/level/levelgen/feature/Feature", "net/minecraft/class_3031", "net/minecraft/world/gen/feature/Feature", "net/minecraft/src/C_2247_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#NO_OP
    [[maybe_unused]] static jobject get_field_NO_OP() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "NO_OP", "field_21590", "NO_OP", "f_65759_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#NO_OP
    [[maybe_unused]] static void set_field_NO_OP(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "NO_OP", "field_21590", "NO_OP", "f_65759_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#TREE
    [[maybe_unused]] static jobject get_field_TREE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "TREE", "field_24134", "TREE", "f_65760_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#TREE
    [[maybe_unused]] static void set_field_TREE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "TREE", "field_24134", "TREE", "f_65760_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#FLOWER
    [[maybe_unused]] static jobject get_field_FLOWER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "FLOWER", "field_21219", "FLOWER", "f_65761_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#FLOWER
    [[maybe_unused]] static void set_field_FLOWER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "FLOWER", "field_21219", "FLOWER", "f_65761_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#NO_BONEMEAL_FLOWER
    [[maybe_unused]] static jobject get_field_NO_BONEMEAL_FLOWER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "NO_BONEMEAL_FLOWER", "field_26361", "NO_BONEMEAL_FLOWER", "f_65762_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#NO_BONEMEAL_FLOWER
    [[maybe_unused]] static void set_field_NO_BONEMEAL_FLOWER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "NO_BONEMEAL_FLOWER", "field_26361", "NO_BONEMEAL_FLOWER", "f_65762_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#RANDOM_PATCH
    [[maybe_unused]] static jobject get_field_RANDOM_PATCH() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "RANDOM_PATCH", "field_21220", "RANDOM_PATCH", "f_65763_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#RANDOM_PATCH
    [[maybe_unused]] static void set_field_RANDOM_PATCH(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "RANDOM_PATCH", "field_21220", "RANDOM_PATCH", "f_65763_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#BLOCK_PILE
    [[maybe_unused]] static jobject get_field_BLOCK_PILE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "BLOCK_PILE", "field_21221", "BLOCK_PILE", "f_65764_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#BLOCK_PILE
    [[maybe_unused]] static void set_field_BLOCK_PILE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "BLOCK_PILE", "field_21221", "BLOCK_PILE", "f_65764_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#SPRING_FEATURE
    [[maybe_unused]] static jobject get_field_SPRING_FEATURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "SPRING", "field_13513", "SPRING_FEATURE", "f_65765_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#SPRING_FEATURE
    [[maybe_unused]] static void set_field_SPRING_FEATURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "SPRING", "field_13513", "SPRING_FEATURE", "f_65765_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#CHORUS_PLANT
    [[maybe_unused]] static jobject get_field_CHORUS_PLANT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "CHORUS_PLANT", "field_13552", "CHORUS_PLANT", "f_65766_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#CHORUS_PLANT
    [[maybe_unused]] static void set_field_CHORUS_PLANT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "CHORUS_PLANT", "field_13552", "CHORUS_PLANT", "f_65766_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#REPLACE_SINGLE_BLOCK
    [[maybe_unused]] static jobject get_field_REPLACE_SINGLE_BLOCK() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "REPLACE_SINGLE_BLOCK", "field_33615", "REPLACE_SINGLE_BLOCK", "f_159732_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#REPLACE_SINGLE_BLOCK
    [[maybe_unused]] static void set_field_REPLACE_SINGLE_BLOCK(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "REPLACE_SINGLE_BLOCK", "field_33615", "REPLACE_SINGLE_BLOCK", "f_159732_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#VOID_START_PLATFORM
    [[maybe_unused]] static jobject get_field_VOID_START_PLATFORM() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "VOID_START_PLATFORM", "field_13591", "VOID_START_PLATFORM", "f_65768_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#VOID_START_PLATFORM
    [[maybe_unused]] static void set_field_VOID_START_PLATFORM(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "VOID_START_PLATFORM", "field_13591", "VOID_START_PLATFORM", "f_65768_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#DESERT_WELL
    [[maybe_unused]] static jobject get_field_DESERT_WELL() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "DESERT_WELL", "field_13592", "DESERT_WELL", "f_65769_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#DESERT_WELL
    [[maybe_unused]] static void set_field_DESERT_WELL(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "DESERT_WELL", "field_13592", "DESERT_WELL", "f_65769_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#FOSSIL
    [[maybe_unused]] static jobject get_field_FOSSIL() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("p", "FOSSIL", "field_13516", "FOSSIL", "f_65770_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#FOSSIL
    [[maybe_unused]] static void set_field_FOSSIL(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("p", "FOSSIL", "field_13516", "FOSSIL", "f_65770_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#HUGE_RED_MUSHROOM
    [[maybe_unused]] static jobject get_field_HUGE_RED_MUSHROOM() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("q", "HUGE_RED_MUSHROOM", "field_13571", "HUGE_RED_MUSHROOM", "f_65771_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#HUGE_RED_MUSHROOM
    [[maybe_unused]] static void set_field_HUGE_RED_MUSHROOM(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("q", "HUGE_RED_MUSHROOM", "field_13571", "HUGE_RED_MUSHROOM", "f_65771_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#HUGE_BROWN_MUSHROOM
    [[maybe_unused]] static jobject get_field_HUGE_BROWN_MUSHROOM() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("r", "HUGE_BROWN_MUSHROOM", "field_13531", "HUGE_BROWN_MUSHROOM", "f_65772_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#HUGE_BROWN_MUSHROOM
    [[maybe_unused]] static void set_field_HUGE_BROWN_MUSHROOM(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("r", "HUGE_BROWN_MUSHROOM", "field_13531", "HUGE_BROWN_MUSHROOM", "f_65772_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#ICE_SPIKE
    [[maybe_unused]] static jobject get_field_ICE_SPIKE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("s", "ICE_SPIKE", "field_13562", "ICE_SPIKE", "f_65773_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#ICE_SPIKE
    [[maybe_unused]] static void set_field_ICE_SPIKE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("s", "ICE_SPIKE", "field_13562", "ICE_SPIKE", "f_65773_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#GLOWSTONE_BLOB
    [[maybe_unused]] static jobject get_field_GLOWSTONE_BLOB() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("t", "GLOWSTONE_BLOB", "field_13568", "GLOWSTONE_BLOB", "f_65774_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#GLOWSTONE_BLOB
    [[maybe_unused]] static void set_field_GLOWSTONE_BLOB(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("t", "GLOWSTONE_BLOB", "field_13568", "GLOWSTONE_BLOB", "f_65774_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#FREEZE_TOP_LAYER
    [[maybe_unused]] static jobject get_field_FREEZE_TOP_LAYER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("u", "FREEZE_TOP_LAYER", "field_13539", "FREEZE_TOP_LAYER", "f_65775_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#FREEZE_TOP_LAYER
    [[maybe_unused]] static void set_field_FREEZE_TOP_LAYER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("u", "FREEZE_TOP_LAYER", "field_13539", "FREEZE_TOP_LAYER", "f_65775_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#VINES
    [[maybe_unused]] static jobject get_field_VINES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("v", "VINES", "field_13559", "VINES", "f_65776_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#VINES
    [[maybe_unused]] static void set_field_VINES(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("v", "VINES", "field_13559", "VINES", "f_65776_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#BLOCK_COLUMN
    [[maybe_unused]] static jobject get_field_BLOCK_COLUMN() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("w", "BLOCK_COLUMN", "field_35072", "BLOCK_COLUMN", "f_190875_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#BLOCK_COLUMN
    [[maybe_unused]] static void set_field_BLOCK_COLUMN(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("w", "BLOCK_COLUMN", "field_35072", "BLOCK_COLUMN", "f_190875_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#VEGETATION_PATCH
    [[maybe_unused]] static jobject get_field_VEGETATION_PATCH() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("x", "VEGETATION_PATCH", "field_29250", "VEGETATION_PATCH", "f_159734_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#VEGETATION_PATCH
    [[maybe_unused]] static void set_field_VEGETATION_PATCH(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("x", "VEGETATION_PATCH", "field_29250", "VEGETATION_PATCH", "f_159734_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#WATERLOGGED_VEGETATION_PATCH
    [[maybe_unused]] static jobject get_field_WATERLOGGED_VEGETATION_PATCH() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("y", "WATERLOGGED_VEGETATION_PATCH", "field_29251", "WATERLOGGED_VEGETATION_PATCH", "f_159735_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#WATERLOGGED_VEGETATION_PATCH
    [[maybe_unused]] static void set_field_WATERLOGGED_VEGETATION_PATCH(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("y", "WATERLOGGED_VEGETATION_PATCH", "field_29251", "WATERLOGGED_VEGETATION_PATCH", "f_159735_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#ROOT_SYSTEM
    [[maybe_unused]] static jobject get_field_ROOT_SYSTEM() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("z", "ROOT_SYSTEM", "field_29252", "ROOT_SYSTEM", "f_159724_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#ROOT_SYSTEM
    [[maybe_unused]] static void set_field_ROOT_SYSTEM(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("z", "ROOT_SYSTEM", "field_29252", "ROOT_SYSTEM", "f_159724_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#MULTIFACE_GROWTH
    [[maybe_unused]] static jobject get_field_MULTIFACE_GROWTH() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("A", "MULTIFACE_GROWTH", "field_28428", "MULTIFACE_GROWTH", "f_225026_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#MULTIFACE_GROWTH
    [[maybe_unused]] static void set_field_MULTIFACE_GROWTH(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("A", "MULTIFACE_GROWTH", "field_28428", "MULTIFACE_GROWTH", "f_225026_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#UNDERWATER_MAGMA
    [[maybe_unused]] static jobject get_field_UNDERWATER_MAGMA() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("B", "UNDERWATER_MAGMA", "field_28849", "UNDERWATER_MAGMA", "f_159726_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#UNDERWATER_MAGMA
    [[maybe_unused]] static void set_field_UNDERWATER_MAGMA(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("B", "UNDERWATER_MAGMA", "field_28849", "UNDERWATER_MAGMA", "f_159726_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#MONSTER_ROOM
    [[maybe_unused]] static jobject get_field_MONSTER_ROOM() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("C", "MONSTER_ROOM", "field_13579", "MONSTER_ROOM", "f_65777_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#MONSTER_ROOM
    [[maybe_unused]] static void set_field_MONSTER_ROOM(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("C", "MONSTER_ROOM", "field_13579", "MONSTER_ROOM", "f_65777_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#BLUE_ICE
    [[maybe_unused]] static jobject get_field_BLUE_ICE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("D", "BLUE_ICE", "field_13560", "BLUE_ICE", "f_65778_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#BLUE_ICE
    [[maybe_unused]] static void set_field_BLUE_ICE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("D", "BLUE_ICE", "field_13560", "BLUE_ICE", "f_65778_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#ICEBERG
    [[maybe_unused]] static jobject get_field_ICEBERG() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("E", "ICEBERG", "field_13544", "ICEBERG", "f_65779_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#ICEBERG
    [[maybe_unused]] static void set_field_ICEBERG(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("E", "ICEBERG", "field_13544", "ICEBERG", "f_65779_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#FOREST_ROCK
    [[maybe_unused]] static jobject get_field_FOREST_ROCK() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("F", "FOREST_ROCK", "field_13584", "FOREST_ROCK", "f_65780_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#FOREST_ROCK
    [[maybe_unused]] static void set_field_FOREST_ROCK(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("F", "FOREST_ROCK", "field_13584", "FOREST_ROCK", "f_65780_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#DISK
    [[maybe_unused]] static jobject get_field_DISK() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("G", "DISK", "field_13509", "DISK", "f_65781_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#DISK
    [[maybe_unused]] static void set_field_DISK(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("G", "DISK", "field_13509", "DISK", "f_65781_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#LAKE
    [[maybe_unused]] static jobject get_field_LAKE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("H", "LAKE", "field_13573", "LAKE", "f_65783_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#LAKE
    [[maybe_unused]] static void set_field_LAKE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("H", "LAKE", "field_13573", "LAKE", "f_65783_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#ORE
    [[maybe_unused]] static jobject get_field_ORE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("I", "ORE", "field_13517", "ORE", "f_65731_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#ORE
    [[maybe_unused]] static void set_field_ORE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("I", "ORE", "field_13517", "ORE", "f_65731_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#END_PLATFORM
    [[maybe_unused]] static jobject get_field_END_PLATFORM() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("J", "END_PLATFORM", "field_52289", "END_PLATFORM", "f_337733_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#END_PLATFORM
    [[maybe_unused]] static void set_field_END_PLATFORM(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("J", "END_PLATFORM", "field_52289", "END_PLATFORM", "f_337733_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#END_SPIKE
    [[maybe_unused]] static jobject get_field_END_SPIKE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("K", "END_SPIKE", "field_13522", "END_SPIKE", "f_65732_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#END_SPIKE
    [[maybe_unused]] static void set_field_END_SPIKE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("K", "END_SPIKE", "field_13522", "END_SPIKE", "f_65732_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#END_ISLAND
    [[maybe_unused]] static jobject get_field_END_ISLAND() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("L", "END_ISLAND", "field_13574", "END_ISLAND", "f_65733_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#END_ISLAND
    [[maybe_unused]] static void set_field_END_ISLAND(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("L", "END_ISLAND", "field_13574", "END_ISLAND", "f_65733_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#END_GATEWAY
    [[maybe_unused]] static jobject get_field_END_GATEWAY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("M", "END_GATEWAY", "field_13564", "END_GATEWAY", "f_65734_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#END_GATEWAY
    [[maybe_unused]] static void set_field_END_GATEWAY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("M", "END_GATEWAY", "field_13564", "END_GATEWAY", "f_65734_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#SEAGRASS
    [[maybe_unused]] static jobject get_field_SEAGRASS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("N", "SEAGRASS", "field_13567", "SEAGRASS", "f_65735_"), "Ledk;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#SEAGRASS
    [[maybe_unused]] static void set_field_SEAGRASS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("N", "SEAGRASS", "field_13567", "SEAGRASS", "f_65735_"), "Ledk;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#KELP
    [[maybe_unused]] static jobject get_field_KELP() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("O", "KELP", "field_13535", "KELP", "f_65736_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#KELP
    [[maybe_unused]] static void set_field_KELP(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("O", "KELP", "field_13535", "KELP", "f_65736_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#CORAL_TREE
    [[maybe_unused]] static jobject get_field_CORAL_TREE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("P", "CORAL_TREE", "field_13525", "CORAL_TREE", "f_65737_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#CORAL_TREE
    [[maybe_unused]] static void set_field_CORAL_TREE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("P", "CORAL_TREE", "field_13525", "CORAL_TREE", "f_65737_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#CORAL_MUSHROOM
    [[maybe_unused]] static jobject get_field_CORAL_MUSHROOM() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("Q", "CORAL_MUSHROOM", "field_13585", "CORAL_MUSHROOM", "f_65738_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#CORAL_MUSHROOM
    [[maybe_unused]] static void set_field_CORAL_MUSHROOM(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("Q", "CORAL_MUSHROOM", "field_13585", "CORAL_MUSHROOM", "f_65738_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#CORAL_CLAW
    [[maybe_unused]] static jobject get_field_CORAL_CLAW() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("R", "CORAL_CLAW", "field_13546", "CORAL_CLAW", "f_65739_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#CORAL_CLAW
    [[maybe_unused]] static void set_field_CORAL_CLAW(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("R", "CORAL_CLAW", "field_13546", "CORAL_CLAW", "f_65739_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#SEA_PICKLE
    [[maybe_unused]] static jobject get_field_SEA_PICKLE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("S", "SEA_PICKLE", "field_13575", "SEA_PICKLE", "f_65740_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#SEA_PICKLE
    [[maybe_unused]] static void set_field_SEA_PICKLE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("S", "SEA_PICKLE", "field_13575", "SEA_PICKLE", "f_65740_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#SIMPLE_BLOCK
    [[maybe_unused]] static jobject get_field_SIMPLE_BLOCK() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("T", "SIMPLE_BLOCK", "field_13518", "SIMPLE_BLOCK", "f_65741_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#SIMPLE_BLOCK
    [[maybe_unused]] static void set_field_SIMPLE_BLOCK(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("T", "SIMPLE_BLOCK", "field_13518", "SIMPLE_BLOCK", "f_65741_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#BAMBOO
    [[maybe_unused]] static jobject get_field_BAMBOO() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("U", "BAMBOO", "field_13540", "BAMBOO", "f_65742_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#BAMBOO
    [[maybe_unused]] static void set_field_BAMBOO(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("U", "BAMBOO", "field_13540", "BAMBOO", "f_65742_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#HUGE_FUNGUS
    [[maybe_unused]] static jobject get_field_HUGE_FUNGUS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("V", "HUGE_FUNGUS", "field_22185", "HUGE_FUNGUS", "f_65743_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#HUGE_FUNGUS
    [[maybe_unused]] static void set_field_HUGE_FUNGUS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("V", "HUGE_FUNGUS", "field_22185", "HUGE_FUNGUS", "f_65743_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#NETHER_FOREST_VEGETATION
    [[maybe_unused]] static jobject get_field_NETHER_FOREST_VEGETATION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("W", "NETHER_FOREST_VEGETATION", "field_22186", "NETHER_FOREST_VEGETATION", "f_65744_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#NETHER_FOREST_VEGETATION
    [[maybe_unused]] static void set_field_NETHER_FOREST_VEGETATION(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("W", "NETHER_FOREST_VEGETATION", "field_22186", "NETHER_FOREST_VEGETATION", "f_65744_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#WEEPING_VINES
    [[maybe_unused]] static jobject get_field_WEEPING_VINES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("X", "WEEPING_VINES", "field_22187", "WEEPING_VINES", "f_65745_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#WEEPING_VINES
    [[maybe_unused]] static void set_field_WEEPING_VINES(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("X", "WEEPING_VINES", "field_22187", "WEEPING_VINES", "f_65745_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#TWISTING_VINES
    [[maybe_unused]] static jobject get_field_TWISTING_VINES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("Y", "TWISTING_VINES", "field_23088", "TWISTING_VINES", "f_65746_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#TWISTING_VINES
    [[maybe_unused]] static void set_field_TWISTING_VINES(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("Y", "TWISTING_VINES", "field_23088", "TWISTING_VINES", "f_65746_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#BASALT_COLUMNS
    [[maybe_unused]] static jobject get_field_BASALT_COLUMNS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("Z", "BASALT_COLUMNS", "field_23884", "BASALT_COLUMNS", "f_65747_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#BASALT_COLUMNS
    [[maybe_unused]] static void set_field_BASALT_COLUMNS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("Z", "BASALT_COLUMNS", "field_23884", "BASALT_COLUMNS", "f_65747_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#DELTA_FEATURE
    [[maybe_unused]] static jobject get_field_DELTA_FEATURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aa", "DELTA_FEATURE", "field_23885", "DELTA_FEATURE", "f_65748_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#DELTA_FEATURE
    [[maybe_unused]] static void set_field_DELTA_FEATURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aa", "DELTA_FEATURE", "field_23885", "DELTA_FEATURE", "f_65748_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#NETHERRACK_REPLACE_BLOBS
    [[maybe_unused]] static jobject get_field_NETHERRACK_REPLACE_BLOBS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ab", "REPLACE_BLOBS", "field_23886", "NETHERRACK_REPLACE_BLOBS", "f_65749_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#NETHERRACK_REPLACE_BLOBS
    [[maybe_unused]] static void set_field_NETHERRACK_REPLACE_BLOBS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ab", "REPLACE_BLOBS", "field_23886", "NETHERRACK_REPLACE_BLOBS", "f_65749_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#FILL_LAYER
    [[maybe_unused]] static jobject get_field_FILL_LAYER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ac", "FILL_LAYER", "field_19201", "FILL_LAYER", "f_65750_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#FILL_LAYER
    [[maybe_unused]] static void set_field_FILL_LAYER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ac", "FILL_LAYER", "field_19201", "FILL_LAYER", "f_65750_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#BONUS_CHEST
    [[maybe_unused]] static jobject get_field_BONUS_CHEST() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ad", "BONUS_CHEST", "field_13526", "BONUS_CHEST", "f_65751_"), "Lebo;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#BONUS_CHEST
    [[maybe_unused]] static void set_field_BONUS_CHEST(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ad", "BONUS_CHEST", "field_13526", "BONUS_CHEST", "f_65751_"), "Lebo;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#BASALT_PILLAR
    [[maybe_unused]] static jobject get_field_BASALT_PILLAR() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ae", "BASALT_PILLAR", "field_22188", "BASALT_PILLAR", "f_65752_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#BASALT_PILLAR
    [[maybe_unused]] static void set_field_BASALT_PILLAR(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ae", "BASALT_PILLAR", "field_22188", "BASALT_PILLAR", "f_65752_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#SCATTERED_ORE
    [[maybe_unused]] static jobject get_field_SCATTERED_ORE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("af", "SCATTERED_ORE", "field_29061", "SCATTERED_ORE", "f_159727_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#SCATTERED_ORE
    [[maybe_unused]] static void set_field_SCATTERED_ORE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("af", "SCATTERED_ORE", "field_29061", "SCATTERED_ORE", "f_159727_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#RANDOM_SELECTOR
    [[maybe_unused]] static jobject get_field_RANDOM_SELECTOR() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ag", "RANDOM_SELECTOR", "field_13593", "RANDOM_SELECTOR", "f_65754_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#RANDOM_SELECTOR
    [[maybe_unused]] static void set_field_RANDOM_SELECTOR(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ag", "RANDOM_SELECTOR", "field_13593", "RANDOM_SELECTOR", "f_65754_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#SIMPLE_RANDOM_SELECTOR
    [[maybe_unused]] static jobject get_field_SIMPLE_RANDOM_SELECTOR() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ah", "SIMPLE_RANDOM_SELECTOR", "field_13555", "SIMPLE_RANDOM_SELECTOR", "f_65755_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#SIMPLE_RANDOM_SELECTOR
    [[maybe_unused]] static void set_field_SIMPLE_RANDOM_SELECTOR(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ah", "SIMPLE_RANDOM_SELECTOR", "field_13555", "SIMPLE_RANDOM_SELECTOR", "f_65755_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#RANDOM_BOOLEAN_SELECTOR
    [[maybe_unused]] static jobject get_field_RANDOM_BOOLEAN_SELECTOR() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ai", "RANDOM_BOOLEAN_SELECTOR", "field_13550", "RANDOM_BOOLEAN_SELECTOR", "f_65756_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#RANDOM_BOOLEAN_SELECTOR
    [[maybe_unused]] static void set_field_RANDOM_BOOLEAN_SELECTOR(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ai", "RANDOM_BOOLEAN_SELECTOR", "field_13550", "RANDOM_BOOLEAN_SELECTOR", "f_65756_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#GEODE
    [[maybe_unused]] static jobject get_field_GEODE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aj", "GEODE", "field_27312", "GEODE", "f_159728_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#GEODE
    [[maybe_unused]] static void set_field_GEODE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("aj", "GEODE", "field_27312", "GEODE", "f_159728_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#DRIPSTONE_CLUSTER
    [[maybe_unused]] static jobject get_field_DRIPSTONE_CLUSTER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ak", "DRIPSTONE_CLUSTER", "field_28203", "DRIPSTONE_CLUSTER", "f_159729_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#DRIPSTONE_CLUSTER
    [[maybe_unused]] static void set_field_DRIPSTONE_CLUSTER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("ak", "DRIPSTONE_CLUSTER", "field_28203", "DRIPSTONE_CLUSTER", "f_159729_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#LARGE_DRIPSTONE
    [[maybe_unused]] static jobject get_field_LARGE_DRIPSTONE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("al", "LARGE_DRIPSTONE", "field_28204", "LARGE_DRIPSTONE", "f_159730_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#LARGE_DRIPSTONE
    [[maybe_unused]] static void set_field_LARGE_DRIPSTONE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("al", "LARGE_DRIPSTONE", "field_28204", "LARGE_DRIPSTONE", "f_159730_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#POINTED_DRIPSTONE
    [[maybe_unused]] static jobject get_field_POINTED_DRIPSTONE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("am", "POINTED_DRIPSTONE", "field_28205", "POINTED_DRIPSTONE", "f_190874_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#POINTED_DRIPSTONE
    [[maybe_unused]] static void set_field_POINTED_DRIPSTONE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("am", "POINTED_DRIPSTONE", "field_28205", "POINTED_DRIPSTONE", "f_190874_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.Feature#SCULK_PATCH
    [[maybe_unused]] static jobject get_field_SCULK_PATCH() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("an", "SCULK_PATCH", "field_37708", "SCULK_PATCH", "f_225027_"), "Lece;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.Feature#SCULK_PATCH
    [[maybe_unused]] static void set_field_SCULK_PATCH(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("an", "SCULK_PATCH", "field_37708", "SCULK_PATCH", "f_225027_"), "Lece;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.feature.Feature#codec
    static jobject get_field_codec(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "configuredCodec", "field_24837", "codec", "f_65757_"), "Lcom/mojang/serialization/MapCodec;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.feature.Feature#codec
    static void set_field_codec(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "configuredCodec", "field_24837", "codec", "f_65757_"), "Lcom/mojang/serialization/MapCodec;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_register() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "register", "method_13150", "register", "m_65807_"), "(Ljava/lang/String;Lece;)Lece;");
    }

    static jobject register(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_register();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getCodec() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "configuredCodec", "method_28627", "getCodec", "m_65787_"), "()Lcom/mojang/serialization/MapCodec;");
    }

    static jobject getCodec(const jobject& obj) {
                
       const auto methodID = methodID_getCodec();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_setBlockState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setBlock", "method_13153", "setBlockState", "m_5974_"), "(Ldde;Ljd;Ldtc;)V");
    }

    static void setBlockState(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_setBlockState();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_notInBlockTagPredicate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "isReplaceable", "method_36999", "notInBlockTagPredicate", "m_204735_"), "(Lawu;)Ljava/util/function/Predicate;");
    }

    static jobject notInBlockTagPredicate(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_notInBlockTagPredicate();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_setBlockStateIf() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "safeSetBlock", "method_36998", "setBlockStateIf", "m_159742_"), "(Ldds;Ljd;Ldtc;Ljava/util/function/Predicate;)V");
    }

    static void setBlockStateIf(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_setBlockStateIf();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_generate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "place", "method_13151", "generate", "m_142674_"), "(Lecg;)Z");
    }

    static jboolean generate(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_generate();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_generateIfValid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "place", "method_40163", "generateIfValid", "m_225028_"), "(Leei;Ldds;Lduz;Layw;Ljd;)Z");
    }

    static jboolean generateIfValid(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4) {
                
       const auto methodID = methodID_generateIfValid();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_isStone() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "isStone", "method_23395", "isStone", "m_159747_"), "(Ldtc;)Z");
    }

    static jboolean isStone(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_isStone();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_isSoil() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "isDirt", "method_23396", "isSoil", "m_159759_"), "(Ldtc;)Z");
    }

    static jboolean isSoil(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_isSoil();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID__isSoil() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "isGrassOrDirt", "method_27368", "isSoil", "m_65788_"), "(Lddc;Ljd;)Z");
    }

    static jboolean _isSoil(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID__isSoil();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_testAdjacentStates() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "checkNeighbors", "method_33982", "testAdjacentStates", "m_159753_"), "(Ljava/util/function/Function;Ljd;Ljava/util/function/Predicate;)Z");
    }

    static jboolean testAdjacentStates(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_testAdjacentStates();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_isExposedToAir() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "isAdjacentToAir", "method_33981", "isExposedToAir", "m_159750_"), "(Ljava/util/function/Function;Ljd;)Z");
    }

    static jboolean isExposedToAir(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_isExposedToAir();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_markBlocksAboveForPostProcessing() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "markAboveForPostProcessing", "method_37256", "markBlocksAboveForPostProcessing", "m_159739_"), "(Ldds;Ljd;)V");
    }

    static void markBlocksAboveForPostProcessing(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_markBlocksAboveForPostProcessing();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_WORLD_GEN_FEATURE_FEATURE_HPP