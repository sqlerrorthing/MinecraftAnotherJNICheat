// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_GEN_FEATURE_GEODEFEATURECONFIG_HPP
#define NET_MINECRAFT_WORLD_GEN_FEATURE_GEODEFEATURECONFIG_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.gen.feature.GeodeFeatureConfig
 * Remapped: eej
 */
namespace GeodeFeatureConfig {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("eej", "net/minecraft/world/level/levelgen/feature/configurations/GeodeConfiguration", "net/minecraft/class_5589", "net/minecraft/world/gen/feature/GeodeFeatureConfig", "net/minecraft/src/C_141380_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.world.gen.feature.GeodeFeatureConfig#RANGE
    [[maybe_unused]] static jobject get_field_RANGE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CHANCE_RANGE", "field_27314", "RANGE", "f_160811_"), "Lcom/mojang/serialization/Codec;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.GeodeFeatureConfig#RANGE
    [[maybe_unused]] static void set_field_RANGE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CHANCE_RANGE", "field_27314", "RANGE", "f_160811_"), "Lcom/mojang/serialization/Codec;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.GeodeFeatureConfig#CODEC
    [[maybe_unused]] static jobject get_field_CODEC() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "CODEC", "field_27315", "CODEC", "f_160812_"), "Lcom/mojang/serialization/Codec;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.GeodeFeatureConfig#CODEC
    [[maybe_unused]] static void set_field_CODEC(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "CODEC", "field_27315", "CODEC", "f_160812_"), "Lcom/mojang/serialization/Codec;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for public field net.minecraft.world.gen.feature.GeodeFeatureConfig#layerConfig
    static jobject get_field_layerConfig(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "geodeBlockSettings", "field_27316", "layerConfig", "f_160813_"), "Ldyv;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.GeodeFeatureConfig#layerConfig
    static void set_field_layerConfig(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "geodeBlockSettings", "field_27316", "layerConfig", "f_160813_"), "Ldyv;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.world.gen.feature.GeodeFeatureConfig#layerThicknessConfig
    static jobject get_field_layerThicknessConfig(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "geodeLayerSettings", "field_27317", "layerThicknessConfig", "f_160814_"), "Ldyx;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.GeodeFeatureConfig#layerThicknessConfig
    static void set_field_layerThicknessConfig(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "geodeLayerSettings", "field_27317", "layerThicknessConfig", "f_160814_"), "Ldyx;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.world.gen.feature.GeodeFeatureConfig#crackConfig
    static jobject get_field_crackConfig(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "geodeCrackSettings", "field_27318", "crackConfig", "f_160815_"), "Ldyw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.GeodeFeatureConfig#crackConfig
    static void set_field_crackConfig(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "geodeCrackSettings", "field_27318", "crackConfig", "f_160815_"), "Ldyw;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.world.gen.feature.GeodeFeatureConfig#usePotentialPlacementsChance
    static jdouble get_field_usePotentialPlacementsChance(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "usePotentialPlacementsChance", "field_27319", "usePotentialPlacementsChance", "f_160816_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.GeodeFeatureConfig#usePotentialPlacementsChance
    static void set_field_usePotentialPlacementsChance(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "usePotentialPlacementsChance", "field_27319", "usePotentialPlacementsChance", "f_160816_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.world.gen.feature.GeodeFeatureConfig#useAlternateLayer0Chance
    static jdouble get_field_useAlternateLayer0Chance(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "useAlternateLayer0Chance", "field_27320", "useAlternateLayer0Chance", "f_160817_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.GeodeFeatureConfig#useAlternateLayer0Chance
    static void set_field_useAlternateLayer0Chance(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "useAlternateLayer0Chance", "field_27320", "useAlternateLayer0Chance", "f_160817_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.world.gen.feature.GeodeFeatureConfig#placementsRequireLayer0Alternate
    static jboolean get_field_placementsRequireLayer0Alternate(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "placementsRequireLayer0Alternate", "field_27321", "placementsRequireLayer0Alternate", "f_160818_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.GeodeFeatureConfig#placementsRequireLayer0Alternate
    static void set_field_placementsRequireLayer0Alternate(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "placementsRequireLayer0Alternate", "field_27321", "placementsRequireLayer0Alternate", "f_160818_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.world.gen.feature.GeodeFeatureConfig#outerWallDistance
    static jobject get_field_outerWallDistance(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "outerWallDistance", "field_33516", "outerWallDistance", "f_160819_"), "Lbpw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.GeodeFeatureConfig#outerWallDistance
    static void set_field_outerWallDistance(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "outerWallDistance", "field_33516", "outerWallDistance", "f_160819_"), "Lbpw;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.world.gen.feature.GeodeFeatureConfig#distributionPoints
    static jobject get_field_distributionPoints(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "distributionPoints", "field_33517", "distributionPoints", "f_160820_"), "Lbpw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.GeodeFeatureConfig#distributionPoints
    static void set_field_distributionPoints(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "distributionPoints", "field_33517", "distributionPoints", "f_160820_"), "Lbpw;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.world.gen.feature.GeodeFeatureConfig#pointOffset
    static jobject get_field_pointOffset(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "pointOffset", "field_33518", "pointOffset", "f_160821_"), "Lbpw;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.GeodeFeatureConfig#pointOffset
    static void set_field_pointOffset(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "pointOffset", "field_33518", "pointOffset", "f_160821_"), "Lbpw;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.world.gen.feature.GeodeFeatureConfig#minGenOffset
    static jint get_field_minGenOffset(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "minGenOffset", "field_27328", "minGenOffset", "f_160822_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.GeodeFeatureConfig#minGenOffset
    static void set_field_minGenOffset(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "minGenOffset", "field_27328", "minGenOffset", "f_160822_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.world.gen.feature.GeodeFeatureConfig#maxGenOffset
    static jint get_field_maxGenOffset(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "maxGenOffset", "field_27329", "maxGenOffset", "f_160823_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.GeodeFeatureConfig#maxGenOffset
    static void set_field_maxGenOffset(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "maxGenOffset", "field_27329", "maxGenOffset", "f_160823_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.world.gen.feature.GeodeFeatureConfig#noiseMultiplier
    static jdouble get_field_noiseMultiplier(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "noiseMultiplier", "field_27330", "noiseMultiplier", "f_160824_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.GeodeFeatureConfig#noiseMultiplier
    static void set_field_noiseMultiplier(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "noiseMultiplier", "field_27330", "noiseMultiplier", "f_160824_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.world.gen.feature.GeodeFeatureConfig#invalidBlocksThreshold
    static jint get_field_invalidBlocksThreshold(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "invalidBlocksThreshold", "field_29062", "invalidBlocksThreshold", "f_160825_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.GeodeFeatureConfig#invalidBlocksThreshold
    static void set_field_invalidBlocksThreshold(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "invalidBlocksThreshold", "field_29062", "invalidBlocksThreshold", "f_160825_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

};

#endif // NET_MINECRAFT_WORLD_GEN_FEATURE_GEODEFEATURECONFIG_HPP