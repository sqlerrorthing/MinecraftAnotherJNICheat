// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_GEN_FEATURE_LARGEDRIPSTONEFEATURE$DRIPSTONEGENERATOR_HPP
#define NET_MINECRAFT_WORLD_GEN_FEATURE_LARGEDRIPSTONEFEATURE$DRIPSTONEGENERATOR_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.gen.feature.LargeDripstoneFeature$DripstoneGenerator
 * Remapped: ecu$a
 */
namespace LargeDripstoneFeature$DripstoneGenerator {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("ecu$a", "net/minecraft/world/level/levelgen/feature/LargeDripstoneFeature$LargeDripstone", "net/minecraft/class_5727$class_5728", "net/minecraft/world/gen/feature/LargeDripstoneFeature$DripstoneGenerator", "net/minecraft/src/C_141366_$C_141367_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.world.gen.feature.LargeDripstoneFeature$DripstoneGenerator#pos
    static jobject get_field_pos(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "root", "field_28206", "pos", "f_159975_"), "Ljd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.feature.LargeDripstoneFeature$DripstoneGenerator#pos
    static void set_field_pos(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "root", "field_28206", "pos", "f_159975_"), "Ljd;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.feature.LargeDripstoneFeature$DripstoneGenerator#isStalagmite
    static jboolean get_field_isStalagmite(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "pointingUp", "field_28207", "isStalagmite", "f_159976_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.feature.LargeDripstoneFeature$DripstoneGenerator#isStalagmite
    static void set_field_isStalagmite(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "pointingUp", "field_28207", "isStalagmite", "f_159976_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.feature.LargeDripstoneFeature$DripstoneGenerator#scale
    static jint get_field_scale(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "radius", "field_28208", "scale", "f_159977_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.feature.LargeDripstoneFeature$DripstoneGenerator#scale
    static void set_field_scale(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "radius", "field_28208", "scale", "f_159977_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.feature.LargeDripstoneFeature$DripstoneGenerator#bluntness
    static jdouble get_field_bluntness(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "bluntness", "field_28209", "bluntness", "f_159978_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.feature.LargeDripstoneFeature$DripstoneGenerator#bluntness
    static void set_field_bluntness(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "bluntness", "field_28209", "bluntness", "f_159978_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.feature.LargeDripstoneFeature$DripstoneGenerator#heightScale
    static jdouble get_field_heightScale(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "scale", "field_28210", "heightScale", "f_159979_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.feature.LargeDripstoneFeature$DripstoneGenerator#heightScale
    static void set_field_heightScale(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "scale", "field_28210", "heightScale", "f_159979_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    static jmethodID methodID_getBaseScale() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getHeight", "method_33017", "getBaseScale", "m_159986_"), "()I");
    }

    static jint getBaseScale(const jobject& obj) {
                
       const auto methodID = methodID_getBaseScale();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getBottomY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getMinY", "method_35361", "getBottomY", "m_159998_"), "()I");
    }

    static jint getBottomY(const jobject& obj) {
                
       const auto methodID = methodID_getBottomY();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getTopY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getMaxY", "method_35362", "getTopY", "m_159999_"), "()I");
    }

    static jint getTopY(const jobject& obj) {
                
       const auto methodID = methodID_getTopY();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_canGenerate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "moveBackUntilBaseIsInsideStoneAndShrinkRadiusIfNecessary", "method_33019", "canGenerate", "m_159989_"), "(Ldds;Lecu$b;)Z");
    }

    static jboolean canGenerate(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_canGenerate();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__scale() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getHeightAtRadius", "method_33018", "scale", "m_159987_"), "(F)I");
    }

    static jint _scale(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID__scale();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_generate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "placeBlocks", "method_33020", "generate", "m_225145_"), "(Ldds;Layw;Lecu$b;)V");
    }

    static void generate(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_generate();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_generateWind() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isSuitableForWind", "method_33025", "generateWind", "m_159996_"), "(Leel;)Z");
    }

    static jboolean generateWind(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_generateWind();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_WORLD_GEN_FEATURE_LARGEDRIPSTONEFEATURE$DRIPSTONEGENERATOR_HPP