// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_GEN_FEATURE_MISCCONFIGUREDFEATURES_HPP
#define NET_MINECRAFT_WORLD_GEN_FEATURE_MISCCONFIGUREDFEATURES_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.gen.feature.MiscConfiguredFeatures
 * Remapped: rs
 */
namespace MiscConfiguredFeatures {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("rs", "net/minecraft/data/worldgen/features/MiscOverworldFeatures", "net/minecraft/class_6804", "net/minecraft/world/gen/feature/MiscConfiguredFeatures", "net/minecraft/src/C_183089_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.world.gen.feature.MiscConfiguredFeatures#ICE_SPIKE
    [[maybe_unused]] static jobject get_field_ICE_SPIKE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "ICE_SPIKE", "field_35800", "ICE_SPIKE", "f_195010_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.MiscConfiguredFeatures#ICE_SPIKE
    [[maybe_unused]] static void set_field_ICE_SPIKE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "ICE_SPIKE", "field_35800", "ICE_SPIKE", "f_195010_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.MiscConfiguredFeatures#ICE_PATCH
    [[maybe_unused]] static jobject get_field_ICE_PATCH() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ICE_PATCH", "field_35801", "ICE_PATCH", "f_195011_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.MiscConfiguredFeatures#ICE_PATCH
    [[maybe_unused]] static void set_field_ICE_PATCH(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ICE_PATCH", "field_35801", "ICE_PATCH", "f_195011_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.MiscConfiguredFeatures#FOREST_ROCK
    [[maybe_unused]] static jobject get_field_FOREST_ROCK() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "FOREST_ROCK", "field_35802", "FOREST_ROCK", "f_195012_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.MiscConfiguredFeatures#FOREST_ROCK
    [[maybe_unused]] static void set_field_FOREST_ROCK(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "FOREST_ROCK", "field_35802", "FOREST_ROCK", "f_195012_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.MiscConfiguredFeatures#ICEBERG_PACKED
    [[maybe_unused]] static jobject get_field_ICEBERG_PACKED() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "ICEBERG_PACKED", "field_35803", "ICEBERG_PACKED", "f_195013_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.MiscConfiguredFeatures#ICEBERG_PACKED
    [[maybe_unused]] static void set_field_ICEBERG_PACKED(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "ICEBERG_PACKED", "field_35803", "ICEBERG_PACKED", "f_195013_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.MiscConfiguredFeatures#ICEBERG_BLUE
    [[maybe_unused]] static jobject get_field_ICEBERG_BLUE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "ICEBERG_BLUE", "field_35804", "ICEBERG_BLUE", "f_195014_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.MiscConfiguredFeatures#ICEBERG_BLUE
    [[maybe_unused]] static void set_field_ICEBERG_BLUE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "ICEBERG_BLUE", "field_35804", "ICEBERG_BLUE", "f_195014_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.MiscConfiguredFeatures#BLUE_ICE
    [[maybe_unused]] static jobject get_field_BLUE_ICE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "BLUE_ICE", "field_35805", "BLUE_ICE", "f_195015_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.MiscConfiguredFeatures#BLUE_ICE
    [[maybe_unused]] static void set_field_BLUE_ICE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "BLUE_ICE", "field_35805", "BLUE_ICE", "f_195015_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.MiscConfiguredFeatures#LAKE_LAVA
    [[maybe_unused]] static jobject get_field_LAKE_LAVA() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "LAKE_LAVA", "field_35806", "LAKE_LAVA", "f_195016_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.MiscConfiguredFeatures#LAKE_LAVA
    [[maybe_unused]] static void set_field_LAKE_LAVA(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "LAKE_LAVA", "field_35806", "LAKE_LAVA", "f_195016_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.MiscConfiguredFeatures#DISK_CLAY
    [[maybe_unused]] static jobject get_field_DISK_CLAY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "DISK_CLAY", "field_35807", "DISK_CLAY", "f_195017_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.MiscConfiguredFeatures#DISK_CLAY
    [[maybe_unused]] static void set_field_DISK_CLAY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "DISK_CLAY", "field_35807", "DISK_CLAY", "f_195017_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.MiscConfiguredFeatures#DISK_GRAVEL
    [[maybe_unused]] static jobject get_field_DISK_GRAVEL() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "DISK_GRAVEL", "field_35808", "DISK_GRAVEL", "f_195018_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.MiscConfiguredFeatures#DISK_GRAVEL
    [[maybe_unused]] static void set_field_DISK_GRAVEL(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "DISK_GRAVEL", "field_35808", "DISK_GRAVEL", "f_195018_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.MiscConfiguredFeatures#DISK_SAND
    [[maybe_unused]] static jobject get_field_DISK_SAND() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "DISK_SAND", "field_35809", "DISK_SAND", "f_195019_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.MiscConfiguredFeatures#DISK_SAND
    [[maybe_unused]] static void set_field_DISK_SAND(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "DISK_SAND", "field_35809", "DISK_SAND", "f_195019_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.MiscConfiguredFeatures#FREEZE_TOP_LAYER
    [[maybe_unused]] static jobject get_field_FREEZE_TOP_LAYER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "FREEZE_TOP_LAYER", "field_35810", "FREEZE_TOP_LAYER", "f_195020_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.MiscConfiguredFeatures#FREEZE_TOP_LAYER
    [[maybe_unused]] static void set_field_FREEZE_TOP_LAYER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "FREEZE_TOP_LAYER", "field_35810", "FREEZE_TOP_LAYER", "f_195020_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.MiscConfiguredFeatures#DISK_GRASS
    [[maybe_unused]] static jobject get_field_DISK_GRASS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "DISK_GRASS", "field_38809", "DISK_GRASS", "f_236760_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.MiscConfiguredFeatures#DISK_GRASS
    [[maybe_unused]] static void set_field_DISK_GRASS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "DISK_GRASS", "field_38809", "DISK_GRASS", "f_236760_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.MiscConfiguredFeatures#BONUS_CHEST
    [[maybe_unused]] static jobject get_field_BONUS_CHEST() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "BONUS_CHEST", "field_35811", "BONUS_CHEST", "f_195021_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.MiscConfiguredFeatures#BONUS_CHEST
    [[maybe_unused]] static void set_field_BONUS_CHEST(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "BONUS_CHEST", "field_35811", "BONUS_CHEST", "f_195021_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.MiscConfiguredFeatures#VOID_START_PLATFORM
    [[maybe_unused]] static jobject get_field_VOID_START_PLATFORM() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "VOID_START_PLATFORM", "field_35812", "VOID_START_PLATFORM", "f_195022_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.MiscConfiguredFeatures#VOID_START_PLATFORM
    [[maybe_unused]] static void set_field_VOID_START_PLATFORM(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "VOID_START_PLATFORM", "field_35812", "VOID_START_PLATFORM", "f_195022_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.MiscConfiguredFeatures#DESERT_WELL
    [[maybe_unused]] static jobject get_field_DESERT_WELL() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "DESERT_WELL", "field_35813", "DESERT_WELL", "f_195023_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.MiscConfiguredFeatures#DESERT_WELL
    [[maybe_unused]] static void set_field_DESERT_WELL(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("o", "DESERT_WELL", "field_35813", "DESERT_WELL", "f_195023_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.MiscConfiguredFeatures#SPRING_LAVA_OVERWORLD
    [[maybe_unused]] static jobject get_field_SPRING_LAVA_OVERWORLD() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("p", "SPRING_LAVA_OVERWORLD", "field_35814", "SPRING_LAVA_OVERWORLD", "f_195024_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.MiscConfiguredFeatures#SPRING_LAVA_OVERWORLD
    [[maybe_unused]] static void set_field_SPRING_LAVA_OVERWORLD(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("p", "SPRING_LAVA_OVERWORLD", "field_35814", "SPRING_LAVA_OVERWORLD", "f_195024_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.MiscConfiguredFeatures#SPRING_LAVA_FROZEN
    [[maybe_unused]] static jobject get_field_SPRING_LAVA_FROZEN() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("q", "SPRING_LAVA_FROZEN", "field_35815", "SPRING_LAVA_FROZEN", "f_195025_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.MiscConfiguredFeatures#SPRING_LAVA_FROZEN
    [[maybe_unused]] static void set_field_SPRING_LAVA_FROZEN(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("q", "SPRING_LAVA_FROZEN", "field_35815", "SPRING_LAVA_FROZEN", "f_195025_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.feature.MiscConfiguredFeatures#SPRING_WATER
    [[maybe_unused]] static jobject get_field_SPRING_WATER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("r", "SPRING_WATER", "field_35816", "SPRING_WATER", "f_195026_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.feature.MiscConfiguredFeatures#SPRING_WATER
    [[maybe_unused]] static void set_field_SPRING_WATER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("r", "SPRING_WATER", "field_35816", "SPRING_WATER", "f_195026_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_bootstrap() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "bootstrap", "method_46853", "bootstrap", "m_254957_"), "(Lqq;)V");
    }

    static void bootstrap(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_bootstrap();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_WORLD_GEN_FEATURE_MISCCONFIGUREDFEATURES_HPP