// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_GEN_CARVER_CARVERCONFIG_HPP
#define NET_MINECRAFT_WORLD_GEN_CARVER_CARVERCONFIG_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.gen.carver.CarverConfig
 * Remapped: eax
 */
namespace CarverConfig {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("eax", "net/minecraft/world/level/levelgen/carver/CarverConfiguration", "net/minecraft/class_5871", "net/minecraft/world/gen/carver/CarverConfig", "net/minecraft/src/C_2204_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.world.gen.carver.CarverConfig#CONFIG_CODEC
    [[maybe_unused]] static jobject get_field_CONFIG_CODEC() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "CODEC", "field_29054", "CONFIG_CODEC", "f_159087_"), "Lcom/mojang/serialization/MapCodec;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.carver.CarverConfig#CONFIG_CODEC
    [[maybe_unused]] static void set_field_CONFIG_CODEC(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "CODEC", "field_29054", "CONFIG_CODEC", "f_159087_"), "Lcom/mojang/serialization/MapCodec;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for public field net.minecraft.world.gen.carver.CarverConfig#y
    static jobject get_field_y(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "y", "field_31488", "y", "f_159088_"), "Lehx;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.carver.CarverConfig#y
    static void set_field_y(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "y", "field_31488", "y", "f_159088_"), "Lehx;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.world.gen.carver.CarverConfig#yScale
    static jobject get_field_yScale(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "yScale", "field_31489", "yScale", "f_159089_"), "Lbpu;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.carver.CarverConfig#yScale
    static void set_field_yScale(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "yScale", "field_31489", "yScale", "f_159089_"), "Lbpu;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.world.gen.carver.CarverConfig#lavaLevel
    static jobject get_field_lavaLevel(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "lavaLevel", "field_31490", "lavaLevel", "f_159090_"), "Ldzs;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.carver.CarverConfig#lavaLevel
    static void set_field_lavaLevel(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "lavaLevel", "field_31490", "lavaLevel", "f_159090_"), "Ldzs;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.world.gen.carver.CarverConfig#debugConfig
    static jobject get_field_debugConfig(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "debugSettings", "field_29053", "debugConfig", "f_159092_"), "Leay;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.carver.CarverConfig#debugConfig
    static void set_field_debugConfig(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "debugSettings", "field_29053", "debugConfig", "f_159092_"), "Leay;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.world.gen.carver.CarverConfig#replaceable
    static jobject get_field_replaceable(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "replaceable", "field_38864", "replaceable", "f_224830_"), "Ljq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.carver.CarverConfig#replaceable
    static void set_field_replaceable(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "replaceable", "field_38864", "replaceable", "f_224830_"), "Ljq;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

};

#endif // NET_MINECRAFT_WORLD_GEN_CARVER_CARVERCONFIG_HPP