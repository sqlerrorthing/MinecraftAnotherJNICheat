// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_GEN_CHUNK_CHUNKNOISESAMPLER$DENSITYINTERPOLATOR_HPP
#define NET_MINECRAFT_WORLD_GEN_CHUNK_CHUNKNOISESAMPLER$DENSITYINTERPOLATOR_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator
 * Remapped: dzc$i
 */
namespace ChunkNoiseSampler$DensityInterpolator {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dzc$i", "net/minecraft/world/level/levelgen/NoiseChunk$NoiseInterpolator", "net/minecraft/class_6568$class_5917", "net/minecraft/world/gen/chunk/ChunkNoiseSampler$DensityInterpolator", "net/minecraft/src/C_182895_$C_182899_"));
        }
        return cachedClass;
    };

    // getter for default field net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator#startDensityBuffer
    static jdouble get_field_startDensityBuffer(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "slice0", "field_29227", "startDensityBuffer", "f_188828_"), "[[D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator#startDensityBuffer
    static void set_field_startDensityBuffer(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "slice0", "field_29227", "startDensityBuffer", "f_188828_"), "[[D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator#endDensityBuffer
    static jdouble get_field_endDensityBuffer(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "slice1", "field_29228", "endDensityBuffer", "f_188829_"), "[[D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator#endDensityBuffer
    static void set_field_endDensityBuffer(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "slice1", "field_29228", "endDensityBuffer", "f_188829_"), "[[D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator#delegate
    static jobject get_field_delegate(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "noiseFiller", "field_34623", "delegate", "f_188830_"), "Ldyr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator#delegate
    static void set_field_delegate(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "noiseFiller", "field_34623", "delegate", "f_188830_"), "Ldyr;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator#x0y0z0
    static jdouble get_field_x0y0z0(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "noise000", "field_29233", "x0y0z0", "f_188831_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator#x0y0z0
    static void set_field_x0y0z0(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "noise000", "field_29233", "x0y0z0", "f_188831_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator#x0y0z1
    static jdouble get_field_x0y0z1(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "noise001", "field_29234", "x0y0z1", "f_188832_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator#x0y0z1
    static void set_field_x0y0z1(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "noise001", "field_29234", "x0y0z1", "f_188832_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator#x1y0z0
    static jdouble get_field_x1y0z0(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "noise100", "field_29235", "x1y0z0", "f_188833_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator#x1y0z0
    static void set_field_x1y0z0(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "noise100", "field_29235", "x1y0z0", "f_188833_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator#x1y0z1
    static jdouble get_field_x1y0z1(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "noise101", "field_29236", "x1y0z1", "f_188834_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator#x1y0z1
    static void set_field_x1y0z1(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "noise101", "field_29236", "x1y0z1", "f_188834_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator#x0y1z0
    static jdouble get_field_x0y1z0(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "noise010", "field_29237", "x0y1z0", "f_188835_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator#x0y1z0
    static void set_field_x0y1z0(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "noise010", "field_29237", "x0y1z0", "f_188835_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator#x0y1z1
    static jdouble get_field_x0y1z1(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "noise011", "field_29238", "x0y1z1", "f_188836_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator#x0y1z1
    static void set_field_x0y1z1(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "noise011", "field_29238", "x0y1z1", "f_188836_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator#x1y1z0
    static jdouble get_field_x1y1z0(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "noise110", "field_29239", "x1y1z0", "f_188837_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator#x1y1z0
    static void set_field_x1y1z0(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "noise110", "field_29239", "x1y1z0", "f_188837_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator#x1y1z1
    static jdouble get_field_x1y1z1(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "noise111", "field_29240", "x1y1z1", "f_188838_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator#x1y1z1
    static void set_field_x1y1z1(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "noise111", "field_29240", "x1y1z1", "f_188838_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator#x0z0
    static jdouble get_field_x0z0(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "valueXZ00", "field_29241", "x0z0", "f_188839_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator#x0z0
    static void set_field_x0z0(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "valueXZ00", "field_29241", "x0z0", "f_188839_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator#x1z0
    static jdouble get_field_x1z0(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "valueXZ10", "field_29242", "x1z0", "f_188840_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator#x1z0
    static void set_field_x1z0(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "valueXZ10", "field_29242", "x1z0", "f_188840_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator#x0z1
    static jdouble get_field_x0z1(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "valueXZ01", "field_29243", "x0z1", "f_188841_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator#x0z1
    static void set_field_x0z1(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "valueXZ01", "field_29243", "x0z1", "f_188841_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator#x1z1
    static jdouble get_field_x1z1(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "valueXZ11", "field_29244", "x1z1", "f_188842_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator#x1z1
    static void set_field_x1z1(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "valueXZ11", "field_29244", "x1z1", "f_188842_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator#z0
    static jdouble get_field_z0(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "valueZ0", "field_29245", "z0", "f_188843_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator#z0
    static void set_field_z0(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "valueZ0", "field_29245", "z0", "f_188843_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator#z1
    static jdouble get_field_z1(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "valueZ1", "field_29246", "z1", "f_188844_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator#z1
    static void set_field_z1(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "valueZ1", "field_29246", "z1", "f_188844_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator#result
    static jdouble get_field_result(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "value", "field_34624", "result", "f_188845_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator#result
    static void set_field_result(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "value", "field_34624", "result", "f_188845_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    static jmethodID methodID_createBuffer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "allocateSlice", "method_34293", "createBuffer", "m_188854_"), "(II)[[D");
    }

    static jdouble createBuffer(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_createBuffer();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_onSampledCellCorners() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "selectCellYZ", "method_34289", "onSampledCellCorners", "m_188863_"), "(II)V");
    }

    static void onSampledCellCorners(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_onSampledCellCorners();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_interpolateY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateForY", "method_34287", "interpolateY", "m_188850_"), "(D)V");
    }

    static void interpolateY(const jobject& obj, const jdouble& arg0) {
                
       const auto methodID = methodID_interpolateY();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_interpolateX() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "updateForX", "method_34292", "interpolateX", "m_188861_"), "(D)V");
    }

    static void interpolateX(const jobject& obj, const jdouble& arg0) {
                
       const auto methodID = methodID_interpolateX();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_interpolateZ() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "updateForZ", "method_38363", "interpolateZ", "m_188866_"), "(D)V");
    }

    static void interpolateZ(const jobject& obj, const jdouble& arg0) {
                
       const auto methodID = methodID_interpolateZ();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_sample() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "compute", "method_40464", "sample", "m_207386_"), "(Ldyr$b;)D");
    }

    static jdouble sample(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_sample();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_fill() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "fillArray", "method_40470", "fill", "m_207362_"), "([DLdyr$a;)V");
    }

    static void fill(const jobject& obj, const jarray& arg0, const jdouble& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_fill();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_wrapped() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "wrapped", "comp_469", "wrapped", "m_207056_"), "()Ldyr;");
    }

    static jobject wrapped(const jobject& obj) {
                
       const auto methodID = methodID_wrapped();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_swapBuffers() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "swapSlices", "method_34291", "swapBuffers", "m_188860_"), "()V");
    }

    static void swapBuffers(const jobject& obj) {
                
       const auto methodID = methodID_swapBuffers();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_type() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "type", "comp_383", "type", "m_207136_"), "()Ldys$l$a;");
    }

    static jobject type(const jobject& obj) {
                
       const auto methodID = methodID_type();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_WORLD_GEN_CHUNK_CHUNKNOISESAMPLER$DENSITYINTERPOLATOR_HPP