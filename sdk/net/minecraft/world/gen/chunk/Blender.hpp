// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_GEN_CHUNK_BLENDER_HPP
#define NET_MINECRAFT_WORLD_GEN_CHUNK_BLENDER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.gen.chunk.Blender
 * Remapped: eaa
 */
namespace Blender {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("eaa", "net/minecraft/world/level/levelgen/blending/Blender", "net/minecraft/class_6748", "net/minecraft/world/gen/chunk/Blender", "net/minecraft/src/C_182955_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.world.gen.chunk.Blender#NO_BLENDING
    [[maybe_unused]] static jobject get_field_NO_BLENDING() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "EMPTY", "field_35501", "NO_BLENDING", "f_190137_"), "Leaa;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.Blender#NO_BLENDING
    [[maybe_unused]] static void set_field_NO_BLENDING(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "EMPTY", "field_35501", "NO_BLENDING", "f_190137_"), "Leaa;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.gen.chunk.Blender#OFFSET_NOISE
    [[maybe_unused]] static jobject get_field_OFFSET_NOISE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "SHIFT_NOISE", "field_35681", "OFFSET_NOISE", "f_190138_"), "Leoh;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.Blender#OFFSET_NOISE
    [[maybe_unused]] static void set_field_OFFSET_NOISE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "SHIFT_NOISE", "field_35681", "OFFSET_NOISE", "f_190138_"), "Leoh;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.gen.chunk.Blender#BLENDING_BIOME_DISTANCE_THRESHOLD
    [[maybe_unused]] static jint get_field_BLENDING_BIOME_DISTANCE_THRESHOLD() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "HEIGHT_BLENDING_RANGE_CELLS", "field_35502", "BLENDING_BIOME_DISTANCE_THRESHOLD", "f_190139_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.Blender#BLENDING_BIOME_DISTANCE_THRESHOLD
    [[maybe_unused]] static void set_field_BLENDING_BIOME_DISTANCE_THRESHOLD(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "HEIGHT_BLENDING_RANGE_CELLS", "field_35502", "BLENDING_BIOME_DISTANCE_THRESHOLD", "f_190139_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.gen.chunk.Blender#BLENDING_CHUNK_DISTANCE_THRESHOLD
    [[maybe_unused]] static jint get_field_BLENDING_CHUNK_DISTANCE_THRESHOLD() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "HEIGHT_BLENDING_RANGE_CHUNKS", "field_35503", "BLENDING_CHUNK_DISTANCE_THRESHOLD", "f_190140_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.Blender#BLENDING_CHUNK_DISTANCE_THRESHOLD
    [[maybe_unused]] static void set_field_BLENDING_CHUNK_DISTANCE_THRESHOLD(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "HEIGHT_BLENDING_RANGE_CHUNKS", "field_35503", "BLENDING_CHUNK_DISTANCE_THRESHOLD", "f_190140_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.gen.chunk.Blender#field_35504
    [[maybe_unused]] static jint get_field_field_35504() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "DENSITY_BLENDING_RANGE_CELLS", "field_35504", "field_35504", "f_190141_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.Blender#field_35504
    [[maybe_unused]] static void set_field_field_35504(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "DENSITY_BLENDING_RANGE_CELLS", "field_35504", "field_35504", "f_190141_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.gen.chunk.Blender#CLOSE_BLENDING_DISTANCE_THRESHOLD
    [[maybe_unused]] static jint get_field_CLOSE_BLENDING_DISTANCE_THRESHOLD() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "DENSITY_BLENDING_RANGE_CHUNKS", "field_35505", "CLOSE_BLENDING_DISTANCE_THRESHOLD", "f_190142_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.Blender#CLOSE_BLENDING_DISTANCE_THRESHOLD
    [[maybe_unused]] static void set_field_CLOSE_BLENDING_DISTANCE_THRESHOLD(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "DENSITY_BLENDING_RANGE_CHUNKS", "field_35505", "CLOSE_BLENDING_DISTANCE_THRESHOLD", "f_190142_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.gen.chunk.Blender#field_36224
    [[maybe_unused]] static jdouble get_field_field_36224() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "OLD_CHUNK_XZ_RADIUS", "field_36224", "field_36224", "f_197017_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.Blender#field_36224
    [[maybe_unused]] static void set_field_field_36224(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "OLD_CHUNK_XZ_RADIUS", "field_36224", "field_36224", "f_197017_"), "D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.Blender#blendingData
    static jobject get_field_blendingData(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "heightAndBiomeBlendingData", "field_36343", "blendingData", "f_224696_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectOpenHashMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.Blender#blendingData
    static void set_field_blendingData(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "heightAndBiomeBlendingData", "field_36343", "blendingData", "f_224696_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectOpenHashMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.Blender#closeBlendingData
    static jobject get_field_closeBlendingData(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "densityBlendingData", "field_36344", "closeBlendingData", "f_224697_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectOpenHashMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.Blender#closeBlendingData
    static void set_field_closeBlendingData(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "densityBlendingData", "field_36344", "closeBlendingData", "f_224697_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectOpenHashMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_getNoBlending() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "empty", "method_39336", "getNoBlending", "m_190153_"), "()Leaa;");
    }

    static jobject getNoBlending() {
       const auto clazz = self();
       const auto methodID = methodID_getNoBlending();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_getBlender() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "of", "method_39342", "getBlender", "m_190202_"), "(Larb;)Leaa;");
    }

    static jobject getBlender(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getBlender();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_calculate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "blendOffsetAndFactor", "method_39340", "calculate", "m_207242_"), "(II)Leaa$a;");
    }

    static jobject calculate(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_calculate();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getBlendOffset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "heightToOffset", "method_39337", "getBlendOffset", "m_190154_"), "(D)D");
    }

    static jdouble getBlendOffset(const jdouble& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getBlendOffset();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_applyBlendDensity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "blendDensity", "method_39338", "applyBlendDensity", "m_207103_"), "(Ldyr$b;D)D");
    }

    static jdouble applyBlendDensity(const jobject& obj, const jobject& arg0, const jdouble& arg1) {
                
       const auto methodID = methodID_applyBlendDensity();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_sampleClosest() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getBlendingDataValue", "method_39562", "sampleClosest", "m_190174_"), "(IIILeaa$b;)D");
    }

    static jdouble sampleClosest(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_sampleClosest();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_sample() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getBlendingDataValue", "method_39565", "sample", "m_190211_"), "(Leaa$b;IIIII)D");
    }

    static jdouble sample(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2, const jint& arg3, const jint& arg4, const jint& arg5) {
                
       const auto methodID = methodID_sample();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
    static jmethodID methodID_getBiomeSupplier() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getBiomeResolver", "method_39563", "getBiomeSupplier", "m_183383_"), "(Lddz;)Lddz;");
    }

    static jobject getBiomeSupplier(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getBiomeSupplier();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_blendBiome() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "blendBiome", "method_39561", "blendBiome", "m_224706_"), "(III)Ljm;");
    }

    static jobject blendBiome(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_blendBiome();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_tickLeavesAndFluids() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "generateBorderTicks", "method_39772", "tickLeavesAndFluids", "m_197031_"), "(Larb;Lduy;)V");
    }

    static void tickLeavesAndFluids(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_tickLeavesAndFluids();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__tickLeavesAndFluids() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "generateBorderTick", "method_39773", "tickLeavesAndFluids", "m_197040_"), "(Lduy;Ljd;)V");
    }

    static void _tickLeavesAndFluids(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID__tickLeavesAndFluids();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_createCarvingMasks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "addAroundOldChunksCarvingMaskFilter", "method_39809", "createCarvingMasks", "m_197034_"), "(Ldds;Ldvs;)V");
    }

    static void createCarvingMasks(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_createCarvingMasks();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_createClosestDistanceFunction() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "makeOldChunkDistanceGetter", "method_39815", "createClosestDistanceFunction", "m_224726_"), "(Leab;Ljava/util/Map;)Leaa$c;");
    }

    static jobject createClosestDistanceFunction(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_createClosestDistanceFunction();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_createDistanceFunction() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "makeOffsetOldChunkDistanceGetter", "method_39812", "createDistanceFunction", "m_224729_"), "(Ljj;Leab;)Leaa$c;");
    }

    static jobject createDistanceFunction(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_createDistanceFunction();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getDistance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "distanceToCube", "method_39808", "getDistance", "m_197024_"), "(DDDDDD)D");
    }

    static jdouble getDistance(const jdouble& arg0, const jdouble& arg1, const jdouble& arg2, const jdouble& arg3, const jdouble& arg4, const jdouble& arg5) {
       const auto clazz = self();
       const auto methodID = methodID_getDistance();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
};

#endif // NET_MINECRAFT_WORLD_GEN_CHUNK_BLENDER_HPP