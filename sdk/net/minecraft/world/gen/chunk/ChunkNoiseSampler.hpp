// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_GEN_CHUNK_CHUNKNOISESAMPLER_HPP
#define NET_MINECRAFT_WORLD_GEN_CHUNK_CHUNKNOISESAMPLER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.gen.chunk.ChunkNoiseSampler
 * Remapped: dzc
 */
namespace ChunkNoiseSampler {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dzc", "net/minecraft/world/level/levelgen/NoiseChunk", "net/minecraft/class_6568", "net/minecraft/world/gen/chunk/ChunkNoiseSampler", "net/minecraft/src/C_182895_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkNoiseSampler#generationShapeConfig
    static jobject get_field_generationShapeConfig(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "noiseSettings", "field_35674", "generationShapeConfig", "f_188717_"), "Ldzg;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkNoiseSampler#generationShapeConfig
    static void set_field_generationShapeConfig(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "noiseSettings", "field_35674", "generationShapeConfig", "f_188717_"), "Ldzg;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#horizontalCellCount
    static jint get_field_horizontalCellCount(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "cellCountXZ", "field_34599", "horizontalCellCount", "f_188718_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#horizontalCellCount
    static void set_field_horizontalCellCount(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "cellCountXZ", "field_34599", "horizontalCellCount", "f_188718_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#verticalCellCount
    static jint get_field_verticalCellCount(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "cellCountY", "field_34598", "verticalCellCount", "f_188719_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#verticalCellCount
    static void set_field_verticalCellCount(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "cellCountY", "field_34598", "verticalCellCount", "f_188719_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#minimumCellY
    static jint get_field_minimumCellY(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "cellNoiseMinY", "field_34600", "minimumCellY", "f_188720_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#minimumCellY
    static void set_field_minimumCellY(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "cellNoiseMinY", "field_34600", "minimumCellY", "f_188720_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkNoiseSampler#startCellX
    static jint get_field_startCellX(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "firstCellX", "field_34601", "startCellX", "f_188721_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkNoiseSampler#startCellX
    static void set_field_startCellX(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "firstCellX", "field_34601", "startCellX", "f_188721_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkNoiseSampler#startCellZ
    static jint get_field_startCellZ(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "firstCellZ", "field_34602", "startCellZ", "f_188722_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkNoiseSampler#startCellZ
    static void set_field_startCellZ(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "firstCellZ", "field_34602", "startCellZ", "f_188722_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#startBiomeX
    static jint get_field_startBiomeX(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "firstNoiseX", "field_34603", "startBiomeX", "f_188723_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#startBiomeX
    static void set_field_startBiomeX(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "firstNoiseX", "field_34603", "startBiomeX", "f_188723_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#startBiomeZ
    static jint get_field_startBiomeZ(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "firstNoiseZ", "field_34604", "startBiomeZ", "f_188724_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#startBiomeZ
    static void set_field_startBiomeZ(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "firstNoiseZ", "field_34604", "startBiomeZ", "f_188724_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#interpolators
    static jobject get_field_interpolators(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "interpolators", "field_34605", "interpolators", "f_188725_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#interpolators
    static void set_field_interpolators(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "interpolators", "field_34605", "interpolators", "f_188725_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#caches
    static jobject get_field_caches(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "cellCaches", "field_36581", "caches", "f_209160_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#caches
    static void set_field_caches(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "cellCaches", "field_36581", "caches", "f_209160_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkNoiseSampler#actualDensityFunctionCache
    static jobject get_field_actualDensityFunctionCache(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "wrapped", "field_36582", "actualDensityFunctionCache", "f_209161_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkNoiseSampler#actualDensityFunctionCache
    static void set_field_actualDensityFunctionCache(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "wrapped", "field_36582", "actualDensityFunctionCache", "f_209161_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkNoiseSampler#surfaceHeightEstimateCache
    static jobject get_field_surfaceHeightEstimateCache(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "preliminarySurfaceLevel", "field_36273", "surfaceHeightEstimateCache", "f_198238_"), "Lit/unimi/dsi/fastutil/longs/Long2IntMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkNoiseSampler#surfaceHeightEstimateCache
    static void set_field_surfaceHeightEstimateCache(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "preliminarySurfaceLevel", "field_36273", "surfaceHeightEstimateCache", "f_198238_"), "Lit/unimi/dsi/fastutil/longs/Long2IntMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkNoiseSampler#aquiferSampler
    static jobject get_field_aquiferSampler(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "aquifer", "field_34613", "aquiferSampler", "f_188728_"), "Ldyk;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkNoiseSampler#aquiferSampler
    static void set_field_aquiferSampler(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "aquifer", "field_34613", "aquiferSampler", "f_188728_"), "Ldyk;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkNoiseSampler#initialDensityWithoutJaggedness
    static jobject get_field_initialDensityWithoutJaggedness(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "initialDensityNoJaggedness", "field_36583", "initialDensityWithoutJaggedness", "f_209162_"), "Ldyr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkNoiseSampler#initialDensityWithoutJaggedness
    static void set_field_initialDensityWithoutJaggedness(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "initialDensityNoJaggedness", "field_36583", "initialDensityWithoutJaggedness", "f_209162_"), "Ldyr;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkNoiseSampler#blockStateSampler
    static jobject get_field_blockStateSampler(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "blockStateRule", "field_36584", "blockStateSampler", "f_209163_"), "Ldzc$c;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkNoiseSampler#blockStateSampler
    static void set_field_blockStateSampler(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "blockStateRule", "field_36584", "blockStateSampler", "f_209163_"), "Ldzc$c;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkNoiseSampler#blender
    static jobject get_field_blender(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "blender", "field_35487", "blender", "f_188731_"), "Leaa;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkNoiseSampler#blender
    static void set_field_blender(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "blender", "field_35487", "blender", "f_188731_"), "Leaa;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkNoiseSampler#cachedBlendAlphaDensityFunction
    static jobject get_field_cachedBlendAlphaDensityFunction(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "blendAlpha", "field_36585", "cachedBlendAlphaDensityFunction", "f_209164_"), "Ldzc$g;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkNoiseSampler#cachedBlendAlphaDensityFunction
    static void set_field_cachedBlendAlphaDensityFunction(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "blendAlpha", "field_36585", "cachedBlendAlphaDensityFunction", "f_209164_"), "Ldzc$g;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkNoiseSampler#cachedBlendOffsetDensityFunction
    static jobject get_field_cachedBlendOffsetDensityFunction(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "blendOffset", "field_36586", "cachedBlendOffsetDensityFunction", "f_209165_"), "Ldzc$g;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkNoiseSampler#cachedBlendOffsetDensityFunction
    static void set_field_cachedBlendOffsetDensityFunction(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "blendOffset", "field_36586", "cachedBlendOffsetDensityFunction", "f_209165_"), "Ldzc$g;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkNoiseSampler#beardifying
    static jobject get_field_beardifying(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "beardifier", "field_37113", "beardifying", "f_209166_"), "Ldys$c;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkNoiseSampler#beardifying
    static void set_field_beardifying(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "beardifier", "field_37113", "beardifying", "f_209166_"), "Ldys$c;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkNoiseSampler#lastBlendingColumnPos
    static jlong get_field_lastBlendingColumnPos(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "lastBlendingDataPos", "field_36587", "lastBlendingColumnPos", "f_209167_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkNoiseSampler#lastBlendingColumnPos
    static void set_field_lastBlendingColumnPos(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "lastBlendingDataPos", "field_36587", "lastBlendingColumnPos", "f_209167_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkNoiseSampler#lastBlendingResult
    static jobject get_field_lastBlendingResult(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "lastBlendingOutput", "field_36588", "lastBlendingResult", "f_209168_"), "Leaa$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkNoiseSampler#lastBlendingResult
    static void set_field_lastBlendingResult(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "lastBlendingOutput", "field_36588", "lastBlendingResult", "f_209168_"), "Leaa$a;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#horizontalBiomeEnd
    static jint get_field_horizontalBiomeEnd(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "noiseSizeXZ", "field_36589", "horizontalBiomeEnd", "f_209169_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#horizontalBiomeEnd
    static void set_field_horizontalBiomeEnd(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "noiseSizeXZ", "field_36589", "horizontalBiomeEnd", "f_209169_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#horizontalCellBlockCount
    static jint get_field_horizontalCellBlockCount(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("w", "cellWidth", "field_36590", "horizontalCellBlockCount", "f_209170_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#horizontalCellBlockCount
    static void set_field_horizontalCellBlockCount(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("w", "cellWidth", "field_36590", "horizontalCellBlockCount", "f_209170_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#verticalCellBlockCount
    static jint get_field_verticalCellBlockCount(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("x", "cellHeight", "field_36591", "verticalCellBlockCount", "f_209171_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#verticalCellBlockCount
    static void set_field_verticalCellBlockCount(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("x", "cellHeight", "field_36591", "verticalCellBlockCount", "f_209171_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#isInInterpolationLoop
    static jboolean get_field_isInInterpolationLoop(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("y", "interpolating", "field_36592", "isInInterpolationLoop", "f_209172_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#isInInterpolationLoop
    static void set_field_isInInterpolationLoop(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("y", "interpolating", "field_36592", "isInInterpolationLoop", "f_209172_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#isSamplingForCaches
    static jboolean get_field_isSamplingForCaches(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("z", "fillingCell", "field_36593", "isSamplingForCaches", "f_209173_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#isSamplingForCaches
    static void set_field_isSamplingForCaches(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("z", "fillingCell", "field_36593", "isSamplingForCaches", "f_209173_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkNoiseSampler#startBlockX
    static jint get_field_startBlockX(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("A", "cellStartBlockX", "field_36594", "startBlockX", "f_209150_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkNoiseSampler#startBlockX
    static void set_field_startBlockX(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("A", "cellStartBlockX", "field_36594", "startBlockX", "f_209150_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#startBlockY
    static jint get_field_startBlockY(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("B", "cellStartBlockY", "field_36572", "startBlockY", "f_209151_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#startBlockY
    static void set_field_startBlockY(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("B", "cellStartBlockY", "field_36572", "startBlockY", "f_209151_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkNoiseSampler#startBlockZ
    static jint get_field_startBlockZ(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("C", "cellStartBlockZ", "field_36573", "startBlockZ", "f_209152_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkNoiseSampler#startBlockZ
    static void set_field_startBlockZ(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("C", "cellStartBlockZ", "field_36573", "startBlockZ", "f_209152_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#cellBlockX
    static jint get_field_cellBlockX(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("D", "inCellX", "field_36574", "cellBlockX", "f_209153_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#cellBlockX
    static void set_field_cellBlockX(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("D", "inCellX", "field_36574", "cellBlockX", "f_209153_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#cellBlockY
    static jint get_field_cellBlockY(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("E", "inCellY", "field_36575", "cellBlockY", "f_209154_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#cellBlockY
    static void set_field_cellBlockY(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("E", "inCellY", "field_36575", "cellBlockY", "f_209154_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#cellBlockZ
    static jint get_field_cellBlockZ(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("F", "inCellZ", "field_36576", "cellBlockZ", "f_209155_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#cellBlockZ
    static void set_field_cellBlockZ(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("F", "inCellZ", "field_36576", "cellBlockZ", "f_209155_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#sampleUniqueIndex
    static jlong get_field_sampleUniqueIndex(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("G", "interpolationCounter", "field_36577", "sampleUniqueIndex", "f_209156_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#sampleUniqueIndex
    static void set_field_sampleUniqueIndex(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("G", "interpolationCounter", "field_36577", "sampleUniqueIndex", "f_209156_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#cacheOnceUniqueIndex
    static jlong get_field_cacheOnceUniqueIndex(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("H", "arrayInterpolationCounter", "field_36578", "cacheOnceUniqueIndex", "f_209157_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#cacheOnceUniqueIndex
    static void set_field_cacheOnceUniqueIndex(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("H", "arrayInterpolationCounter", "field_36578", "cacheOnceUniqueIndex", "f_209157_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#index
    static jint get_field_index(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("I", "arrayIndex", "field_36579", "index", "f_209158_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static default field net.minecraft.world.gen.chunk.ChunkNoiseSampler#index
    static void set_field_index(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("I", "arrayIndex", "field_36579", "index", "f_209158_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkNoiseSampler#interpolationEachApplier
    static jobject get_field_interpolationEachApplier(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("J", "sliceFillingContextProvider", "field_36580", "interpolationEachApplier", "f_209159_"), "Ldyr$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkNoiseSampler#interpolationEachApplier
    static void set_field_interpolationEachApplier(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("J", "sliceFillingContextProvider", "field_36580", "interpolationEachApplier", "f_209159_"), "Ldyr$a;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_create() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "forChunk", "method_39543", "create", "m_224352_"), "(Lduy;Ldzm;Ldys$c;Ldzd;Ldyk$a;Leaa;)Ldzc;");
    }

    static jobject create(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4, const jobject& arg5) {
       const auto clazz = self();
       const auto methodID = methodID_create();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
    static jmethodID methodID_createMultiNoiseSampler() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "cachedClimateSampler", "method_40531", "createMultiNoiseSampler", "m_224359_"), "(Ldze;Ljava/util/List;)Ldef$f;");
    }

    static jobject createMultiNoiseSampler(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_createMultiNoiseSampler();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_sampleBlockState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "getInterpolatedState", "method_40536", "sampleBlockState", "m_209247_"), "()Ldtc;");
    }

    static jobject sampleBlockState(const jobject& obj) {
                
       const auto methodID = methodID_sampleBlockState();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_blockX() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "blockX", "comp_371", "blockX", "m_207115_"), "()I");
    }

    static jint blockX(const jobject& obj) {
                
       const auto methodID = methodID_blockX();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_blockY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "blockY", "comp_372", "blockY", "m_207114_"), "()I");
    }

    static jint blockY(const jobject& obj) {
                
       const auto methodID = methodID_blockY();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_blockZ() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "blockZ", "comp_373", "blockZ", "m_207113_"), "()I");
    }

    static jint blockZ(const jobject& obj) {
                
       const auto methodID = methodID_blockZ();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_estimateSurfaceHeight() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "preliminarySurfaceLevel", "method_39900", "estimateSurfaceHeight", "m_198256_"), "(II)I");
    }

    static jint estimateSurfaceHeight(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_estimateSurfaceHeight();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_calculateSurfaceHeightEstimate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "computePreliminarySurfaceLevel", "method_39899", "calculateSurfaceHeightEstimate", "m_198249_"), "(J)I");
    }

    static jint calculateSurfaceHeightEstimate(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_calculateSurfaceHeightEstimate();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getBlender() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getBlender", "method_39327", "getBlender", "m_188743_"), "()Leaa;");
    }

    static jobject getBlender(const jobject& obj) {
                
       const auto methodID = methodID_getBlender();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_sampleDensity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "fillSlice", "method_40532", "sampleDensity", "m_209220_"), "(ZI)V");
    }

    static void sampleDensity(const jobject& obj, const jboolean& arg0, const jint& arg1) {
                
       const auto methodID = methodID_sampleDensity();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_sampleStartDensity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "initializeForFirstCellX", "method_38336", "sampleStartDensity", "m_188791_"), "()V");
    }

    static void sampleStartDensity(const jobject& obj) {
                
       const auto methodID = methodID_sampleStartDensity();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_sampleEndDensity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "advanceCellX", "method_38339", "sampleEndDensity", "m_188749_"), "(I)V");
    }

    static void sampleEndDensity(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_sampleEndDensity();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_at() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "forIndex", "method_40534", "at", "m_207263_"), "(I)Ldzc;");
    }

    static jobject at(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_at();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_fill() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "fillAllDirectly", "method_40478", "fill", "m_207207_"), "([DLdyr;)V");
    }

    static void fill(const jobject& obj, const jarray& arg0, const jdouble& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_fill();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_onSampledCellCorners() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "selectCellYZ", "method_38362", "onSampledCellCorners", "m_188810_"), "(II)V");
    }

    static void onSampledCellCorners(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_onSampledCellCorners();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_interpolateY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateForY", "method_38337", "interpolateY", "m_209191_"), "(ID)V");
    }

    static void interpolateY(const jobject& obj, const jint& arg0, const jdouble& arg1) {
                
       const auto methodID = methodID_interpolateY();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_interpolateX() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "updateForX", "method_38349", "interpolateX", "m_209230_"), "(ID)V");
    }

    static void interpolateX(const jobject& obj, const jint& arg0, const jdouble& arg1) {
                
       const auto methodID = methodID_interpolateX();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_interpolateZ() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "updateForZ", "method_38355", "interpolateZ", "m_209241_"), "(ID)V");
    }

    static void interpolateZ(const jobject& obj, const jint& arg0, const jdouble& arg1) {
                
       const auto methodID = methodID_interpolateZ();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_stopInterpolation() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "stopInterpolation", "method_40537", "stopInterpolation", "m_209248_"), "()V");
    }

    static void stopInterpolation(const jobject& obj) {
                
       const auto methodID = methodID_stopInterpolation();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_swapBuffers() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "swapSlices", "method_38348", "swapBuffers", "m_188804_"), "()V");
    }

    static void swapBuffers(const jobject& obj) {
                
       const auto methodID = methodID_swapBuffers();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getAquiferSampler() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "aquifer", "method_38354", "getAquiferSampler", "m_188817_"), "()Ldyk;");
    }

    static jobject getAquiferSampler(const jobject& obj) {
                
       const auto methodID = methodID_getAquiferSampler();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getHorizontalCellBlockCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "cellWidth", "method_42361", "getHorizontalCellBlockCount", "m_224362_"), "()I");
    }

    static jint getHorizontalCellBlockCount(const jobject& obj) {
                
       const auto methodID = methodID_getHorizontalCellBlockCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getVerticalCellBlockCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "cellHeight", "method_42362", "getVerticalCellBlockCount", "m_224363_"), "()I");
    }

    static jint getVerticalCellBlockCount(const jobject& obj) {
                
       const auto methodID = methodID_getVerticalCellBlockCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_calculateBlendResult() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getOrComputeBlendingOutput", "method_40535", "calculateBlendResult", "m_209244_"), "(II)Leaa$a;");
    }

    static jobject calculateBlendResult(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_calculateBlendResult();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getActualDensityFunction() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "wrap", "method_40529", "getActualDensityFunction", "m_209213_"), "(Ldyr;)Ldyr;");
    }

    static jobject getActualDensityFunction(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getActualDensityFunction();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getActualDensityFunctionImpl() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "wrapNew", "method_40533", "getActualDensityFunctionImpl", "m_209233_"), "(Ldyr;)Ldyr;");
    }

    static jobject getActualDensityFunctionImpl(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getActualDensityFunctionImpl();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_WORLD_GEN_CHUNK_CHUNKNOISESAMPLER_HPP