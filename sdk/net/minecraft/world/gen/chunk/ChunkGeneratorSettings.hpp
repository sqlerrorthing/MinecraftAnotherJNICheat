// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_GEN_CHUNK_CHUNKGENERATORSETTINGS_HPP
#define NET_MINECRAFT_WORLD_GEN_CHUNK_CHUNKGENERATORSETTINGS_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.gen.chunk.ChunkGeneratorSettings
 * Remapped: dzd
 */
namespace ChunkGeneratorSettings {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dzd", "net/minecraft/world/level/levelgen/NoiseGeneratorSettings", "net/minecraft/class_5284", "net/minecraft/world/gen/chunk/ChunkGeneratorSettings", "net/minecraft/src/C_2194_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#generationShapeConfig
    static jobject get_field_generationShapeConfig(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "noiseSettings", "comp_474", "generationShapeConfig", "f_64439_"), "Ldzg;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#generationShapeConfig
    static void set_field_generationShapeConfig(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "noiseSettings", "comp_474", "generationShapeConfig", "f_64439_"), "Ldzg;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#defaultBlock
    static jobject get_field_defaultBlock(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "defaultBlock", "comp_475", "defaultBlock", "f_64440_"), "Ldtc;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#defaultBlock
    static void set_field_defaultBlock(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "defaultBlock", "comp_475", "defaultBlock", "f_64440_"), "Ldtc;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#defaultFluid
    static jobject get_field_defaultFluid(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "defaultFluid", "comp_476", "defaultFluid", "f_64441_"), "Ldtc;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#defaultFluid
    static void set_field_defaultFluid(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "defaultFluid", "comp_476", "defaultFluid", "f_64441_"), "Ldtc;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#noiseRouter
    static jobject get_field_noiseRouter(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "noiseRouter", "comp_477", "noiseRouter", "f_209353_"), "Ldze;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#noiseRouter
    static void set_field_noiseRouter(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "noiseRouter", "comp_477", "noiseRouter", "f_209353_"), "Ldze;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#surfaceRule
    static jobject get_field_surfaceRule(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "surfaceRule", "comp_478", "surfaceRule", "f_188871_"), "Ldzp$o;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#surfaceRule
    static void set_field_surfaceRule(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "surfaceRule", "comp_478", "surfaceRule", "f_188871_"), "Ldzp$o;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#spawnTarget
    static jobject get_field_spawnTarget(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "spawnTarget", "comp_538", "spawnTarget", "f_224370_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#spawnTarget
    static void set_field_spawnTarget(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "spawnTarget", "comp_538", "spawnTarget", "f_224370_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#seaLevel
    static jint get_field_seaLevel(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "seaLevel", "comp_479", "seaLevel", "f_64444_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#seaLevel
    static void set_field_seaLevel(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "seaLevel", "comp_479", "seaLevel", "f_64444_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#mobGenerationDisabled
    static jboolean get_field_mobGenerationDisabled(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "disableMobGeneration", "comp_480", "mobGenerationDisabled", "f_64445_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#mobGenerationDisabled
    static void set_field_mobGenerationDisabled(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "disableMobGeneration", "comp_480", "mobGenerationDisabled", "f_64445_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#aquifers
    static jboolean get_field_aquifers(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "aquifersEnabled", "comp_481", "aquifers", "f_158533_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#aquifers
    static void set_field_aquifers(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "aquifersEnabled", "comp_481", "aquifers", "f_158533_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#oreVeins
    static jboolean get_field_oreVeins(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "oreVeinsEnabled", "comp_482", "oreVeins", "f_158536_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#oreVeins
    static void set_field_oreVeins(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "oreVeinsEnabled", "comp_482", "oreVeins", "f_158536_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#usesLegacyRandom
    static jboolean get_field_usesLegacyRandom(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "useLegacyRandomSource", "comp_483", "usesLegacyRandom", "f_209354_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#usesLegacyRandom
    static void set_field_usesLegacyRandom(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "useLegacyRandomSource", "comp_483", "usesLegacyRandom", "f_209354_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#CODEC
    [[maybe_unused]] static jobject get_field_CODEC() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "DIRECT_CODEC", "field_24780", "CODEC", "f_64430_"), "Lcom/mojang/serialization/Codec;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#CODEC
    [[maybe_unused]] static void set_field_CODEC(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "DIRECT_CODEC", "field_24780", "CODEC", "f_64430_"), "Lcom/mojang/serialization/Codec;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#REGISTRY_CODEC
    [[maybe_unused]] static jobject get_field_REGISTRY_CODEC() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "CODEC", "field_24781", "REGISTRY_CODEC", "f_64431_"), "Lcom/mojang/serialization/Codec;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#REGISTRY_CODEC
    [[maybe_unused]] static void set_field_REGISTRY_CODEC(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "CODEC", "field_24781", "REGISTRY_CODEC", "f_64431_"), "Lcom/mojang/serialization/Codec;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#OVERWORLD
    [[maybe_unused]] static jobject get_field_OVERWORLD() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "OVERWORLD", "field_26355", "OVERWORLD", "f_64432_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#OVERWORLD
    [[maybe_unused]] static void set_field_OVERWORLD(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "OVERWORLD", "field_26355", "OVERWORLD", "f_64432_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#LARGE_BIOMES
    [[maybe_unused]] static jobject get_field_LARGE_BIOMES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "LARGE_BIOMES", "field_35051", "LARGE_BIOMES", "f_188869_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#LARGE_BIOMES
    [[maybe_unused]] static void set_field_LARGE_BIOMES(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "LARGE_BIOMES", "field_35051", "LARGE_BIOMES", "f_188869_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#AMPLIFIED
    [[maybe_unused]] static jobject get_field_AMPLIFIED() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "AMPLIFIED", "field_26356", "AMPLIFIED", "f_64433_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#AMPLIFIED
    [[maybe_unused]] static void set_field_AMPLIFIED(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "AMPLIFIED", "field_26356", "AMPLIFIED", "f_64433_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#NETHER
    [[maybe_unused]] static jobject get_field_NETHER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "NETHER", "field_26357", "NETHER", "f_64434_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#NETHER
    [[maybe_unused]] static void set_field_NETHER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "NETHER", "field_26357", "NETHER", "f_64434_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#END
    [[maybe_unused]] static jobject get_field_END() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "END", "field_26358", "END", "f_64435_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#END
    [[maybe_unused]] static void set_field_END(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "END", "field_26358", "END", "f_64435_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#CAVES
    [[maybe_unused]] static jobject get_field_CAVES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "CAVES", "field_26359", "CAVES", "f_64436_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#CAVES
    [[maybe_unused]] static void set_field_CAVES(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "CAVES", "field_26359", "CAVES", "f_64436_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#FLOATING_ISLANDS
    [[maybe_unused]] static jobject get_field_FLOATING_ISLANDS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "FLOATING_ISLANDS", "field_26360", "FLOATING_ISLANDS", "f_64437_"), "Lakq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.gen.chunk.ChunkGeneratorSettings#FLOATING_ISLANDS
    [[maybe_unused]] static void set_field_FLOATING_ISLANDS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "FLOATING_ISLANDS", "field_26360", "FLOATING_ISLANDS", "f_64437_"), "Lakq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID__mobGenerationDisabled() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "disableMobGeneration", "comp_480", "mobGenerationDisabled", "f_64445_"), "()Z");
    }

    static jboolean _mobGenerationDisabled(const jobject& obj) {
                
       const auto methodID = methodID__mobGenerationDisabled();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasAquifers() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "isAquifersEnabled", "method_33757", "hasAquifers", "m_158567_"), "()Z");
    }

    static jboolean hasAquifers(const jobject& obj) {
                
       const auto methodID = methodID_hasAquifers();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID__oreVeins() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "oreVeinsEnabled", "comp_482", "oreVeins", "m_209369_"), "()Z");
    }

    static jboolean _oreVeins(const jobject& obj) {
                
       const auto methodID = methodID__oreVeins();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getRandomProvider() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getRandomSource", "method_38999", "getRandomProvider", "m_188893_"), "()Ldzx$a;");
    }

    static jobject getRandomProvider(const jobject& obj) {
                
       const auto methodID = methodID_getRandomProvider();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_bootstrap() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "bootstrap", "method_31111", "bootstrap", "m_254959_"), "(Lqq;)V");
    }

    static void bootstrap(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_bootstrap();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_createEndSettings() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "end", "method_30642", "createEndSettings", "m_255186_"), "(Lqq;)Ldzd;");
    }

    static jobject createEndSettings(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_createEndSettings();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_createNetherSettings() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "nether", "method_30641", "createNetherSettings", "m_255410_"), "(Lqq;)Ldzd;");
    }

    static jobject createNetherSettings(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_createNetherSettings();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_createSurfaceSettings() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "overworld", "method_30643", "createSurfaceSettings", "m_255226_"), "(Lqq;ZZ)Ldzd;");
    }

    static jobject createSurfaceSettings(const jobject& arg0, const jboolean& arg1, const jboolean& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_createSurfaceSettings();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_createCavesSettings() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("d", "caves", "method_39901", "createCavesSettings", "m_255038_"), "(Lqq;)Ldzd;");
    }

    static jobject createCavesSettings(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_createCavesSettings();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_createFloatingIslandsSettings() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("e", "floatingIslands", "method_39902", "createFloatingIslandsSettings", "m_255230_"), "(Lqq;)Ldzd;");
    }

    static jobject createFloatingIslandsSettings(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_createFloatingIslandsSettings();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_createMissingSettings() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("e", "dummy", "method_44323", "createMissingSettings", "m_238396_"), "()Ldzd;");
    }

    static jobject createMissingSettings() {
       const auto clazz = self();
       const auto methodID = methodID_createMissingSettings();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID__generationShapeConfig() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "noiseSettings", "comp_474", "generationShapeConfig", "f_64439_"), "()Ldzg;");
    }

    static jobject _generationShapeConfig(const jobject& obj) {
                
       const auto methodID = methodID__generationShapeConfig();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__defaultBlock() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "defaultBlock", "comp_475", "defaultBlock", "f_64440_"), "()Ldtc;");
    }

    static jobject _defaultBlock(const jobject& obj) {
                
       const auto methodID = methodID__defaultBlock();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__defaultFluid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "defaultFluid", "comp_476", "defaultFluid", "f_64441_"), "()Ldtc;");
    }

    static jobject _defaultFluid(const jobject& obj) {
                
       const auto methodID = methodID__defaultFluid();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__noiseRouter() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "noiseRouter", "comp_477", "noiseRouter", "f_209353_"), "()Ldze;");
    }

    static jobject _noiseRouter(const jobject& obj) {
                
       const auto methodID = methodID__noiseRouter();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__surfaceRule() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "surfaceRule", "comp_478", "surfaceRule", "f_188871_"), "()Ldzp$o;");
    }

    static jobject _surfaceRule(const jobject& obj) {
                
       const auto methodID = methodID__surfaceRule();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__spawnTarget() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "spawnTarget", "comp_538", "spawnTarget", "f_224370_"), "()Ljava/util/List;");
    }

    static jobject _spawnTarget(const jobject& obj) {
                
       const auto methodID = methodID__spawnTarget();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__seaLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "seaLevel", "comp_479", "seaLevel", "f_64444_"), "()I");
    }

    static jint _seaLevel(const jobject& obj) {
                
       const auto methodID = methodID__seaLevel();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID__aquifers() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("m", "aquifersEnabled", "comp_481", "aquifers", "f_158533_"), "()Z");
    }

    static jboolean _aquifers(const jobject& obj) {
                
       const auto methodID = methodID__aquifers();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID__usesLegacyRandom() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("n", "useLegacyRandomSource", "comp_483", "usesLegacyRandom", "f_209354_"), "()Z");
    }

    static jboolean _usesLegacyRandom(const jobject& obj) {
                
       const auto methodID = methodID__usesLegacyRandom();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_WORLD_GEN_CHUNK_CHUNKGENERATORSETTINGS_HPP