// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_GEN_CHUNK_AQUIFERSAMPLER$IMPL_HPP
#define NET_MINECRAFT_WORLD_GEN_CHUNK_AQUIFERSAMPLER$IMPL_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.gen.chunk.AquiferSampler$Impl
 * Remapped: dyk$c
 */
namespace AquiferSampler$Impl {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dyk$c", "net/minecraft/world/level/levelgen/Aquifer$NoiseBasedAquifer", "net/minecraft/class_6350$class_5832", "net/minecraft/world/gen/chunk/AquiferSampler$Impl", "net/minecraft/src/C_141319_$C_141321_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#field_31451
    [[maybe_unused]] static jint get_field_field_31451() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "X_RANGE", "field_31451", "field_31451", "f_157985_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#field_31451
    [[maybe_unused]] static void set_field_field_31451(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "X_RANGE", "field_31451", "field_31451", "f_157985_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#field_31452
    [[maybe_unused]] static jint get_field_field_31452() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "Y_RANGE", "field_31452", "field_31452", "f_157986_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#field_31452
    [[maybe_unused]] static void set_field_field_31452(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "Y_RANGE", "field_31452", "field_31452", "f_157986_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#field_31453
    [[maybe_unused]] static jint get_field_field_31453() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "Z_RANGE", "field_31453", "field_31453", "f_157987_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#field_31453
    [[maybe_unused]] static void set_field_field_31453(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "Z_RANGE", "field_31453", "field_31453", "f_157987_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#field_31454
    [[maybe_unused]] static jint get_field_field_31454() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "X_SEPARATION", "field_31454", "field_31454", "f_157988_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#field_31454
    [[maybe_unused]] static void set_field_field_31454(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "X_SEPARATION", "field_31454", "field_31454", "f_157988_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#field_31455
    [[maybe_unused]] static jint get_field_field_31455() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "Y_SEPARATION", "field_31455", "field_31455", "f_157989_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#field_31455
    [[maybe_unused]] static void set_field_field_31455(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "Y_SEPARATION", "field_31455", "field_31455", "f_157989_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#field_31456
    [[maybe_unused]] static jint get_field_field_31456() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "Z_SEPARATION", "field_31456", "field_31456", "f_157990_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#field_31456
    [[maybe_unused]] static void set_field_field_31456(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "Z_SEPARATION", "field_31456", "field_31456", "f_157990_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#field_31457
    [[maybe_unused]] static jint get_field_field_31457() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "X_SPACING", "field_31457", "field_31457", "f_157991_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#field_31457
    [[maybe_unused]] static void set_field_field_31457(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "X_SPACING", "field_31457", "field_31457", "f_157991_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#field_31458
    [[maybe_unused]] static jint get_field_field_31458() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "Y_SPACING", "field_31458", "field_31458", "f_157992_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#field_31458
    [[maybe_unused]] static void set_field_field_31458(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "Y_SPACING", "field_31458", "field_31458", "f_157992_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#field_31459
    [[maybe_unused]] static jint get_field_field_31459() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "Z_SPACING", "field_31459", "field_31459", "f_157993_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#field_31459
    [[maybe_unused]] static void set_field_field_31459(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "Z_SPACING", "field_31459", "field_31459", "f_157993_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#field_36220
    [[maybe_unused]] static jint get_field_field_36220() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "MAX_REASONABLE_DISTANCE_TO_AQUIFER_CENTER", "field_36220", "field_36220", "f_196978_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#field_36220
    [[maybe_unused]] static void set_field_field_36220(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "MAX_REASONABLE_DISTANCE_TO_AQUIFER_CENTER", "field_36220", "field_36220", "f_196978_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#NEEDS_FLUID_TICK_DISTANCE_THRESHOLD
    [[maybe_unused]] static jdouble get_field_NEEDS_FLUID_TICK_DISTANCE_THRESHOLD() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "FLOWING_UPDATE_SIMULARITY", "field_36221", "NEEDS_FLUID_TICK_DISTANCE_THRESHOLD", "f_196979_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#NEEDS_FLUID_TICK_DISTANCE_THRESHOLD
    [[maybe_unused]] static void set_field_NEEDS_FLUID_TICK_DISTANCE_THRESHOLD(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "FLOWING_UPDATE_SIMULARITY", "field_36221", "NEEDS_FLUID_TICK_DISTANCE_THRESHOLD", "f_196979_"), "D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#chunkNoiseSampler
    static jobject get_field_chunkNoiseSampler(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "noiseChunk", "field_34578", "chunkNoiseSampler", "f_188407_"), "Ldzc;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#chunkNoiseSampler
    static void set_field_chunkNoiseSampler(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "noiseChunk", "field_34578", "chunkNoiseSampler", "f_188407_"), "Ldzc;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#barrierNoise
    static jobject get_field_barrierNoise(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "barrierNoise", "field_28813", "barrierNoise", "f_157994_"), "Ldyr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#barrierNoise
    static void set_field_barrierNoise(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "barrierNoise", "field_28813", "barrierNoise", "f_157994_"), "Ldyr;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#fluidLevelFloodednessNoise
    static jobject get_field_fluidLevelFloodednessNoise(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "fluidLevelFloodednessNoise", "field_35122", "fluidLevelFloodednessNoise", "f_188408_"), "Ldyr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#fluidLevelFloodednessNoise
    static void set_field_fluidLevelFloodednessNoise(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "fluidLevelFloodednessNoise", "field_35122", "fluidLevelFloodednessNoise", "f_188408_"), "Ldyr;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#fluidLevelSpreadNoise
    static jobject get_field_fluidLevelSpreadNoise(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "fluidLevelSpreadNoise", "field_35123", "fluidLevelSpreadNoise", "f_188409_"), "Ldyr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#fluidLevelSpreadNoise
    static void set_field_fluidLevelSpreadNoise(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "fluidLevelSpreadNoise", "field_35123", "fluidLevelSpreadNoise", "f_188409_"), "Ldyr;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#fluidTypeNoise
    static jobject get_field_fluidTypeNoise(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "lavaNoise", "field_33575", "fluidTypeNoise", "f_157996_"), "Ldyr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#fluidTypeNoise
    static void set_field_fluidTypeNoise(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "lavaNoise", "field_33575", "fluidTypeNoise", "f_157996_"), "Ldyr;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#randomDeriver
    static jobject get_field_randomDeriver(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "positionalRandomFactory", "field_34579", "randomDeriver", "f_188410_"), "Ldzl;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#randomDeriver
    static void set_field_randomDeriver(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "positionalRandomFactory", "field_34579", "randomDeriver", "f_188410_"), "Ldzl;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#waterLevels
    static jobject get_field_waterLevels(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "aquiferCache", "field_28816", "waterLevels", "f_157998_"), "[Ldyk$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#waterLevels
    static void set_field_waterLevels(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "aquiferCache", "field_28816", "waterLevels", "f_157998_"), "[Ldyk$b;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#blockPositions
    static jlong get_field_blockPositions(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "aquiferLocationCache", "field_28817", "blockPositions", "f_157999_"), "[J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#blockPositions
    static void set_field_blockPositions(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "aquiferLocationCache", "field_28817", "blockPositions", "f_157999_"), "[J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#fluidLevelSampler
    static jobject get_field_fluidLevelSampler(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "globalFluidPicker", "field_34580", "fluidLevelSampler", "f_188411_"), "Ldyk$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#fluidLevelSampler
    static void set_field_fluidLevelSampler(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "globalFluidPicker", "field_34580", "fluidLevelSampler", "f_188411_"), "Ldyk$a;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#erosionDensityFunction
    static jobject get_field_erosionDensityFunction(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "erosion", "field_38246", "erosionDensityFunction", "f_223888_"), "Ldyr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#erosionDensityFunction
    static void set_field_erosionDensityFunction(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "erosion", "field_38246", "erosionDensityFunction", "f_223888_"), "Ldyr;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#depthDensityFunction
    static jobject get_field_depthDensityFunction(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "depth", "field_38247", "depthDensityFunction", "f_223889_"), "Ldyr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#depthDensityFunction
    static void set_field_depthDensityFunction(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "depth", "field_38247", "depthDensityFunction", "f_223889_"), "Ldyr;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#needsFluidTick
    static jboolean get_field_needsFluidTick(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("w", "shouldScheduleFluidUpdate", "field_28820", "needsFluidTick", "f_158000_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#needsFluidTick
    static void set_field_needsFluidTick(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("w", "shouldScheduleFluidUpdate", "field_28820", "needsFluidTick", "f_158000_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#startX
    static jint get_field_startX(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("x", "minGridX", "field_28822", "startX", "f_158002_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#startX
    static void set_field_startX(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("x", "minGridX", "field_28822", "startX", "f_158002_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#startY
    static jint get_field_startY(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("y", "minGridY", "field_28823", "startY", "f_158003_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#startY
    static void set_field_startY(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("y", "minGridY", "field_28823", "startY", "f_158003_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#startZ
    static jint get_field_startZ(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("z", "minGridZ", "field_28824", "startZ", "f_158004_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#startZ
    static void set_field_startZ(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("z", "minGridZ", "field_28824", "startZ", "f_158004_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#sizeX
    static jint get_field_sizeX(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("A", "gridSizeX", "field_28825", "sizeX", "f_158005_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#sizeX
    static void set_field_sizeX(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("A", "gridSizeX", "field_28825", "sizeX", "f_158005_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#sizeZ
    static jint get_field_sizeZ(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("B", "gridSizeZ", "field_28826", "sizeZ", "f_158006_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#sizeZ
    static void set_field_sizeZ(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("B", "gridSizeZ", "field_28826", "sizeZ", "f_158006_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#CHUNK_POS_OFFSETS
    [[maybe_unused]] static jint get_field_CHUNK_POS_OFFSETS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("C", "SURFACE_SAMPLING_OFFSETS_IN_CHUNKS", "field_34581", "CHUNK_POS_OFFSETS", "f_188412_"), "[[I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.gen.chunk.AquiferSampler$Impl#CHUNK_POS_OFFSETS
    [[maybe_unused]] static void set_field_CHUNK_POS_OFFSETS(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("C", "SURFACE_SAMPLING_OFFSETS_IN_CHUNKS", "field_34581", "CHUNK_POS_OFFSETS", "f_188412_"), "[[I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    static jmethodID methodID_index() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getIndex", "method_33741", "index", "m_158027_"), "(III)I");
    }

    static jint index(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_index();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_apply() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "computeSubstance", "method_38317", "apply", "m_207104_"), "(Ldyr$b;D)Ldtc;");
    }

    static jobject apply(const jobject& obj, const jobject& arg0, const jdouble& arg1) {
                
       const auto methodID = methodID_apply();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__needsFluidTick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "shouldScheduleFluidUpdate", "method_33742", "needsFluidTick", "m_142203_"), "()Z");
    }

    static jboolean _needsFluidTick(const jobject& obj) {
                
       const auto methodID = methodID__needsFluidTick();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_maxDistance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "similarity", "method_33736", "maxDistance", "m_158024_"), "(II)D");
    }

    static jdouble maxDistance(const jint& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_maxDistance();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_calculateDensity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "calculatePressure", "method_33735", "calculateDensity", "m_208188_"), "(Ldyr$b;Lorg/apache/commons/lang3/mutable/MutableDouble;Ldyk$b;Ldyk$b;)D");
    }

    static jdouble calculateDensity(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_calculateDensity();
       return MinecraftSDK::env->CallDoubleMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_getLocalX() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "gridX", "method_33734", "getLocalX", "m_158039_"), "(I)I");
    }

    static jint getLocalX(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_getLocalX();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getLocalY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "gridY", "method_33740", "getLocalY", "m_158045_"), "(I)I");
    }

    static jint getLocalY(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_getLocalY();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getLocalZ() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "gridZ", "method_33743", "getLocalZ", "m_158047_"), "(I)I");
    }

    static jint getLocalZ(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_getLocalZ();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getWaterLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getAquiferStatus", "method_33738", "getWaterLevel", "m_188445_"), "(J)Ldyk$b;");
    }

    static jobject getWaterLevel(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_getWaterLevel();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getFluidLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "computeFluid", "method_40463", "getFluidLevel", "m_188447_"), "(III)Ldyk$b;");
    }

    static jobject getFluidLevel(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_getFluidLevel();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getFluidBlockY() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "computeSurfaceLevel", "method_42354", "getFluidBlockY", "m_223909_"), "(IIILdyk$b;IZ)I");
    }

    static jint getFluidBlockY(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2, const jobject& arg3, const jint& arg4, const jboolean& arg5) {
                
       const auto methodID = methodID_getFluidBlockY();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
    static jmethodID methodID_getNoiseBasedFluidLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "computeRandomizedFluidSurfaceLevel", "method_42352", "getNoiseBasedFluidLevel", "m_223898_"), "(IIII)I");
    }

    static jint getNoiseBasedFluidLevel(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2, const jint& arg3) {
                
       const auto methodID = methodID_getNoiseBasedFluidLevel();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_getFluidBlockState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "computeFluidType", "method_42353", "getFluidBlockState", "m_223903_"), "(IIILdyk$b;I)Ldtc;");
    }

    static jobject getFluidBlockState(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2, const jobject& arg3, const jint& arg4) {
                
       const auto methodID = methodID_getFluidBlockState();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
};

#endif // NET_MINECRAFT_WORLD_GEN_CHUNK_AQUIFERSAMPLER$IMPL_HPP