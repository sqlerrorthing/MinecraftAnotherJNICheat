// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_COLLISIONVIEW_HPP
#define NET_MINECRAFT_WORLD_COLLISIONVIEW_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.CollisionView
 * Remapped: dcg
 */
namespace CollisionView {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dcg", "net/minecraft/world/level/CollisionGetter", "net/minecraft/class_1941", "net/minecraft/world/CollisionView", "net/minecraft/src/C_1569_"));
        }
        return cachedClass;
    };

    static jmethodID methodID_getWorldBorder() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("C_", "getWorldBorder", "method_8621", "getWorldBorder", "m_6857_"), "()Ldut;");
    }

    static jobject getWorldBorder(const jobject& obj) {
                
       const auto methodID = methodID_getWorldBorder();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getChunkAsView() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getChunkForCollisions", "method_22338", "getChunkAsView", "m_7925_"), "(II)Ldcc;");
    }

    static jobject getChunkAsView(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_getChunkAsView();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_doesNotIntersectEntities() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isUnobstructed", "method_8611", "doesNotIntersectEntities", "m_5450_"), "(Lbsr;Lexv;)Z");
    }

    static jboolean doesNotIntersectEntities(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_doesNotIntersectEntities();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_canPlace() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isUnobstructed", "method_8628", "canPlace", "m_45752_"), "(Ldtc;Ljd;Lexh;)Z");
    }

    static jboolean canPlace(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_canPlace();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__doesNotIntersectEntities() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "isUnobstructed", "method_8606", "doesNotIntersectEntities", "m_45784_"), "(Lbsr;)Z");
    }

    static jboolean _doesNotIntersectEntities(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__doesNotIntersectEntities();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isSpaceEmpty() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "noCollision", "method_18026", "isSpaceEmpty", "m_45772_"), "(Lewx;)Z");
    }

    static jboolean isSpaceEmpty(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isSpaceEmpty();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__isSpaceEmpty() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "noCollision", "method_17892", "isSpaceEmpty", "m_45786_"), "(Lbsr;)Z");
    }

    static jboolean _isSpaceEmpty(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__isSpaceEmpty();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID___isSpaceEmpty() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "noCollision", "method_8587", "isSpaceEmpty", "m_45756_"), "(Lbsr;Lewx;)Z");
    }

    static jboolean __isSpaceEmpty(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID___isSpaceEmpty();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isBlockSpaceEmpty() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "noBlockCollision", "method_52569", "isBlockSpaceEmpty", "m_295029_"), "(Lbsr;Lewx;)Z");
    }

    static jboolean isBlockSpaceEmpty(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_isBlockSpaceEmpty();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getEntityCollisions() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getEntityCollisions", "method_20743", "getEntityCollisions", "m_183134_"), "(Lbsr;Lewx;)Ljava/util/List;");
    }

    static jobject getEntityCollisions(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_getEntityCollisions();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getCollisions() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getCollisions", "method_8600", "getCollisions", "m_186431_"), "(Lbsr;Lewx;)Ljava/lang/Iterable;");
    }

    static jobject getCollisions(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_getCollisions();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getBlockCollisions() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "getBlockCollisions", "method_20812", "getBlockCollisions", "m_186434_"), "(Lbsr;Lewx;)Ljava/lang/Iterable;");
    }

    static jobject getBlockCollisions(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_getBlockCollisions();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getWorldBorderCollisions() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "borderCollision", "method_39455", "getWorldBorderCollisions", "m_186440_"), "(Lbsr;Lewx;)Lexv;");
    }

    static jobject getWorldBorderCollisions(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_getWorldBorderCollisions();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_canCollide() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "collidesWithSuffocatingBlock", "method_39454", "canCollide", "m_186437_"), "(Lbsr;Lewx;)Z");
    }

    static jboolean canCollide(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_canCollide();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_findSupportingBlockPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "findSupportingBlock", "method_51718", "findSupportingBlockPos", "m_285750_"), "(Lbsr;Lewx;)Ljava/util/Optional;");
    }

    static jobject findSupportingBlockPos(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_findSupportingBlockPos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_findClosestCollision() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "findFreePosition", "method_33594", "findClosestCollision", "m_151418_"), "(Lbsr;Lexv;Lexc;DDD)Ljava/util/Optional;");
    }

    static jobject findClosestCollision(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jdouble& arg3, const jdouble& arg4, const jdouble& arg5) {
                
       const auto methodID = methodID_findClosestCollision();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
};

#endif // NET_MINECRAFT_WORLD_COLLISIONVIEW_HPP