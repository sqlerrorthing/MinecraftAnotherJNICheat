// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_FEATUREUPDATER_HPP
#define NET_MINECRAFT_WORLD_FEATUREUPDATER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.FeatureUpdater
 * Remapped: ejm
 */
namespace FeatureUpdater {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("ejm", "net/minecraft/world/level/levelgen/structure/LegacyStructureDataHandler", "net/minecraft/class_3360", "net/minecraft/world/FeatureUpdater", "net/minecraft/src/C_2495_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.world.FeatureUpdater#OLD_TO_NEW
    [[maybe_unused]] static jobject get_field_OLD_TO_NEW() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CURRENT_TO_LEGACY_MAP", "field_14435", "OLD_TO_NEW", "f_71299_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.FeatureUpdater#OLD_TO_NEW
    [[maybe_unused]] static void set_field_OLD_TO_NEW(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CURRENT_TO_LEGACY_MAP", "field_14435", "OLD_TO_NEW", "f_71299_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.FeatureUpdater#ANCIENT_TO_OLD
    [[maybe_unused]] static jobject get_field_ANCIENT_TO_OLD() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "LEGACY_TO_CURRENT_MAP", "field_14436", "ANCIENT_TO_OLD", "f_71300_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.FeatureUpdater#ANCIENT_TO_OLD
    [[maybe_unused]] static void set_field_ANCIENT_TO_OLD(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "LEGACY_TO_CURRENT_MAP", "field_14436", "ANCIENT_TO_OLD", "f_71300_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.world.FeatureUpdater#NEW_STRUCTURE_NAMES
    [[maybe_unused]] static jobject get_field_NEW_STRUCTURE_NAMES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "OLD_STRUCTURE_REGISTRY_KEYS", "field_37194", "NEW_STRUCTURE_NAMES", "f_209874_"), "Ljava/util/Set;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.world.FeatureUpdater#NEW_STRUCTURE_NAMES
    [[maybe_unused]] static void set_field_NEW_STRUCTURE_NAMES(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "OLD_STRUCTURE_REGISTRY_KEYS", "field_37194", "NEW_STRUCTURE_NAMES", "f_209874_"), "Ljava/util/Set;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.world.FeatureUpdater#needsUpdate
    static jboolean get_field_needsUpdate(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "hasLegacyData", "field_14434", "needsUpdate", "f_71301_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.FeatureUpdater#needsUpdate
    static void set_field_needsUpdate(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "hasLegacyData", "field_14434", "needsUpdate", "f_71301_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.FeatureUpdater#featureIdToChunkNbt
    static jobject get_field_featureIdToChunkNbt(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "dataMap", "field_14432", "featureIdToChunkNbt", "f_71302_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.FeatureUpdater#featureIdToChunkNbt
    static void set_field_featureIdToChunkNbt(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "dataMap", "field_14432", "featureIdToChunkNbt", "f_71302_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.FeatureUpdater#updateStates
    static jobject get_field_updateStates(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "indexMap", "field_14433", "updateStates", "f_71303_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.FeatureUpdater#updateStates
    static void set_field_updateStates(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "indexMap", "field_14433", "updateStates", "f_71303_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.FeatureUpdater#oldNames
    static jobject get_field_oldNames(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "legacyKeys", "field_17658", "oldNames", "f_71304_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.FeatureUpdater#oldNames
    static void set_field_oldNames(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "legacyKeys", "field_17658", "oldNames", "f_71304_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.world.FeatureUpdater#newNames
    static jobject get_field_newNames(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "currentKeys", "field_17659", "newNames", "f_71305_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.world.FeatureUpdater#newNames
    static void set_field_newNames(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "currentKeys", "field_17659", "newNames", "f_71305_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_markResolved() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "removeIndex", "method_14744", "markResolved", "m_71318_"), "(J)V");
    }

    static void markResolved(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_markResolved();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getUpdatedReferences() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateFromLegacy", "method_14735", "getUpdatedReferences", "m_71326_"), "(Lub;)Lub;");
    }

    static jobject getUpdatedReferences(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getUpdatedReferences();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__needsUpdate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "hasLegacyStart", "method_14738", "needsUpdate", "m_71314_"), "(IILjava/lang/String;)Z");
    }

    static jboolean _needsUpdate(const jobject& obj, const jint& arg0, const jint& arg1, const jobject& arg2) {
                
       const auto methodID = methodID__needsUpdate();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID___needsUpdate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isUnhandledStructureStart", "method_14737", "needsUpdate", "m_71311_"), "(II)Z");
    }

    static jboolean __needsUpdate(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID___needsUpdate();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getUpdatedStarts() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateStructureStart", "method_14741", "getUpdatedStarts", "m_71328_"), "(Lub;Ldcd;)Lub;");
    }

    static jobject getUpdatedStarts(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_getUpdatedStarts();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_init() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "populateCaches", "method_14734", "init", "m_71320_"), "(Leqz;)V");
    }

    static void init(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_init();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_create() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getLegacyStructureHandler", "method_14745", "create", "m_71331_"), "(Lakq;Leqz;)Lejm;");
    }

    static jobject create(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_create();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_WORLD_FEATUREUPDATER_HPP