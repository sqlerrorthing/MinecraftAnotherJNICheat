// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_WORLD_REDSTONEVIEW_HPP
#define NET_MINECRAFT_WORLD_REDSTONEVIEW_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.world.RedstoneView
 * Remapped: ddm
 */
namespace RedstoneView {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("ddm", "net/minecraft/world/level/SignalGetter", "net/minecraft/class_8235", "net/minecraft/world/RedstoneView", "net/minecraft/src/C_276415_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.world.RedstoneView#DIRECTIONS
    [[maybe_unused]] static jobject get_field_DIRECTIONS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("C", "DIRECTIONS", "field_43226", "DIRECTIONS", "f_276432_"), "[Lji;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.world.RedstoneView#DIRECTIONS
    [[maybe_unused]] static void set_field_DIRECTIONS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("C", "DIRECTIONS", "field_43226", "DIRECTIONS", "f_276432_"), "[Lji;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_getStrongRedstonePower() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getDirectSignal", "method_49805", "getStrongRedstonePower", "m_277075_"), "(Ljd;Lji;)I");
    }

    static jint getStrongRedstonePower(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_getStrongRedstonePower();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getReceivedStrongRedstonePower() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e_", "getDirectSignalTo", "method_49809", "getReceivedStrongRedstonePower", "m_277173_"), "(Ljd;)I");
    }

    static jint getReceivedStrongRedstonePower(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getReceivedStrongRedstonePower();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getEmittedRedstonePower() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getControlInputSignal", "method_49806", "getEmittedRedstonePower", "m_277094_"), "(Ljd;Lji;Z)I");
    }

    static jint getEmittedRedstonePower(const jobject& obj, const jobject& arg0, const jobject& arg1, const jboolean& arg2) {
                
       const auto methodID = methodID_getEmittedRedstonePower();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_isEmittingRedstonePower() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "hasSignal", "method_49807", "isEmittingRedstonePower", "m_276987_"), "(Ljd;Lji;)Z");
    }

    static jboolean isEmittingRedstonePower(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_isEmittingRedstonePower();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__getEmittedRedstonePower() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getSignal", "method_49808", "getEmittedRedstonePower", "m_277185_"), "(Ljd;Lji;)I");
    }

    static jint _getEmittedRedstonePower(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID__getEmittedRedstonePower();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isReceivingRedstonePower() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("C", "hasNeighborSignal", "method_49803", "isReceivingRedstonePower", "m_276867_"), "(Ljd;)Z");
    }

    static jboolean isReceivingRedstonePower(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isReceivingRedstonePower();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getReceivedRedstonePower() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("D", "getBestNeighborSignal", "method_49804", "getReceivedRedstonePower", "m_277086_"), "(Ljd;)I");
    }

    static jint getReceivedRedstonePower(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getReceivedRedstonePower();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_WORLD_REDSTONEVIEW_HPP