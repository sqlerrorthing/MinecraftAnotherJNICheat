// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ADVANCEMENT_CRITERION_INVENTORYCHANGEDCRITERION$CONDITIONS$SLOTS_HPP
#define NET_MINECRAFT_ADVANCEMENT_CRITERION_INVENTORYCHANGEDCRITERION$CONDITIONS$SLOTS_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.advancement.criterion.InventoryChangedCriterion$Conditions$Slots
 * Remapped: cg$a$a
 */
namespace InventoryChangedCriterion$Conditions$Slots {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("cg$a$a", "net/minecraft/advancements/critereon/InventoryChangeTrigger$TriggerInstance$Slots", "net/minecraft/class_2066$class_2068$class_8948", "net/minecraft/advancement/criterion/InventoryChangedCriterion$Conditions$Slots", "net/minecraft/src/C_1418_$C_1419_$C_302044_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.advancement.criterion.InventoryChangedCriterion$Conditions$Slots#occupied
    static jobject get_field_occupied(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "occupied", "comp_2059", "occupied", "f_302306_"), "Ldh$d;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.advancement.criterion.InventoryChangedCriterion$Conditions$Slots#occupied
    static void set_field_occupied(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "occupied", "comp_2059", "occupied", "f_302306_"), "Ldh$d;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.advancement.criterion.InventoryChangedCriterion$Conditions$Slots#full
    static jobject get_field_full(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "full", "comp_2060", "full", "f_303437_"), "Ldh$d;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.advancement.criterion.InventoryChangedCriterion$Conditions$Slots#full
    static void set_field_full(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "full", "comp_2060", "full", "f_303437_"), "Ldh$d;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.advancement.criterion.InventoryChangedCriterion$Conditions$Slots#empty
    static jobject get_field_empty(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "empty", "comp_2061", "empty", "f_302651_"), "Ldh$d;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.advancement.criterion.InventoryChangedCriterion$Conditions$Slots#empty
    static void set_field_empty(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "empty", "comp_2061", "empty", "f_302651_"), "Ldh$d;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for static public field net.minecraft.advancement.criterion.InventoryChangedCriterion$Conditions$Slots#CODEC
    [[maybe_unused]] static jobject get_field_CODEC() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CODEC", "field_47264", "CODEC", "f_302974_"), "Lcom/mojang/serialization/Codec;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.advancement.criterion.InventoryChangedCriterion$Conditions$Slots#CODEC
    [[maybe_unused]] static void set_field_CODEC(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "CODEC", "field_47264", "CODEC", "f_302974_"), "Lcom/mojang/serialization/Codec;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.advancement.criterion.InventoryChangedCriterion$Conditions$Slots#ANY
    [[maybe_unused]] static jobject get_field_ANY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ANY", "field_47265", "ANY", "f_303621_"), "Lcg$a$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.advancement.criterion.InventoryChangedCriterion$Conditions$Slots#ANY
    [[maybe_unused]] static void set_field_ANY(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ANY", "field_47265", "ANY", "f_303621_"), "Lcg$a$a;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_test() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "matches", "method_54998", "test", "m_307365_"), "(III)Z");
    }

    static jboolean test(const jobject& obj, const jint& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_test();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__occupied() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "occupied", "comp_2059", "occupied", "f_302306_"), "()Ldh$d;");
    }

    static jobject _occupied(const jobject& obj) {
                
       const auto methodID = methodID__occupied();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__full() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "full", "comp_2060", "full", "f_303437_"), "()Ldh$d;");
    }

    static jobject _full(const jobject& obj) {
                
       const auto methodID = methodID__full();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__empty() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "empty", "comp_2061", "empty", "f_302651_"), "()Ldh$d;");
    }

    static jobject _empty(const jobject& obj) {
                
       const auto methodID = methodID__empty();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_ADVANCEMENT_CRITERION_INVENTORYCHANGEDCRITERION$CONDITIONS$SLOTS_HPP