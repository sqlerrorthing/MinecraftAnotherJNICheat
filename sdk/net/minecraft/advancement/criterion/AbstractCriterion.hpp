// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_ADVANCEMENT_CRITERION_ABSTRACTCRITERION_HPP
#define NET_MINECRAFT_ADVANCEMENT_CRITERION_ABSTRACTCRITERION_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.advancement.criterion.AbstractCriterion
 * Remapped: dv
 */
namespace AbstractCriterion {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("dv", "net/minecraft/advancements/critereon/SimpleCriterionTrigger", "net/minecraft/class_4558", "net/minecraft/advancement/criterion/AbstractCriterion", "net/minecraft/src/C_2265_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.advancement.criterion.AbstractCriterion#progressions
    static jobject get_field_progressions(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "players", "field_20735", "progressions", "f_66232_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.advancement.criterion.AbstractCriterion#progressions
    static void set_field_progressions(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "players", "field_20735", "progressions", "f_66232_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_beginTrackingCondition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addPlayerListener", "method_792", "beginTrackingCondition", "m_6467_"), "(Lakz;Laq$a;)V");
    }

    static void beginTrackingCondition(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_beginTrackingCondition();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_endTrackingCondition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "removePlayerListener", "method_793", "endTrackingCondition", "m_6468_"), "(Lakz;Laq$a;)V");
    }

    static void endTrackingCondition(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_endTrackingCondition();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_endTracking() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "removePlayerListeners", "method_791", "endTracking", "m_5656_"), "(Lakz;)V");
    }

    static void endTracking(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_endTracking();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_trigger() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "trigger", "method_22510", "trigger", "m_66234_"), "(Laqv;Ljava/util/function/Predicate;)V");
    }

    static void trigger(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_trigger();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_ADVANCEMENT_CRITERION_ABSTRACTCRITERION_HPP