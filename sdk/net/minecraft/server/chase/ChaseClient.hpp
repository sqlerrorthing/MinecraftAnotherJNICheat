// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SERVER_CHASE_CHASECLIENT_HPP
#define NET_MINECRAFT_SERVER_CHASE_CHASECLIENT_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.server.chase.ChaseClient
 * Remapped: alv
 */
namespace ChaseClient {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("alv", "net/minecraft/server/chase/ChaseClient", "net/minecraft/class_6630", "net/minecraft/server/chase/ChaseClient", "net/minecraft/src/C_183128_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.server.chase.ChaseClient#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_34983", "LOGGER", "f_195980_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.chase.ChaseClient#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_34983", "LOGGER", "f_195980_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.chase.ChaseClient#CONNECTION_RETRY_INTERVAL
    [[maybe_unused]] static jint get_field_CONNECTION_RETRY_INTERVAL() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "RECONNECT_INTERVAL_SECONDS", "field_34984", "CONNECTION_RETRY_INTERVAL", "f_195981_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.chase.ChaseClient#CONNECTION_RETRY_INTERVAL
    [[maybe_unused]] static void set_field_CONNECTION_RETRY_INTERVAL(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "RECONNECT_INTERVAL_SECONDS", "field_34984", "CONNECTION_RETRY_INTERVAL", "f_195981_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.server.chase.ChaseClient#ip
    static jobject get_field_ip(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "serverHost", "field_34985", "ip", "f_195982_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.chase.ChaseClient#ip
    static void set_field_ip(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "serverHost", "field_34985", "ip", "f_195982_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.chase.ChaseClient#port
    static jint get_field_port(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "serverPort", "field_34986", "port", "f_195983_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.chase.ChaseClient#port
    static void set_field_port(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "serverPort", "field_34986", "port", "f_195983_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.chase.ChaseClient#minecraftServer
    static jobject get_field_minecraftServer(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "server", "field_34987", "minecraftServer", "f_195984_"), "Lnet/minecraft/server/MinecraftServer;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.chase.ChaseClient#minecraftServer
    static void set_field_minecraftServer(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "server", "field_34987", "minecraftServer", "f_195984_"), "Lnet/minecraft/server/MinecraftServer;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.chase.ChaseClient#running
    static jboolean get_field_running(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "wantsToRun", "field_34988", "running", "f_195985_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.chase.ChaseClient#running
    static void set_field_running(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "wantsToRun", "field_34988", "running", "f_195985_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.chase.ChaseClient#socket
    static jobject get_field_socket(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "socket", "field_34989", "socket", "f_195986_"), "Ljava/net/Socket;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.chase.ChaseClient#socket
    static void set_field_socket(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "socket", "field_34989", "socket", "f_195986_"), "Ljava/net/Socket;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.chase.ChaseClient#thread
    static jobject get_field_thread(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "thread", "field_34990", "thread", "f_195987_"), "Ljava/lang/Thread;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.chase.ChaseClient#thread
    static void set_field_thread(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "thread", "field_34990", "thread", "f_195987_"), "Ljava/lang/Thread;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_start() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "start", "method_38755", "start", "m_195993_"), "()V");
    }

    static void start(const jobject& obj) {
                
       const auto methodID = methodID_start();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_stop() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "stop", "method_38759", "stop", "m_196000_"), "()V");
    }

    static void stop(const jobject& obj) {
                
       const auto methodID = methodID_stop();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_run() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "run", "method_38762", "run", "m_196005_"), "()V");
    }

    static void run(const jobject& obj) {
                
       const auto methodID = methodID_run();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_parseMessage() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleMessage", "method_38756", "parseMessage", "m_195994_"), "(Ljava/lang/String;)V");
    }

    static void parseMessage(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_parseMessage();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_executeTeleportCommand() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleTeleport", "method_38757", "executeTeleportCommand", "m_195996_"), "(Ljava/util/Scanner;)V");
    }

    static void executeTeleportCommand(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_executeTeleportCommand();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getTeleportPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "parseTarget", "method_38761", "getTeleportPos", "m_196003_"), "(Ljava/util/Scanner;)Ljava/util/Optional;");
    }

    static jobject getTeleportPos(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getTeleportPos();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_executeCommand() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "executeCommand", "method_38760", "executeCommand", "m_196001_"), "(Ljava/lang/String;)V");
    }

    static void executeCommand(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_executeCommand();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_SERVER_CHASE_CHASECLIENT_HPP