// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SERVER_NETWORK_CHUNKFILTER_HPP
#define NET_MINECRAFT_SERVER_NETWORK_CHUNKFILTER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.server.network.ChunkFilter
 * Remapped: aqg
 */
namespace ChunkFilter {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("aqg", "net/minecraft/server/level/ChunkTrackingView", "net/minecraft/class_8603", "net/minecraft/server/network/ChunkFilter", "net/minecraft/src/C_290036_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.server.network.ChunkFilter#IGNORE_ALL
    [[maybe_unused]] static jobject get_field_IGNORE_ALL() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "EMPTY", "field_44986", "IGNORE_ALL", "f_290823_"), "Laqg;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.server.network.ChunkFilter#IGNORE_ALL
    [[maybe_unused]] static void set_field_IGNORE_ALL(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "EMPTY", "field_44986", "IGNORE_ALL", "f_290823_"), "Laqg;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_cylindrical() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "of", "method_52362", "cylindrical", "m_294585_"), "(Ldcd;I)Laqg;");
    }

    static jobject cylindrical(const jobject& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_cylindrical();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_forEachChangedChunk() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "difference", "method_52360", "forEachChangedChunk", "m_293383_"), "(Laqg;Laqg;Ljava/util/function/Consumer;Ljava/util/function/Consumer;)V");
    }

    static void forEachChangedChunk(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_forEachChangedChunk();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_isWithinDistance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "contains", "method_52361", "isWithinDistance", "m_293959_"), "(Ldcd;)Z");
    }

    static jboolean isWithinDistance(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isWithinDistance();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__isWithinDistance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "contains", "method_52356", "isWithinDistance", "m_294219_"), "(II)Z");
    }

    static jboolean _isWithinDistance(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID__isWithinDistance();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID___isWithinDistance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "contains", "method_52359", "isWithinDistance", "m_293955_"), "(IIZ)Z");
    }

    static jboolean __isWithinDistance(const jobject& obj, const jint& arg0, const jint& arg1, const jboolean& arg2) {
                
       const auto methodID = methodID___isWithinDistance();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_forEach() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "forEach", "method_52363", "forEach", "m_292843_"), "(Ljava/util/function/Consumer;)V");
    }

    static void forEach(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_forEach();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isWithinDistanceExcludingEdge() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "isInViewDistance", "method_52364", "isWithinDistanceExcludingEdge", "m_292815_"), "(II)Z");
    }

    static jboolean isWithinDistanceExcludingEdge(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_isWithinDistanceExcludingEdge();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__isWithinDistanceExcludingEdge() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "isInViewDistance", "method_52357", "isWithinDistanceExcludingEdge", "m_294571_"), "(IIIII)Z");
    }

    static jboolean _isWithinDistanceExcludingEdge(const jint& arg0, const jint& arg1, const jint& arg2, const jint& arg3, const jint& arg4) {
       const auto clazz = self();
       const auto methodID = methodID__isWithinDistanceExcludingEdge();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID____isWithinDistance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "isWithinDistance", "method_52358", "isWithinDistance", "m_294896_"), "(IIIIIZ)Z");
    }

    static jboolean ___isWithinDistance(const jint& arg0, const jint& arg1, const jint& arg2, const jint& arg3, const jint& arg4, const jboolean& arg5) {
       const auto clazz = self();
       const auto methodID = methodID____isWithinDistance();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
};

#endif // NET_MINECRAFT_SERVER_NETWORK_CHUNKFILTER_HPP