// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SERVER_NETWORK_SERVERLOGINNETWORKHANDLER_HPP
#define NET_MINECRAFT_SERVER_NETWORK_SERVERLOGINNETWORKHANDLER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.server.network.ServerLoginNetworkHandler
 * Remapped: arw
 */
namespace ServerLoginNetworkHandler {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("arw", "net/minecraft/server/network/ServerLoginPacketListenerImpl", "net/minecraft/class_3248", "net/minecraft/server/network/ServerLoginNetworkHandler", "net/minecraft/src/C_37_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.server.network.ServerLoginNetworkHandler#NEXT_AUTHENTICATOR_THREAD_ID
    [[maybe_unused]] static jobject get_field_NEXT_AUTHENTICATOR_THREAD_ID() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "UNIQUE_THREAD_ID", "field_14157", "NEXT_AUTHENTICATOR_THREAD_ID", "f_10014_"), "Ljava/util/concurrent/atomic/AtomicInteger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerLoginNetworkHandler#NEXT_AUTHENTICATOR_THREAD_ID
    [[maybe_unused]] static void set_field_NEXT_AUTHENTICATOR_THREAD_ID(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "UNIQUE_THREAD_ID", "field_14157", "NEXT_AUTHENTICATOR_THREAD_ID", "f_10014_"), "Ljava/util/concurrent/atomic/AtomicInteger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.server.network.ServerLoginNetworkHandler#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "LOGGER", "field_14166", "LOGGER", "f_10015_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.server.network.ServerLoginNetworkHandler#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "LOGGER", "field_14166", "LOGGER", "f_10015_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.network.ServerLoginNetworkHandler#TIMEOUT_TICKS
    [[maybe_unused]] static jint get_field_TIMEOUT_TICKS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "MAX_TICKS_BEFORE_LOGIN", "field_29779", "TIMEOUT_TICKS", "f_143698_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerLoginNetworkHandler#TIMEOUT_TICKS
    [[maybe_unused]] static void set_field_TIMEOUT_TICKS(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "MAX_TICKS_BEFORE_LOGIN", "field_29779", "TIMEOUT_TICKS", "f_143698_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerLoginNetworkHandler#nonce
    static jbyte get_field_nonce(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "challenge", "field_14167", "nonce", "f_252396_"), "[B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetByteField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerLoginNetworkHandler#nonce
    static void set_field_nonce(const jobject &obj, const jbyte &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "challenge", "field_14167", "nonce", "f_252396_"), "[B");
        return MinecraftSDK::env->SetByteField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.server.network.ServerLoginNetworkHandler#server
    static jobject get_field_server(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "server", "field_14162", "server", "f_10018_"), "Lnet/minecraft/server/MinecraftServer;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.server.network.ServerLoginNetworkHandler#server
    static void set_field_server(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "server", "field_14162", "server", "f_10018_"), "Lnet/minecraft/server/MinecraftServer;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.server.network.ServerLoginNetworkHandler#connection
    static jobject get_field_connection(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "connection", "field_14158", "connection", "f_10013_"), "Lvt;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.server.network.ServerLoginNetworkHandler#connection
    static void set_field_connection(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "connection", "field_14158", "connection", "f_10013_"), "Lvt;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerLoginNetworkHandler#state
    static jobject get_field_state(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "state", "field_14163", "state", "f_10019_"), "Larw$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerLoginNetworkHandler#state
    static void set_field_state(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "state", "field_14163", "state", "f_10019_"), "Larw$a;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerLoginNetworkHandler#loginTicks
    static jint get_field_loginTicks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "tick", "field_14156", "loginTicks", "f_10020_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerLoginNetworkHandler#loginTicks
    static void set_field_loginTicks(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "tick", "field_14156", "loginTicks", "f_10020_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.server.network.ServerLoginNetworkHandler#profileName
    static jobject get_field_profileName(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "requestedUsername", "field_45028", "profileName", "f_291165_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.server.network.ServerLoginNetworkHandler#profileName
    static void set_field_profileName(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "requestedUsername", "field_45028", "profileName", "f_291165_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerLoginNetworkHandler#profile
    static jobject get_field_profile(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "authenticatedProfile", "field_45029", "profile", "f_291112_"), "Lcom/mojang/authlib/GameProfile;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerLoginNetworkHandler#profile
    static void set_field_profile(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "authenticatedProfile", "field_45029", "profile", "f_291112_"), "Lcom/mojang/authlib/GameProfile;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerLoginNetworkHandler#serverId
    static jobject get_field_serverId(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "serverId", "field_14165", "serverId", "f_10022_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerLoginNetworkHandler#serverId
    static void set_field_serverId(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "serverId", "field_14165", "serverId", "f_10022_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerLoginNetworkHandler#transferred
    static jboolean get_field_transferred(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "transferred", "field_48275", "transferred", "f_316429_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerLoginNetworkHandler#transferred
    static void set_field_transferred(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "transferred", "field_48275", "transferred", "f_316429_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    static jmethodID methodID_tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "tick", "method_18784", "tick", "m_9933_"), "()V");
    }

    static void tick(const jobject& obj) {
                
       const auto methodID = methodID_tick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_isConnectionOpen() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "isAcceptingMessages", "method_48106", "isConnectionOpen", "m_6198_"), "()Z");
    }

    static jboolean isConnectionOpen(const jobject& obj) {
                
       const auto methodID = methodID_isConnectionOpen();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_disconnect() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "disconnect", "method_14380", "disconnect", "m_10053_"), "(Lwz;)V");
    }

    static void disconnect(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_disconnect();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_hasPlayerWithId() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isPlayerAlreadyInWorld", "method_52416", "hasPlayerWithId", "m_294137_"), "(Lcom/mojang/authlib/GameProfile;)Z");
    }

    static jboolean hasPlayerWithId(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_hasPlayerWithId();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onDisconnected() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onDisconnect", "method_10839", "onDisconnected", "m_7026_"), "(Lvv;)V");
    }

    static void onDisconnected(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onDisconnected();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getConnectionInfo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "getUserName", "method_14383", "getConnectionInfo", "m_10056_"), "()Ljava/lang/String;");
    }

    static jobject getConnectionInfo(const jobject& obj) {
                
       const auto methodID = methodID_getConnectionInfo();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_onHello() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleHello", "method_12641", "onHello", "m_5990_"), "(Laiy;)V");
    }

    static void onHello(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onHello();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_startVerify() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "startClientVerification", "method_52417", "startVerify", "m_294008_"), "(Lcom/mojang/authlib/GameProfile;)V");
    }

    static void startVerify(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_startVerify();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_tickVerify() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "verifyLoginAndFinishConnectionSetup", "method_52419", "tickVerify", "m_294778_"), "(Lcom/mojang/authlib/GameProfile;)V");
    }

    static void tickVerify(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_tickVerify();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_sendSuccessPacket() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "finishLoginAndWaitForClient", "method_52420", "sendSuccessPacket", "m_293203_"), "(Lcom/mojang/authlib/GameProfile;)V");
    }

    static void sendSuccessPacket(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_sendSuccessPacket();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onKey() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleKey", "method_12642", "onKey", "m_8072_"), "(Laiz;)V");
    }

    static void onKey(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onKey();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onQueryResponse() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleCustomQueryPacket", "method_12640", "onQueryResponse", "m_10044_"), "(Laix;)V");
    }

    static void onQueryResponse(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onQueryResponse();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onEnterConfiguration() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleLoginAcknowledgement", "method_52289", "onEnterConfiguration", "m_7223_"), "(Laja;)V");
    }

    static void onEnterConfiguration(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onEnterConfiguration();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_addCustomCrashReportInfo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "fillListenerSpecificCrashDetails", "method_55597", "addCustomCrashReportInfo", "m_306579_"), "(Lo;Lp;)V");
    }

    static void addCustomCrashReportInfo(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_addCustomCrashReportInfo();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_onCookieResponse() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleCookieResponse", "method_55851", "onCookieResponse", "m_320234_"), "(Labs;)V");
    }

    static void onCookieResponse(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onCookieResponse();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_SERVER_NETWORK_SERVERLOGINNETWORKHANDLER_HPP