// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SERVER_NETWORK_SERVERPLAYNETWORKHANDLER_HPP
#define NET_MINECRAFT_SERVER_NETWORK_SERVERPLAYNETWORKHANDLER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.server.network.ServerPlayNetworkHandler
 * Remapped: aru
 */
namespace ServerPlayNetworkHandler {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("aru", "net/minecraft/server/network/ServerGamePacketListenerImpl", "net/minecraft/class_3244", "net/minecraft/server/network/ServerPlayNetworkHandler", "net/minecraft/src/C_31_"));
        }
        return cachedClass;
    };

    // getter for static default field net.minecraft.server.network.ServerPlayNetworkHandler#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "LOGGER", "field_14121", "LOGGER", "f_9744_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.server.network.ServerPlayNetworkHandler#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "LOGGER", "field_14121", "LOGGER", "f_9744_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#DEFAULT_SEQUENCE
    [[maybe_unused]] static jint get_field_DEFAULT_SEQUENCE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "NO_BLOCK_UPDATES_TO_ACK", "field_37281", "DEFAULT_SEQUENCE", "f_215199_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#DEFAULT_SEQUENCE
    [[maybe_unused]] static void set_field_DEFAULT_SEQUENCE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "NO_BLOCK_UPDATES_TO_ACK", "field_37281", "DEFAULT_SEQUENCE", "f_215199_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#MAX_PENDING_ACKNOWLEDGMENTS
    [[maybe_unused]] static jint get_field_MAX_PENDING_ACKNOWLEDGMENTS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "TRACKED_MESSAGE_DISCONNECT_THRESHOLD", "field_39989", "MAX_PENDING_ACKNOWLEDGMENTS", "f_244471_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#MAX_PENDING_ACKNOWLEDGMENTS
    [[maybe_unused]] static void set_field_MAX_PENDING_ACKNOWLEDGMENTS(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "TRACKED_MESSAGE_DISCONNECT_THRESHOLD", "field_39989", "MAX_PENDING_ACKNOWLEDGMENTS", "f_244471_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#field_49027
    [[maybe_unused]] static jint get_field_field_49027() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "MAXIMUM_FLYING_TICKS", "field_49027", "field_49027", "f_316978_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#field_49027
    [[maybe_unused]] static void set_field_field_49027(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "MAXIMUM_FLYING_TICKS", "field_49027", "field_49027", "f_316978_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#CHAT_VALIDATION_FAILED_TEXT
    [[maybe_unused]] static jobject get_field_CHAT_VALIDATION_FAILED_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "CHAT_VALIDATION_FAILED", "field_39990", "CHAT_VALIDATION_FAILED_TEXT", "f_244304_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#CHAT_VALIDATION_FAILED_TEXT
    [[maybe_unused]] static void set_field_CHAT_VALIDATION_FAILED_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "CHAT_VALIDATION_FAILED", "field_39990", "CHAT_VALIDATION_FAILED_TEXT", "f_244304_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#INVALID_COMMAND_SIGNATURE_TEXT
    [[maybe_unused]] static jobject get_field_INVALID_COMMAND_SIGNATURE_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "INVALID_COMMAND_SIGNATURE", "field_50089", "INVALID_COMMAND_SIGNATURE_TEXT", "f_316918_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#INVALID_COMMAND_SIGNATURE_TEXT
    [[maybe_unused]] static void set_field_INVALID_COMMAND_SIGNATURE_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "INVALID_COMMAND_SIGNATURE", "field_50089", "INVALID_COMMAND_SIGNATURE_TEXT", "f_316918_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#field_49778
    [[maybe_unused]] static jint get_field_field_49778() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "MAX_COMMAND_SUGGESTIONS", "field_49778", "field_49778", "f_316627_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#field_49778
    [[maybe_unused]] static void set_field_field_49778(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "MAX_COMMAND_SUGGESTIONS", "field_49778", "field_49778", "f_316627_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for public field net.minecraft.server.network.ServerPlayNetworkHandler#player
    static jobject get_field_player(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "player", "field_14140", "player", "f_9743_"), "Laqv;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static public field net.minecraft.server.network.ServerPlayNetworkHandler#player
    static void set_field_player(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "player", "field_14140", "player", "f_9743_"), "Laqv;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.server.network.ServerPlayNetworkHandler#chunkDataSender
    static jobject get_field_chunkDataSender(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "chunkSender", "field_45026", "chunkDataSender", "f_290664_"), "Larq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static public field net.minecraft.server.network.ServerPlayNetworkHandler#chunkDataSender
    static void set_field_chunkDataSender(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "chunkSender", "field_45026", "chunkDataSender", "f_290664_"), "Larq;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerPlayNetworkHandler#ticks
    static jint get_field_ticks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "tickCount", "field_14118", "ticks", "f_9746_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#ticks
    static void set_field_ticks(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "tickCount", "field_14118", "ticks", "f_9746_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerPlayNetworkHandler#sequence
    static jint get_field_sequence(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "ackBlockChangesUpTo", "field_37282", "sequence", "f_215200_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#sequence
    static void set_field_sequence(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "ackBlockChangesUpTo", "field_37282", "sequence", "f_215200_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerPlayNetworkHandler#messageCooldown
    static jint get_field_messageCooldown(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "chatSpamTickCount", "field_14116", "messageCooldown", "f_9750_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#messageCooldown
    static void set_field_messageCooldown(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "chatSpamTickCount", "field_14116", "messageCooldown", "f_9750_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerPlayNetworkHandler#creativeItemDropThreshold
    static jint get_field_creativeItemDropThreshold(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "dropSpamTickCount", "field_14133", "creativeItemDropThreshold", "f_9751_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#creativeItemDropThreshold
    static void set_field_creativeItemDropThreshold(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "dropSpamTickCount", "field_14133", "creativeItemDropThreshold", "f_9751_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerPlayNetworkHandler#lastTickX
    static jdouble get_field_lastTickX(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "firstGoodX", "field_14130", "lastTickX", "f_9753_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#lastTickX
    static void set_field_lastTickX(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "firstGoodX", "field_14130", "lastTickX", "f_9753_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerPlayNetworkHandler#lastTickY
    static jdouble get_field_lastTickY(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "firstGoodY", "field_14146", "lastTickY", "f_9754_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#lastTickY
    static void set_field_lastTickY(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "firstGoodY", "field_14146", "lastTickY", "f_9754_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerPlayNetworkHandler#lastTickZ
    static jdouble get_field_lastTickZ(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "firstGoodZ", "field_14128", "lastTickZ", "f_9755_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#lastTickZ
    static void set_field_lastTickZ(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "firstGoodZ", "field_14128", "lastTickZ", "f_9755_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerPlayNetworkHandler#updatedX
    static jdouble get_field_updatedX(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "lastGoodX", "field_14145", "updatedX", "f_9756_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#updatedX
    static void set_field_updatedX(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "lastGoodX", "field_14145", "updatedX", "f_9756_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerPlayNetworkHandler#updatedY
    static jdouble get_field_updatedY(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("w", "lastGoodY", "field_14126", "updatedY", "f_9757_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#updatedY
    static void set_field_updatedY(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("w", "lastGoodY", "field_14126", "updatedY", "f_9757_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerPlayNetworkHandler#updatedZ
    static jdouble get_field_updatedZ(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("x", "lastGoodZ", "field_14144", "updatedZ", "f_9758_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#updatedZ
    static void set_field_updatedZ(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("x", "lastGoodZ", "field_14144", "updatedZ", "f_9758_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerPlayNetworkHandler#topmostRiddenEntity
    static jobject get_field_topmostRiddenEntity(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("y", "lastVehicle", "field_14147", "topmostRiddenEntity", "f_9759_"), "Lbsr;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#topmostRiddenEntity
    static void set_field_topmostRiddenEntity(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("y", "lastVehicle", "field_14147", "topmostRiddenEntity", "f_9759_"), "Lbsr;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerPlayNetworkHandler#lastTickRiddenX
    static jdouble get_field_lastTickRiddenX(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("z", "vehicleFirstGoodX", "field_14143", "lastTickRiddenX", "f_9760_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#lastTickRiddenX
    static void set_field_lastTickRiddenX(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("z", "vehicleFirstGoodX", "field_14143", "lastTickRiddenX", "f_9760_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerPlayNetworkHandler#lastTickRiddenY
    static jdouble get_field_lastTickRiddenY(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("A", "vehicleFirstGoodY", "field_14124", "lastTickRiddenY", "f_9761_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#lastTickRiddenY
    static void set_field_lastTickRiddenY(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("A", "vehicleFirstGoodY", "field_14124", "lastTickRiddenY", "f_9761_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerPlayNetworkHandler#lastTickRiddenZ
    static jdouble get_field_lastTickRiddenZ(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("B", "vehicleFirstGoodZ", "field_14142", "lastTickRiddenZ", "f_9762_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#lastTickRiddenZ
    static void set_field_lastTickRiddenZ(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("B", "vehicleFirstGoodZ", "field_14142", "lastTickRiddenZ", "f_9762_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerPlayNetworkHandler#updatedRiddenX
    static jdouble get_field_updatedRiddenX(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("C", "vehicleLastGoodX", "field_14122", "updatedRiddenX", "f_9763_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#updatedRiddenX
    static void set_field_updatedRiddenX(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("C", "vehicleLastGoodX", "field_14122", "updatedRiddenX", "f_9763_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerPlayNetworkHandler#updatedRiddenY
    static jdouble get_field_updatedRiddenY(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("D", "vehicleLastGoodY", "field_14141", "updatedRiddenY", "f_9764_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#updatedRiddenY
    static void set_field_updatedRiddenY(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("D", "vehicleLastGoodY", "field_14141", "updatedRiddenY", "f_9764_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerPlayNetworkHandler#updatedRiddenZ
    static jdouble get_field_updatedRiddenZ(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("E", "vehicleLastGoodZ", "field_14120", "updatedRiddenZ", "f_9765_"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetDoubleField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#updatedRiddenZ
    static void set_field_updatedRiddenZ(const jobject &obj, const jdouble &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("E", "vehicleLastGoodZ", "field_14120", "updatedRiddenZ", "f_9765_"), "D");
        return MinecraftSDK::env->SetDoubleField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerPlayNetworkHandler#requestedTeleportPos
    static jobject get_field_requestedTeleportPos(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("F", "awaitingPositionFromClient", "field_14119", "requestedTeleportPos", "f_9766_"), "Lexc;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#requestedTeleportPos
    static void set_field_requestedTeleportPos(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("F", "awaitingPositionFromClient", "field_14119", "requestedTeleportPos", "f_9766_"), "Lexc;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerPlayNetworkHandler#requestedTeleportId
    static jint get_field_requestedTeleportId(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("G", "awaitingTeleport", "field_14123", "requestedTeleportId", "f_9767_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#requestedTeleportId
    static void set_field_requestedTeleportId(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("G", "awaitingTeleport", "field_14123", "requestedTeleportId", "f_9767_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerPlayNetworkHandler#prevTeleportCheckTicks
    static jint get_field_prevTeleportCheckTicks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("H", "awaitingTeleportTime", "field_14139", "prevTeleportCheckTicks", "f_9735_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#prevTeleportCheckTicks
    static void set_field_prevTeleportCheckTicks(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("H", "awaitingTeleportTime", "field_14139", "prevTeleportCheckTicks", "f_9735_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerPlayNetworkHandler#floating
    static jboolean get_field_floating(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("I", "clientIsFloating", "field_14131", "floating", "f_9736_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#floating
    static void set_field_floating(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("I", "clientIsFloating", "field_14131", "floating", "f_9736_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerPlayNetworkHandler#floatingTicks
    static jint get_field_floatingTicks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("J", "aboveGroundTickCount", "field_14138", "floatingTicks", "f_9737_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#floatingTicks
    static void set_field_floatingTicks(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("J", "aboveGroundTickCount", "field_14138", "floatingTicks", "f_9737_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerPlayNetworkHandler#vehicleFloating
    static jboolean get_field_vehicleFloating(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("K", "clientVehicleIsFloating", "field_14129", "vehicleFloating", "f_9738_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#vehicleFloating
    static void set_field_vehicleFloating(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("K", "clientVehicleIsFloating", "field_14129", "vehicleFloating", "f_9738_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerPlayNetworkHandler#vehicleFloatingTicks
    static jint get_field_vehicleFloatingTicks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("L", "aboveGroundVehicleTickCount", "field_14137", "vehicleFloatingTicks", "f_9739_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#vehicleFloatingTicks
    static void set_field_vehicleFloatingTicks(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("L", "aboveGroundVehicleTickCount", "field_14137", "vehicleFloatingTicks", "f_9739_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerPlayNetworkHandler#movePacketsCount
    static jint get_field_movePacketsCount(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("M", "receivedMovePacketCount", "field_14117", "movePacketsCount", "f_9740_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#movePacketsCount
    static void set_field_movePacketsCount(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("M", "receivedMovePacketCount", "field_14117", "movePacketsCount", "f_9740_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerPlayNetworkHandler#lastTickMovePacketsCount
    static jint get_field_lastTickMovePacketsCount(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("N", "knownMovePacketCount", "field_14135", "lastTickMovePacketsCount", "f_9741_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#lastTickMovePacketsCount
    static void set_field_lastTickMovePacketsCount(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("N", "knownMovePacketCount", "field_14135", "lastTickMovePacketsCount", "f_9741_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerPlayNetworkHandler#session
    static jobject get_field_session(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("O", "chatSession", "field_40720", "session", "f_252494_"), "Lxq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#session
    static void set_field_session(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("O", "chatSession", "field_40720", "session", "f_252494_"), "Lxq;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerPlayNetworkHandler#messageUnpacker
    static jobject get_field_messageUnpacker(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("P", "signedMessageDecoder", "field_39805", "messageUnpacker", "f_240889_"), "Lxt$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#messageUnpacker
    static void set_field_messageUnpacker(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("P", "signedMessageDecoder", "field_39805", "messageUnpacker", "f_240889_"), "Lxt$b;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerPlayNetworkHandler#acknowledgmentValidator
    static jobject get_field_acknowledgmentValidator(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("Q", "lastSeenMessages", "field_39825", "acknowledgmentValidator", "f_244262_"), "Lxi;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#acknowledgmentValidator
    static void set_field_acknowledgmentValidator(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("Q", "lastSeenMessages", "field_39825", "acknowledgmentValidator", "f_244262_"), "Lxi;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerPlayNetworkHandler#signatureStorage
    static jobject get_field_signatureStorage(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("R", "messageSignatureCache", "field_39987", "signatureStorage", "f_243718_"), "Lxm;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#signatureStorage
    static void set_field_signatureStorage(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("R", "messageSignatureCache", "field_39987", "signatureStorage", "f_243718_"), "Lxm;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerPlayNetworkHandler#messageChainTaskQueue
    static jobject get_field_messageChainTaskQueue(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("S", "chatMessageChain", "field_39826", "messageChainTaskQueue", "f_241681_"), "Layc;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#messageChainTaskQueue
    static void set_field_messageChainTaskQueue(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("S", "chatMessageChain", "field_39826", "messageChainTaskQueue", "f_241681_"), "Layc;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ServerPlayNetworkHandler#requestedReconfiguration
    static jboolean get_field_requestedReconfiguration(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("T", "waitingForSwitchToConfig", "field_45025", "requestedReconfiguration", "f_290343_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ServerPlayNetworkHandler#requestedReconfiguration
    static void set_field_requestedReconfiguration(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("T", "waitingForSwitchToConfig", "field_45025", "requestedReconfiguration", "f_290343_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    static jmethodID methodID_tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "tick", "method_18784", "tick", "m_9933_"), "()V");
    }

    static void tick(const jobject& obj) {
                
       const auto methodID = methodID_tick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getMaxAllowedFloatingTicks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getMaximumFlyingTicks", "method_56922", "getMaxAllowedFloatingTicks", "m_321269_"), "(Lbsr;)I");
    }

    static jint getMaxAllowedFloatingTicks(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getMaxAllowedFloatingTicks();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_syncWithPlayerPosition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "resetPosition", "method_14372", "syncWithPlayerPosition", "m_9953_"), "()V");
    }

    static void syncWithPlayerPosition(const jobject& obj) {
                
       const auto methodID = methodID_syncWithPlayerPosition();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_isConnectionOpen() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "isAcceptingMessages", "method_48106", "isConnectionOpen", "m_6198_"), "()Z");
    }

    static jboolean isConnectionOpen(const jobject& obj) {
                
       const auto methodID = methodID_isConnectionOpen();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_accepts() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "shouldHandleMessage", "method_52413", "accepts", "m_294638_"), "(Lzg;)Z");
    }

    static jboolean accepts(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_accepts();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getProfile() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "playerProfile", "method_52403", "getProfile", "m_293343_"), "()Lcom/mojang/authlib/GameProfile;");
    }

    static jobject getProfile(const jobject& obj) {
                
       const auto methodID = methodID_getProfile();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_filterText() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "filterTextPacket", "method_31275", "filterText", "m_243080_"), "(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject filterText(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_filterText();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__filterText() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "filterTextPacket", "method_31277", "filterText", "m_243132_"), "(Ljava/lang/String;)Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject _filterText(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__filterText();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_filterTexts() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "filterTextPacket", "method_31279", "filterTexts", "m_243065_"), "(Ljava/util/List;)Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject filterTexts(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_filterTexts();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onPlayerInput() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handlePlayerInput", "method_12067", "onPlayerInput", "m_5918_"), "(Laho;)V");
    }

    static void onPlayerInput(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onPlayerInput();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isMovementInvalid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "containsInvalidValues", "method_14371", "isMovementInvalid", "m_143663_"), "(DDDFF)Z");
    }

    static jboolean isMovementInvalid(const jdouble& arg0, const jdouble& arg1, const jdouble& arg2, const jfloat& arg3, const jfloat& arg4) {
       const auto clazz = self();
       const auto methodID = methodID_isMovementInvalid();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_clampHorizontal() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "clampHorizontal", "method_34882", "clampHorizontal", "m_143609_"), "(D)D");
    }

    static jdouble clampHorizontal(const jdouble& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_clampHorizontal();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_clampVertical() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "clampVertical", "method_34883", "clampVertical", "m_143653_"), "(D)D");
    }

    static jdouble clampVertical(const jdouble& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_clampVertical();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_onVehicleMove() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleMoveVehicle", "method_12078", "onVehicleMove", "m_5659_"), "(Lahh;)V");
    }

    static void onVehicleMove(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onVehicleMove();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isEntityOnAir() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "noBlocksAround", "method_29780", "isEntityOnAir", "m_9793_"), "(Lbsr;)Z");
    }

    static jboolean isEntityOnAir(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isEntityOnAir();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onTeleportConfirm() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleAcceptTeleportPacket", "method_12050", "onTeleportConfirm", "m_7376_"), "(Lagk;)V");
    }

    static void onTeleportConfirm(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onTeleportConfirm();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onRecipeBookData() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleRecipeBookSeenRecipePacket", "method_12047", "onRecipeBookData", "m_7411_"), "(Lahq;)V");
    }

    static void onRecipeBookData(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onRecipeBookData();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onRecipeCategoryOptions() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleRecipeBookChangeSettingsPacket", "method_30303", "onRecipeCategoryOptions", "m_7982_"), "(Lahp;)V");
    }

    static void onRecipeCategoryOptions(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onRecipeCategoryOptions();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onAdvancementTab() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleSeenAdvancements", "method_12058", "onAdvancementTab", "m_6947_"), "(Lahs;)V");
    }

    static void onAdvancementTab(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onAdvancementTab();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onRequestCommandCompletions() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleCustomCommandSuggestions", "method_12059", "onRequestCommandCompletions", "m_7741_"), "(Lagu;)V");
    }

    static void onRequestCommandCompletions(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onRequestCommandCompletions();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onUpdateCommandBlock() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleSetCommandBlock", "method_12077", "onUpdateCommandBlock", "m_7192_"), "(Lahw;)V");
    }

    static void onUpdateCommandBlock(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onUpdateCommandBlock();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onUpdateCommandBlockMinecart() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleSetCommandMinecart", "method_12049", "onUpdateCommandBlockMinecart", "m_6629_"), "(Lahx;)V");
    }

    static void onUpdateCommandBlockMinecart(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onUpdateCommandBlockMinecart();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onPickFromInventory() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handlePickItem", "method_12084", "onPickFromInventory", "m_7965_"), "(Lahj;)V");
    }

    static void onPickFromInventory(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onPickFromInventory();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onRenameItem() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleRenameItem", "method_12060", "onRenameItem", "m_5591_"), "(Lahr;)V");
    }

    static void onRenameItem(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onRenameItem();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onUpdateBeacon() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleSetBeaconPacket", "method_12057", "onUpdateBeacon", "m_5712_"), "(Lahu;)V");
    }

    static void onUpdateBeacon(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onUpdateBeacon();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onUpdateStructureBlock() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleSetStructureBlock", "method_12051", "onUpdateStructureBlock", "m_7424_"), "(Laia;)V");
    }

    static void onUpdateStructureBlock(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onUpdateStructureBlock();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onUpdateJigsaw() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleSetJigsawBlock", "method_16383", "onUpdateJigsaw", "m_8019_"), "(Lahz;)V");
    }

    static void onUpdateJigsaw(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onUpdateJigsaw();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onJigsawGenerating() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleJigsawGenerate", "method_27273", "onJigsawGenerating", "m_6449_"), "(Lahe;)V");
    }

    static void onJigsawGenerating(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onJigsawGenerating();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onSelectMerchantTrade() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleSelectTrade", "method_12080", "onSelectMerchantTrade", "m_6321_"), "(Laht;)V");
    }

    static void onSelectMerchantTrade(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onSelectMerchantTrade();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onBookUpdate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleEditBook", "method_12053", "onBookUpdate", "m_6829_"), "(Lahb;)V");
    }

    static void onBookUpdate(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onBookUpdate();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_updateBookContent() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateBookContents", "method_31278", "updateBookContent", "m_9812_"), "(Ljava/util/List;I)V");
    }

    static void updateBookContent(const jobject& obj, const jobject& arg0, const jint& arg1) {
                
       const auto methodID = methodID_updateBookContent();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_addBook() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "signBook", "method_31276", "addBook", "m_215208_"), "(Larm;Ljava/util/List;I)V");
    }

    static void addBook(const jobject& obj, const jobject& arg0, const jobject& arg1, const jint& arg2) {
                
       const auto methodID = methodID_addBook();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_toRawFilteredPair() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "filterableFromOutgoing", "method_57142", "toRawFilteredPair", "m_324924_"), "(Larm;)Larl;");
    }

    static jobject toRawFilteredPair(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_toRawFilteredPair();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onQueryEntityNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleEntityTagQuery", "method_12074", "onQueryEntityNbt", "m_7548_"), "(Lahc;)V");
    }

    static void onQueryEntityNbt(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onQueryEntityNbt();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onSlotChangedState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleContainerSlotStateChanged", "method_54436", "onSlotChangedState", "m_305984_"), "(Lagz;)V");
    }

    static void onSlotChangedState(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onSlotChangedState();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onQueryBlockNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleBlockEntityTagQuery", "method_12072", "onQueryBlockNbt", "m_6780_"), "(Lagl;)V");
    }

    static void onQueryBlockNbt(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onQueryBlockNbt();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onPlayerMove() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleMovePlayer", "method_12063", "onPlayerMove", "m_7185_"), "(Lahg;)V");
    }

    static void onPlayerMove(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onPlayerMove();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_handlePendingTeleport() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("p", "updateAwaitingTeleport", "method_60947", "handlePendingTeleport", "m_339152_"), "()Z");
    }

    static jboolean handlePendingTeleport(const jobject& obj) {
                
       const auto methodID = methodID_handlePendingTeleport();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isPlayerNotCollidingWithBlocks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isPlayerCollidingWithAnythingNew", "method_20630", "isPlayerNotCollidingWithBlocks", "m_288208_"), "(Ldcz;Lewx;DDD)Z");
    }

    static jboolean isPlayerNotCollidingWithBlocks(const jobject& obj, const jobject& arg0, const jobject& arg1, const jdouble& arg2, const jdouble& arg3, const jdouble& arg4) {
                
       const auto methodID = methodID_isPlayerNotCollidingWithBlocks();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_requestTeleport() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "teleport", "method_14363", "requestTeleport", "m_9774_"), "(DDDFF)V");
    }

    static void requestTeleport(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2, const jfloat& arg3, const jfloat& arg4) {
                
       const auto methodID = methodID_requestTeleport();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID__requestTeleport() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "teleport", "method_14360", "requestTeleport", "m_9780_"), "(DDDFFLjava/util/Set;)V");
    }

    static void _requestTeleport(const jobject& obj, const jdouble& arg0, const jdouble& arg1, const jdouble& arg2, const jfloat& arg3, const jfloat& arg4, const jobject& arg5) {
                
       const auto methodID = methodID__requestTeleport();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
    static jmethodID methodID_onPlayerAction() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handlePlayerAction", "method_12066", "onPlayerAction", "m_7502_"), "(Lahm;)V");
    }

    static void onPlayerAction(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onPlayerAction();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_canPlace() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "wasBlockPlacementAttempt", "method_27913", "canPlace", "m_9790_"), "(Laqv;Lcuq;)Z");
    }

    static jboolean canPlace(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_canPlace();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_onPlayerInteractBlock() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleUseItemOn", "method_12046", "onPlayerInteractBlock", "m_6371_"), "(Laie;)V");
    }

    static void onPlayerInteractBlock(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onPlayerInteractBlock();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onPlayerInteractItem() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleUseItem", "method_12065", "onPlayerInteractItem", "m_5760_"), "(Laif;)V");
    }

    static void onPlayerInteractItem(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onPlayerInteractItem();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onSpectatorTeleport() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleTeleportToEntityPacket", "method_12073", "onSpectatorTeleport", "m_6936_"), "(Laid;)V");
    }

    static void onSpectatorTeleport(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onSpectatorTeleport();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onBoatPaddleState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handlePaddleBoat", "method_12064", "onBoatPaddleState", "m_5938_"), "(Lahi;)V");
    }

    static void onBoatPaddleState(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onBoatPaddleState();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onDisconnected() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onDisconnect", "method_10839", "onDisconnected", "m_7026_"), "(Lvv;)V");
    }

    static void onDisconnected(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onDisconnected();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_cleanUp() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("q", "removePlayerFromWorld", "method_52415", "cleanUp", "m_294538_"), "()V");
    }

    static void cleanUp(const jobject& obj) {
                
       const auto methodID = methodID_cleanUp();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_updateSequence() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "ackBlockChangesUpTo", "method_41255", "updateSequence", "m_215201_"), "(I)V");
    }

    static void updateSequence(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_updateSequence();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onUpdateSelectedSlot() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleSetCarriedItem", "method_12056", "onUpdateSelectedSlot", "m_7798_"), "(Lahv;)V");
    }

    static void onUpdateSelectedSlot(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onUpdateSelectedSlot();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onChatMessage() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleChat", "method_12048", "onChatMessage", "m_7388_"), "(Lagq;)V");
    }

    static void onChatMessage(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onChatMessage();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onCommandExecution() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleChatCommand", "method_43667", "onCommandExecution", "m_214047_"), "(Lago;)V");
    }

    static void onCommandExecution(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onCommandExecution();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_executeCommand() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "performUnsignedChatCommand", "method_58590", "executeCommand", "m_321556_"), "(Ljava/lang/String;)V");
    }

    static void executeCommand(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_executeCommand();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onChatCommandSigned() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleSignedChatCommand", "method_58580", "onChatCommandSigned", "m_321262_"), "(Lagp;)V");
    }

    static void onChatCommandSigned(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onChatCommandSigned();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_handleCommandExecution() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "performSignedChatCommand", "method_45010", "handleCommandExecution", "m_246958_"), "(Lagp;Lxg;)V");
    }

    static void handleCommandExecution(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_handleCommandExecution();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_handleMessageChainException() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleMessageDecodeFailure", "method_45171", "handleMessageChainException", "m_246889_"), "(Lxt$a;)V");
    }

    static void handleMessageChainException(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_handleMessageChainException();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_collectArgumentMessages() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "collectSignedArguments", "method_45006", "collectArgumentMessages", "m_246206_"), "(Lagp;Lxr;Lxg;)Ljava/util/Map;");
    }

    static jobject collectArgumentMessages(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_collectArgumentMessages();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_toUnsignedSignatures() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "collectUnsignedArguments", "method_58591", "toUnsignedSignatures", "m_320840_"), "(Ljava/util/List;)Ljava/util/Map;");
    }

    static jobject toUnsignedSignatures(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_toUnsignedSignatures();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_createInvalidCommandSignatureException() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "createSignedArgumentMismatchException", "method_58589", "createInvalidCommandSignatureException", "m_319080_"), "(Ljava/lang/String;Ljava/util/List;Ljava/util/List;)Lxt$a;");
    }

    static jobject createInvalidCommandSignatureException(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_createInvalidCommandSignatureException();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_parse() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "parseCommand", "method_45003", "parse", "m_242658_"), "(Ljava/lang/String;)Lcom/mojang/brigadier/ParseResults;");
    }

    static jobject parse(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_parse();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_validateMessage() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "tryHandleChat", "method_44337", "validateMessage", "m_247189_"), "(Ljava/lang/String;Ljava/lang/Runnable;)V");
    }

    static void validateMessage(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_validateMessage();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_validateAcknowledgment() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "unpackAndApplyLastSeen", "method_45169", "validateAcknowledgment", "m_245578_"), "(Lxg$b;)Ljava/util/Optional;");
    }

    static jobject validateAcknowledgment(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_validateAcknowledgment();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_hasIllegalCharacter() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("d", "isChatMessageIllegal", "method_43508", "hasIllegalCharacter", "m_215214_"), "(Ljava/lang/String;)Z");
    }

    static jboolean hasIllegalCharacter(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_hasIllegalCharacter();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getSignedMessage() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getSignedMessage", "method_45011", "getSignedMessage", "m_247340_"), "(Lagq;Lxg;)Lxp;");
    }

    static jobject getSignedMessage(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_getSignedMessage();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_handleDecoratedMessage() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "broadcastChatMessage", "method_44155", "handleDecoratedMessage", "m_243086_"), "(Lxp;)V");
    }

    static void handleDecoratedMessage(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_handleDecoratedMessage();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_checkForSpam() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("r", "detectRateSpam", "method_43669", "checkForSpam", "m_215251_"), "()V");
    }

    static void checkForSpam(const jobject& obj) {
                
       const auto methodID = methodID_checkForSpam();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_onMessageAcknowledgment() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleChatAck", "method_44898", "onMessageAcknowledgment", "m_241885_"), "(Lagn;)V");
    }

    static void onMessageAcknowledgment(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onMessageAcknowledgment();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onHandSwing() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleAnimate", "method_12052", "onHandSwing", "m_7953_"), "(Laic;)V");
    }

    static void onHandSwing(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onHandSwing();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onClientCommand() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handlePlayerCommand", "method_12045", "onClientCommand", "m_5681_"), "(Lahn;)V");
    }

    static void onClientCommand(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onClientCommand();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_addPendingAcknowledgment() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addPendingMessage", "method_44897", "addPendingAcknowledgment", "m_241992_"), "(Lxp;)V");
    }

    static void addPendingAcknowledgment(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addPendingAcknowledgment();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_sendChatMessage() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "sendPlayerChatMessage", "method_45170", "sendChatMessage", "m_245431_"), "(Lxp;Lwv$a;)V");
    }

    static void sendChatMessage(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_sendChatMessage();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_sendProfilelessChatMessage() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "sendDisguisedChatMessage", "method_45168", "sendProfilelessChatMessage", "m_245903_"), "(Lwz;Lwv$a;)V");
    }

    static void sendProfilelessChatMessage(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_sendProfilelessChatMessage();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getConnectionAddress() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("m", "getRemoteAddress", "method_48107", "getConnectionAddress", "m_264262_"), "()Ljava/net/SocketAddress;");
    }

    static jobject getConnectionAddress(const jobject& obj) {
                
       const auto methodID = methodID_getConnectionAddress();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_reconfigure() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("n", "switchToConfig", "method_52414", "reconfigure", "m_294315_"), "()V");
    }

    static void reconfigure(const jobject& obj) {
                
       const auto methodID = methodID_reconfigure();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_onQueryPing() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handlePingRequest", "method_12697", "onQueryPing", "m_10092_"), "(Lajm;)V");
    }

    static void onQueryPing(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onQueryPing();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onPlayerInteractEntity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleInteract", "method_12062", "onPlayerInteractEntity", "m_6946_"), "(Lahd;)V");
    }

    static void onPlayerInteractEntity(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onPlayerInteractEntity();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onClientStatus() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleClientCommand", "method_12068", "onClientStatus", "m_6272_"), "(Lagt;)V");
    }

    static void onClientStatus(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onClientStatus();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onCloseHandledScreen() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleContainerClose", "method_12054", "onCloseHandledScreen", "m_7951_"), "(Lagy;)V");
    }

    static void onCloseHandledScreen(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onCloseHandledScreen();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onClickSlot() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleContainerClick", "method_12076", "onClickSlot", "m_5914_"), "(Lagx;)V");
    }

    static void onClickSlot(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onClickSlot();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onCraftRequest() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handlePlaceRecipe", "method_12061", "onCraftRequest", "m_7191_"), "(Lahk;)V");
    }

    static void onCraftRequest(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onCraftRequest();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onButtonClick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleContainerButtonClick", "method_12055", "onButtonClick", "m_6557_"), "(Lagw;)V");
    }

    static void onButtonClick(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onButtonClick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onCreativeInventoryAction() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleSetCreativeModeSlot", "method_12070", "onCreativeInventoryAction", "m_5964_"), "(Lahy;)V");
    }

    static void onCreativeInventoryAction(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onCreativeInventoryAction();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onUpdateSign() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleSignUpdate", "method_12071", "onUpdateSign", "m_5527_"), "(Laib;)V");
    }

    static void onUpdateSign(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onUpdateSign();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onSignUpdate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateSignText", "method_31282", "onSignUpdate", "m_9922_"), "(Laib;Ljava/util/List;)V");
    }

    static void onSignUpdate(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_onSignUpdate();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_onUpdatePlayerAbilities() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handlePlayerAbilities", "method_12083", "onUpdatePlayerAbilities", "m_6828_"), "(Lahl;)V");
    }

    static void onUpdatePlayerAbilities(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onUpdatePlayerAbilities();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onClientOptions() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleClientInformation", "method_12069", "onClientOptions", "m_9844_"), "(Laaa;)V");
    }

    static void onClientOptions(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onClientOptions();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onUpdateDifficulty() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleChangeDifficulty", "method_19475", "onUpdateDifficulty", "m_7477_"), "(Lagm;)V");
    }

    static void onUpdateDifficulty(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onUpdateDifficulty();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onUpdateDifficultyLock() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleLockDifficulty", "method_19476", "onUpdateDifficultyLock", "m_7728_"), "(Lahf;)V");
    }

    static void onUpdateDifficultyLock(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onUpdateDifficultyLock();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onPlayerSession() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleChatSessionUpdate", "method_46367", "onPlayerSession", "m_252797_"), "(Lagr;)V");
    }

    static void onPlayerSession(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onPlayerSession();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onAcknowledgeReconfiguration() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleConfigurationAcknowledged", "method_52279", "onAcknowledgeReconfiguration", "m_294045_"), "(Lagv;)V");
    }

    static void onAcknowledgeReconfiguration(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onAcknowledgeReconfiguration();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onAcknowledgeChunks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleChunkBatchReceived", "method_52278", "onAcknowledgeChunks", "m_292755_"), "(Lags;)V");
    }

    static void onAcknowledgeChunks(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onAcknowledgeChunks();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onDebugSampleSubscription() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleDebugSampleSubscription", "method_56619", "onDebugSampleSubscription", "m_318909_"), "(Laha;)V");
    }

    static void onDebugSampleSubscription(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onDebugSampleSubscription();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setSession() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "resetPlayerChatState", "method_46365", "setSession", "m_253005_"), "(Lxq;)V");
    }

    static void setSession(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setSession();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onCustomPayload() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleCustomPayload", "method_52392", "onCustomPayload", "m_293234_"), "(Laab;)V");
    }

    static void onCustomPayload(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_onCustomPayload();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getPlayer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("o", "getPlayer", "method_32311", "getPlayer", "m_142253_"), "()Laqv;");
    }

    static jobject getPlayer(const jobject& obj) {
                
       const auto methodID = methodID_getPlayer();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_SERVER_NETWORK_SERVERPLAYNETWORKHANDLER_HPP