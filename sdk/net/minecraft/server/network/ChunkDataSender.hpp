// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SERVER_NETWORK_CHUNKDATASENDER_HPP
#define NET_MINECRAFT_SERVER_NETWORK_CHUNKDATASENDER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.server.network.ChunkDataSender
 * Remapped: arq
 */
namespace ChunkDataSender {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("arq", "net/minecraft/server/network/PlayerChunkSender", "net/minecraft/class_8608", "net/minecraft/server/network/ChunkDataSender", "net/minecraft/src/C_290182_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.server.network.ChunkDataSender#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "LOGGER", "field_45002", "LOGGER", "f_291358_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ChunkDataSender#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "LOGGER", "field_45002", "LOGGER", "f_291358_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.server.network.ChunkDataSender#field_45000
    [[maybe_unused]] static jfloat get_field_field_45000() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "MIN_CHUNKS_PER_TICK", "field_45000", "field_45000", "f_291084_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.server.network.ChunkDataSender#field_45000
    [[maybe_unused]] static void set_field_field_45000(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "MIN_CHUNKS_PER_TICK", "field_45000", "field_45000", "f_291084_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.server.network.ChunkDataSender#field_45001
    [[maybe_unused]] static jfloat get_field_field_45001() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "MAX_CHUNKS_PER_TICK", "field_45001", "field_45001", "f_291160_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.server.network.ChunkDataSender#field_45001
    [[maybe_unused]] static void set_field_field_45001(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "MAX_CHUNKS_PER_TICK", "field_45001", "field_45001", "f_291160_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.network.ChunkDataSender#field_45003
    [[maybe_unused]] static jfloat get_field_field_45003() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "START_CHUNKS_PER_TICK", "field_45003", "field_45003", "f_291062_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ChunkDataSender#field_45003
    [[maybe_unused]] static void set_field_field_45003(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "START_CHUNKS_PER_TICK", "field_45003", "field_45003", "f_291062_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.network.ChunkDataSender#field_45004
    [[maybe_unused]] static jint get_field_field_45004() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "MAX_UNACKNOWLEDGED_BATCHES", "field_45004", "field_45004", "f_290748_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ChunkDataSender#field_45004
    [[maybe_unused]] static void set_field_field_45004(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "MAX_UNACKNOWLEDGED_BATCHES", "field_45004", "field_45004", "f_290748_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ChunkDataSender#chunks
    static jobject get_field_chunks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "pendingChunks", "field_45005", "chunks", "f_290689_"), "Lit/unimi/dsi/fastutil/longs/LongSet;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ChunkDataSender#chunks
    static void set_field_chunks(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "pendingChunks", "field_45005", "chunks", "f_290689_"), "Lit/unimi/dsi/fastutil/longs/LongSet;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ChunkDataSender#local
    static jboolean get_field_local(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "memoryConnection", "field_45006", "local", "f_291779_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ChunkDataSender#local
    static void set_field_local(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "memoryConnection", "field_45006", "local", "f_291779_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ChunkDataSender#desiredBatchSize
    static jfloat get_field_desiredBatchSize(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "desiredChunksPerTick", "field_45007", "desiredBatchSize", "f_290316_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ChunkDataSender#desiredBatchSize
    static void set_field_desiredBatchSize(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "desiredChunksPerTick", "field_45007", "desiredBatchSize", "f_290316_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ChunkDataSender#pending
    static jfloat get_field_pending(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "batchQuota", "field_45008", "pending", "f_290940_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetFloatField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ChunkDataSender#pending
    static void set_field_pending(const jobject &obj, const jfloat &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "batchQuota", "field_45008", "pending", "f_290940_"), "F");
        return MinecraftSDK::env->SetFloatField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ChunkDataSender#unacknowledgedBatches
    static jint get_field_unacknowledgedBatches(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "unacknowledgedBatches", "field_45009", "unacknowledgedBatches", "f_291052_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ChunkDataSender#unacknowledgedBatches
    static void set_field_unacknowledgedBatches(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "unacknowledgedBatches", "field_45009", "unacknowledgedBatches", "f_291052_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.network.ChunkDataSender#maxUnacknowledgedBatches
    static jint get_field_maxUnacknowledgedBatches(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "maxUnacknowledgedBatches", "field_45010", "maxUnacknowledgedBatches", "f_290413_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.network.ChunkDataSender#maxUnacknowledgedBatches
    static void set_field_maxUnacknowledgedBatches(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "maxUnacknowledgedBatches", "field_45010", "maxUnacknowledgedBatches", "f_290413_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    static jmethodID methodID_add() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "markChunkPendingToSend", "method_52390", "add", "m_293202_"), "(Ldvi;)V");
    }

    static void add(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_add();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_unload() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "dropChunk", "method_52387", "unload", "m_293883_"), "(Laqv;Ldcd;)V");
    }

    static void unload(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_unload();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_sendChunkBatches() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "sendNextChunks", "method_52386", "sendChunkBatches", "m_295003_"), "(Laqv;)V");
    }

    static void sendChunkBatches(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_sendChunkBatches();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_sendChunkData() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "sendChunk", "method_52388", "sendChunkData", "m_293861_"), "(Laru;Laqu;Ldvi;)V");
    }

    static void sendChunkData(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_sendChunkData();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_makeBatch() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "collectChunksToSend", "method_52385", "makeBatch", "m_296019_"), "(Laqb;Ldcd;)Ljava/util/List;");
    }

    static jobject makeBatch(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_makeBatch();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_onAcknowledgeChunks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onChunkBatchReceivedByClient", "method_52383", "onAcknowledgeChunks", "m_293508_"), "(F)V");
    }

    static void onAcknowledgeChunks(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_onAcknowledgeChunks();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isInNextBatch() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isPending", "method_52384", "isInNextBatch", "m_296008_"), "(J)Z");
    }

    static jboolean isInNextBatch(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_isInNextBatch();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_SERVER_NETWORK_CHUNKDATASENDER_HPP