// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SERVER_COMMAND_EXECUTECOMMAND_HPP
#define NET_MINECRAFT_SERVER_COMMAND_EXECUTECOMMAND_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.server.command.ExecuteCommand
 * Remapped: amt
 */
namespace ExecuteCommand {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("amt", "net/minecraft/server/commands/ExecuteCommand", "net/minecraft/class_3050", "net/minecraft/server/command/ExecuteCommand", "net/minecraft/src/C_5315_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.server.command.ExecuteCommand#MAX_BLOCKS
    [[maybe_unused]] static jint get_field_MAX_BLOCKS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "MAX_TEST_AREA", "field_33390", "MAX_BLOCKS", "f_180148_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.command.ExecuteCommand#MAX_BLOCKS
    [[maybe_unused]] static void set_field_MAX_BLOCKS(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "MAX_TEST_AREA", "field_33390", "MAX_BLOCKS", "f_180148_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.command.ExecuteCommand#BLOCKS_TOOBIG_EXCEPTION
    [[maybe_unused]] static jobject get_field_BLOCKS_TOOBIG_EXCEPTION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "ERROR_AREA_TOO_LARGE", "field_13635", "BLOCKS_TOOBIG_EXCEPTION", "f_137030_"), "Lcom/mojang/brigadier/exceptions/Dynamic2CommandExceptionType;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.command.ExecuteCommand#BLOCKS_TOOBIG_EXCEPTION
    [[maybe_unused]] static void set_field_BLOCKS_TOOBIG_EXCEPTION(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "ERROR_AREA_TOO_LARGE", "field_13635", "BLOCKS_TOOBIG_EXCEPTION", "f_137030_"), "Lcom/mojang/brigadier/exceptions/Dynamic2CommandExceptionType;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.command.ExecuteCommand#CONDITIONAL_FAIL_EXCEPTION
    [[maybe_unused]] static jobject get_field_CONDITIONAL_FAIL_EXCEPTION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "ERROR_CONDITIONAL_FAILED", "field_13636", "CONDITIONAL_FAIL_EXCEPTION", "f_137031_"), "Lcom/mojang/brigadier/exceptions/SimpleCommandExceptionType;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.command.ExecuteCommand#CONDITIONAL_FAIL_EXCEPTION
    [[maybe_unused]] static void set_field_CONDITIONAL_FAIL_EXCEPTION(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "ERROR_CONDITIONAL_FAILED", "field_13636", "CONDITIONAL_FAIL_EXCEPTION", "f_137031_"), "Lcom/mojang/brigadier/exceptions/SimpleCommandExceptionType;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.command.ExecuteCommand#CONDITIONAL_FAIL_COUNT_EXCEPTION
    [[maybe_unused]] static jobject get_field_CONDITIONAL_FAIL_COUNT_EXCEPTION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "ERROR_CONDITIONAL_FAILED_COUNT", "field_13637", "CONDITIONAL_FAIL_COUNT_EXCEPTION", "f_137032_"), "Lcom/mojang/brigadier/exceptions/DynamicCommandExceptionType;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.command.ExecuteCommand#CONDITIONAL_FAIL_COUNT_EXCEPTION
    [[maybe_unused]] static void set_field_CONDITIONAL_FAIL_COUNT_EXCEPTION(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "ERROR_CONDITIONAL_FAILED_COUNT", "field_13637", "CONDITIONAL_FAIL_COUNT_EXCEPTION", "f_137032_"), "Lcom/mojang/brigadier/exceptions/DynamicCommandExceptionType;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.server.command.ExecuteCommand#INSTANTIATION_FAILURE_EXCEPTION
    [[maybe_unused]] static jobject get_field_INSTANTIATION_FAILURE_EXCEPTION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "ERROR_FUNCTION_CONDITION_INSTANTATION_FAILURE", "field_46642", "INSTANTIATION_FAILURE_EXCEPTION", "f_302541_"), "Lcom/mojang/brigadier/exceptions/Dynamic2CommandExceptionType;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.server.command.ExecuteCommand#INSTANTIATION_FAILURE_EXCEPTION
    [[maybe_unused]] static void set_field_INSTANTIATION_FAILURE_EXCEPTION(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "ERROR_FUNCTION_CONDITION_INSTANTATION_FAILURE", "field_46642", "INSTANTIATION_FAILURE_EXCEPTION", "f_302541_"), "Lcom/mojang/brigadier/exceptions/Dynamic2CommandExceptionType;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.command.ExecuteCommand#LOOT_CONDITIONS
    [[maybe_unused]] static jobject get_field_LOOT_CONDITIONS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "SUGGEST_PREDICATE", "field_20852", "LOOT_CONDITIONS", "f_137034_"), "Lcom/mojang/brigadier/suggestion/SuggestionProvider;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.command.ExecuteCommand#LOOT_CONDITIONS
    [[maybe_unused]] static void set_field_LOOT_CONDITIONS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "SUGGEST_PREDICATE", "field_20852", "LOOT_CONDITIONS", "f_137034_"), "Lcom/mojang/brigadier/suggestion/SuggestionProvider;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_register() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "register", "method_13271", "register", "m_214434_"), "(Lcom/mojang/brigadier/CommandDispatcher;Lep;)V");
    }

    static void register(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_register();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_addStoreArguments() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "wrapStores", "method_13289", "addStoreArguments", "m_137093_"), "(Lcom/mojang/brigadier/tree/LiteralCommandNode;Lcom/mojang/brigadier/builder/LiteralArgumentBuilder;Z)Lcom/mojang/brigadier/builder/ArgumentBuilder;");
    }

    static jobject addStoreArguments(const jobject& arg0, const jobject& arg1, const jboolean& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_addStoreArguments();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_executeStoreScore() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "storeValue", "method_13290", "executeStoreScore", "m_137107_"), "(Let;Ljava/util/Collection;Lexy;Z)Let;");
    }

    static jobject executeStoreScore(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jboolean& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_executeStoreScore();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_executeStoreBossbar() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "storeValue", "method_13297", "executeStoreBossbar", "m_137112_"), "(Let;Lals;ZZ)Let;");
    }

    static jobject executeStoreBossbar(const jobject& arg0, const jobject& arg1, const jboolean& arg2, const jboolean& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_executeStoreBossbar();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_executeStoreData() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "storeData", "method_13265", "executeStoreData", "m_137117_"), "(Let;Lapg;Lfl$g;Ljava/util/function/IntFunction;Z)Let;");
    }

    static jobject executeStoreData(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jboolean& arg4) {
       const auto clazz = self();
       const auto methodID = methodID_executeStoreData();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_isLoaded() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "isChunkLoaded", "method_48059", "isLoaded", "m_264155_"), "(Laqu;Ljd;)Z");
    }

    static jboolean isLoaded(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_isLoaded();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_addConditionArguments() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "addConditionals", "method_13298", "addConditionArguments", "m_214437_"), "(Lcom/mojang/brigadier/tree/CommandNode;Lcom/mojang/brigadier/builder/LiteralArgumentBuilder;ZLep;)Lcom/mojang/brigadier/builder/ArgumentBuilder;");
    }

    static jobject addConditionArguments(const jobject& arg0, const jobject& arg1, const jboolean& arg2, const jobject& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_addConditionArguments();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_countMatchingItems() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "countItems", "method_58035", "countMatchingItems", "m_321605_"), "(Ljava/lang/Iterable;Lcrr;Ljava/util/function/Predicate;)I");
    }

    static jint countMatchingItems(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_countMatchingItems();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__countMatchingItems() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "countItems", "method_58034", "countMatchingItems", "m_321039_"), "(Let;Ljd;Lcrr;Ljava/util/function/Predicate;)I");
    }

    static jint _countMatchingItems(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
       const auto clazz = self();
       const auto methodID = methodID__countMatchingItems();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_getExistsConditionExecute() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "createNumericConditionalHandler", "method_13323", "getExistsConditionExecute", "m_137166_"), "(ZLamt$b;)Lcom/mojang/brigadier/Command;");
    }

    static jobject getExistsConditionExecute(const jboolean& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_getExistsConditionExecute();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_countPathMatches() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "checkMatchingData", "method_13303", "countPathMatches", "m_137145_"), "(Lapg;Lfl$g;)I");
    }

    static jint countPathMatches(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_countPathMatches();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_testScoreCondition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "checkScore", "method_13263", "testScoreCondition", "m_137064_"), "(Lcom/mojang/brigadier/context/CommandContext;Lamt$e;)Z");
    }

    static jboolean testScoreCondition(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_testScoreCondition();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_testScoreMatch() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "checkScore", "method_13313", "testScoreMatch", "m_137058_"), "(Lcom/mojang/brigadier/context/CommandContext;Ldh$d;)Z");
    }

    static jboolean testScoreMatch(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_testScoreMatch();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_testLootCondition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "checkCustomPredicate", "method_22829", "testLootCondition", "m_137104_"), "(Let;Ljm;)Z");
    }

    static jboolean testLootCondition(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_testLootCondition();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getSourceOrEmptyForConditionFork() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "expect", "method_13319", "getSourceOrEmptyForConditionFork", "m_137070_"), "(Lcom/mojang/brigadier/context/CommandContext;ZZ)Ljava/util/Collection;");
    }

    static jobject getSourceOrEmptyForConditionFork(const jobject& arg0, const jboolean& arg1, const jboolean& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_getSourceOrEmptyForConditionFork();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_addConditionLogic() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "addConditional", "method_13310", "addConditionLogic", "m_137074_"), "(Lcom/mojang/brigadier/tree/CommandNode;Lcom/mojang/brigadier/builder/ArgumentBuilder;ZLamt$c;)Lcom/mojang/brigadier/builder/ArgumentBuilder;");
    }

    static jobject addConditionLogic(const jobject& arg0, const jobject& arg1, const jboolean& arg2, const jobject& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_addConditionLogic();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_addBlocksConditionLogic() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "addIfBlocksConditional", "method_13320", "addBlocksConditionLogic", "m_137079_"), "(Lcom/mojang/brigadier/tree/CommandNode;Lcom/mojang/brigadier/builder/ArgumentBuilder;ZZ)Lcom/mojang/brigadier/builder/ArgumentBuilder;");
    }

    static jobject addBlocksConditionLogic(const jobject& arg0, const jobject& arg1, const jboolean& arg2, const jboolean& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_addBlocksConditionLogic();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_executePositiveBlockCondition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "checkIfRegions", "method_13306", "executePositiveBlockCondition", "m_137067_"), "(Lcom/mojang/brigadier/context/CommandContext;Z)I");
    }

    static jint executePositiveBlockCondition(const jobject& arg0, const jboolean& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_executePositiveBlockCondition();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_executeNegativeBlockCondition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "checkUnlessRegions", "method_13304", "executeNegativeBlockCondition", "m_137193_"), "(Lcom/mojang/brigadier/context/CommandContext;Z)I");
    }

    static jint executeNegativeBlockCondition(const jobject& arg0, const jboolean& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_executeNegativeBlockCondition();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_testBlocksCondition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "checkRegions", "method_13272", "testBlocksCondition", "m_137220_"), "(Lcom/mojang/brigadier/context/CommandContext;Z)Ljava/util/OptionalInt;");
    }

    static jobject testBlocksCondition(const jobject& arg0, const jboolean& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_testBlocksCondition();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__testBlocksCondition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "checkRegions", "method_13261", "testBlocksCondition", "m_137036_"), "(Laqu;Ljd;Ljd;Ljd;Z)Ljava/util/OptionalInt;");
    }

    static jobject _testBlocksCondition(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jboolean& arg4) {
       const auto clazz = self();
       const auto methodID = methodID__testBlocksCondition();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_createEntityModifier() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "expandOneToOneEntityRelation", "method_48063", "createEntityModifier", "m_264445_"), "(Ljava/util/function/Function;)Lcom/mojang/brigadier/RedirectModifier;");
    }

    static jobject createEntityModifier(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_createEntityModifier();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_createMultiEntityModifier() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "expandOneToManyEntityRelation", "method_48066", "createMultiEntityModifier", "m_264350_"), "(Ljava/util/function/Function;)Lcom/mojang/brigadier/RedirectModifier;");
    }

    static jobject createMultiEntityModifier(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_createMultiEntityModifier();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_addOnArguments() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "createRelationOperations", "method_48061", "addOnArguments", "m_264124_"), "(Lcom/mojang/brigadier/tree/CommandNode;Lcom/mojang/brigadier/builder/LiteralArgumentBuilder;)Lcom/mojang/brigadier/builder/LiteralArgumentBuilder;");
    }

    static jobject addOnArguments(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_addOnArguments();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_summon() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "spawnEntityAndRedirect", "method_48756", "summon", "m_269381_"), "(Let;Ljm$c;)Let;");
    }

    static jobject summon(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_summon();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_enqueueExecutions() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "scheduleFunctionConditionsAndTest", "method_54264", "enqueueExecutions", "m_304727_"), "(Lev;Ljava/util/List;Ljava/util/function/Function;Ljava/util/function/IntPredicate;Lcom/mojang/brigadier/context/ContextChain;Lub;Lht;Lamt$a;Lhn;)V");
    }

    static void enqueueExecutions(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4, const jobject& arg5, const jobject& arg6, const jobject& arg7, const jobject& arg8) {
       const auto clazz = self();
       const auto methodID = methodID_enqueueExecutions();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    };
    
};

#endif // NET_MINECRAFT_SERVER_COMMAND_EXECUTECOMMAND_HPP