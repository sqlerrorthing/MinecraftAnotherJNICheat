// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SERVER_COMMAND_FILLBIOMECOMMAND_HPP
#define NET_MINECRAFT_SERVER_COMMAND_FILLBIOMECOMMAND_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.server.command.FillBiomeCommand
 * Remapped: amv
 */
namespace FillBiomeCommand {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("amv", "net/minecraft/server/commands/FillBiomeCommand", "net/minecraft/class_7926", "net/minecraft/server/command/FillBiomeCommand", "net/minecraft/src/C_260424_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.server.command.FillBiomeCommand#UNLOADED_EXCEPTION
    [[maybe_unused]] static jobject get_field_UNLOADED_EXCEPTION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "ERROR_NOT_LOADED", "field_41279", "UNLOADED_EXCEPTION", "f_260663_"), "Lcom/mojang/brigadier/exceptions/SimpleCommandExceptionType;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.server.command.FillBiomeCommand#UNLOADED_EXCEPTION
    [[maybe_unused]] static void set_field_UNLOADED_EXCEPTION(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "ERROR_NOT_LOADED", "field_41279", "UNLOADED_EXCEPTION", "f_260663_"), "Lcom/mojang/brigadier/exceptions/SimpleCommandExceptionType;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.command.FillBiomeCommand#TOO_BIG_EXCEPTION
    [[maybe_unused]] static jobject get_field_TOO_BIG_EXCEPTION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ERROR_VOLUME_TOO_LARGE", "field_41281", "TOO_BIG_EXCEPTION", "f_260575_"), "Lcom/mojang/brigadier/exceptions/Dynamic2CommandExceptionType;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.command.FillBiomeCommand#TOO_BIG_EXCEPTION
    [[maybe_unused]] static void set_field_TOO_BIG_EXCEPTION(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ERROR_VOLUME_TOO_LARGE", "field_41281", "TOO_BIG_EXCEPTION", "f_260575_"), "Lcom/mojang/brigadier/exceptions/Dynamic2CommandExceptionType;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_register() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "register", "method_47529", "register", "m_260845_"), "(Lcom/mojang/brigadier/CommandDispatcher;Lep;)V");
    }

    static void register(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_register();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_convertCoordinate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "quantize", "method_47528", "convertCoordinate", "m_261188_"), "(I)I");
    }

    static jint convertCoordinate(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_convertCoordinate();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_convertPos() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "quantize", "method_47535", "convertPos", "m_260812_"), "(Ljd;)Ljd;");
    }

    static jobject convertPos(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_convertPos();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_createBiomeSupplier() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "makeResolver", "method_47531", "createBiomeSupplier", "m_262439_"), "(Lorg/apache/commons/lang3/mutable/MutableInt;Lduy;Lejj;Ljm;Ljava/util/function/Predicate;)Lddz;");
    }

    static jobject createBiomeSupplier(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4) {
       const auto clazz = self();
       const auto methodID = methodID_createBiomeSupplier();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_fillBiome() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "fill", "method_55339", "fillBiome", "m_307048_"), "(Laqu;Ljd;Ljd;Ljm;)Lcom/mojang/datafixers/util/Either;");
    }

    static jobject fillBiome(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_fillBiome();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID__fillBiome() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "fill", "method_55340", "fillBiome", "m_306728_"), "(Laqu;Ljd;Ljd;Ljm;Ljava/util/function/Predicate;Ljava/util/function/Consumer;)Lcom/mojang/datafixers/util/Either;");
    }

    static jobject _fillBiome(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4, const jobject& arg5) {
       const auto clazz = self();
       const auto methodID = methodID__fillBiome();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
    static jmethodID methodID_execute() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "fill", "method_47533", "execute", "m_262457_"), "(Let;Ljd;Ljd;Ljm$c;Ljava/util/function/Predicate;)I");
    }

    static jint execute(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4) {
       const auto clazz = self();
       const auto methodID = methodID_execute();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
};

#endif // NET_MINECRAFT_SERVER_COMMAND_FILLBIOMECOMMAND_HPP