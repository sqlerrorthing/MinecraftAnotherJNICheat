// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SERVER_COMMAND_RIDECOMMAND_HPP
#define NET_MINECRAFT_SERVER_COMMAND_RIDECOMMAND_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.server.command.RideCommand
 * Remapped: any
 */
namespace RideCommand {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("any", "net/minecraft/server/commands/RideCommand", "net/minecraft/class_8011", "net/minecraft/server/command/RideCommand", "net/minecraft/src/C_263591_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.server.command.RideCommand#NOT_RIDING_EXCEPTION
    [[maybe_unused]] static jobject get_field_NOT_RIDING_EXCEPTION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "ERROR_NOT_RIDING", "field_41742", "NOT_RIDING_EXCEPTION", "f_263780_"), "Lcom/mojang/brigadier/exceptions/DynamicCommandExceptionType;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.command.RideCommand#NOT_RIDING_EXCEPTION
    [[maybe_unused]] static void set_field_NOT_RIDING_EXCEPTION(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "ERROR_NOT_RIDING", "field_41742", "NOT_RIDING_EXCEPTION", "f_263780_"), "Lcom/mojang/brigadier/exceptions/DynamicCommandExceptionType;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.command.RideCommand#ALREADY_RIDING_EXCEPTION
    [[maybe_unused]] static jobject get_field_ALREADY_RIDING_EXCEPTION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ERROR_ALREADY_RIDING", "field_41743", "ALREADY_RIDING_EXCEPTION", "f_263682_"), "Lcom/mojang/brigadier/exceptions/Dynamic2CommandExceptionType;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.command.RideCommand#ALREADY_RIDING_EXCEPTION
    [[maybe_unused]] static void set_field_ALREADY_RIDING_EXCEPTION(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ERROR_ALREADY_RIDING", "field_41743", "ALREADY_RIDING_EXCEPTION", "f_263682_"), "Lcom/mojang/brigadier/exceptions/Dynamic2CommandExceptionType;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.command.RideCommand#GENERIC_FAILURE_EXCEPTION
    [[maybe_unused]] static jobject get_field_GENERIC_FAILURE_EXCEPTION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "ERROR_MOUNT_FAILED", "field_41744", "GENERIC_FAILURE_EXCEPTION", "f_263721_"), "Lcom/mojang/brigadier/exceptions/Dynamic2CommandExceptionType;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.command.RideCommand#GENERIC_FAILURE_EXCEPTION
    [[maybe_unused]] static void set_field_GENERIC_FAILURE_EXCEPTION(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "ERROR_MOUNT_FAILED", "field_41744", "GENERIC_FAILURE_EXCEPTION", "f_263721_"), "Lcom/mojang/brigadier/exceptions/Dynamic2CommandExceptionType;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.command.RideCommand#CANT_RIDE_PLAYERS_EXCEPTION
    [[maybe_unused]] static jobject get_field_CANT_RIDE_PLAYERS_EXCEPTION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "ERROR_MOUNTING_PLAYER", "field_41745", "CANT_RIDE_PLAYERS_EXCEPTION", "f_263778_"), "Lcom/mojang/brigadier/exceptions/SimpleCommandExceptionType;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.command.RideCommand#CANT_RIDE_PLAYERS_EXCEPTION
    [[maybe_unused]] static void set_field_CANT_RIDE_PLAYERS_EXCEPTION(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "ERROR_MOUNTING_PLAYER", "field_41745", "CANT_RIDE_PLAYERS_EXCEPTION", "f_263778_"), "Lcom/mojang/brigadier/exceptions/SimpleCommandExceptionType;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.command.RideCommand#RIDE_LOOP_EXCEPTION
    [[maybe_unused]] static jobject get_field_RIDE_LOOP_EXCEPTION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "ERROR_MOUNTING_LOOP", "field_41746", "RIDE_LOOP_EXCEPTION", "f_263832_"), "Lcom/mojang/brigadier/exceptions/SimpleCommandExceptionType;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.command.RideCommand#RIDE_LOOP_EXCEPTION
    [[maybe_unused]] static void set_field_RIDE_LOOP_EXCEPTION(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "ERROR_MOUNTING_LOOP", "field_41746", "RIDE_LOOP_EXCEPTION", "f_263832_"), "Lcom/mojang/brigadier/exceptions/SimpleCommandExceptionType;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.command.RideCommand#WRONG_DIMENSION_EXCEPTION
    [[maybe_unused]] static jobject get_field_WRONG_DIMENSION_EXCEPTION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "ERROR_WRONG_DIMENSION", "field_42239", "WRONG_DIMENSION_EXCEPTION", "f_268657_"), "Lcom/mojang/brigadier/exceptions/SimpleCommandExceptionType;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.command.RideCommand#WRONG_DIMENSION_EXCEPTION
    [[maybe_unused]] static void set_field_WRONG_DIMENSION_EXCEPTION(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "ERROR_WRONG_DIMENSION", "field_42239", "WRONG_DIMENSION_EXCEPTION", "f_268657_"), "Lcom/mojang/brigadier/exceptions/SimpleCommandExceptionType;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_register() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "register", "method_48078", "register", "m_264607_"), "(Lcom/mojang/brigadier/CommandDispatcher;)V");
    }

    static void register(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_register();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_executeMount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "mount", "method_48082", "executeMount", "m_264511_"), "(Let;Lbsr;Lbsr;)I");
    }

    static jint executeMount(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_executeMount();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_executeDismount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "dismount", "method_48081", "executeDismount", "m_264225_"), "(Let;Lbsr;)I");
    }

    static jint executeDismount(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_executeDismount();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_SERVER_COMMAND_RIDECOMMAND_HPP