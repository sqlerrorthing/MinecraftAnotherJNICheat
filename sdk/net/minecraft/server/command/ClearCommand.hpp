// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SERVER_COMMAND_CLEARCOMMAND_HPP
#define NET_MINECRAFT_SERVER_COMMAND_CLEARCOMMAND_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.server.command.ClearCommand
 * Remapped: amf
 */
namespace ClearCommand {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("amf", "net/minecraft/server/commands/ClearInventoryCommands", "net/minecraft/class_3020", "net/minecraft/server/command/ClearCommand", "net/minecraft/src/C_5302_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.server.command.ClearCommand#FAILED_SINGLE_EXCEPTION
    [[maybe_unused]] static jobject get_field_FAILED_SINGLE_EXCEPTION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "ERROR_SINGLE", "field_13487", "FAILED_SINGLE_EXCEPTION", "f_136694_"), "Lcom/mojang/brigadier/exceptions/DynamicCommandExceptionType;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.command.ClearCommand#FAILED_SINGLE_EXCEPTION
    [[maybe_unused]] static void set_field_FAILED_SINGLE_EXCEPTION(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "ERROR_SINGLE", "field_13487", "FAILED_SINGLE_EXCEPTION", "f_136694_"), "Lcom/mojang/brigadier/exceptions/DynamicCommandExceptionType;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.command.ClearCommand#FAILED_MULTIPLE_EXCEPTION
    [[maybe_unused]] static jobject get_field_FAILED_MULTIPLE_EXCEPTION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ERROR_MULTIPLE", "field_13488", "FAILED_MULTIPLE_EXCEPTION", "f_136695_"), "Lcom/mojang/brigadier/exceptions/DynamicCommandExceptionType;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.command.ClearCommand#FAILED_MULTIPLE_EXCEPTION
    [[maybe_unused]] static void set_field_FAILED_MULTIPLE_EXCEPTION(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ERROR_MULTIPLE", "field_13488", "FAILED_MULTIPLE_EXCEPTION", "f_136695_"), "Lcom/mojang/brigadier/exceptions/DynamicCommandExceptionType;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_register() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "register", "method_13076", "register", "m_214420_"), "(Lcom/mojang/brigadier/CommandDispatcher;Lep;)V");
    }

    static void register(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_register();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_execute() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "clearUnlimited", "method_58032", "execute", "m_323323_"), "(Let;Ljava/util/Collection;Ljava/util/function/Predicate;)I");
    }

    static jint execute(const jobject& arg0, const jobject& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_execute();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__execute() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "clearInventory", "method_13077", "execute", "m_136705_"), "(Let;Ljava/util/Collection;Ljava/util/function/Predicate;I)I");
    }

    static jint _execute(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jint& arg3) {
       const auto clazz = self();
       const auto methodID = methodID__execute();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
};

#endif // NET_MINECRAFT_SERVER_COMMAND_CLEARCOMMAND_HPP