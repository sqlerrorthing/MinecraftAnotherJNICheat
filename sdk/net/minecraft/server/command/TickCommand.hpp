// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SERVER_COMMAND_TICKCOMMAND_HPP
#define NET_MINECRAFT_SERVER_COMMAND_TICKCOMMAND_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.server.command.TickCommand
 * Remapped: aow
 */
namespace TickCommand {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("aow", "net/minecraft/server/commands/TickCommand", "net/minecraft/class_8916", "net/minecraft/server/command/TickCommand", "net/minecraft/src/C_302166_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.server.command.TickCommand#MAX_TICK_RATE
    [[maybe_unused]] static jfloat get_field_MAX_TICK_RATE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "MAX_TICKRATE", "field_46925", "MAX_TICK_RATE", "f_303762_"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.command.TickCommand#MAX_TICK_RATE
    [[maybe_unused]] static void set_field_MAX_TICK_RATE(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "MAX_TICKRATE", "field_46925", "MAX_TICK_RATE", "f_303762_"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.command.TickCommand#DEFAULT_TICK_RATE_STRING
    [[maybe_unused]] static jobject get_field_DEFAULT_TICK_RATE_STRING() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "DEFAULT_TICKRATE", "field_46926", "DEFAULT_TICK_RATE_STRING", "f_303511_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.command.TickCommand#DEFAULT_TICK_RATE_STRING
    [[maybe_unused]] static void set_field_DEFAULT_TICK_RATE_STRING(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "DEFAULT_TICKRATE", "field_46926", "DEFAULT_TICK_RATE_STRING", "f_303511_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_register() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "register", "method_54687", "register", "m_305933_"), "(Lcom/mojang/brigadier/CommandDispatcher;)V");
    }

    static void register(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_register();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_format() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "nanosToMilisString", "method_54686", "format", "m_307814_"), "(J)Ljava/lang/String;");
    }

    static jobject format(const jlong& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_format();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_executeRate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "setTickingRate", "method_54691", "executeRate", "m_305228_"), "(Let;F)I");
    }

    static jint executeRate(const jobject& arg0, const jfloat& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_executeRate();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_executeQuery() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "tickQuery", "method_54690", "executeQuery", "m_304871_"), "(Let;)I");
    }

    static jint executeQuery(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_executeQuery();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_executeSprint() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "sprint", "method_54692", "executeSprint", "m_306741_"), "(Let;I)I");
    }

    static jint executeSprint(const jobject& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_executeSprint();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_executeFreeze() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "setFreeze", "method_54693", "executeFreeze", "m_307855_"), "(Let;Z)I");
    }

    static jint executeFreeze(const jobject& arg0, const jboolean& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_executeFreeze();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_executeStep() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "step", "method_54702", "executeStep", "m_306872_"), "(Let;I)I");
    }

    static jint executeStep(const jobject& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_executeStep();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_executeStopStep() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "stopStepping", "method_54701", "executeStopStep", "m_306432_"), "(Let;)I");
    }

    static jint executeStopStep(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_executeStopStep();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_executeStopSprint() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "stopSprinting", "method_54706", "executeStopSprint", "m_305934_"), "(Let;)I");
    }

    static jint executeStopSprint(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_executeStopSprint();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_SERVER_COMMAND_TICKCOMMAND_HPP