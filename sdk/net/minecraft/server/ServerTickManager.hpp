// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SERVER_SERVERTICKMANAGER_HPP
#define NET_MINECRAFT_SERVER_SERVERTICKMANAGER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.server.ServerTickManager
 * Remapped: all
 */
namespace ServerTickManager {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("all", "net/minecraft/server/ServerTickRateManager", "net/minecraft/class_8915", "net/minecraft/server/ServerTickManager", "net/minecraft/src/C_302003_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.server.ServerTickManager#sprintTicks
    static jlong get_field_sprintTicks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "remainingSprintTicks", "field_46919", "sprintTicks", "f_302629_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.ServerTickManager#sprintTicks
    static void set_field_sprintTicks(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "remainingSprintTicks", "field_46919", "sprintTicks", "f_302629_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.ServerTickManager#sprintStartTime
    static jlong get_field_sprintStartTime(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "sprintTickStartTime", "field_46920", "sprintStartTime", "f_302324_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.ServerTickManager#sprintStartTime
    static void set_field_sprintStartTime(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "sprintTickStartTime", "field_46920", "sprintStartTime", "f_302324_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.ServerTickManager#sprintTime
    static jlong get_field_sprintTime(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "sprintTimeSpend", "field_46921", "sprintTime", "f_302728_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.ServerTickManager#sprintTime
    static void set_field_sprintTime(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "sprintTimeSpend", "field_46921", "sprintTime", "f_302728_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.ServerTickManager#scheduledSprintTicks
    static jlong get_field_scheduledSprintTicks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "scheduledCurrentSprintTicks", "field_46922", "scheduledSprintTicks", "f_302200_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.ServerTickManager#scheduledSprintTicks
    static void set_field_scheduledSprintTicks(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "scheduledCurrentSprintTicks", "field_46922", "scheduledSprintTicks", "f_302200_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.ServerTickManager#wasFrozen
    static jboolean get_field_wasFrozen(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "previousIsFrozen", "field_46923", "wasFrozen", "f_303550_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.ServerTickManager#wasFrozen
    static void set_field_wasFrozen(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "previousIsFrozen", "field_46923", "wasFrozen", "f_303550_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.ServerTickManager#server
    static jobject get_field_server(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "server", "field_46924", "server", "f_303799_"), "Lnet/minecraft/server/MinecraftServer;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.ServerTickManager#server
    static void set_field_server(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "server", "field_46924", "server", "f_303799_"), "Lnet/minecraft/server/MinecraftServer;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_isSprinting() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isSprinting", "method_54670", "isSprinting", "m_306078_"), "()Z");
    }

    static jboolean isSprinting(const jobject& obj) {
                
       const auto methodID = methodID_isSprinting();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setFrozen() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setFrozen", "method_54675", "setFrozen", "m_306419_"), "(Z)V");
    }

    static void setFrozen(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setFrozen();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_sendUpdateTickRatePacket() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("n", "updateStateToClients", "method_54681", "sendUpdateTickRatePacket", "m_306466_"), "()V");
    }

    static void sendUpdateTickRatePacket(const jobject& obj) {
                
       const auto methodID = methodID_sendUpdateTickRatePacket();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_sendStepPacket() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("o", "updateStepTicks", "method_54682", "sendStepPacket", "m_305862_"), "()V");
    }

    static void sendStepPacket(const jobject& obj) {
                
       const auto methodID = methodID_sendStepPacket();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_step() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "stepGameIfPaused", "method_54672", "step", "m_305215_"), "(I)Z");
    }

    static jboolean step(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_step();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_stopStepping() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "stopStepping", "method_54676", "stopStepping", "m_307971_"), "()Z");
    }

    static jboolean stopStepping(const jobject& obj) {
                
       const auto methodID = methodID_stopStepping();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_stopSprinting() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "stopSprinting", "method_54678", "stopSprinting", "m_306594_"), "()Z");
    }

    static jboolean stopSprinting(const jobject& obj) {
                
       const auto methodID = methodID_stopSprinting();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_startSprint() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "requestGameToSprint", "method_54677", "startSprint", "m_305001_"), "(I)Z");
    }

    static jboolean startSprint(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_startSprint();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_finishSprinting() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("p", "finishTickSprint", "method_54683", "finishSprinting", "m_306313_"), "()V");
    }

    static void finishSprinting(const jobject& obj) {
                
       const auto methodID = methodID_finishSprinting();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_sprint() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "checkShouldSprintThisTick", "method_54679", "sprint", "m_307076_"), "()Z");
    }

    static jboolean sprint(const jobject& obj) {
                
       const auto methodID = methodID_sprint();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_updateSprintTime() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "endTickWork", "method_54680", "updateSprintTime", "m_307618_"), "()V");
    }

    static void updateSprintTime(const jobject& obj) {
                
       const auto methodID = methodID_updateSprintTime();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_setTickRate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setTickRate", "method_54671", "setTickRate", "m_307254_"), "(F)V");
    }

    static void setTickRate(const jobject& obj, const jfloat& arg0) {
                
       const auto methodID = methodID_setTickRate();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_sendPackets() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateJoiningPlayer", "method_54674", "sendPackets", "m_305873_"), "(Laqv;)V");
    }

    static void sendPackets(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_sendPackets();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_SERVER_SERVERTICKMANAGER_HPP