// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SERVER_WORLD_CHUNKTICKETMANAGER$DISTANCEFROMNEARESTPLAYERTRACKER_HPP
#define NET_MINECRAFT_SERVER_WORLD_CHUNKTICKETMANAGER$DISTANCEFROMNEARESTPLAYERTRACKER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.server.world.ChunkTicketManager$DistanceFromNearestPlayerTracker
 * Remapped: aqk$b
 */
namespace ChunkTicketManager$DistanceFromNearestPlayerTracker {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("aqk$b", "net/minecraft/server/level/DistanceManager$FixedPlayerDistanceChunkTracker", "net/minecraft/class_3204$class_3205", "net/minecraft/server/world/ChunkTicketManager$DistanceFromNearestPlayerTracker", "net/minecraft/src/C_5442_$C_5444_"));
        }
        return cachedClass;
    };

    // getter for protected field net.minecraft.server.world.ChunkTicketManager$DistanceFromNearestPlayerTracker#distanceFromNearestPlayer
    static jobject get_field_distanceFromNearestPlayer(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "chunks", "field_13896", "distanceFromNearestPlayer", "f_140886_"), "Lit/unimi/dsi/fastutil/longs/Long2ByteMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.server.world.ChunkTicketManager$DistanceFromNearestPlayerTracker#distanceFromNearestPlayer
    static void set_field_distanceFromNearestPlayer(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "chunks", "field_13896", "distanceFromNearestPlayer", "f_140886_"), "Lit/unimi/dsi/fastutil/longs/Long2ByteMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.server.world.ChunkTicketManager$DistanceFromNearestPlayerTracker#maxDistance
    static jint get_field_maxDistance(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "maxDistance", "field_17461", "maxDistance", "f_140887_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.server.world.ChunkTicketManager$DistanceFromNearestPlayerTracker#maxDistance
    static void set_field_maxDistance(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "maxDistance", "field_17461", "maxDistance", "f_140887_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    static jmethodID methodID_getLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getLevel", "method_15480", "getLevel", "m_6172_"), "(J)I");
    }

    static jint getLevel(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_getLevel();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setLevel", "method_15485", "setLevel", "m_7351_"), "(JI)V");
    }

    static void setLevel(const jobject& obj, const jlong& arg0, const jint& arg1) {
                
       const auto methodID = methodID_setLevel();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_onDistanceChange() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onLevelChange", "method_17657", "onDistanceChange", "m_8002_"), "(JII)V");
    }

    static void onDistanceChange(const jobject& obj, const jlong& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_onDistanceChange();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getInitialLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getLevelFromSource", "method_14028", "getInitialLevel", "m_7031_"), "(J)I");
    }

    static jint getInitialLevel(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_getInitialLevel();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isPlayerInChunk() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "havePlayer", "method_14056", "isPlayerInChunk", "m_140902_"), "(J)Z");
    }

    static jboolean isPlayerInChunk(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_isPlayerInChunk();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_updateLevels() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "runAllUpdates", "method_14057", "updateLevels", "m_6410_"), "()V");
    }

    static void updateLevels(const jobject& obj) {
                
       const auto methodID = methodID_updateLevels();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_dump() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "dumpChunks", "method_34878", "dump", "m_143212_"), "(Ljava/lang/String;)V");
    }

    static void dump(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_dump();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_SERVER_WORLD_CHUNKTICKETMANAGER$DISTANCEFROMNEARESTPLAYERTRACKER_HPP