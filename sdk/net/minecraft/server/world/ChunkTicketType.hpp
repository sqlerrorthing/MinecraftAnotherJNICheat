// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SERVER_WORLD_CHUNKTICKETTYPE_HPP
#define NET_MINECRAFT_SERVER_WORLD_CHUNKTICKETTYPE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.server.world.ChunkTicketType
 * Remapped: aqz
 */
namespace ChunkTicketType {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("aqz", "net/minecraft/server/level/TicketType", "net/minecraft/class_3230", "net/minecraft/server/world/ChunkTicketType", "net/minecraft/src/C_18_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.server.world.ChunkTicketType#name
    static jobject get_field_name(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "name", "field_14034", "name", "f_9450_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ChunkTicketType#name
    static void set_field_name(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "name", "field_14034", "name", "f_9450_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ChunkTicketType#argumentComparator
    static jobject get_field_argumentComparator(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "comparator", "field_14029", "argumentComparator", "f_9451_"), "Ljava/util/Comparator;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ChunkTicketType#argumentComparator
    static void set_field_argumentComparator(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "comparator", "field_14029", "argumentComparator", "f_9451_"), "Ljava/util/Comparator;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ChunkTicketType#expiryTicks
    static jlong get_field_expiryTicks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "timeout", "field_19348", "expiryTicks", "f_9452_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ChunkTicketType#expiryTicks
    static void set_field_expiryTicks(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "timeout", "field_19348", "expiryTicks", "f_9452_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for static public field net.minecraft.server.world.ChunkTicketType#START
    [[maybe_unused]] static jobject get_field_START() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "START", "field_14030", "START", "f_9442_"), "Laqz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.server.world.ChunkTicketType#START
    [[maybe_unused]] static void set_field_START(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "START", "field_14030", "START", "f_9442_"), "Laqz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.server.world.ChunkTicketType#DRAGON
    [[maybe_unused]] static jobject get_field_DRAGON() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "DRAGON", "field_17264", "DRAGON", "f_9443_"), "Laqz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.server.world.ChunkTicketType#DRAGON
    [[maybe_unused]] static void set_field_DRAGON(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "DRAGON", "field_17264", "DRAGON", "f_9443_"), "Laqz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.server.world.ChunkTicketType#PLAYER
    [[maybe_unused]] static jobject get_field_PLAYER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "PLAYER", "field_14033", "PLAYER", "f_9444_"), "Laqz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.server.world.ChunkTicketType#PLAYER
    [[maybe_unused]] static void set_field_PLAYER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "PLAYER", "field_14033", "PLAYER", "f_9444_"), "Laqz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.server.world.ChunkTicketType#FORCED
    [[maybe_unused]] static jobject get_field_FORCED() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "FORCED", "field_14031", "FORCED", "f_9445_"), "Laqz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.server.world.ChunkTicketType#FORCED
    [[maybe_unused]] static void set_field_FORCED(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "FORCED", "field_14031", "FORCED", "f_9445_"), "Laqz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.server.world.ChunkTicketType#PORTAL
    [[maybe_unused]] static jobject get_field_PORTAL() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "PORTAL", "field_19280", "PORTAL", "f_9447_"), "Laqz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.server.world.ChunkTicketType#PORTAL
    [[maybe_unused]] static void set_field_PORTAL(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "PORTAL", "field_19280", "PORTAL", "f_9447_"), "Laqz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.server.world.ChunkTicketType#POST_TELEPORT
    [[maybe_unused]] static jobject get_field_POST_TELEPORT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "POST_TELEPORT", "field_19347", "POST_TELEPORT", "f_9448_"), "Laqz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.server.world.ChunkTicketType#POST_TELEPORT
    [[maybe_unused]] static void set_field_POST_TELEPORT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "POST_TELEPORT", "field_19347", "POST_TELEPORT", "f_9448_"), "Laqz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.server.world.ChunkTicketType#UNKNOWN
    [[maybe_unused]] static jobject get_field_UNKNOWN() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "UNKNOWN", "field_14032", "UNKNOWN", "f_9449_"), "Laqz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.server.world.ChunkTicketType#UNKNOWN
    [[maybe_unused]] static void set_field_UNKNOWN(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "UNKNOWN", "field_14032", "UNKNOWN", "f_9449_"), "Laqz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_create() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "create", "method_14291", "create", "m_9462_"), "(Ljava/lang/String;Ljava/util/Comparator;)Laqz;");
    }

    static jobject create(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_create();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__create() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "create", "method_20628", "create", "m_9465_"), "(Ljava/lang/String;Ljava/util/Comparator;I)Laqz;");
    }

    static jobject _create(const jobject& arg0, const jobject& arg1, const jint& arg2) {
       const auto clazz = self();
       const auto methodID = methodID__create();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getArgumentComparator() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getComparator", "method_14292", "getArgumentComparator", "m_9458_"), "()Ljava/util/Comparator;");
    }

    static jobject getArgumentComparator(const jobject& obj) {
                
       const auto methodID = methodID_getArgumentComparator();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getExpiryTicks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "timeout", "method_20629", "getExpiryTicks", "m_9469_"), "()J");
    }

    static jlong getExpiryTicks(const jobject& obj) {
                
       const auto methodID = methodID_getExpiryTicks();
       return MinecraftSDK::env->CallLongMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_SERVER_WORLD_CHUNKTICKETTYPE_HPP