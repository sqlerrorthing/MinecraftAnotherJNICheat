// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SERVER_WORLD_SERVERLIGHTINGPROVIDER_HPP
#define NET_MINECRAFT_SERVER_WORLD_SERVERLIGHTINGPROVIDER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.server.world.ServerLightingProvider
 * Remapped: aqx
 */
namespace ServerLightingProvider {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("aqx", "net/minecraft/server/level/ThreadedLevelLightEngine", "net/minecraft/class_3227", "net/minecraft/server/world/ServerLightingProvider", "net/minecraft/src/C_15_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.server.world.ServerLightingProvider#field_44692
    [[maybe_unused]] static jint get_field_field_44692() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "DEFAULT_BATCH_SIZE", "field_44692", "field_44692", "f_283844_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.server.world.ServerLightingProvider#field_44692
    [[maybe_unused]] static void set_field_field_44692(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "DEFAULT_BATCH_SIZE", "field_44692", "field_44692", "f_283844_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.world.ServerLightingProvider#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "LOGGER", "field_14020", "LOGGER", "f_9296_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerLightingProvider#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "LOGGER", "field_14020", "LOGGER", "f_9296_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerLightingProvider#processor
    static jobject get_field_processor(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "taskMailbox", "field_17255", "processor", "f_9297_"), "Lbpk;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerLightingProvider#processor
    static void set_field_processor(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "taskMailbox", "field_17255", "processor", "f_9297_"), "Lbpk;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerLightingProvider#pendingTasks
    static jobject get_field_pendingTasks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "lightTasks", "field_17256", "pendingTasks", "f_9298_"), "Lit/unimi/dsi/fastutil/objects/ObjectList;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerLightingProvider#pendingTasks
    static void set_field_pendingTasks(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "lightTasks", "field_17256", "pendingTasks", "f_9298_"), "Lit/unimi/dsi/fastutil/objects/ObjectList;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerLightingProvider#chunkLoadingManager
    static jobject get_field_chunkLoadingManager(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "chunkMap", "field_17257", "chunkLoadingManager", "f_9299_"), "Laqb;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerLightingProvider#chunkLoadingManager
    static void set_field_chunkLoadingManager(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "chunkMap", "field_17257", "chunkLoadingManager", "f_9299_"), "Laqb;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerLightingProvider#executor
    static jobject get_field_executor(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "sorterMailbox", "field_17259", "executor", "f_9300_"), "Lbpj;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerLightingProvider#executor
    static void set_field_executor(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "sorterMailbox", "field_17259", "executor", "f_9300_"), "Lbpj;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerLightingProvider#taskBatchSize
    static jint get_field_taskBatchSize(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "taskPerBatch", "field_17260", "taskBatchSize", "f_9301_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerLightingProvider#taskBatchSize
    static void set_field_taskBatchSize(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "taskPerBatch", "field_17260", "taskBatchSize", "f_9301_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerLightingProvider#ticking
    static jobject get_field_ticking(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "scheduled", "field_18812", "ticking", "f_9302_"), "Ljava/util/concurrent/atomic/AtomicBoolean;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerLightingProvider#ticking
    static void set_field_ticking(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "scheduled", "field_18812", "ticking", "f_9302_"), "Ljava/util/concurrent/atomic/AtomicBoolean;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_close() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("close", "close", "", "", "close"), "()V");
    }

    static void close(const jobject& obj) {
                
       const auto methodID = methodID_close();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_doLightUpdates() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "runLightUpdates", "method_15516", "doLightUpdates", "m_9323_"), "()I");
    }

    static jint doLightUpdates(const jobject& obj) {
                
       const auto methodID = methodID_doLightUpdates();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_checkBlock() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "checkBlock", "method_15513", "checkBlock", "m_7174_"), "(Ljd;)V");
    }

    static void checkBlock(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_checkBlock();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_updateChunkStatus() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateChunkStatus", "method_20386", "updateChunkStatus", "m_9330_"), "(Ldcd;)V");
    }

    static void updateChunkStatus(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_updateChunkStatus();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setSectionStatus() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateSectionStatus", "method_15551", "setSectionStatus", "m_6191_"), "(Lkf;Z)V");
    }

    static void setSectionStatus(const jobject& obj, const jobject& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_setSectionStatus();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_propagateLight() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "propagateLightSources", "method_51471", "propagateLight", "m_142519_"), "(Ldcd;)V");
    }

    static void propagateLight(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_propagateLight();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setColumnEnabled() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setLightEnabled", "method_15512", "setColumnEnabled", "m_9335_"), "(Ldcd;Z)V");
    }

    static void setColumnEnabled(const jobject& obj, const jobject& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_setColumnEnabled();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_enqueueSectionData() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "queueSectionData", "method_15558", "enqueueSectionData", "m_284126_"), "(Lddf;Lkf;Ldvd;)V");
    }

    static void enqueueSectionData(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_enqueueSectionData();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_enqueue() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addTask", "method_17308", "enqueue", "m_9312_"), "(IILaqx$a;Ljava/lang/Runnable;)V");
    }

    static void enqueue(const jobject& obj, const jint& arg0, const jint& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_enqueue();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID__enqueue() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addTask", "method_17307", "enqueue", "m_9317_"), "(IILjava/util/function/IntSupplier;Laqx$a;Ljava/lang/Runnable;)V");
    }

    static void _enqueue(const jobject& obj, const jint& arg0, const jint& arg1, const jobject& arg2, const jobject& arg3, const jobject& arg4) {
                
       const auto methodID = methodID__enqueue();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_setRetainData() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "retainData", "method_20601", "setRetainData", "m_6462_"), "(Ldcd;Z)V");
    }

    static void setRetainData(const jobject& obj, const jobject& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_setRetainData();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_initializeLight() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "initializeLight", "method_51285", "initializeLight", "m_284138_"), "(Lduy;Z)Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject initializeLight(const jobject& obj, const jobject& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_initializeLight();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_light() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "lightChunk", "method_17310", "light", "m_9353_"), "(Lduy;Z)Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject light(const jobject& obj, const jobject& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_light();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "tryScheduleUpdate", "method_17303", "tick", "m_9409_"), "()V");
    }

    static void tick(const jobject& obj) {
                
       const auto methodID = methodID_tick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_runTasks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "runUpdate", "method_14277", "runTasks", "m_9366_"), "()V");
    }

    static void runTasks(const jobject& obj) {
                
       const auto methodID = methodID_runTasks();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID___enqueue() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "waitForPendingTasks", "method_53694", "enqueue", "m_293279_"), "(II)Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject __enqueue(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID___enqueue();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_SERVER_WORLD_SERVERLIGHTINGPROVIDER_HPP