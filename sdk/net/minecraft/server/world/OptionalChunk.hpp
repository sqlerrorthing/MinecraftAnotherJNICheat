// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SERVER_WORLD_OPTIONALCHUNK_HPP
#define NET_MINECRAFT_SERVER_WORLD_OPTIONALCHUNK_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.server.world.OptionalChunk
 * Remapped: aqc
 */
namespace OptionalChunk {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("aqc", "net/minecraft/server/level/ChunkResult", "net/minecraft/class_9259", "net/minecraft/server/world/OptionalChunk", "net/minecraft/src/C_313292_"));
        }
        return cachedClass;
    };

    static jmethodID methodID_of() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "of", "method_57124", "of", "m_323605_"), "(Ljava/lang/Object;)Laqc;");
    }

    static jobject of(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_of();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID__of() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "error", "method_57125", "of", "m_322259_"), "(Ljava/lang/String;)Laqc;");
    }

    static jobject _of(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID__of();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID___of() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "error", "method_57128", "of", "m_324523_"), "(Ljava/util/function/Supplier;)Laqc;");
    }

    static jobject __of(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID___of();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_isPresent() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isSuccess", "method_57122", "isPresent", "m_321137_"), "()Z");
    }

    static jboolean isPresent(const jobject& obj) {
                
       const auto methodID = methodID_isPresent();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_orElse() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "orElse", "method_57130", "orElse", "m_318814_"), "(Ljava/lang/Object;)Ljava/lang/Object;");
    }

    static jobject orElse(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_orElse();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__orElse() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "orElse", "method_57123", "orElse", "m_319813_"), "(Laqc;Ljava/lang/Object;)Ljava/lang/Object;");
    }

    static jobject _orElse(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID__orElse();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getError() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getError", "method_57129", "getError", "m_321629_"), "()Ljava/lang/String;");
    }

    static jobject getError(const jobject& obj) {
                
       const auto methodID = methodID_getError();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_ifPresent() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "ifSuccess", "method_57126", "ifPresent", "m_320477_"), "(Ljava/util/function/Consumer;)Laqc;");
    }

    static jobject ifPresent(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_ifPresent();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_map() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "map", "method_57127", "map", "m_320014_"), "(Ljava/util/function/Function;)Laqc;");
    }

    static jobject map(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_map();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_orElseThrow() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "orElseThrow", "method_57132", "orElseThrow", "m_319590_"), "(Ljava/util/function/Supplier;)Ljava/lang/Object;");
    }

    static jobject orElseThrow(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_orElseThrow();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_SERVER_WORLD_OPTIONALCHUNK_HPP