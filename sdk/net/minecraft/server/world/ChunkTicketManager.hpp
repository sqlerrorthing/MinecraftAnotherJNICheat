// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SERVER_WORLD_CHUNKTICKETMANAGER_HPP
#define NET_MINECRAFT_SERVER_WORLD_CHUNKTICKETMANAGER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.server.world.ChunkTicketManager
 * Remapped: aqk
 */
namespace ChunkTicketManager {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("aqk", "net/minecraft/server/level/DistanceManager", "net/minecraft/class_3204", "net/minecraft/server/world/ChunkTicketManager", "net/minecraft/src/C_5442_"));
        }
        return cachedClass;
    };

    // getter for static default field net.minecraft.server.world.ChunkTicketManager#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_16211", "LOGGER", "f_140758_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.server.world.ChunkTicketManager#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "LOGGER", "field_16211", "LOGGER", "f_140758_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static default field net.minecraft.server.world.ChunkTicketManager#NEARBY_PLAYER_TICKET_LEVEL
    [[maybe_unused]] static jint get_field_NEARBY_PLAYER_TICKET_LEVEL() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "PLAYER_TICKET_LEVEL", "field_17452", "NEARBY_PLAYER_TICKET_LEVEL", "f_140759_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.server.world.ChunkTicketManager#NEARBY_PLAYER_TICKET_LEVEL
    [[maybe_unused]] static void set_field_NEARBY_PLAYER_TICKET_LEVEL(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "PLAYER_TICKET_LEVEL", "field_17452", "NEARBY_PLAYER_TICKET_LEVEL", "f_140759_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.world.ChunkTicketManager#field_29765
    [[maybe_unused]] static jint get_field_field_29765() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "INITIAL_TICKET_LIST_CAPACITY", "field_29765", "field_29765", "f_143206_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ChunkTicketManager#field_29765
    [[maybe_unused]] static void set_field_field_29765(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "INITIAL_TICKET_LIST_CAPACITY", "field_29765", "field_29765", "f_143206_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for default field net.minecraft.server.world.ChunkTicketManager#playersByChunkPos
    static jobject get_field_playersByChunkPos(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "playersPerChunk", "field_17453", "playersByChunkPos", "f_140760_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.server.world.ChunkTicketManager#playersByChunkPos
    static void set_field_playersByChunkPos(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "playersPerChunk", "field_17453", "playersByChunkPos", "f_140760_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.server.world.ChunkTicketManager#ticketsByPosition
    static jobject get_field_ticketsByPosition(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "tickets", "field_13895", "ticketsByPosition", "f_140761_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectOpenHashMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.server.world.ChunkTicketManager#ticketsByPosition
    static void set_field_ticketsByPosition(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "tickets", "field_13895", "ticketsByPosition", "f_140761_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectOpenHashMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ChunkTicketManager#distanceFromTicketTracker
    static jobject get_field_distanceFromTicketTracker(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "ticketTracker", "field_18252", "distanceFromTicketTracker", "f_140762_"), "Laqk$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ChunkTicketManager#distanceFromTicketTracker
    static void set_field_distanceFromTicketTracker(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "ticketTracker", "field_18252", "distanceFromTicketTracker", "f_140762_"), "Laqk$a;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ChunkTicketManager#distanceFromNearestPlayerTracker
    static jobject get_field_distanceFromNearestPlayerTracker(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "naturalSpawnChunkCounter", "field_17454", "distanceFromNearestPlayerTracker", "f_140763_"), "Laqk$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ChunkTicketManager#distanceFromNearestPlayerTracker
    static void set_field_distanceFromNearestPlayerTracker(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "naturalSpawnChunkCounter", "field_17454", "distanceFromNearestPlayerTracker", "f_140763_"), "Laqk$b;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ChunkTicketManager#simulationDistanceTracker
    static jobject get_field_simulationDistanceTracker(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "tickingTicketsTracker", "field_34886", "simulationDistanceTracker", "f_183901_"), "Lara;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ChunkTicketManager#simulationDistanceTracker
    static void set_field_simulationDistanceTracker(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "tickingTicketsTracker", "field_34886", "simulationDistanceTracker", "f_183901_"), "Lara;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ChunkTicketManager#nearbyChunkTicketUpdater
    static jobject get_field_nearbyChunkTicketUpdater(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "playerTicketManager", "field_17455", "nearbyChunkTicketUpdater", "f_140764_"), "Laqk$c;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ChunkTicketManager#nearbyChunkTicketUpdater
    static void set_field_nearbyChunkTicketUpdater(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "playerTicketManager", "field_17455", "nearbyChunkTicketUpdater", "f_140764_"), "Laqk$c;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.server.world.ChunkTicketManager#chunkHoldersWithPendingUpdates
    static jobject get_field_chunkHoldersWithPendingUpdates(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "chunksToUpdateFutures", "field_16210", "chunkHoldersWithPendingUpdates", "f_140765_"), "Ljava/util/Set;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.server.world.ChunkTicketManager#chunkHoldersWithPendingUpdates
    static void set_field_chunkHoldersWithPendingUpdates(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "chunksToUpdateFutures", "field_16210", "chunkHoldersWithPendingUpdates", "f_140765_"), "Ljava/util/Set;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.server.world.ChunkTicketManager#levelUpdateListener
    static jobject get_field_levelUpdateListener(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "ticketThrottler", "field_17456", "levelUpdateListener", "f_140766_"), "Laqe;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.server.world.ChunkTicketManager#levelUpdateListener
    static void set_field_levelUpdateListener(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "ticketThrottler", "field_17456", "levelUpdateListener", "f_140766_"), "Laqe;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.server.world.ChunkTicketManager#playerTicketThrottler
    static jobject get_field_playerTicketThrottler(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "ticketThrottlerInput", "field_17457", "playerTicketThrottler", "f_140767_"), "Lbpj;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.server.world.ChunkTicketManager#playerTicketThrottler
    static void set_field_playerTicketThrottler(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "ticketThrottlerInput", "field_17457", "playerTicketThrottler", "f_140767_"), "Lbpj;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.server.world.ChunkTicketManager#playerTicketThrottlerUnblocker
    static jobject get_field_playerTicketThrottlerUnblocker(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "ticketThrottlerReleaser", "field_17458", "playerTicketThrottlerUnblocker", "f_140768_"), "Lbpj;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.server.world.ChunkTicketManager#playerTicketThrottlerUnblocker
    static void set_field_playerTicketThrottlerUnblocker(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "ticketThrottlerReleaser", "field_17458", "playerTicketThrottlerUnblocker", "f_140768_"), "Lbpj;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.server.world.ChunkTicketManager#freshPlayerTicketPositions
    static jobject get_field_freshPlayerTicketPositions(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "ticketsToRelease", "field_17459", "freshPlayerTicketPositions", "f_140769_"), "Lit/unimi/dsi/fastutil/longs/LongSet;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.server.world.ChunkTicketManager#freshPlayerTicketPositions
    static void set_field_freshPlayerTicketPositions(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "ticketsToRelease", "field_17459", "freshPlayerTicketPositions", "f_140769_"), "Lit/unimi/dsi/fastutil/longs/LongSet;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.server.world.ChunkTicketManager#mainThreadExecutor
    static jobject get_field_mainThreadExecutor(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "mainThreadExecutor", "field_17460", "mainThreadExecutor", "f_140770_"), "Ljava/util/concurrent/Executor;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.server.world.ChunkTicketManager#mainThreadExecutor
    static void set_field_mainThreadExecutor(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "mainThreadExecutor", "field_17460", "mainThreadExecutor", "f_140770_"), "Ljava/util/concurrent/Executor;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ChunkTicketManager#age
    static jlong get_field_age(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "ticketTickCounter", "field_13894", "age", "f_140771_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ChunkTicketManager#age
    static void set_field_age(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "ticketTickCounter", "field_13894", "age", "f_140771_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ChunkTicketManager#simulationDistance
    static jint get_field_simulationDistance(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "simulationDistance", "field_34887", "simulationDistance", "f_183902_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ChunkTicketManager#simulationDistance
    static void set_field_simulationDistance(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "simulationDistance", "field_34887", "simulationDistance", "f_183902_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    static jmethodID methodID_purge() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "purgeStaleTickets", "method_14045", "purge", "m_140776_"), "()V");
    }

    static void purge(const jobject& obj) {
                
       const auto methodID = methodID_purge();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "getTicketLevelAt", "method_14046", "getLevel", "m_140797_"), "(Lazg;)I");
    }

    static jint getLevel(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getLevel();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_isUnloaded() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isChunkToRemove", "method_14035", "isUnloaded", "m_7009_"), "(J)Z");
    }

    static jboolean isUnloaded(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_isUnloaded();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getChunkHolder() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getChunk", "method_14038", "getChunkHolder", "m_7316_"), "(J)Lapz;");
    }

    static jobject getChunkHolder(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_getChunkHolder();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateChunkScheduling", "method_14053", "setLevel", "m_7288_"), "(JILapz;I)Lapz;");
    }

    static jobject setLevel(const jobject& obj, const jlong& arg0, const jint& arg1, const jobject& arg2, const jint& arg3) {
                
       const auto methodID = methodID_setLevel();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_update() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "runAllUpdates", "method_15892", "update", "m_140805_"), "(Laqb;)Z");
    }

    static jboolean update(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_update();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_addTicket() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addTicket", "method_14042", "addTicket", "m_140784_"), "(JLaqy;)V");
    }

    static void addTicket(const jobject& obj, const jlong& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_addTicket();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_removeTicket() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "removeTicket", "method_17645", "removeTicket", "m_140818_"), "(JLaqy;)V");
    }

    static void removeTicket(const jobject& obj, const jlong& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_removeTicket();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_addTicketWithLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addTicket", "method_17290", "addTicketWithLevel", "m_140792_"), "(Laqz;Ldcd;ILjava/lang/Object;)V");
    }

    static void addTicketWithLevel(const jobject& obj, const jobject& arg0, const jobject& arg1, const jint& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_addTicketWithLevel();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_removeTicketWithLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "removeTicket", "method_20444", "removeTicketWithLevel", "m_140823_"), "(Laqz;Ldcd;ILjava/lang/Object;)V");
    }

    static void removeTicketWithLevel(const jobject& obj, const jobject& arg0, const jobject& arg1, const jint& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_removeTicketWithLevel();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID__addTicket() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "addRegionTicket", "method_17291", "addTicket", "m_140840_"), "(Laqz;Ldcd;ILjava/lang/Object;)V");
    }

    static void _addTicket(const jobject& obj, const jobject& arg0, const jobject& arg1, const jint& arg2, const jobject& arg3) {
                
       const auto methodID = methodID__addTicket();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID__removeTicket() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "removeRegionTicket", "method_17292", "removeTicket", "m_140849_"), "(Laqz;Ldcd;ILjava/lang/Object;)V");
    }

    static void _removeTicket(const jobject& obj, const jobject& arg0, const jobject& arg1, const jint& arg2, const jobject& arg3) {
                
       const auto methodID = methodID__removeTicket();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_getTicketSet() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "getTickets", "method_14050", "getTicketSet", "m_140857_"), "(J)Lazg;");
    }

    static jobject getTicketSet(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_getTicketSet();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setChunkForced() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateChunkForced", "method_14036", "setChunkForced", "m_140799_"), "(Ldcd;Z)V");
    }

    static void setChunkForced(const jobject& obj, const jobject& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_setChunkForced();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_handleChunkEnter() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addPlayer", "method_14048", "handleChunkEnter", "m_140802_"), "(Lkf;Laqv;)V");
    }

    static void handleChunkEnter(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_handleChunkEnter();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_handleChunkLeave() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "removePlayer", "method_14051", "handleChunkLeave", "m_140828_"), "(Lkf;Laqv;)V");
    }

    static void handleChunkLeave(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_handleChunkLeave();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getPlayerSimulationLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "getPlayerTicketLevel", "method_38633", "getPlayerSimulationLevel", "m_183918_"), "()I");
    }

    static jint getPlayerSimulationLevel(const jobject& obj) {
                
       const auto methodID = methodID_getPlayerSimulationLevel();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_shouldTickEntities() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "inEntityTickingRange", "method_38630", "shouldTickEntities", "m_183913_"), "(J)Z");
    }

    static jboolean shouldTickEntities(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_shouldTickEntities();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_shouldTickBlocks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "inBlockTickingRange", "method_38632", "shouldTickBlocks", "m_183916_"), "(J)Z");
    }

    static jboolean shouldTickBlocks(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_shouldTickBlocks();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getTicket() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "getTicketDebugString", "method_21623", "getTicket", "m_140838_"), "(J)Ljava/lang/String;");
    }

    static jobject getTicket(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_getTicket();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setWatchDistance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updatePlayerTickets", "method_14049", "setWatchDistance", "m_140777_"), "(I)V");
    }

    static void setWatchDistance(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_setWatchDistance();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setSimulationDistance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "updateSimulationDistance", "method_38629", "setSimulationDistance", "m_183911_"), "(I)V");
    }

    static void setSimulationDistance(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_setSimulationDistance();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getTickedChunkCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getNaturalSpawnChunkCount", "method_14052", "getTickedChunkCount", "m_140816_"), "()I");
    }

    static jint getTickedChunkCount(const jobject& obj) {
                
       const auto methodID = methodID_getTickedChunkCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_shouldTick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "hasPlayersNearby", "method_20800", "shouldTick", "m_140847_"), "(J)Z");
    }

    static jboolean shouldTick(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_shouldTick();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_toDumpString() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getDebugStatus", "method_21683", "toDumpString", "m_140837_"), "()Ljava/lang/String;");
    }

    static jobject toDumpString(const jobject& obj) {
                
       const auto methodID = methodID_toDumpString();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_dump() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "dumpTickets", "method_34876", "dump", "m_143207_"), "(Ljava/lang/String;)V");
    }

    static void dump(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_dump();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getSimulationDistanceTracker() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "tickingTracker", "method_38631", "getSimulationDistanceTracker", "m_183915_"), "()Lara;");
    }

    static jobject getSimulationDistanceTracker(const jobject& obj) {
                
       const auto methodID = methodID_getSimulationDistanceTracker();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_removePersistentTickets() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "removeTicketsOnClosing", "method_39995", "removePersistentTickets", "m_201910_"), "()V");
    }

    static void removePersistentTickets(const jobject& obj) {
                
       const auto methodID = methodID_removePersistentTickets();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_shouldDelayShutdown() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "hasTickets", "method_39996", "shouldDelayShutdown", "m_201911_"), "()Z");
    }

    static jboolean shouldDelayShutdown(const jobject& obj) {
                
       const auto methodID = methodID_shouldDelayShutdown();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_SERVER_WORLD_CHUNKTICKETMANAGER_HPP