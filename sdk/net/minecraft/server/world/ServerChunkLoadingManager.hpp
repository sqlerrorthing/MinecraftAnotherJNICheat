// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SERVER_WORLD_SERVERCHUNKLOADINGMANAGER_HPP
#define NET_MINECRAFT_SERVER_WORLD_SERVERCHUNKLOADINGMANAGER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.server.world.ServerChunkLoadingManager
 * Remapped: aqb
 */
namespace ServerChunkLoadingManager {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("aqb", "net/minecraft/server/level/ChunkMap", "net/minecraft/class_3898", "net/minecraft/server/world/ServerChunkLoadingManager", "net/minecraft/src/C_5429_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.server.world.ServerChunkLoadingManager#UNLOADED_CHUNKS
    [[maybe_unused]] static jobject get_field_UNLOADED_CHUNKS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "UNLOADED_CHUNK_LIST_RESULT", "field_51862", "UNLOADED_CHUNKS", "f_336919_"), "Laqc;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkLoadingManager#UNLOADED_CHUNKS
    [[maybe_unused]] static void set_field_UNLOADED_CHUNKS(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "UNLOADED_CHUNK_LIST_RESULT", "field_51862", "UNLOADED_CHUNKS", "f_336919_"), "Laqc;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.world.ServerChunkLoadingManager#UNLOADED_CHUNKS_FUTURE
    [[maybe_unused]] static jobject get_field_UNLOADED_CHUNKS_FUTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "UNLOADED_CHUNK_LIST_FUTURE", "field_51863", "UNLOADED_CHUNKS_FUTURE", "f_337118_"), "Ljava/util/concurrent/CompletableFuture;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkLoadingManager#UNLOADED_CHUNKS_FUTURE
    [[maybe_unused]] static void set_field_UNLOADED_CHUNKS_FUTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "UNLOADED_CHUNK_LIST_FUTURE", "field_51863", "UNLOADED_CHUNKS_FUTURE", "f_337118_"), "Ljava/util/concurrent/CompletableFuture;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.world.ServerChunkLoadingManager#PROTO_CHUNK
    [[maybe_unused]] static jbyte get_field_PROTO_CHUNK() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "CHUNK_TYPE_REPLACEABLE", "field_29671", "PROTO_CHUNK", "f_143034_"), "B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticByteField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkLoadingManager#PROTO_CHUNK
    [[maybe_unused]] static void set_field_PROTO_CHUNK(const jbyte &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "CHUNK_TYPE_REPLACEABLE", "field_29671", "PROTO_CHUNK", "f_143034_"), "B");
        return MinecraftSDK::env->SetStaticByteField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.world.ServerChunkLoadingManager#UNMARKED_CHUNK
    [[maybe_unused]] static jbyte get_field_UNMARKED_CHUNK() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "CHUNK_TYPE_UNKNOWN", "field_29672", "UNMARKED_CHUNK", "f_143035_"), "B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticByteField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkLoadingManager#UNMARKED_CHUNK
    [[maybe_unused]] static void set_field_UNMARKED_CHUNK(const jbyte &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "CHUNK_TYPE_UNKNOWN", "field_29672", "UNMARKED_CHUNK", "f_143035_"), "B");
        return MinecraftSDK::env->SetStaticByteField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.world.ServerChunkLoadingManager#LEVEL_CHUNK
    [[maybe_unused]] static jbyte get_field_LEVEL_CHUNK() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "CHUNK_TYPE_FULL", "field_29673", "LEVEL_CHUNK", "f_143036_"), "B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticByteField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkLoadingManager#LEVEL_CHUNK
    [[maybe_unused]] static void set_field_LEVEL_CHUNK(const jbyte &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "CHUNK_TYPE_FULL", "field_29673", "LEVEL_CHUNK", "f_143036_"), "B");
        return MinecraftSDK::env->SetStaticByteField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.world.ServerChunkLoadingManager#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "LOGGER", "field_17212", "LOGGER", "f_140128_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkLoadingManager#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "LOGGER", "field_17212", "LOGGER", "f_140128_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.world.ServerChunkLoadingManager#field_29674
    [[maybe_unused]] static jint get_field_field_29674() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "CHUNK_SAVED_PER_TICK", "field_29674", "field_29674", "f_143037_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkLoadingManager#field_29674
    [[maybe_unused]] static void set_field_field_29674(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "CHUNK_SAVED_PER_TICK", "field_29674", "field_29674", "f_143037_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.world.ServerChunkLoadingManager#field_36291
    [[maybe_unused]] static jint get_field_field_36291() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "CHUNK_SAVED_EAGERLY_PER_TICK", "field_36291", "field_36291", "f_198789_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkLoadingManager#field_36291
    [[maybe_unused]] static void set_field_field_36291(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "CHUNK_SAVED_EAGERLY_PER_TICK", "field_36291", "field_36291", "f_198789_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.world.ServerChunkLoadingManager#field_36384
    [[maybe_unused]] static jint get_field_field_36384() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "EAGER_CHUNK_SAVE_COOLDOWN_IN_MILLIS", "field_36384", "field_36384", "f_202982_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkLoadingManager#field_36384
    [[maybe_unused]] static void set_field_field_36384(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("n", "EAGER_CHUNK_SAVE_COOLDOWN_IN_MILLIS", "field_36384", "field_36384", "f_202982_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.server.world.ServerChunkLoadingManager#DEFAULT_VIEW_DISTANCE
    [[maybe_unused]] static jint get_field_DEFAULT_VIEW_DISTANCE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "MIN_VIEW_DISTANCE", "field_29675", "DEFAULT_VIEW_DISTANCE", "f_143038_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.server.world.ServerChunkLoadingManager#DEFAULT_VIEW_DISTANCE
    [[maybe_unused]] static void set_field_DEFAULT_VIEW_DISTANCE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "MIN_VIEW_DISTANCE", "field_29675", "DEFAULT_VIEW_DISTANCE", "f_143038_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.server.world.ServerChunkLoadingManager#field_29669
    [[maybe_unused]] static jint get_field_field_29669() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "MAX_VIEW_DISTANCE", "field_29669", "field_29669", "f_143032_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.server.world.ServerChunkLoadingManager#field_29669
    [[maybe_unused]] static void set_field_field_29669(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "MAX_VIEW_DISTANCE", "field_29669", "field_29669", "f_143032_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.server.world.ServerChunkLoadingManager#field_29670
    [[maybe_unused]] static jint get_field_field_29670() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "FORCED_TICKET_LEVEL", "field_29670", "field_29670", "f_143033_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.server.world.ServerChunkLoadingManager#field_29670
    [[maybe_unused]] static void set_field_field_29670(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "FORCED_TICKET_LEVEL", "field_29670", "field_29670", "f_143033_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerChunkLoadingManager#currentChunkHolders
    static jobject get_field_currentChunkHolders(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "updatingChunkMap", "field_17213", "currentChunkHolders", "f_140129_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectLinkedOpenHashMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkLoadingManager#currentChunkHolders
    static void set_field_currentChunkHolders(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "updatingChunkMap", "field_17213", "currentChunkHolders", "f_140129_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectLinkedOpenHashMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerChunkLoadingManager#chunkHolders
    static jobject get_field_chunkHolders(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "visibleChunkMap", "field_17220", "chunkHolders", "f_140130_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectLinkedOpenHashMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkLoadingManager#chunkHolders
    static void set_field_chunkHolders(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "visibleChunkMap", "field_17220", "chunkHolders", "f_140130_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectLinkedOpenHashMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerChunkLoadingManager#chunksToUnload
    static jobject get_field_chunksToUnload(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "pendingUnloads", "field_18807", "chunksToUnload", "f_140131_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectLinkedOpenHashMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkLoadingManager#chunksToUnload
    static void set_field_chunksToUnload(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "pendingUnloads", "field_18807", "chunksToUnload", "f_140131_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectLinkedOpenHashMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerChunkLoadingManager#loaders
    static jobject get_field_loaders(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "pendingGenerationTasks", "field_51864", "loaders", "f_337610_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkLoadingManager#loaders
    static void set_field_loaders(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "pendingGenerationTasks", "field_51864", "loaders", "f_337610_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.server.world.ServerChunkLoadingManager#world
    static jobject get_field_world(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "level", "field_17214", "world", "f_140133_"), "Laqu;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.server.world.ServerChunkLoadingManager#world
    static void set_field_world(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "level", "field_17214", "world", "f_140133_"), "Laqu;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerChunkLoadingManager#lightingProvider
    static jobject get_field_lightingProvider(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "lightEngine", "field_17215", "lightingProvider", "f_140134_"), "Laqx;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkLoadingManager#lightingProvider
    static void set_field_lightingProvider(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "lightEngine", "field_17215", "lightingProvider", "f_140134_"), "Laqx;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerChunkLoadingManager#mainThreadExecutor
    static jobject get_field_mainThreadExecutor(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "mainThreadExecutor", "field_17216", "mainThreadExecutor", "f_140135_"), "Lbph;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkLoadingManager#mainThreadExecutor
    static void set_field_mainThreadExecutor(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "mainThreadExecutor", "field_17216", "mainThreadExecutor", "f_140135_"), "Lbph;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerChunkLoadingManager#noiseConfig
    static jobject get_field_noiseConfig(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "randomState", "field_37278", "noiseConfig", "f_214834_"), "Ldzm;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkLoadingManager#noiseConfig
    static void set_field_noiseConfig(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "randomState", "field_37278", "noiseConfig", "f_214834_"), "Ldzm;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerChunkLoadingManager#structurePlacementCalculator
    static jobject get_field_structurePlacementCalculator(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("w", "chunkGeneratorState", "field_40856", "structurePlacementCalculator", "f_254626_"), "Ldva;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkLoadingManager#structurePlacementCalculator
    static void set_field_structurePlacementCalculator(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("w", "chunkGeneratorState", "field_40856", "structurePlacementCalculator", "f_254626_"), "Ldva;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerChunkLoadingManager#persistentStateManagerFactory
    static jobject get_field_persistentStateManagerFactory(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("x", "overworldDataStorage", "field_17705", "persistentStateManagerFactory", "f_140137_"), "Ljava/util/function/Supplier;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkLoadingManager#persistentStateManagerFactory
    static void set_field_persistentStateManagerFactory(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("x", "overworldDataStorage", "field_17705", "persistentStateManagerFactory", "f_140137_"), "Ljava/util/function/Supplier;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerChunkLoadingManager#pointOfInterestStorage
    static jobject get_field_pointOfInterestStorage(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("y", "poiManager", "field_18808", "pointOfInterestStorage", "f_140138_"), "Lces;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkLoadingManager#pointOfInterestStorage
    static void set_field_pointOfInterestStorage(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("y", "poiManager", "field_18808", "pointOfInterestStorage", "f_140138_"), "Lces;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.server.world.ServerChunkLoadingManager#unloadedChunks
    static jobject get_field_unloadedChunks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("z", "toDrop", "field_17221", "unloadedChunks", "f_140139_"), "Lit/unimi/dsi/fastutil/longs/LongSet;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.server.world.ServerChunkLoadingManager#unloadedChunks
    static void set_field_unloadedChunks(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("z", "toDrop", "field_17221", "unloadedChunks", "f_140139_"), "Lit/unimi/dsi/fastutil/longs/LongSet;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerChunkLoadingManager#chunkHolderListDirty
    static jboolean get_field_chunkHolderListDirty(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("A", "modified", "field_17222", "chunkHolderListDirty", "f_140140_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkLoadingManager#chunkHolderListDirty
    static void set_field_chunkHolderListDirty(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("A", "modified", "field_17222", "chunkHolderListDirty", "f_140140_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerChunkLoadingManager#chunkTaskPrioritySystem
    static jobject get_field_chunkTaskPrioritySystem(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("B", "queueSorter", "field_17223", "chunkTaskPrioritySystem", "f_140141_"), "Laqe;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkLoadingManager#chunkTaskPrioritySystem
    static void set_field_chunkTaskPrioritySystem(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("B", "queueSorter", "field_17223", "chunkTaskPrioritySystem", "f_140141_"), "Laqe;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerChunkLoadingManager#worldGenExecutor
    static jobject get_field_worldGenExecutor(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("C", "worldgenMailbox", "field_17224", "worldGenExecutor", "f_140142_"), "Lbpj;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkLoadingManager#worldGenExecutor
    static void set_field_worldGenExecutor(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("C", "worldgenMailbox", "field_17224", "worldGenExecutor", "f_140142_"), "Lbpj;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerChunkLoadingManager#mainExecutor
    static jobject get_field_mainExecutor(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("D", "mainThreadMailbox", "field_17226", "mainExecutor", "f_140143_"), "Lbpj;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkLoadingManager#mainExecutor
    static void set_field_mainExecutor(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("D", "mainThreadMailbox", "field_17226", "mainExecutor", "f_140143_"), "Lbpj;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerChunkLoadingManager#worldGenerationProgressListener
    static jobject get_field_worldGenerationProgressListener(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("E", "progressListener", "field_17442", "worldGenerationProgressListener", "f_140144_"), "Lard;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkLoadingManager#worldGenerationProgressListener
    static void set_field_worldGenerationProgressListener(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("E", "progressListener", "field_17442", "worldGenerationProgressListener", "f_140144_"), "Lard;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerChunkLoadingManager#chunkStatusChangeListener
    static jobject get_field_chunkStatusChangeListener(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("F", "chunkStatusListener", "field_26931", "chunkStatusChangeListener", "f_143031_"), "Ldxf;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkLoadingManager#chunkStatusChangeListener
    static void set_field_chunkStatusChangeListener(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("F", "chunkStatusListener", "field_26931", "chunkStatusChangeListener", "f_143031_"), "Ldxf;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerChunkLoadingManager#ticketManager
    static jobject get_field_ticketManager(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("G", "distanceManager", "field_17228", "ticketManager", "f_140145_"), "Laqb$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkLoadingManager#ticketManager
    static void set_field_ticketManager(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("G", "distanceManager", "field_17228", "ticketManager", "f_140145_"), "Laqb$a;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerChunkLoadingManager#totalChunksLoadedCount
    static jobject get_field_totalChunksLoadedCount(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("H", "tickingGenerated", "field_17230", "totalChunksLoadedCount", "f_140146_"), "Ljava/util/concurrent/atomic/AtomicInteger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkLoadingManager#totalChunksLoadedCount
    static void set_field_totalChunksLoadedCount(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("H", "tickingGenerated", "field_17230", "totalChunksLoadedCount", "f_140146_"), "Ljava/util/concurrent/atomic/AtomicInteger;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerChunkLoadingManager#saveDir
    static jobject get_field_saveDir(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("I", "storageName", "field_17707", "saveDir", "f_182284_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkLoadingManager#saveDir
    static void set_field_saveDir(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("I", "storageName", "field_17707", "saveDir", "f_182284_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerChunkLoadingManager#playerChunkWatchingManager
    static jobject get_field_playerChunkWatchingManager(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("J", "playerMap", "field_18241", "playerChunkWatchingManager", "f_140149_"), "Laqo;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkLoadingManager#playerChunkWatchingManager
    static void set_field_playerChunkWatchingManager(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("J", "playerMap", "field_18241", "playerChunkWatchingManager", "f_140149_"), "Laqo;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerChunkLoadingManager#entityTrackers
    static jobject get_field_entityTrackers(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("K", "entityMap", "field_18242", "entityTrackers", "f_140150_"), "Lit/unimi/dsi/fastutil/ints/Int2ObjectMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkLoadingManager#entityTrackers
    static void set_field_entityTrackers(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("K", "entityMap", "field_18242", "entityTrackers", "f_140150_"), "Lit/unimi/dsi/fastutil/ints/Int2ObjectMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerChunkLoadingManager#chunkToType
    static jobject get_field_chunkToType(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("L", "chunkTypeCache", "field_23786", "chunkToType", "f_140151_"), "Lit/unimi/dsi/fastutil/longs/Long2ByteMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkLoadingManager#chunkToType
    static void set_field_chunkToType(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("L", "chunkTypeCache", "field_23786", "chunkToType", "f_140151_"), "Lit/unimi/dsi/fastutil/longs/Long2ByteMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerChunkLoadingManager#chunkToNextSaveTimeMs
    static jobject get_field_chunkToNextSaveTimeMs(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("M", "chunkSaveCooldowns", "field_36383", "chunkToNextSaveTimeMs", "f_202981_"), "Lit/unimi/dsi/fastutil/longs/Long2LongMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkLoadingManager#chunkToNextSaveTimeMs
    static void set_field_chunkToNextSaveTimeMs(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("M", "chunkSaveCooldowns", "field_36383", "chunkToNextSaveTimeMs", "f_202981_"), "Lit/unimi/dsi/fastutil/longs/Long2LongMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerChunkLoadingManager#unloadTaskQueue
    static jobject get_field_unloadTaskQueue(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("N", "unloadQueue", "field_19343", "unloadTaskQueue", "f_140125_"), "Ljava/util/Queue;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkLoadingManager#unloadTaskQueue
    static void set_field_unloadTaskQueue(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("N", "unloadQueue", "field_19343", "unloadTaskQueue", "f_140125_"), "Ljava/util/Queue;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerChunkLoadingManager#watchDistance
    static jint get_field_watchDistance(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("O", "serverViewDistance", "field_18243", "watchDistance", "f_290679_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkLoadingManager#watchDistance
    static void set_field_watchDistance(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("O", "serverViewDistance", "field_18243", "watchDistance", "f_290679_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerChunkLoadingManager#generationContext
    static jobject get_field_generationContext(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("P", "worldGenContext", "field_51861", "generationContext", "f_314073_"), "Ldwe;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkLoadingManager#generationContext
    static void set_field_generationContext(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("P", "worldGenContext", "field_51861", "generationContext", "f_314073_"), "Ldwe;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_getChunkGenerator() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "generator", "method_37897", "getChunkGenerator", "m_183719_"), "()Lduz;");
    }

    static jobject getChunkGenerator(const jobject& obj) {
                
       const auto methodID = methodID_getChunkGenerator();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getStructurePlacementCalculator() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "generatorState", "method_46641", "getStructurePlacementCalculator", "m_255435_"), "()Ldva;");
    }

    static jobject getStructurePlacementCalculator(const jobject& obj) {
                
       const auto methodID = methodID_getStructurePlacementCalculator();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getNoiseConfig() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "randomState", "method_41247", "getNoiseConfig", "m_214914_"), "()Ldzm;");
    }

    static jobject getNoiseConfig(const jobject& obj) {
                
       const auto methodID = methodID_getNoiseConfig();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getSquaredDistance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "euclideanDistanceSquared", "method_18704", "getSquaredDistance", "m_140226_"), "(Ldcd;Lbsr;)D");
    }

    static jdouble getSquaredDistance(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_getSquaredDistance();
       return MinecraftSDK::env->CallStaticDoubleMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isTracked() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isChunkTracked", "method_52345", "isTracked", "m_295978_"), "(Laqv;II)Z");
    }

    static jboolean isTracked(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_isTracked();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_isOnTrackEdge() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "isChunkOnTrackedBorder", "method_52351", "isOnTrackEdge", "m_293654_"), "(Laqv;II)Z");
    }

    static jboolean isOnTrackEdge(const jobject& obj, const jobject& arg0, const jint& arg1, const jint& arg2) {
                
       const auto methodID = methodID_isOnTrackEdge();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getLightingProvider() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getLightEngine", "method_17212", "getLightingProvider", "m_140166_"), "()Laqx;");
    }

    static jobject getLightingProvider(const jobject& obj) {
                
       const auto methodID = methodID_getLightingProvider();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getCurrentChunkHolder() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getUpdatingChunkIfPresent", "method_17255", "getCurrentChunkHolder", "m_140174_"), "(J)Lapz;");
    }

    static jobject getCurrentChunkHolder(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_getCurrentChunkHolder();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getChunkHolder() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getVisibleChunkIfPresent", "method_17216", "getChunkHolder", "m_140327_"), "(J)Lapz;");
    }

    static jobject getChunkHolder(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_getChunkHolder();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getCompletedLevelSupplier() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getChunkQueueLevel", "method_17604", "getCompletedLevelSupplier", "m_140371_"), "(J)Ljava/util/function/IntSupplier;");
    }

    static jobject getCompletedLevelSupplier(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_getCompletedLevelSupplier();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getChunkLoadingDebugInfo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getChunkDebugData", "method_23272", "getChunkLoadingDebugInfo", "m_140204_"), "(Ldcd;)Ljava/lang/String;");
    }

    static jobject getChunkLoadingDebugInfo(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getChunkLoadingDebugInfo();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getRegion() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getChunkRangeFuture", "method_17220", "getRegion", "m_280541_"), "(Lapz;ILjava/util/function/IntFunction;)Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject getRegion(const jobject& obj, const jobject& arg0, const jint& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_getRegion();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_crash() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "debugFuturesAndCreateReportedException", "method_40067", "crash", "m_203751_"), "(Ljava/lang/IllegalStateException;Ljava/lang/String;)Lz;");
    }

    static jobject crash(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_crash();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_makeChunkEntitiesTickable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "prepareEntityTickingChunk", "method_17247", "makeChunkEntitiesTickable", "m_280208_"), "(Lapz;)Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject makeChunkEntitiesTickable(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_makeChunkEntitiesTickable();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateChunkScheduling", "method_17217", "setLevel", "m_140176_"), "(JILapz;I)Lapz;");
    }

    static jobject setLevel(const jobject& obj, const jlong& arg0, const jint& arg1, const jobject& arg2, const jint& arg3) {
                
       const auto methodID = methodID_setLevel();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_close() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("close", "close", "", "", "close"), "()V");
    }

    static void close(const jobject& obj) {
                
       const auto methodID = methodID_close();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_save() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "saveAllChunks", "method_17242", "save", "m_140318_"), "(Z)V");
    }

    static void save(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_save();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "tick", "method_17233", "tick", "m_140280_"), "(Ljava/util/function/BooleanSupplier;)V");
    }

    static void tick(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_tick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_shouldDelayShutdown() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "hasWork", "method_39992", "shouldDelayShutdown", "m_201907_"), "()Z");
    }

    static jboolean shouldDelayShutdown(const jobject& obj) {
                
       const auto methodID = methodID_shouldDelayShutdown();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_unloadChunks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "processUnloads", "method_20605", "unloadChunks", "m_140353_"), "(Ljava/util/function/BooleanSupplier;)V");
    }

    static void unloadChunks(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_unloadChunks();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_tryUnloadChunk() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "scheduleUnload", "method_20458", "tryUnloadChunk", "m_140181_"), "(JLapz;)V");
    }

    static void tryUnloadChunk(const jobject& obj, const jlong& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_tryUnloadChunk();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_updateHolderMap() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "promoteChunkMap", "method_17244", "updateHolderMap", "m_140324_"), "()Z");
    }

    static jboolean updateHolderMap(const jobject& obj) {
                
       const auto methodID = methodID_updateHolderMap();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_loadChunk() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "scheduleChunkLoad", "method_20619", "loadChunk", "m_140417_"), "(Ldcd;)Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject loadChunk(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_loadChunk();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_containsStatus() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "isChunkDataValid", "method_43380", "containsStatus", "m_214940_"), "(Lub;)Z");
    }

    static jboolean containsStatus(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_containsStatus();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_recoverFromException() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleChunkLoadFailure", "method_43376", "recoverFromException", "m_214901_"), "(Ljava/lang/Throwable;Ldcd;)Lduy;");
    }

    static jobject recoverFromException(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_recoverFromException();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getProtoChunk() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "createEmptyChunk", "method_43382", "getProtoChunk", "m_214961_"), "(Ldcd;)Lduy;");
    }

    static jobject getProtoChunk(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getProtoChunk();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_markAsProtoChunk() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "markPositionReplaceable", "method_27054", "markAsProtoChunk", "m_140422_"), "(Ldcd;)V");
    }

    static void markAsProtoChunk(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_markAsProtoChunk();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_mark() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "markPosition", "method_27053", "mark", "m_140229_"), "(Ldcd;Ldwd;)B");
    }

    static jbyte mark(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_mark();
       return MinecraftSDK::env->CallByteMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_acquire() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "acquireGeneration", "method_60448", "acquire", "m_339158_"), "(J)Laqn;");
    }

    static jobject acquire(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_acquire();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_release() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "releaseGeneration", "method_60441", "release", "m_338685_"), "(Laqn;)V");
    }

    static void release(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_release();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_generate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "applyStep", "method_60442", "generate", "m_338637_"), "(Laqn;Ldwc;Lazi;)Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject generate(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_generate();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_createLoader() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "scheduleGenerationTask", "method_60443", "createLoader", "m_338350_"), "(Ldvz;Ldcd;)Lapy;");
    }

    static jobject createLoader(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_createLoader();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_schedule() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "runGenerationTask", "method_60439", "schedule", "m_340434_"), "(Lapy;)V");
    }

    static void schedule(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_schedule();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_updateChunks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "runGenerationTasks", "method_60450", "updateChunks", "m_339290_"), "()V");
    }

    static void updateChunks(const jobject& obj) {
                
       const auto methodID = methodID_updateChunks();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_makeChunkTickable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "prepareTickingChunk", "method_17235", "makeChunkTickable", "m_143053_"), "(Lapz;)Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject makeChunkTickable(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_makeChunkTickable();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_sendToPlayers() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onChunkReadyToSend", "method_53686", "sendToPlayers", "m_293802_"), "(Ldvi;)V");
    }

    static void sendToPlayers(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_sendToPlayers();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_makeChunkAccessible() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "prepareAccessibleChunk", "method_31417", "makeChunkAccessible", "m_143109_"), "(Lapz;)Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject makeChunkAccessible(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_makeChunkAccessible();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getTotalChunksLoadedCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "getTickingGenerated", "method_17253", "getTotalChunksLoadedCount", "m_140368_"), "()I");
    }

    static jint getTotalChunksLoadedCount(const jobject& obj) {
                
       const auto methodID = methodID_getTotalChunksLoadedCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID__save() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "saveChunkIfNeeded", "method_39925", "save", "m_198874_"), "(Lapz;)Z");
    }

    static jboolean _save(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__save();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID___save() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "save", "method_17228", "save", "m_140258_"), "(Lduy;)Z");
    }

    static jboolean __save(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID___save();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isLevelChunk() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "isExistingChunkFull", "method_27055", "isLevelChunk", "m_140425_"), "(Ldcd;)Z");
    }

    static jboolean isLevelChunk(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isLevelChunk();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setViewDistance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setServerViewDistance", "method_17214", "setViewDistance", "m_293413_"), "(I)V");
    }

    static void setViewDistance(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_setViewDistance();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getViewDistance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getPlayerViewDistance", "method_52350", "getViewDistance", "m_294650_"), "(Laqv;)I");
    }

    static jint getViewDistance(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getViewDistance();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_track() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "markChunkPendingToSend", "method_52347", "track", "m_294841_"), "(Laqv;Ldcd;)V");
    }

    static void track(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_track();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__track() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "markChunkPendingToSend", "method_52348", "track", "m_296018_"), "(Laqv;Ldvi;)V");
    }

    static void _track(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID__track();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_untrack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "dropChunk", "method_52352", "untrack", "m_295122_"), "(Laqv;Ldcd;)V");
    }

    static void untrack(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_untrack();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getPostProcessedChunk() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "getChunkToSend", "method_53688", "getPostProcessedChunk", "m_295187_"), "(J)Ldvi;");
    }

    static jobject getPostProcessedChunk(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_getPostProcessedChunk();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getLoadedChunkCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "size", "method_17260", "getLoadedChunkCount", "m_140394_"), "()I");
    }

    static jint getLoadedChunkCount(const jobject& obj) {
                
       const auto methodID = methodID_getLoadedChunkCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getTicketManager() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "getDistanceManager", "method_17263", "getTicketManager", "m_143145_"), "()Laqk;");
    }

    static jobject getTicketManager(const jobject& obj) {
                
       const auto methodID = methodID_getTicketManager();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_entryIterator() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "getChunks", "method_17264", "entryIterator", "m_140416_"), "()Ljava/lang/Iterable;");
    }

    static jobject entryIterator(const jobject& obj) {
                
       const auto methodID = methodID_entryIterator();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_dump() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "dumpChunks", "method_21619", "dump", "m_140274_"), "(Ljava/io/Writer;)V");
    }

    static void dump(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_dump();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getFutureStatus() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "printFuture", "method_21676", "getFutureStatus", "m_140278_"), "(Ljava/util/concurrent/CompletableFuture;)Ljava/lang/String;");
    }

    static jobject getFutureStatus(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getFutureStatus();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getUpdatedChunkNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "readChunk", "method_43383", "getUpdatedChunkNbt", "m_214963_"), "(Ldcd;)Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject getUpdatedChunkNbt(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getUpdatedChunkNbt();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_updateChunkNbt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "upgradeChunkTag", "method_43381", "updateChunkNbt", "m_214947_"), "(Lub;)Lub;");
    }

    static jobject updateChunkNbt(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_updateChunkNbt();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_shouldTick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "anyPlayerCloseEnoughForSpawning", "method_38783", "shouldTick", "m_183879_"), "(Ldcd;)Z");
    }

    static jboolean shouldTick(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_shouldTick();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getPlayersWatchingChunk() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getPlayersCloseForSpawning", "method_37907", "getPlayersWatchingChunk", "m_183888_"), "(Ldcd;)Ljava/util/List;");
    }

    static jobject getPlayersWatchingChunk(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getPlayersWatchingChunk();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_canTickChunk() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "playerIsCloseEnoughForSpawning", "method_38782", "canTickChunk", "m_183751_"), "(Laqv;Ldcd;)Z");
    }

    static jboolean canTickChunk(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_canTickChunk();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_doesNotGenerateChunks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "skipPlayer", "method_18722", "doesNotGenerateChunks", "m_140329_"), "(Laqv;)Z");
    }

    static jboolean doesNotGenerateChunks(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_doesNotGenerateChunks();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_handlePlayerAddedOrRemoved() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updatePlayerStatus", "method_18714", "handlePlayerAddedOrRemoved", "m_140192_"), "(Laqv;Z)V");
    }

    static void handlePlayerAddedOrRemoved(const jobject& obj, const jobject& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_handlePlayerAddedOrRemoved();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_updateWatchedSection() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "updatePlayerPos", "method_20726", "updateWatchedSection", "m_140373_"), "(Laqv;)V");
    }

    static void updateWatchedSection(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_updateWatchedSection();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_updatePosition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "move", "method_18713", "updatePosition", "m_140184_"), "(Laqv;)V");
    }

    static void updatePosition(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_updatePosition();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_sendWatchPackets() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "updateChunkTracking", "method_17241", "sendWatchPackets", "m_183754_"), "(Laqv;)V");
    }

    static void sendWatchPackets(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_sendWatchPackets();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__sendWatchPackets() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "applyChunkTrackingView", "method_52346", "sendWatchPackets", "m_294836_"), "(Laqv;Laqg;)V");
    }

    static void _sendWatchPackets(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID__sendWatchPackets();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__getPlayersWatchingChunk() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getPlayers", "method_17210", "getPlayersWatchingChunk", "m_183262_"), "(Ldcd;Z)Ljava/util/List;");
    }

    static jobject _getPlayersWatchingChunk(const jobject& obj, const jobject& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID__getPlayersWatchingChunk();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_loadEntity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addEntity", "method_18701", "loadEntity", "m_140199_"), "(Lbsr;)V");
    }

    static void loadEntity(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_loadEntity();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_unloadEntity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "removeEntity", "method_18716", "unloadEntity", "m_140331_"), "(Lbsr;)V");
    }

    static void unloadEntity(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_unloadEntity();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_tickEntityMovement() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "tick", "method_18727", "tickEntityMovement", "m_140421_"), "()V");
    }

    static void tickEntityMovement(const jobject& obj) {
                
       const auto methodID = methodID_tickEntityMovement();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_sendToOtherNearbyPlayers() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "broadcast", "method_18702", "sendToOtherNearbyPlayers", "m_140201_"), "(Lbsr;Lzg;)V");
    }

    static void sendToOtherNearbyPlayers(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_sendToOtherNearbyPlayers();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_sendToNearbyPlayers() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "broadcastAndSend", "method_18717", "sendToNearbyPlayers", "m_140333_"), "(Lbsr;Lzg;)V");
    }

    static void sendToNearbyPlayers(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_sendToNearbyPlayers();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_sendChunkBiomePackets() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "resendBiomesForChunks", "method_49421", "sendChunkBiomePackets", "m_274524_"), "(Ljava/util/List;)V");
    }

    static void sendChunkBiomePackets(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_sendChunkBiomePackets();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getPointOfInterestStorage() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("m", "getPoiManager", "method_19488", "getPointOfInterestStorage", "m_140424_"), "()Lces;");
    }

    static jobject getPointOfInterestStorage(const jobject& obj) {
                
       const auto methodID = methodID_getPointOfInterestStorage();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getSaveDir() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("n", "getStorageName", "method_37476", "getSaveDir", "m_182285_"), "()Ljava/lang/String;");
    }

    static jobject getSaveDir(const jobject& obj) {
                
       const auto methodID = methodID_getSaveDir();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_onChunkStatusChange() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onFullChunkStatusChange", "method_31414", "onChunkStatusChange", "m_287285_"), "(Ldcd;Laql;)V");
    }

    static void onChunkStatusChange(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_onChunkStatusChange();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_forceLighting() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "waitForLightBeforeSending", "method_53685", "forceLighting", "m_293872_"), "(Ldcd;I)V");
    }

    static void forceLighting(const jobject& obj, const jobject& arg0, const jint& arg1) {
                
       const auto methodID = methodID_forceLighting();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_SERVER_WORLD_SERVERCHUNKLOADINGMANAGER_HPP