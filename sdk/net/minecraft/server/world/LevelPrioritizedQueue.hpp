// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SERVER_WORLD_LEVELPRIORITIZEDQUEUE_HPP
#define NET_MINECRAFT_SERVER_WORLD_LEVELPRIORITIZEDQUEUE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.server.world.LevelPrioritizedQueue
 * Remapped: aqd
 */
namespace LevelPrioritizedQueue {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("aqd", "net/minecraft/server/level/ChunkTaskPriorityQueue", "net/minecraft/class_3899", "net/minecraft/server/world/LevelPrioritizedQueue", "net/minecraft/src/C_5434_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.server.world.LevelPrioritizedQueue#LEVEL_COUNT
    [[maybe_unused]] static jint get_field_LEVEL_COUNT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "PRIORITY_LEVEL_COUNT", "field_17241", "LEVEL_COUNT", "f_140508_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.server.world.LevelPrioritizedQueue#LEVEL_COUNT
    [[maybe_unused]] static void set_field_LEVEL_COUNT(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "PRIORITY_LEVEL_COUNT", "field_17241", "LEVEL_COUNT", "f_140508_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.LevelPrioritizedQueue#levelToPosToElements
    static jobject get_field_levelToPosToElements(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "taskQueue", "field_17243", "levelToPosToElements", "f_140509_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.LevelPrioritizedQueue#levelToPosToElements
    static void set_field_levelToPosToElements(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "taskQueue", "field_17243", "levelToPosToElements", "f_140509_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.LevelPrioritizedQueue#firstNonEmptyLevel
    static jint get_field_firstNonEmptyLevel(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "firstQueue", "field_17244", "firstNonEmptyLevel", "f_140510_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.LevelPrioritizedQueue#firstNonEmptyLevel
    static void set_field_firstNonEmptyLevel(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "firstQueue", "field_17244", "firstNonEmptyLevel", "f_140510_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.LevelPrioritizedQueue#name
    static jobject get_field_name(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "name", "field_17247", "name", "f_140511_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.LevelPrioritizedQueue#name
    static void set_field_name(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "name", "field_17247", "name", "f_140511_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.LevelPrioritizedQueue#blockingChunks
    static jobject get_field_blockingChunks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "acquired", "field_17444", "blockingChunks", "f_140512_"), "Lit/unimi/dsi/fastutil/longs/LongSet;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.LevelPrioritizedQueue#blockingChunks
    static void set_field_blockingChunks(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "acquired", "field_17444", "blockingChunks", "f_140512_"), "Lit/unimi/dsi/fastutil/longs/LongSet;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.LevelPrioritizedQueue#maxBlocking
    static jint get_field_maxBlocking(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "maxTasks", "field_17445", "maxBlocking", "f_140513_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.LevelPrioritizedQueue#maxBlocking
    static void set_field_maxBlocking(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "maxTasks", "field_17445", "maxBlocking", "f_140513_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    static jmethodID methodID_updateLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "resortChunkTasks", "method_17272", "updateLevel", "m_140521_"), "(ILdcd;I)V");
    }

    static void updateLevel(const jobject& obj, const jint& arg0, const jobject& arg1, const jint& arg2) {
                
       const auto methodID = methodID_updateLevel();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_add() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "submit", "method_17274", "add", "m_140535_"), "(Ljava/util/Optional;JI)V");
    }

    static void add(const jobject& obj, const jobject& arg0, const jlong& arg1, const jint& arg2) {
                
       const auto methodID = methodID_add();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_remove() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "release", "method_17609", "remove", "m_140530_"), "(JZ)V");
    }

    static void remove(const jobject& obj, const jlong& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_remove();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_createBlockingAdder() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "acquire", "method_17607", "createBlockingAdder", "m_140525_"), "(J)Ljava/lang/Runnable;");
    }

    static jobject createBlockingAdder(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_createBlockingAdder();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_poll() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "pop", "method_17606", "poll", "m_140518_"), "()Ljava/util/stream/Stream;");
    }

    static jobject poll(const jobject& obj) {
                
       const auto methodID = methodID_poll();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasQueuedElement() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "hasWork", "method_39993", "hasQueuedElement", "m_201908_"), "()Z");
    }

    static jboolean hasQueuedElement(const jobject& obj) {
                
       const auto methodID = methodID_hasQueuedElement();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getBlockingChunks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getAcquired", "method_21679", "getBlockingChunks", "m_140539_"), "()Lit/unimi/dsi/fastutil/longs/LongSet;");
    }

    static jobject getBlockingChunks(const jobject& obj) {
                
       const auto methodID = methodID_getBlockingChunks();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_SERVER_WORLD_LEVELPRIORITIZEDQUEUE_HPP