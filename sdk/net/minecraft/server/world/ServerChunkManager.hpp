// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SERVER_WORLD_SERVERCHUNKMANAGER_HPP
#define NET_MINECRAFT_SERVER_WORLD_SERVERCHUNKMANAGER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.server.world.ServerChunkManager
 * Remapped: aqs
 */
namespace ServerChunkManager {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("aqs", "net/minecraft/server/level/ServerChunkCache", "net/minecraft/class_3215", "net/minecraft/server/world/ServerChunkManager", "net/minecraft/src/C_8_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.server.world.ServerChunkManager#CHUNK_STATUSES
    [[maybe_unused]] static jobject get_field_CHUNK_STATUSES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "CHUNK_STATUSES", "field_13934", "CHUNK_STATUSES", "f_8326_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkManager#CHUNK_STATUSES
    [[maybe_unused]] static void set_field_CHUNK_STATUSES(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "CHUNK_STATUSES", "field_13934", "CHUNK_STATUSES", "f_8326_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerChunkManager#ticketManager
    static jobject get_field_ticketManager(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "distanceManager", "field_17252", "ticketManager", "f_8327_"), "Laqk;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkManager#ticketManager
    static void set_field_ticketManager(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "distanceManager", "field_17252", "ticketManager", "f_8327_"), "Laqk;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.server.world.ServerChunkManager#world
    static jobject get_field_world(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "level", "field_13945", "world", "f_8329_"), "Laqu;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.server.world.ServerChunkManager#world
    static void set_field_world(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "level", "field_13945", "world", "f_8329_"), "Laqu;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.server.world.ServerChunkManager#serverThread
    static jobject get_field_serverThread(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "mainThread", "field_17253", "serverThread", "f_8330_"), "Ljava/lang/Thread;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.server.world.ServerChunkManager#serverThread
    static void set_field_serverThread(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "mainThread", "field_17253", "serverThread", "f_8330_"), "Ljava/lang/Thread;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for default field net.minecraft.server.world.ServerChunkManager#lightingProvider
    static jobject get_field_lightingProvider(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "lightEngine", "field_13921", "lightingProvider", "f_8331_"), "Laqx;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static default field net.minecraft.server.world.ServerChunkManager#lightingProvider
    static void set_field_lightingProvider(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "lightEngine", "field_13921", "lightingProvider", "f_8331_"), "Laqx;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerChunkManager#mainThreadExecutor
    static jobject get_field_mainThreadExecutor(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "mainThreadProcessor", "field_18809", "mainThreadExecutor", "f_8332_"), "Laqs$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkManager#mainThreadExecutor
    static void set_field_mainThreadExecutor(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "mainThreadProcessor", "field_18809", "mainThreadExecutor", "f_8332_"), "Laqs$b;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for public field net.minecraft.server.world.ServerChunkManager#chunkLoadingManager
    static jobject get_field_chunkLoadingManager(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "chunkMap", "field_17254", "chunkLoadingManager", "f_8325_"), "Laqb;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static public field net.minecraft.server.world.ServerChunkManager#chunkLoadingManager
    static void set_field_chunkLoadingManager(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "chunkMap", "field_17254", "chunkLoadingManager", "f_8325_"), "Laqb;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerChunkManager#persistentStateManager
    static jobject get_field_persistentStateManager(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "dataStorage", "field_17708", "persistentStateManager", "f_8333_"), "Leqz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkManager#persistentStateManager
    static void set_field_persistentStateManager(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "dataStorage", "field_17708", "persistentStateManager", "f_8333_"), "Leqz;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerChunkManager#lastMobSpawningTime
    static jlong get_field_lastMobSpawningTime(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "lastInhabitedUpdate", "field_13928", "lastMobSpawningTime", "f_8334_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkManager#lastMobSpawningTime
    static void set_field_lastMobSpawningTime(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "lastInhabitedUpdate", "field_13928", "lastMobSpawningTime", "f_8334_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerChunkManager#spawnMonsters
    static jboolean get_field_spawnMonsters(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "spawnEnemies", "field_13929", "spawnMonsters", "f_8335_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkManager#spawnMonsters
    static void set_field_spawnMonsters(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "spawnEnemies", "field_13929", "spawnMonsters", "f_8335_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerChunkManager#spawnAnimals
    static jboolean get_field_spawnAnimals(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "spawnFriendlies", "field_13941", "spawnAnimals", "f_8336_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkManager#spawnAnimals
    static void set_field_spawnAnimals(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "spawnFriendlies", "field_13941", "spawnAnimals", "f_8336_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for static private field net.minecraft.server.world.ServerChunkManager#CACHE_SIZE
    [[maybe_unused]] static jint get_field_CACHE_SIZE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "CACHE_SIZE", "field_29766", "CACHE_SIZE", "f_143226_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkManager#CACHE_SIZE
    [[maybe_unused]] static void set_field_CACHE_SIZE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "CACHE_SIZE", "field_29766", "CACHE_SIZE", "f_143226_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerChunkManager#chunkPosCache
    static jlong get_field_chunkPosCache(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "lastChunkPos", "field_19335", "chunkPosCache", "f_8337_"), "[J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkManager#chunkPosCache
    static void set_field_chunkPosCache(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "lastChunkPos", "field_19335", "chunkPosCache", "f_8337_"), "[J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerChunkManager#chunkStatusCache
    static jobject get_field_chunkStatusCache(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "lastChunkStatus", "field_19336", "chunkStatusCache", "f_8338_"), "[Ldvz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkManager#chunkStatusCache
    static void set_field_chunkStatusCache(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "lastChunkStatus", "field_19336", "chunkStatusCache", "f_8338_"), "[Ldvz;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerChunkManager#chunkCache
    static jobject get_field_chunkCache(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "lastChunk", "field_19337", "chunkCache", "f_8339_"), "[Lduy;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkManager#chunkCache
    static void set_field_chunkCache(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "lastChunk", "field_19337", "chunkCache", "f_8339_"), "[Lduy;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ServerChunkManager#spawnInfo
    static jobject get_field_spawnInfo(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "lastSpawnState", "field_24455", "spawnInfo", "f_8340_"), "Lddh$d;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ServerChunkManager#spawnInfo
    static void set_field_spawnInfo(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "lastSpawnState", "field_24455", "spawnInfo", "f_8340_"), "Lddh$d;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_getLightingProvider() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getLightEngine", "method_17293", "getLightingProvider", "m_7827_"), "()Laqx;");
    }

    static jobject getLightingProvider(const jobject& obj) {
                
       const auto methodID = methodID_getLightingProvider();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getChunkHolder() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getVisibleChunkIfPresent", "method_14131", "getChunkHolder", "m_8364_"), "(J)Lapz;");
    }

    static jobject getChunkHolder(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_getChunkHolder();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getTotalChunksLoadedCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getTickingGenerated", "method_17301", "getTotalChunksLoadedCount", "m_8427_"), "()I");
    }

    static jint getTotalChunksLoadedCount(const jobject& obj) {
                
       const auto methodID = methodID_getTotalChunksLoadedCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_putInCache() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "storeInCache", "method_21738", "putInCache", "m_8366_"), "(JLduy;Ldvz;)V");
    }

    static void putInCache(const jobject& obj, const jlong& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_putInCache();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getChunk() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getChunk", "method_12121", "getChunk", "m_7587_"), "(IILdvz;Z)Lduy;");
    }

    static jobject getChunk(const jobject& obj, const jint& arg0, const jint& arg1, const jobject& arg2, const jboolean& arg3) {
                
       const auto methodID = methodID_getChunk();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_getWorldChunk() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getChunkNow", "method_21730", "getWorldChunk", "m_7131_"), "(II)Ldvi;");
    }

    static jobject getWorldChunk(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_getWorldChunk();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_initChunkCaches() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("r", "clearCache", "method_20587", "initChunkCaches", "m_8488_"), "()V");
    }

    static void initChunkCaches(const jobject& obj) {
                
       const auto methodID = methodID_initChunkCaches();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getChunkFutureSyncOnMainThread() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getChunkFuture", "method_17299", "getChunkFutureSyncOnMainThread", "m_8431_"), "(IILdvz;Z)Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject getChunkFutureSyncOnMainThread(const jobject& obj, const jint& arg0, const jint& arg1, const jobject& arg2, const jboolean& arg3) {
                
       const auto methodID = methodID_getChunkFutureSyncOnMainThread();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_getChunkFuture() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getChunkFutureMainThread", "method_14134", "getChunkFuture", "m_8456_"), "(IILdvz;Z)Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject getChunkFuture(const jobject& obj, const jint& arg0, const jint& arg1, const jobject& arg2, const jboolean& arg3) {
                
       const auto methodID = methodID_getChunkFuture();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_isMissingForLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "chunkAbsent", "method_18752", "isMissingForLevel", "m_8416_"), "(Lapz;I)Z");
    }

    static jboolean isMissingForLevel(const jobject& obj, const jobject& arg0, const jint& arg1) {
                
       const auto methodID = methodID_isMissingForLevel();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isChunkLoaded() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "hasChunk", "method_12123", "isChunkLoaded", "m_5563_"), "(II)Z");
    }

    static jboolean isChunkLoaded(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_isChunkLoaded();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__getChunk() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getChunkForLighting", "method_12246", "getChunk", "m_6196_"), "(II)Ldvk;");
    }

    static jobject _getChunk(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID__getChunk();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getWorld() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getLevel", "method_16434", "getWorld", "m_7653_"), "()Ldcw;");
    }

    static jobject getWorld(const jobject& obj) {
                
       const auto methodID = methodID_getWorld();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_executeQueuedTasks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "pollTask", "method_19492", "executeQueuedTasks", "m_8466_"), "()Z");
    }

    static jboolean executeQueuedTasks(const jobject& obj) {
                
       const auto methodID = methodID_executeQueuedTasks();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_updateChunks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("s", "runDistanceManagerUpdates", "method_16155", "updateChunks", "m_8489_"), "()Z");
    }

    static jboolean updateChunks(const jobject& obj) {
                
       const auto methodID = methodID_updateChunks();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isTickingFutureReady() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isPositionTicking", "method_37114", "isTickingFutureReady", "m_143239_"), "(J)Z");
    }

    static jboolean isTickingFutureReady(const jobject& obj, const jlong& arg0) {
                
       const auto methodID = methodID_isTickingFutureReady();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_save() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "save", "method_17298", "save", "m_8419_"), "(Z)V");
    }

    static void save(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_save();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_close() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("close", "close", "", "", "close"), "()V");
    }

    static void close(const jobject& obj) {
                
       const auto methodID = methodID_close();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "tick", "method_12127", "tick", "m_201698_"), "(Ljava/util/function/BooleanSupplier;Z)V");
    }

    static void tick(const jobject& obj, const jobject& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_tick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_tickChunks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("t", "tickChunks", "method_14161", "tickChunks", "m_8490_"), "()V");
    }

    static void tickChunks(const jobject& obj) {
                
       const auto methodID = methodID_tickChunks();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_ifChunkLoaded() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getFullChunk", "method_27907", "ifChunkLoaded", "m_8370_"), "(JLjava/util/function/Consumer;)V");
    }

    static void ifChunkLoaded(const jobject& obj, const jlong& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_ifChunkLoaded();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getDebugString() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "gatherStats", "method_12122", "getDebugString", "m_6754_"), "()Ljava/lang/String;");
    }

    static jobject getDebugString(const jobject& obj) {
                
       const auto methodID = methodID_getDebugString();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getPendingTasks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "getPendingTasksCount", "method_21694", "getPendingTasks", "m_8480_"), "()I");
    }

    static jint getPendingTasks(const jobject& obj) {
                
       const auto methodID = methodID_getPendingTasks();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getChunkGenerator() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "getGenerator", "method_12129", "getChunkGenerator", "m_8481_"), "()Lduz;");
    }

    static jobject getChunkGenerator(const jobject& obj) {
                
       const auto methodID = methodID_getChunkGenerator();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getStructurePlacementCalculator() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "getGeneratorState", "method_46642", "getStructurePlacementCalculator", "m_255415_"), "()Ldva;");
    }

    static jobject getStructurePlacementCalculator(const jobject& obj) {
                
       const auto methodID = methodID_getStructurePlacementCalculator();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getNoiseConfig() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "randomState", "method_41248", "getNoiseConfig", "m_214994_"), "()Ldzm;");
    }

    static jobject getNoiseConfig(const jobject& obj) {
                
       const auto methodID = methodID_getNoiseConfig();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getLoadedChunkCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "getLoadedChunksCount", "method_14151", "getLoadedChunkCount", "m_8482_"), "()I");
    }

    static jint getLoadedChunkCount(const jobject& obj) {
                
       const auto methodID = methodID_getLoadedChunkCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_markForUpdate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "blockChanged", "method_14128", "markForUpdate", "m_8450_"), "(Ljd;)V");
    }

    static void markForUpdate(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_markForUpdate();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onLightUpdate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onLightUpdate", "method_12247", "onLightUpdate", "m_6506_"), "(Lddf;Lkf;)V");
    }

    static void onLightUpdate(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_onLightUpdate();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_addTicket() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addRegionTicket", "method_17297", "addTicket", "m_8387_"), "(Laqz;Ldcd;ILjava/lang/Object;)V");
    }

    static void addTicket(const jobject& obj, const jobject& arg0, const jobject& arg1, const jint& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_addTicket();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_removeTicket() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "removeRegionTicket", "method_17300", "removeTicket", "m_8438_"), "(Laqz;Ldcd;ILjava/lang/Object;)V");
    }

    static void removeTicket(const jobject& obj, const jobject& arg0, const jobject& arg1, const jint& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_removeTicket();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_setChunkForced() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateChunkForced", "method_12124", "setChunkForced", "m_6692_"), "(Ldcd;Z)V");
    }

    static void setChunkForced(const jobject& obj, const jobject& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_setChunkForced();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_updatePosition() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "move", "method_14096", "updatePosition", "m_8385_"), "(Laqv;)V");
    }

    static void updatePosition(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_updatePosition();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_unloadEntity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "removeEntity", "method_18753", "unloadEntity", "m_8443_"), "(Lbsr;)V");
    }

    static void unloadEntity(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_unloadEntity();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_loadEntity() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "addEntity", "method_18755", "loadEntity", "m_8463_"), "(Lbsr;)V");
    }

    static void loadEntity(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_loadEntity();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_sendToNearbyPlayers() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "broadcastAndSend", "method_18751", "sendToNearbyPlayers", "m_8394_"), "(Lbsr;Lzg;)V");
    }

    static void sendToNearbyPlayers(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_sendToNearbyPlayers();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_sendToOtherNearbyPlayers() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "broadcast", "method_18754", "sendToOtherNearbyPlayers", "m_8445_"), "(Lbsr;Lzg;)V");
    }

    static void sendToOtherNearbyPlayers(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_sendToOtherNearbyPlayers();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_applyViewDistance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setViewDistance", "method_14144", "applyViewDistance", "m_8354_"), "(I)V");
    }

    static void applyViewDistance(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_applyViewDistance();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_applySimulationDistance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setSimulationDistance", "method_38634", "applySimulationDistance", "m_184026_"), "(I)V");
    }

    static void applySimulationDistance(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_applySimulationDistance();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setMobSpawnOptions() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setSpawnSettings", "method_12128", "setMobSpawnOptions", "m_6707_"), "(ZZ)V");
    }

    static void setMobSpawnOptions(const jobject& obj, const jboolean& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_setMobSpawnOptions();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getChunkLoadingDebugInfo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getChunkDebugData", "method_23273", "getChunkLoadingDebugInfo", "m_8448_"), "(Ldcd;)Ljava/lang/String;");
    }

    static jobject getChunkLoadingDebugInfo(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getChunkLoadingDebugInfo();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getPersistentStateManager() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "getDataStorage", "method_17981", "getPersistentStateManager", "m_8483_"), "()Leqz;");
    }

    static jobject getPersistentStateManager(const jobject& obj) {
                
       const auto methodID = methodID_getPersistentStateManager();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getPointOfInterestStorage() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "getPoiManager", "method_19493", "getPointOfInterestStorage", "m_8484_"), "()Lces;");
    }

    static jobject getPointOfInterestStorage(const jobject& obj) {
                
       const auto methodID = methodID_getPointOfInterestStorage();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getChunkIoWorker() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("m", "chunkScanner", "method_39777", "getChunkIoWorker", "m_196555_"), "()Ldwh;");
    }

    static jobject getChunkIoWorker(const jobject& obj) {
                
       const auto methodID = methodID_getChunkIoWorker();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getSpawnInfo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("n", "getLastSpawnState", "method_27908", "getSpawnInfo", "m_8485_"), "()Lddh$d;");
    }

    static jobject getSpawnInfo(const jobject& obj) {
                
       const auto methodID = methodID_getSpawnInfo();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_removePersistentTickets() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("o", "removeTicketsOnClosing", "method_39997", "removePersistentTickets", "m_201915_"), "()V");
    }

    static void removePersistentTickets(const jobject& obj) {
                
       const auto methodID = methodID_removePersistentTickets();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_SERVER_WORLD_SERVERCHUNKMANAGER_HPP