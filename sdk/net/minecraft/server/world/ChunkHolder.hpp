// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SERVER_WORLD_CHUNKHOLDER_HPP
#define NET_MINECRAFT_SERVER_WORLD_CHUNKHOLDER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.server.world.ChunkHolder
 * Remapped: apz
 */
namespace ChunkHolder {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("apz", "net/minecraft/server/level/ChunkHolder", "net/minecraft/class_3193", "net/minecraft/server/world/ChunkHolder", "net/minecraft/src/C_5422_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.server.world.ChunkHolder#UNLOADED_WORLD_CHUNK
    [[maybe_unused]] static jobject get_field_UNLOADED_WORLD_CHUNK() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "UNLOADED_LEVEL_CHUNK", "field_16427", "UNLOADED_WORLD_CHUNK", "f_139997_"), "Laqc;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.server.world.ChunkHolder#UNLOADED_WORLD_CHUNK
    [[maybe_unused]] static void set_field_UNLOADED_WORLD_CHUNK(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "UNLOADED_LEVEL_CHUNK", "field_16427", "UNLOADED_WORLD_CHUNK", "f_139997_"), "Laqc;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.world.ChunkHolder#UNLOADED_WORLD_CHUNK_FUTURE
    [[maybe_unused]] static jobject get_field_UNLOADED_WORLD_CHUNK_FUTURE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "UNLOADED_LEVEL_CHUNK_FUTURE", "field_16429", "UNLOADED_WORLD_CHUNK_FUTURE", "f_139998_"), "Ljava/util/concurrent/CompletableFuture;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ChunkHolder#UNLOADED_WORLD_CHUNK_FUTURE
    [[maybe_unused]] static void set_field_UNLOADED_WORLD_CHUNK_FUTURE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "UNLOADED_LEVEL_CHUNK_FUTURE", "field_16429", "UNLOADED_WORLD_CHUNK_FUTURE", "f_139998_"), "Ljava/util/concurrent/CompletableFuture;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ChunkHolder#world
    static jobject get_field_world(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "levelHeightAccessor", "field_26929", "world", "f_142983_"), "Ldcy;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ChunkHolder#world
    static void set_field_world(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "levelHeightAccessor", "field_26929", "world", "f_142983_"), "Ldcy;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ChunkHolder#accessibleFuture
    static jobject get_field_accessibleFuture(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "fullChunkFuture", "field_16431", "accessibleFuture", "f_140002_"), "Ljava/util/concurrent/CompletableFuture;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ChunkHolder#accessibleFuture
    static void set_field_accessibleFuture(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "fullChunkFuture", "field_16431", "accessibleFuture", "f_140002_"), "Ljava/util/concurrent/CompletableFuture;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ChunkHolder#tickingFuture
    static jobject get_field_tickingFuture(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "tickingChunkFuture", "field_19333", "tickingFuture", "f_140003_"), "Ljava/util/concurrent/CompletableFuture;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ChunkHolder#tickingFuture
    static void set_field_tickingFuture(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("h", "tickingChunkFuture", "field_19333", "tickingFuture", "f_140003_"), "Ljava/util/concurrent/CompletableFuture;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ChunkHolder#entityTickingFuture
    static jobject get_field_entityTickingFuture(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "entityTickingChunkFuture", "field_13865", "entityTickingFuture", "f_140004_"), "Ljava/util/concurrent/CompletableFuture;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ChunkHolder#entityTickingFuture
    static void set_field_entityTickingFuture(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "entityTickingChunkFuture", "field_13865", "entityTickingFuture", "f_140004_"), "Ljava/util/concurrent/CompletableFuture;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ChunkHolder#lastTickLevel
    static jint get_field_lastTickLevel(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "oldTicketLevel", "field_16432", "lastTickLevel", "f_140006_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ChunkHolder#lastTickLevel
    static void set_field_lastTickLevel(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "oldTicketLevel", "field_16432", "lastTickLevel", "f_140006_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ChunkHolder#level
    static jint get_field_level(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "ticketLevel", "field_13862", "level", "f_140007_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ChunkHolder#level
    static void set_field_level(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "ticketLevel", "field_13862", "level", "f_140007_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ChunkHolder#completedLevel
    static jint get_field_completedLevel(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "queueLevel", "field_17208", "completedLevel", "f_140008_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ChunkHolder#completedLevel
    static void set_field_completedLevel(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "queueLevel", "field_17208", "completedLevel", "f_140008_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ChunkHolder#pendingBlockUpdates
    static jboolean get_field_pendingBlockUpdates(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "hasChangedSections", "field_25803", "pendingBlockUpdates", "f_140010_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ChunkHolder#pendingBlockUpdates
    static void set_field_pendingBlockUpdates(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "hasChangedSections", "field_25803", "pendingBlockUpdates", "f_140010_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ChunkHolder#blockUpdatesBySection
    static jobject get_field_blockUpdatesBySection(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "changedBlocksPerSection", "field_25804", "blockUpdatesBySection", "f_140011_"), "[Lit/unimi/dsi/fastutil/shorts/ShortSet;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ChunkHolder#blockUpdatesBySection
    static void set_field_blockUpdatesBySection(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "changedBlocksPerSection", "field_25804", "blockUpdatesBySection", "f_140011_"), "[Lit/unimi/dsi/fastutil/shorts/ShortSet;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ChunkHolder#blockLightUpdateBits
    static jobject get_field_blockLightUpdateBits(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "blockChangedLightSectionFilter", "field_13871", "blockLightUpdateBits", "f_140012_"), "Ljava/util/BitSet;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ChunkHolder#blockLightUpdateBits
    static void set_field_blockLightUpdateBits(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "blockChangedLightSectionFilter", "field_13871", "blockLightUpdateBits", "f_140012_"), "Ljava/util/BitSet;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ChunkHolder#skyLightUpdateBits
    static jobject get_field_skyLightUpdateBits(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "skyChangedLightSectionFilter", "field_13870", "skyLightUpdateBits", "f_140013_"), "Ljava/util/BitSet;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ChunkHolder#skyLightUpdateBits
    static void set_field_skyLightUpdateBits(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "skyChangedLightSectionFilter", "field_13870", "skyLightUpdateBits", "f_140013_"), "Ljava/util/BitSet;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ChunkHolder#lightingProvider
    static jobject get_field_lightingProvider(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "lightEngine", "field_13863", "lightingProvider", "f_140014_"), "Leot;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ChunkHolder#lightingProvider
    static void set_field_lightingProvider(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "lightEngine", "field_13863", "lightingProvider", "f_140014_"), "Leot;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ChunkHolder#levelUpdateListener
    static jobject get_field_levelUpdateListener(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "onLevelChange", "field_17209", "levelUpdateListener", "f_140015_"), "Lapz$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ChunkHolder#levelUpdateListener
    static void set_field_levelUpdateListener(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "onLevelChange", "field_17209", "levelUpdateListener", "f_140015_"), "Lapz$a;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ChunkHolder#playersWatchingChunkProvider
    static jobject get_field_playersWatchingChunkProvider(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "playerProvider", "field_17210", "playersWatchingChunkProvider", "f_140016_"), "Lapz$b;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ChunkHolder#playersWatchingChunkProvider
    static void set_field_playersWatchingChunkProvider(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "playerProvider", "field_17210", "playersWatchingChunkProvider", "f_140016_"), "Lapz$b;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ChunkHolder#accessible
    static jboolean get_field_accessible(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "wasAccessibleSinceLastSave", "field_19238", "accessible", "f_140017_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ChunkHolder#accessible
    static void set_field_accessible(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "wasAccessibleSinceLastSave", "field_19238", "accessible", "f_140017_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ChunkHolder#levelIncreaseFuture
    static jobject get_field_levelIncreaseFuture(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "pendingFullStateConfirmation", "field_26930", "levelIncreaseFuture", "f_142981_"), "Ljava/util/concurrent/CompletableFuture;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ChunkHolder#levelIncreaseFuture
    static void set_field_levelIncreaseFuture(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "pendingFullStateConfirmation", "field_26930", "levelIncreaseFuture", "f_142981_"), "Ljava/util/concurrent/CompletableFuture;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ChunkHolder#postProcessingFuture
    static jobject get_field_postProcessingFuture(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "sendSync", "field_46085", "postProcessingFuture", "f_290310_"), "Ljava/util/concurrent/CompletableFuture;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ChunkHolder#postProcessingFuture
    static void set_field_postProcessingFuture(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "sendSync", "field_46085", "postProcessingFuture", "f_290310_"), "Ljava/util/concurrent/CompletableFuture;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.world.ChunkHolder#savingFuture
    static jobject get_field_savingFuture(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("w", "saveSync", "field_51858", "savingFuture", "f_337350_"), "Ljava/util/concurrent/CompletableFuture;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.world.ChunkHolder#savingFuture
    static void set_field_savingFuture(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("w", "saveSync", "field_51858", "savingFuture", "f_337350_"), "Ljava/util/concurrent/CompletableFuture;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_getTickingFuture() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getTickingChunkFuture", "method_16145", "getTickingFuture", "m_140026_"), "()Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject getTickingFuture(const jobject& obj) {
                
       const auto methodID = methodID_getTickingFuture();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getEntityTickingFuture() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getEntityTickingChunkFuture", "method_14003", "getEntityTickingFuture", "m_140073_"), "()Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject getEntityTickingFuture(const jobject& obj) {
                
       const auto methodID = methodID_getEntityTickingFuture();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getAccessibleFuture() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getFullChunkFuture", "method_20725", "getAccessibleFuture", "m_140082_"), "()Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject getAccessibleFuture(const jobject& obj) {
                
       const auto methodID = methodID_getAccessibleFuture();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getWorldChunk() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getTickingChunk", "method_16144", "getWorldChunk", "m_140085_"), "()Ldvi;");
    }

    static jobject getWorldChunk(const jobject& obj) {
                
       const auto methodID = methodID_getWorldChunk();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getPostProcessedChunk() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "getChunkToSend", "method_53682", "getPostProcessedChunk", "m_295552_"), "()Ldvi;");
    }

    static jobject getPostProcessedChunk(const jobject& obj) {
                
       const auto methodID = methodID_getPostProcessedChunk();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getPostProcessingFuture() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "getSendSyncFuture", "method_53681", "getPostProcessingFuture", "m_294134_"), "()Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject getPostProcessingFuture(const jobject& obj) {
                
       const auto methodID = methodID_getPostProcessingFuture();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_combinePostProcessingFuture() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addSendDependency", "method_53680", "combinePostProcessingFuture", "m_295085_"), "(Ljava/util/concurrent/CompletableFuture;)V");
    }

    static void combinePostProcessingFuture(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_combinePostProcessingFuture();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getSavingFuture() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "getSaveSyncFuture", "method_14000", "getSavingFuture", "m_339472_"), "()Ljava/util/concurrent/CompletableFuture;");
    }

    static jobject getSavingFuture(const jobject& obj) {
                
       const auto methodID = methodID_getSavingFuture();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_isSavable() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "isReadyForSaving", "method_60436", "isSavable", "m_339539_"), "()Z");
    }

    static jboolean isSavable(const jobject& obj) {
                
       const auto methodID = methodID_isSavable();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_combineSavingFuture() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "addSaveDependency", "method_39967", "combineSavingFuture", "m_200416_"), "(Ljava/util/concurrent/CompletableFuture;)V");
    }

    static void combineSavingFuture(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_combineSavingFuture();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_markForBlockUpdate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "blockChanged", "method_14002", "markForBlockUpdate", "m_140056_"), "(Ljd;)V");
    }

    static void markForBlockUpdate(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_markForBlockUpdate();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_markForLightUpdate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "sectionLightChanged", "method_14012", "markForLightUpdate", "m_140036_"), "(Lddf;I)V");
    }

    static void markForLightUpdate(const jobject& obj, const jobject& arg0, const jint& arg1) {
                
       const auto methodID = methodID_markForLightUpdate();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_flushUpdates() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "broadcastChanges", "method_14006", "flushUpdates", "m_140054_"), "(Ldvi;)V");
    }

    static void flushUpdates(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_flushUpdates();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_tryUpdateBlockEntityAt() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "broadcastBlockEntityIfNeeded", "method_30311", "tryUpdateBlockEntityAt", "m_288224_"), "(Ljava/util/List;Ldcw;Ljd;Ldtc;)V");
    }

    static void tryUpdateBlockEntityAt(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_tryUpdateBlockEntityAt();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_sendBlockEntityUpdatePacket() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "broadcastBlockEntity", "method_14009", "sendBlockEntityUpdatePacket", "m_288223_"), "(Ljava/util/List;Ldcw;Ljd;)V");
    }

    static void sendBlockEntityUpdatePacket(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_sendBlockEntityUpdatePacket();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_sendPacketToPlayers() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "broadcast", "method_13992", "sendPacketToPlayers", "m_288202_"), "(Ljava/util/List;Lzg;)V");
    }

    static void sendPacketToPlayers(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_sendPacketToPlayers();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "getTicketLevel", "method_14005", "getLevel", "m_140093_"), "()I");
    }

    static jint getLevel(const jobject& obj) {
                
       const auto methodID = methodID_getLevel();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getCompletedLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "getQueueLevel", "method_17208", "getCompletedLevel", "m_140094_"), "()I");
    }

    static jint getCompletedLevel(const jobject& obj) {
                
       const auto methodID = methodID_getCompletedLevel();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_setCompletedLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setQueueLevel", "method_17207", "setCompletedLevel", "m_140086_"), "(I)V");
    }

    static void setCompletedLevel(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_setCompletedLevel();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setTicketLevel", "method_15890", "setLevel", "m_140027_"), "(I)V");
    }

    static void setLevel(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_setLevel();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_increaseLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "scheduleFullChunkPromotion", "method_31409", "increaseLevel", "m_142998_"), "(Laqb;Ljava/util/concurrent/CompletableFuture;Ljava/util/concurrent/Executor;Laql;)V");
    }

    static void increaseLevel(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_increaseLevel();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_decreaseLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "demoteFullChunk", "method_31408", "decreaseLevel", "m_287189_"), "(Laqb;Laql;)V");
    }

    static void decreaseLevel(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_decreaseLevel();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_updateFutures() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateFutures", "method_14007", "updateFutures", "m_143003_"), "(Laqb;Ljava/util/concurrent/Executor;)V");
    }

    static void updateFutures(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_updateFutures();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isAccessible() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "wasAccessibleSinceLastSave", "method_20384", "isAccessible", "m_140095_"), "()Z");
    }

    static jboolean isAccessible(const jobject& obj) {
                
       const auto methodID = methodID_isAccessible();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_updateAccessibleStatus() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "refreshAccessibility", "method_20385", "updateAccessibleStatus", "m_140096_"), "()V");
    }

    static void updateAccessibleStatus(const jobject& obj) {
                
       const auto methodID = methodID_updateAccessibleStatus();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_SERVER_WORLD_CHUNKHOLDER_HPP