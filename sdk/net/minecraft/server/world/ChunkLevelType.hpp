// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SERVER_WORLD_CHUNKLEVELTYPE_HPP
#define NET_MINECRAFT_SERVER_WORLD_CHUNKLEVELTYPE_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.server.world.ChunkLevelType
 * Remapped: aql
 */
namespace ChunkLevelType {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("aql", "net/minecraft/server/level/FullChunkStatus", "net/minecraft/class_3194", "net/minecraft/server/world/ChunkLevelType", "net/minecraft/src/C_286921_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.server.world.ChunkLevelType#INACCESSIBLE
    [[maybe_unused]] static jobject get_field_INACCESSIBLE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "INACCESSIBLE", "field_19334", "INACCESSIBLE", "INACCESSIBLE"), "Laql;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.server.world.ChunkLevelType#INACCESSIBLE
    [[maybe_unused]] static void set_field_INACCESSIBLE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "INACCESSIBLE", "field_19334", "INACCESSIBLE", "INACCESSIBLE"), "Laql;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.server.world.ChunkLevelType#FULL
    [[maybe_unused]] static jobject get_field_FULL() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "FULL", "field_44855", "FULL", "FULL"), "Laql;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.server.world.ChunkLevelType#FULL
    [[maybe_unused]] static void set_field_FULL(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "FULL", "field_44855", "FULL", "FULL"), "Laql;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.server.world.ChunkLevelType#BLOCK_TICKING
    [[maybe_unused]] static jobject get_field_BLOCK_TICKING() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "BLOCK_TICKING", "field_44856", "BLOCK_TICKING", "BLOCK_TICKING"), "Laql;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.server.world.ChunkLevelType#BLOCK_TICKING
    [[maybe_unused]] static void set_field_BLOCK_TICKING(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "BLOCK_TICKING", "field_44856", "BLOCK_TICKING", "BLOCK_TICKING"), "Laql;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.server.world.ChunkLevelType#ENTITY_TICKING
    [[maybe_unused]] static jobject get_field_ENTITY_TICKING() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "ENTITY_TICKING", "field_13877", "ENTITY_TICKING", "ENTITY_TICKING"), "Laql;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.server.world.ChunkLevelType#ENTITY_TICKING
    [[maybe_unused]] static void set_field_ENTITY_TICKING(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "ENTITY_TICKING", "field_13877", "ENTITY_TICKING", "ENTITY_TICKING"), "Laql;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_values() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("values", "values", "values", "values", "values"), "()[Laql;");
    }

    static jobject values() {
       const auto clazz = self();
       const auto methodID = methodID_values();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_valueOf() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("valueOf", "valueOf", "valueOf", "valueOf", "valueOf"), "(Ljava/lang/String;)Laql;");
    }

    static jobject valueOf(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_valueOf();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_isAfter() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isOrAfter", "method_14014", "isAfter", "m_287205_"), "(Laql;)Z");
    }

    static jboolean isAfter(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isAfter();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_SERVER_WORLD_CHUNKLEVELTYPE_HPP