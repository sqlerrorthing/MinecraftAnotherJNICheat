// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SERVER_RCON_QUERYRESPONSEHANDLER_HPP
#define NET_MINECRAFT_SERVER_RCON_QUERYRESPONSEHANDLER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.server.rcon.QueryResponseHandler
 * Remapped: avi
 */
namespace QueryResponseHandler {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("avi", "net/minecraft/server/rcon/thread/QueryThreadGs4", "net/minecraft/class_3364", "net/minecraft/server/rcon/QueryResponseHandler", "net/minecraft/src/C_117_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.server.rcon.QueryResponseHandler#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "LOGGER", "field_23963", "LOGGER", "f_11524_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.rcon.QueryResponseHandler#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "LOGGER", "field_23963", "LOGGER", "f_11524_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.rcon.QueryResponseHandler#GAME_TYPE
    [[maybe_unused]] static jobject get_field_GAME_TYPE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "GAME_TYPE", "field_29795", "GAME_TYPE", "f_144024_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.rcon.QueryResponseHandler#GAME_TYPE
    [[maybe_unused]] static void set_field_GAME_TYPE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "GAME_TYPE", "field_29795", "GAME_TYPE", "f_144024_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.rcon.QueryResponseHandler#GAME_ID
    [[maybe_unused]] static jobject get_field_GAME_ID() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "GAME_ID", "field_29796", "GAME_ID", "f_144025_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.rcon.QueryResponseHandler#GAME_ID
    [[maybe_unused]] static void set_field_GAME_ID(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "GAME_ID", "field_29796", "GAME_ID", "f_144025_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.rcon.QueryResponseHandler#CLEAN_UP_THRESHOLD
    [[maybe_unused]] static jlong get_field_CLEAN_UP_THRESHOLD() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "CHALLENGE_CHECK_INTERVAL", "field_29797", "CLEAN_UP_THRESHOLD", "f_144026_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticLongField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.rcon.QueryResponseHandler#CLEAN_UP_THRESHOLD
    [[maybe_unused]] static void set_field_CLEAN_UP_THRESHOLD(const jlong &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("g", "CHALLENGE_CHECK_INTERVAL", "field_29797", "CLEAN_UP_THRESHOLD", "f_144026_"), "J");
        return MinecraftSDK::env->SetStaticLongField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.rcon.QueryResponseHandler#field_29798
    [[maybe_unused]] static jlong get_field_field_29798() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "RESPONSE_CACHE_TIME", "field_29798", "field_29798", "f_144027_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticLongField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.rcon.QueryResponseHandler#field_29798
    [[maybe_unused]] static void set_field_field_29798(const jlong &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "RESPONSE_CACHE_TIME", "field_29798", "field_29798", "f_144027_"), "J");
        return MinecraftSDK::env->SetStaticLongField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.server.rcon.QueryResponseHandler#lastQueryTime
    static jlong get_field_lastQueryTime(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "lastChallengeCheck", "field_14443", "lastQueryTime", "f_11525_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.rcon.QueryResponseHandler#lastQueryTime
    static void set_field_lastQueryTime(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("i", "lastChallengeCheck", "field_14443", "lastQueryTime", "f_11525_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.rcon.QueryResponseHandler#queryPort
    static jint get_field_queryPort(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "port", "field_14442", "queryPort", "f_11526_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.rcon.QueryResponseHandler#queryPort
    static void set_field_queryPort(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("j", "port", "field_14442", "queryPort", "f_11526_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.rcon.QueryResponseHandler#port
    static jint get_field_port(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "serverPort", "field_14457", "port", "f_11527_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.rcon.QueryResponseHandler#port
    static void set_field_port(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "serverPort", "field_14457", "port", "f_11527_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.rcon.QueryResponseHandler#maxPlayerCount
    static jint get_field_maxPlayerCount(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "maxPlayers", "field_14456", "maxPlayerCount", "f_11528_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.rcon.QueryResponseHandler#maxPlayerCount
    static void set_field_maxPlayerCount(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "maxPlayers", "field_14456", "maxPlayerCount", "f_11528_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.rcon.QueryResponseHandler#motd
    static jobject get_field_motd(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "serverName", "field_14445", "motd", "f_11529_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.rcon.QueryResponseHandler#motd
    static void set_field_motd(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "serverName", "field_14445", "motd", "f_11529_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.rcon.QueryResponseHandler#levelName
    static jobject get_field_levelName(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "worldName", "field_14447", "levelName", "f_11530_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.rcon.QueryResponseHandler#levelName
    static void set_field_levelName(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "worldName", "field_14447", "levelName", "f_11530_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.rcon.QueryResponseHandler#socket
    static jobject get_field_socket(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "socket", "field_14449", "socket", "f_11531_"), "Ljava/net/DatagramSocket;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.rcon.QueryResponseHandler#socket
    static void set_field_socket(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "socket", "field_14449", "socket", "f_11531_"), "Ljava/net/DatagramSocket;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.rcon.QueryResponseHandler#packetBuffer
    static jbyte get_field_packetBuffer(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "buffer", "field_14452", "packetBuffer", "f_11532_"), "[B");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetByteField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.rcon.QueryResponseHandler#packetBuffer
    static void set_field_packetBuffer(const jobject &obj, const jbyte &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "buffer", "field_14452", "packetBuffer", "f_11532_"), "[B");
        return MinecraftSDK::env->SetByteField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.rcon.QueryResponseHandler#ip
    static jobject get_field_ip(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "hostIp", "field_14444", "ip", "f_11533_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.rcon.QueryResponseHandler#ip
    static void set_field_ip(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "hostIp", "field_14444", "ip", "f_11533_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.rcon.QueryResponseHandler#hostname
    static jobject get_field_hostname(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "serverIp", "field_14454", "hostname", "f_11534_"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.rcon.QueryResponseHandler#hostname
    static void set_field_hostname(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "serverIp", "field_14454", "hostname", "f_11534_"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.rcon.QueryResponseHandler#queries
    static jobject get_field_queries(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "validChallenges", "field_14453", "queries", "f_11535_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.rcon.QueryResponseHandler#queries
    static void set_field_queries(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "validChallenges", "field_14453", "queries", "f_11535_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.rcon.QueryResponseHandler#data
    static jobject get_field_data(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "rulesResponse", "field_14446", "data", "f_11536_"), "Lavd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.rcon.QueryResponseHandler#data
    static void set_field_data(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "rulesResponse", "field_14446", "data", "f_11536_"), "Lavd;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.rcon.QueryResponseHandler#lastResponseTime
    static jlong get_field_lastResponseTime(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "lastRulesResponse", "field_14450", "lastResponseTime", "f_11537_"), "J");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetLongField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.rcon.QueryResponseHandler#lastResponseTime
    static void set_field_lastResponseTime(const jobject &obj, const jlong &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "lastRulesResponse", "field_14450", "lastResponseTime", "f_11537_"), "J");
        return MinecraftSDK::env->SetLongField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.rcon.QueryResponseHandler#server
    static jobject get_field_server(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "serverInterface", "field_23964", "server", "f_11538_"), "Lali;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.rcon.QueryResponseHandler#server
    static void set_field_server(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "serverInterface", "field_23964", "server", "f_11538_"), "Lali;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_create() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "create", "method_30737", "create", "m_11553_"), "(Lali;)Lavi;");
    }

    static jobject create(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_create();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_reply() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "sendTo", "method_14751", "reply", "m_11555_"), "([BLjava/net/DatagramPacket;)V");
    }

    static void reply(const jobject& obj, const jarray& arg0, const jbyte& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_reply();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_handle() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "processPacket", "method_14750", "handle", "m_11549_"), "(Ljava/net/DatagramPacket;)Z");
    }

    static jboolean handle(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_handle();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_createRulesReply() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "buildRuleResponse", "method_14747", "createRulesReply", "m_11558_"), "(Ljava/net/DatagramPacket;)[B");
    }

    static jbyte createRulesReply(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_createRulesReply();
       return MinecraftSDK::env->CallByteMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getMessageBytes() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getIdentBytes", "method_14748", "getMessageBytes", "m_11551_"), "(Ljava/net/SocketAddress;)[B");
    }

    static jbyte getMessageBytes(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getMessageBytes();
       return MinecraftSDK::env->CallByteMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isValidQuery() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "validChallenge", "method_14753", "isValidQuery", "m_11560_"), "(Ljava/net/DatagramPacket;)Ljava/lang/Boolean;");
    }

    static jobject isValidQuery(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isValidQuery();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_createQuery() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "sendChallenge", "method_14749", "createQuery", "m_11563_"), "(Ljava/net/DatagramPacket;)V");
    }

    static void createQuery(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_createQuery();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_cleanUp() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "pruneChallenges", "method_14746", "cleanUp", "m_11562_"), "()V");
    }

    static void cleanUp(const jobject& obj) {
                
       const auto methodID = methodID_cleanUp();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_run() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("run", "run", "", "", "run"), "()V");
    }

    static void run(const jobject& obj) {
                
       const auto methodID = methodID_run();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_start() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "start", "method_14728", "start", "m_7528_"), "()Z");
    }

    static jboolean start(const jobject& obj) {
                
       const auto methodID = methodID_start();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_handleIoException() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "recoverSocketError", "method_14752", "handleIoException", "m_11547_"), "(Ljava/lang/Exception;)V");
    }

    static void handleIoException(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_handleIoException();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_initialize() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "initSocket", "method_14754", "initialize", "m_11565_"), "()Z");
    }

    static jboolean initialize(const jobject& obj) {
                
       const auto methodID = methodID_initialize();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_SERVER_RCON_QUERYRESPONSEHANDLER_HPP