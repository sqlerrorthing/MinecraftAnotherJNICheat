// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SERVER_INTEGRATED_INTEGRATEDSERVER_HPP
#define NET_MINECRAFT_SERVER_INTEGRATED_INTEGRATEDSERVER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.server.integrated.IntegratedServer
 * Remapped: guo
 */
namespace IntegratedServer {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("guo", "net/minecraft/client/server/IntegratedServer", "net/minecraft/class_1132", "net/minecraft/server/integrated/IntegratedServer", "net/minecraft/src/C_4585_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.server.integrated.IntegratedServer#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "LOGGER", "field_5520", "LOGGER", "f_120014_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.integrated.IntegratedServer#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "LOGGER", "field_5520", "LOGGER", "f_120014_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.integrated.IntegratedServer#field_34964
    [[maybe_unused]] static jint get_field_field_34964() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "MIN_SIM_DISTANCE", "field_34964", "field_34964", "f_194466_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.integrated.IntegratedServer#field_34964
    [[maybe_unused]] static void set_field_field_34964(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "MIN_SIM_DISTANCE", "field_34964", "field_34964", "f_194466_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.server.integrated.IntegratedServer#client
    static jobject get_field_client(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "minecraft", "field_5518", "client", "f_120015_"), "Lfgo;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.integrated.IntegratedServer#client
    static void set_field_client(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "minecraft", "field_5518", "client", "f_120015_"), "Lfgo;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.integrated.IntegratedServer#paused
    static jboolean get_field_paused(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "paused", "field_5524", "paused", "f_120016_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.integrated.IntegratedServer#paused
    static void set_field_paused(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "paused", "field_5524", "paused", "f_120016_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.integrated.IntegratedServer#lanPort
    static jint get_field_lanPort(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "publishedPort", "field_5522", "lanPort", "f_120017_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.integrated.IntegratedServer#lanPort
    static void set_field_lanPort(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "publishedPort", "field_5522", "lanPort", "f_120017_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.integrated.IntegratedServer#forcedGameMode
    static jobject get_field_forcedGameMode(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "publishedGameType", "field_28075", "forcedGameMode", "f_174966_"), "Ldct;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.integrated.IntegratedServer#forcedGameMode
    static void set_field_forcedGameMode(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "publishedGameType", "field_28075", "forcedGameMode", "f_174966_"), "Ldct;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.integrated.IntegratedServer#lanPinger
    static jobject get_field_lanPinger(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "lanPinger", "field_5519", "lanPinger", "f_120018_"), "Lgur;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.integrated.IntegratedServer#lanPinger
    static void set_field_lanPinger(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "lanPinger", "field_5519", "lanPinger", "f_120018_"), "Lgur;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.integrated.IntegratedServer#localPlayerUuid
    static jobject get_field_localPlayerUuid(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "uuid", "field_5521", "localPlayerUuid", "f_120019_"), "Ljava/util/UUID;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.integrated.IntegratedServer#localPlayerUuid
    static void set_field_localPlayerUuid(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "uuid", "field_5521", "localPlayerUuid", "f_120019_"), "Ljava/util/UUID;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.integrated.IntegratedServer#simulationDistance
    static jint get_field_simulationDistance(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "previousSimulationDistance", "field_34965", "simulationDistance", "f_194467_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.integrated.IntegratedServer#simulationDistance
    static void set_field_simulationDistance(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "previousSimulationDistance", "field_34965", "simulationDistance", "f_194467_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    static jmethodID methodID_setupServer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "initServer", "method_3823", "setupServer", "m_7038_"), "()Z");
    }

    static jboolean setupServer(const jobject& obj) {
                
       const auto methodID = methodID_setupServer();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isPaused() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("E", "isPaused", "method_54809", "isPaused", "m_305863_"), "()Z");
    }

    static jboolean isPaused(const jobject& obj) {
                
       const auto methodID = methodID_isPaused();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_tick() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "tickServer", "method_3748", "tick", "m_5705_"), "(Ljava/util/function/BooleanSupplier;)V");
    }

    static void tick(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_tick();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getDebugSampleLog() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getTickTimeLogger", "method_56881", "getDebugSampleLog", "m_318596_"), "()Lblr;");
    }

    static jobject getDebugSampleLog(const jobject& obj) {
                
       const auto methodID = methodID_getDebugSampleLog();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_shouldPushTickTimeLog() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "isTickTimeLoggingEnabled", "method_56626", "shouldPushTickTimeLog", "m_319241_"), "()Z");
    }

    static jboolean shouldPushTickTimeLog(const jobject& obj) {
                
       const auto methodID = methodID_shouldPushTickTimeLog();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_incrementTotalWorldTimeStat() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "tickPaused", "method_36439", "incrementTotalWorldTimeStat", "m_174968_"), "()V");
    }

    static void incrementTotalWorldTimeStat(const jobject& obj) {
                
       const auto methodID = methodID_incrementTotalWorldTimeStat();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_shouldBroadcastRconToOps() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("m", "shouldRconBroadcast", "method_3732", "shouldBroadcastRconToOps", "m_6983_"), "()Z");
    }

    static jboolean shouldBroadcastRconToOps(const jobject& obj) {
                
       const auto methodID = methodID_shouldBroadcastRconToOps();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_shouldBroadcastConsoleToOps() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("M_", "shouldInformAdmins", "method_9201", "shouldBroadcastConsoleToOps", "m_6102_"), "()Z");
    }

    static jboolean shouldBroadcastConsoleToOps(const jobject& obj) {
                
       const auto methodID = methodID_shouldBroadcastConsoleToOps();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getRunDirectory() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("D", "getServerDirectory", "method_3831", "getRunDirectory", "m_6237_"), "()Ljava/nio/file/Path;");
    }

    static jobject getRunDirectory(const jobject& obj) {
                
       const auto methodID = methodID_getRunDirectory();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_isDedicated() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("n", "isDedicatedServer", "method_3816", "isDedicated", "m_6982_"), "()Z");
    }

    static jboolean isDedicated(const jobject& obj) {
                
       const auto methodID = methodID_isDedicated();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getRateLimit() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("o", "getRateLimitPacketsPerSecond", "method_30612", "getRateLimit", "m_7032_"), "()I");
    }

    static jint getRateLimit(const jobject& obj) {
                
       const auto methodID = methodID_getRateLimit();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_isUsingNativeTransport() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("p", "isEpollEnabled", "method_3759", "isUsingNativeTransport", "m_6994_"), "()Z");
    }

    static jboolean isUsingNativeTransport(const jobject& obj) {
                
       const auto methodID = methodID_isUsingNativeTransport();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setCrashReport() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onServerCrash", "method_3744", "setCrashReport", "m_7268_"), "(Lo;)V");
    }

    static void setCrashReport(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setCrashReport();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_addExtraSystemDetails() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "fillServerSystemReport", "method_3859", "addExtraSystemDetails", "m_142424_"), "(Lac;)Lac;");
    }

    static jobject addExtraSystemDetails(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addExtraSystemDetails();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getModStatus() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("P", "getModdedStatus", "method_24307", "getModStatus", "m_183471_"), "()Layn;");
    }

    static jobject getModStatus(const jobject& obj) {
                
       const auto methodID = methodID_getModStatus();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_openToLan() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "publishServer", "method_3763", "openToLan", "m_7386_"), "(Ldct;ZI)Z");
    }

    static jboolean openToLan(const jobject& obj, const jobject& arg0, const jboolean& arg1, const jint& arg2) {
                
       const auto methodID = methodID_openToLan();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_shutdown() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("v", "stopServer", "method_3782", "shutdown", "m_7041_"), "()V");
    }

    static void shutdown(const jobject& obj) {
                
       const auto methodID = methodID_shutdown();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_stop() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "halt", "method_3747", "stop", "m_7570_"), "(Z)V");
    }

    static void stop(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_stop();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isRemote() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("r", "isPublished", "method_3860", "isRemote", "m_6992_"), "()Z");
    }

    static jboolean isRemote(const jobject& obj) {
                
       const auto methodID = methodID_isRemote();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getServerPort() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("R", "getPort", "method_3756", "getServerPort", "m_7010_"), "()I");
    }

    static jint getServerPort(const jobject& obj) {
                
       const auto methodID = methodID_getServerPort();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_setDefaultGameMode() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setDefaultGameType", "method_3838", "setDefaultGameMode", "m_7835_"), "(Ldct;)V");
    }

    static void setDefaultGameMode(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setDefaultGameMode();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_areCommandBlocksEnabled() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("q", "isCommandBlockEnabled", "method_3812", "areCommandBlocksEnabled", "m_6993_"), "()Z");
    }

    static jboolean areCommandBlocksEnabled(const jobject& obj) {
                
       const auto methodID = methodID_areCommandBlocksEnabled();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getOpPermissionLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "getOperatorUserPermissionLevel", "method_3798", "getOpPermissionLevel", "m_7022_"), "()I");
    }

    static jint getOpPermissionLevel(const jobject& obj) {
                
       const auto methodID = methodID_getOpPermissionLevel();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getFunctionPermissionLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "getFunctionCompilationLevel", "method_21714", "getFunctionPermissionLevel", "m_7034_"), "()I");
    }

    static jint getFunctionPermissionLevel(const jobject& obj) {
                
       const auto methodID = methodID_getFunctionPermissionLevel();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_setLocalPlayerUuid() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setUUID", "method_4817", "setLocalPlayerUuid", "m_120046_"), "(Ljava/util/UUID;)V");
    }

    static void setLocalPlayerUuid(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setLocalPlayerUuid();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isHost() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isSingleplayerOwner", "method_19466", "isHost", "m_7779_"), "(Lcom/mojang/authlib/GameProfile;)Z");
    }

    static jboolean isHost(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isHost();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_adjustTrackingDistance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getScaledTrackingDistance", "method_27903", "adjustTrackingDistance", "m_7186_"), "(I)I");
    }

    static jint adjustTrackingDistance(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_adjustTrackingDistance();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_syncChunkWrites() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aZ", "forceSynchronousWrites", "method_27051", "syncChunkWrites", "m_6365_"), "()Z");
    }

    static jboolean syncChunkWrites(const jobject& obj) {
                
       const auto methodID = methodID_syncChunkWrites();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getForcedGameMode() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bf", "getForcedGameType", "method_3761", "getForcedGameMode", "m_142359_"), "()Ldct;");
    }

    static jobject getForcedGameMode(const jobject& obj) {
                
       const auto methodID = methodID_getForcedGameMode();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_saveAll() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "saveEverything", "method_39218", "saveAll", "m_195514_"), "(ZZZ)Z");
    }

    static jboolean saveAll(const jobject& obj, const jboolean& arg0, const jboolean& arg1, const jboolean& arg2) {
                
       const auto methodID = methodID_saveAll();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_checkLowDiskSpaceWarning() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "warnOnLowDiskSpace", "method_57823", "checkLowDiskSpaceWarning", "m_321341_"), "()V");
    }

    static void checkLowDiskSpaceWarning(const jobject& obj) {
                
       const auto methodID = methodID_checkLowDiskSpaceWarning();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_onChunkLoadFailure() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "reportChunkLoadFailure", "method_57821", "onChunkLoadFailure", "m_293783_"), "(Ljava/lang/Throwable;Ldws;Ldcd;)V");
    }

    static void onChunkLoadFailure(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_onChunkLoadFailure();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_onChunkSaveFailure() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "reportChunkSaveFailure", "method_57822", "onChunkSaveFailure", "m_322794_"), "(Ljava/lang/Throwable;Ldws;Ldcd;)V");
    }

    static void onChunkSaveFailure(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_onChunkSaveFailure();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
};

#endif // NET_MINECRAFT_SERVER_INTEGRATED_INTEGRATEDSERVER_HPP