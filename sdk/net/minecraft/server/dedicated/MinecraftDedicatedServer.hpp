// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SERVER_DEDICATED_MINECRAFTDEDICATEDSERVER_HPP
#define NET_MINECRAFT_SERVER_DEDICATED_MINECRAFTDEDICATEDSERVER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.server.dedicated.MinecraftDedicatedServer
 * Remapped: apn
 */
namespace MinecraftDedicatedServer {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("apn", "net/minecraft/server/dedicated/DedicatedServer", "net/minecraft/class_3176", "net/minecraft/server/dedicated/MinecraftDedicatedServer", "net/minecraft/src/C_5407_"));
        }
        return cachedClass;
    };

    // getter for static default field net.minecraft.server.dedicated.MinecraftDedicatedServer#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "LOGGER", "field_13814", "LOGGER", "f_139598_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field net.minecraft.server.dedicated.MinecraftDedicatedServer#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("k", "LOGGER", "field_13814", "LOGGER", "f_139598_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.dedicated.MinecraftDedicatedServer#field_29662
    [[maybe_unused]] static jint get_field_field_29662() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "CONVERSION_RETRY_DELAY_MS", "field_29662", "field_29662", "f_142864_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.dedicated.MinecraftDedicatedServer#field_29662
    [[maybe_unused]] static void set_field_field_29662(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("l", "CONVERSION_RETRY_DELAY_MS", "field_29662", "field_29662", "f_142864_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.dedicated.MinecraftDedicatedServer#field_29663
    [[maybe_unused]] static jint get_field_field_29663() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "CONVERSION_RETRIES", "field_29663", "field_29663", "f_142865_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.dedicated.MinecraftDedicatedServer#field_29663
    [[maybe_unused]] static void set_field_field_29663(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("m", "CONVERSION_RETRIES", "field_29663", "field_29663", "f_142865_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.server.dedicated.MinecraftDedicatedServer#commandQueue
    static jobject get_field_commandQueue(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "consoleInput", "field_13815", "commandQueue", "f_139600_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.dedicated.MinecraftDedicatedServer#commandQueue
    static void set_field_commandQueue(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "consoleInput", "field_13815", "commandQueue", "f_139600_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.dedicated.MinecraftDedicatedServer#queryResponseHandler
    static jobject get_field_queryResponseHandler(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "queryThreadGs4", "field_13816", "queryResponseHandler", "f_139601_"), "Lavi;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.dedicated.MinecraftDedicatedServer#queryResponseHandler
    static void set_field_queryResponseHandler(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "queryThreadGs4", "field_13816", "queryResponseHandler", "f_139601_"), "Lavi;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.dedicated.MinecraftDedicatedServer#rconCommandOutput
    static jobject get_field_rconCommandOutput(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "rconConsoleSource", "field_13811", "rconCommandOutput", "f_139602_"), "Lavf;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.dedicated.MinecraftDedicatedServer#rconCommandOutput
    static void set_field_rconCommandOutput(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "rconConsoleSource", "field_13811", "rconCommandOutput", "f_139602_"), "Lavf;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.dedicated.MinecraftDedicatedServer#rconServer
    static jobject get_field_rconServer(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "rconThread", "field_13819", "rconServer", "f_139603_"), "Lavk;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.dedicated.MinecraftDedicatedServer#rconServer
    static void set_field_rconServer(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "rconThread", "field_13819", "rconServer", "f_139603_"), "Lavk;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.dedicated.MinecraftDedicatedServer#propertiesLoader
    static jobject get_field_propertiesLoader(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "settings", "field_16799", "propertiesLoader", "f_139604_"), "Lapp;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.dedicated.MinecraftDedicatedServer#propertiesLoader
    static void set_field_propertiesLoader(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "settings", "field_16799", "propertiesLoader", "f_139604_"), "Lapp;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.dedicated.MinecraftDedicatedServer#gui
    static jobject get_field_gui(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "gui", "field_16800", "gui", "f_139605_"), "Lapt;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.dedicated.MinecraftDedicatedServer#gui
    static void set_field_gui(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "gui", "field_16800", "gui", "f_139605_"), "Lapt;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.dedicated.MinecraftDedicatedServer#filterer
    static jobject get_field_filterer(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "textFilterClient", "field_26898", "filterer", "f_139606_"), "Lasa;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.dedicated.MinecraftDedicatedServer#filterer
    static void set_field_filterer(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "textFilterClient", "field_26898", "filterer", "f_139606_"), "Lasa;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.dedicated.MinecraftDedicatedServer#debugSampleLog
    static jobject get_field_debugSampleLog(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "tickTimeLogger", "field_48788", "debugSampleLog", "f_314886_"), "Lblt;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.dedicated.MinecraftDedicatedServer#debugSampleLog
    static void set_field_debugSampleLog(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "tickTimeLogger", "field_48788", "debugSampleLog", "f_314886_"), "Lblt;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.dedicated.MinecraftDedicatedServer#subscriptionTracker
    static jobject get_field_subscriptionTracker(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "debugSampleSubscriptionTracker", "field_48789", "subscriptionTracker", "f_316995_"), "Lblq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.dedicated.MinecraftDedicatedServer#subscriptionTracker
    static void set_field_subscriptionTracker(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "debugSampleSubscriptionTracker", "field_48789", "subscriptionTracker", "f_316995_"), "Lblq;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.dedicated.MinecraftDedicatedServer#serverLinks
    static jobject get_field_serverLinks(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("w", "serverLinks", "field_52215", "serverLinks", "f_336865_"), "Lalj;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.dedicated.MinecraftDedicatedServer#serverLinks
    static void set_field_serverLinks(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("w", "serverLinks", "field_52215", "serverLinks", "f_336865_"), "Lalj;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    static jmethodID methodID_setupServer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "initServer", "method_3823", "setupServer", "m_7038_"), "()Z");
    }

    static jboolean setupServer(const jobject& obj) {
                
       const auto methodID = methodID_setupServer();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_shouldSpawnAnimals() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("ab", "isSpawningAnimals", "method_3796", "shouldSpawnAnimals", "m_6998_"), "()Z");
    }

    static jboolean shouldSpawnAnimals(const jobject& obj) {
                
       const auto methodID = methodID_shouldSpawnAnimals();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_isMonsterSpawningEnabled() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("V", "isSpawningMonsters", "method_3783", "isMonsterSpawningEnabled", "m_7004_"), "()Z");
    }

    static jboolean isMonsterSpawningEnabled(const jobject& obj) {
                
       const auto methodID = methodID_isMonsterSpawningEnabled();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_shouldSpawnNpcs() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("ac", "areNpcsEnabled", "method_3736", "shouldSpawnNpcs", "m_6997_"), "()Z");
    }

    static jboolean shouldSpawnNpcs(const jobject& obj) {
                
       const auto methodID = methodID_shouldSpawnNpcs();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getProperties() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getProperties", "method_16705", "getProperties", "m_7913_"), "()Lapo;");
    }

    static jobject getProperties(const jobject& obj) {
                
       const auto methodID = methodID_getProperties();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_updateDifficulty() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("t", "forceDifficulty", "method_27731", "updateDifficulty", "m_7044_"), "()V");
    }

    static void updateDifficulty(const jobject& obj) {
                
       const auto methodID = methodID_updateDifficulty();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_isHardcore() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "isHardcore", "method_3754", "isHardcore", "m_7035_"), "()Z");
    }

    static jboolean isHardcore(const jobject& obj) {
                
       const auto methodID = methodID_isHardcore();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_addExtraSystemDetails() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "fillServerSystemReport", "method_3859", "addExtraSystemDetails", "m_142424_"), "(Lac;)Lac;");
    }

    static jobject addExtraSystemDetails(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addExtraSystemDetails();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_dumpProperties() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "dumpServerProperties", "method_37113", "dumpProperties", "m_142116_"), "(Ljava/nio/file/Path;)V");
    }

    static void dumpProperties(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_dumpProperties();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_exit() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "onServerExit", "method_3821", "exit", "m_6988_"), "()V");
    }

    static void exit(const jobject& obj) {
                
       const auto methodID = methodID_exit();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_tickWorlds() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "tickChildren", "method_3813", "tickWorlds", "m_5703_"), "(Ljava/util/function/BooleanSupplier;)V");
    }

    static void tickWorlds(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_tickWorlds();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isWorldAllowed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isLevelEnabled", "method_60671", "isWorldAllowed", "m_7079_"), "(Ldcw;)Z");
    }

    static jboolean isWorldAllowed(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isWorldAllowed();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_enqueueCommand() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "handleConsoleInput", "method_13947", "enqueueCommand", "m_139645_"), "(Ljava/lang/String;Let;)V");
    }

    static void enqueueCommand(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_enqueueCommand();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_executeQueuedCommands() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("br", "handleConsoleInputs", "method_13941", "executeQueuedCommands", "m_139665_"), "()V");
    }

    static void executeQueuedCommands(const jobject& obj) {
                
       const auto methodID = methodID_executeQueuedCommands();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_isDedicated() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("n", "isDedicatedServer", "method_3816", "isDedicated", "m_6982_"), "()Z");
    }

    static jboolean isDedicated(const jobject& obj) {
                
       const auto methodID = methodID_isDedicated();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getRateLimit() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("o", "getRateLimitPacketsPerSecond", "method_30612", "getRateLimit", "m_7032_"), "()I");
    }

    static jint getRateLimit(const jobject& obj) {
                
       const auto methodID = methodID_getRateLimit();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_isUsingNativeTransport() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("p", "isEpollEnabled", "method_3759", "isUsingNativeTransport", "m_6994_"), "()Z");
    }

    static jboolean isUsingNativeTransport(const jobject& obj) {
                
       const auto methodID = methodID_isUsingNativeTransport();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getPlayerManager() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bs", "getPlayerList", "method_13949", "getPlayerManager", "m_6846_"), "()Lapm;");
    }

    static jobject getPlayerManager(const jobject& obj) {
                
       const auto methodID = methodID_getPlayerManager();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_isRemote() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("r", "isPublished", "method_3860", "isRemote", "m_6992_"), "()Z");
    }

    static jboolean isRemote(const jobject& obj) {
                
       const auto methodID = methodID_isRemote();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getHostname() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getServerIp", "method_12929", "getHostname", "m_6866_"), "()Ljava/lang/String;");
    }

    static jobject getHostname(const jobject& obj) {
                
       const auto methodID = methodID_getHostname();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getPort() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getServerPort", "method_12918", "getPort", "m_7448_"), "()I");
    }

    static jint getPort(const jobject& obj) {
                
       const auto methodID = methodID_getPort();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getMotd() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "getServerName", "method_12930", "getMotd", "m_6995_"), "()Ljava/lang/String;");
    }

    static jobject getMotd(const jobject& obj) {
                
       const auto methodID = methodID_getMotd();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_createGui() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bt", "showGui", "method_13948", "createGui", "m_139667_"), "()V");
    }

    static void createGui(const jobject& obj) {
                
       const auto methodID = methodID_createGui();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_hasGui() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("ak", "hasGui", "method_3727", "hasGui", "m_6370_"), "()Z");
    }

    static jboolean hasGui(const jobject& obj) {
                
       const auto methodID = methodID_hasGui();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_areCommandBlocksEnabled() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("q", "isCommandBlockEnabled", "method_3812", "areCommandBlocksEnabled", "m_6993_"), "()Z");
    }

    static jboolean areCommandBlocksEnabled(const jobject& obj) {
                
       const auto methodID = methodID_areCommandBlocksEnabled();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getSpawnProtectionRadius() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("am", "getSpawnProtectionRadius", "method_3841", "getSpawnProtectionRadius", "m_6396_"), "()I");
    }

    static jint getSpawnProtectionRadius(const jobject& obj) {
                
       const auto methodID = methodID_getSpawnProtectionRadius();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_isSpawnProtected() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isUnderSpawnProtection", "method_3785", "isSpawnProtected", "m_7762_"), "(Laqu;Ljd;Lcmx;)Z");
    }

    static jboolean isSpawnProtected(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_isSpawnProtected();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_acceptsStatusQuery() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("an", "repliesToStatus", "method_27902", "acceptsStatusQuery", "m_6373_"), "()Z");
    }

    static jboolean acceptsStatusQuery(const jobject& obj) {
                
       const auto methodID = methodID_acceptsStatusQuery();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_hideOnlinePlayers() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("ao", "hidesOnlinePlayers", "method_39424", "hideOnlinePlayers", "m_183306_"), "()Z");
    }

    static jboolean hideOnlinePlayers(const jobject& obj) {
                
       const auto methodID = methodID_hideOnlinePlayers();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getOpPermissionLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "getOperatorUserPermissionLevel", "method_3798", "getOpPermissionLevel", "m_7022_"), "()I");
    }

    static jint getOpPermissionLevel(const jobject& obj) {
                
       const auto methodID = methodID_getOpPermissionLevel();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getFunctionPermissionLevel() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "getFunctionCompilationLevel", "method_21714", "getFunctionPermissionLevel", "m_7034_"), "()I");
    }

    static jint getFunctionPermissionLevel(const jobject& obj) {
                
       const auto methodID = methodID_getFunctionPermissionLevel();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_setPlayerIdleTimeout() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "setPlayerIdleTimeout", "method_3803", "setPlayerIdleTimeout", "m_7196_"), "(I)V");
    }

    static void setPlayerIdleTimeout(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_setPlayerIdleTimeout();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_shouldBroadcastRconToOps() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("m", "shouldRconBroadcast", "method_3732", "shouldBroadcastRconToOps", "m_6983_"), "()Z");
    }

    static jboolean shouldBroadcastRconToOps(const jobject& obj) {
                
       const auto methodID = methodID_shouldBroadcastRconToOps();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_shouldBroadcastConsoleToOps() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("M_", "shouldInformAdmins", "method_9201", "shouldBroadcastConsoleToOps", "m_6102_"), "()Z");
    }

    static jboolean shouldBroadcastConsoleToOps(const jobject& obj) {
                
       const auto methodID = methodID_shouldBroadcastConsoleToOps();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getMaxWorldBorderRadius() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("ax", "getAbsoluteMaxWorldSize", "method_3749", "getMaxWorldBorderRadius", "m_6329_"), "()I");
    }

    static jint getMaxWorldBorderRadius(const jobject& obj) {
                
       const auto methodID = methodID_getMaxWorldBorderRadius();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getNetworkCompressionThreshold() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aA", "getCompressionThreshold", "method_3773", "getNetworkCompressionThreshold", "m_6328_"), "()I");
    }

    static jint getNetworkCompressionThreshold(const jobject& obj) {
                
       const auto methodID = methodID_getNetworkCompressionThreshold();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_shouldEnforceSecureProfile() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aB", "enforceSecureProfile", "method_43500", "shouldEnforceSecureProfile", "m_214005_"), "()Z");
    }

    static jboolean shouldEnforceSecureProfile(const jobject& obj) {
                
       const auto methodID = methodID_shouldEnforceSecureProfile();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_shouldLogIps() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bn", "logIPs", "method_52344", "shouldLogIps", "m_292975_"), "()Z");
    }

    static jboolean shouldLogIps(const jobject& obj) {
                
       const auto methodID = methodID_shouldLogIps();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_convertData() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bu", "convertOldUsers", "method_13951", "convertData", "m_139668_"), "()Z");
    }

    static jboolean convertData(const jobject& obj) {
                
       const auto methodID = methodID_convertData();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_sleepFiveSeconds() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bD", "waitForRetry", "method_13942", "sleepFiveSeconds", "m_139671_"), "()V");
    }

    static void sleepFiveSeconds(const jobject& obj) {
                
       const auto methodID = methodID_sleepFiveSeconds();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getMaxTickTime() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bv", "getMaxTickLength", "method_13944", "getMaxTickTime", "m_139669_"), "()J");
    }

    static jlong getMaxTickTime(const jobject& obj) {
                
       const auto methodID = methodID_getMaxTickTime();
       return MinecraftSDK::env->CallLongMethod(obj, methodID);
    };
    
    static jmethodID methodID_getMaxChainedNeighborUpdates() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bl", "getMaxChainedNeighborUpdates", "method_41239", "getMaxChainedNeighborUpdates", "m_213994_"), "()I");
    }

    static jint getMaxChainedNeighborUpdates(const jobject& obj) {
                
       const auto methodID = methodID_getMaxChainedNeighborUpdates();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getPlugins() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("u", "getPluginNames", "method_12916", "getPlugins", "m_7138_"), "()Ljava/lang/String;");
    }

    static jobject getPlugins(const jobject& obj) {
                
       const auto methodID = methodID_getPlugins();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_executeRconCommand() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "runCommand", "method_12934", "executeRconCommand", "m_7261_"), "(Ljava/lang/String;)Ljava/lang/String;");
    }

    static jobject executeRconCommand(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_executeRconCommand();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setUseWhitelist() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "storeUsingWhiteList", "method_16712", "setUseWhitelist", "m_139688_"), "(Z)V");
    }

    static void setUseWhitelist(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setUseWhitelist();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_shutdown() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("v", "stopServer", "method_3782", "shutdown", "m_7041_"), "()V");
    }

    static void shutdown(const jobject& obj) {
                
       const auto methodID = methodID_shutdown();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_isHost() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "isSingleplayerOwner", "method_19466", "isHost", "m_7779_"), "(Lcom/mojang/authlib/GameProfile;)Z");
    }

    static jboolean isHost(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isHost();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_adjustTrackingDistance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getScaledTrackingDistance", "method_27903", "adjustTrackingDistance", "m_7186_"), "(I)I");
    }

    static jint adjustTrackingDistance(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_adjustTrackingDistance();
       return MinecraftSDK::env->CallIntMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getLevelName() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("s", "getLevelIdName", "method_3865", "getLevelName", "m_7123_"), "()Ljava/lang/String;");
    }

    static jobject getLevelName(const jobject& obj) {
                
       const auto methodID = methodID_getLevelName();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_syncChunkWrites() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aZ", "forceSynchronousWrites", "method_27051", "syncChunkWrites", "m_6365_"), "()Z");
    }

    static jboolean syncChunkWrites(const jobject& obj) {
                
       const auto methodID = methodID_syncChunkWrites();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_createFilterer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "createTextFilterForPlayer", "method_31371", "createFilterer", "m_7950_"), "(Laqv;)Larz;");
    }

    static jobject createFilterer(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_createFilterer();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getForcedGameMode() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bf", "getForcedGameType", "method_3761", "getForcedGameMode", "m_142359_"), "()Ldct;");
    }

    static jobject getForcedGameMode(const jobject& obj) {
                
       const auto methodID = methodID_getForcedGameMode();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getResourcePackProperties() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("X", "getServerResourcePack", "method_43659", "getResourcePackProperties", "m_214042_"), "()Ljava/util/Optional;");
    }

    static jobject getResourcePackProperties(const jobject& obj) {
                
       const auto methodID = methodID_getResourcePackProperties();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_endTickMetrics() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("aU", "endMetricsRecordingTick", "method_24490", "endTickMetrics", "m_177946_"), "()V");
    }

    static void endTickMetrics(const jobject& obj) {
                
       const auto methodID = methodID_endTickMetrics();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getDebugSampleLog() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "getTickTimeLogger", "method_56593", "getDebugSampleLog", "m_318596_"), "()Lblu;");
    }

    static jobject getDebugSampleLog(const jobject& obj) {
                
       const auto methodID = methodID_getDebugSampleLog();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_shouldPushTickTimeLog() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "isTickTimeLoggingEnabled", "method_56626", "shouldPushTickTimeLog", "m_319241_"), "()Z");
    }

    static jboolean shouldPushTickTimeLog(const jobject& obj) {
                
       const auto methodID = methodID_shouldPushTickTimeLog();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_subscribeToDebugSample() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "subscribeToDebugSample", "method_56625", "subscribeToDebugSample", "m_320401_"), "(Laqv;Lbls;)V");
    }

    static void subscribeToDebugSample(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_subscribeToDebugSample();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_acceptsTransfers() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bo", "acceptsTransfers", "method_56040", "acceptsTransfers", "m_320782_"), "()Z");
    }

    static jboolean acceptsTransfers(const jobject& obj) {
                
       const auto methodID = methodID_acceptsTransfers();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_getServerLinks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("bq", "serverLinks", "method_60672", "getServerLinks", "m_338896_"), "()Lalj;");
    }

    static jobject getServerLinks(const jobject& obj) {
                
       const auto methodID = methodID_getServerLinks();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_loadServerLinks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "createServerLinks", "method_60940", "loadServerLinks", "m_338375_"), "(Lapp;)Lalj;");
    }

    static jobject loadServerLinks(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_loadServerLinks();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_parseBugReportLink() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "parseBugReportLink", "method_60939", "parseBugReportLink", "m_339169_"), "(Lapo;)Ljava/util/Optional;");
    }

    static jobject parseBugReportLink(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_parseBugReportLink();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_SERVER_DEDICATED_MINECRAFTDEDICATEDSERVER_HPP