// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SERVER_DEDICATED_DEDICATEDPLAYERMANAGER_HPP
#define NET_MINECRAFT_SERVER_DEDICATED_DEDICATEDPLAYERMANAGER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.server.dedicated.DedicatedPlayerManager
 * Remapped: apm
 */
namespace DedicatedPlayerManager {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("apm", "net/minecraft/server/dedicated/DedicatedPlayerList", "net/minecraft/class_3174", "net/minecraft/server/dedicated/DedicatedPlayerManager", "net/minecraft/src/C_5406_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.server.dedicated.DedicatedPlayerManager#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "LOGGER", "field_13804", "LOGGER", "f_139571_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.dedicated.DedicatedPlayerManager#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "LOGGER", "field_13804", "LOGGER", "f_139571_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_setWhitelistEnabled() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setUsingWhiteList", "method_14557", "setWhitelistEnabled", "m_6628_"), "(Z)V");
    }

    static void setWhitelistEnabled(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setWhitelistEnabled();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_addToOperators() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "op", "method_14582", "addToOperators", "m_5749_"), "(Lcom/mojang/authlib/GameProfile;)V");
    }

    static void addToOperators(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addToOperators();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_removeFromOperators() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "deop", "method_14604", "removeFromOperators", "m_5750_"), "(Lcom/mojang/authlib/GameProfile;)V");
    }

    static void removeFromOperators(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_removeFromOperators();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_reloadWhitelist() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "reloadWhiteList", "method_14599", "reloadWhitelist", "m_7542_"), "()V");
    }

    static void reloadWhitelist(const jobject& obj) {
                
       const auto methodID = methodID_reloadWhitelist();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_saveIpBanList() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("w", "saveIpBanList", "method_13932", "saveIpBanList", "m_139593_"), "()V");
    }

    static void saveIpBanList(const jobject& obj) {
                
       const auto methodID = methodID_saveIpBanList();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_saveUserBanList() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("x", "saveUserBanList", "method_13930", "saveUserBanList", "m_139594_"), "()V");
    }

    static void saveUserBanList(const jobject& obj) {
                
       const auto methodID = methodID_saveUserBanList();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_loadIpBanList() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("y", "loadIpBanList", "method_13931", "loadIpBanList", "m_139595_"), "()V");
    }

    static void loadIpBanList(const jobject& obj) {
                
       const auto methodID = methodID_loadIpBanList();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_loadUserBanList() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("z", "loadUserBanList", "method_13933", "loadUserBanList", "m_139596_"), "()V");
    }

    static void loadUserBanList(const jobject& obj) {
                
       const auto methodID = methodID_loadUserBanList();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_loadOpList() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("A", "loadOps", "method_13934", "loadOpList", "m_139597_"), "()V");
    }

    static void loadOpList(const jobject& obj) {
                
       const auto methodID = methodID_loadOpList();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_saveOpList() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("B", "saveOps", "method_13935", "saveOpList", "m_139577_"), "()V");
    }

    static void saveOpList(const jobject& obj) {
                
       const auto methodID = methodID_saveOpList();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_loadWhitelist() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("C", "loadWhiteList", "method_13936", "loadWhitelist", "m_139578_"), "()V");
    }

    static void loadWhitelist(const jobject& obj) {
                
       const auto methodID = methodID_loadWhitelist();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_saveWhitelist() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("D", "saveWhiteList", "method_13937", "saveWhitelist", "m_139579_"), "()V");
    }

    static void saveWhitelist(const jobject& obj) {
                
       const auto methodID = methodID_saveWhitelist();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_isWhitelisted() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "isWhiteListed", "method_14587", "isWhitelisted", "m_5764_"), "(Lcom/mojang/authlib/GameProfile;)Z");
    }

    static jboolean isWhitelisted(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isWhitelisted();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getServer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getServer", "method_13938", "getServer", "m_7873_"), "()Lapn;");
    }

    static jobject getServer(const jobject& obj) {
                
       const auto methodID = methodID_getServer();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_canBypassPlayerLimit() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "canBypassPlayerLimit", "method_14609", "canBypassPlayerLimit", "m_5765_"), "(Lcom/mojang/authlib/GameProfile;)Z");
    }

    static jboolean canBypassPlayerLimit(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_canBypassPlayerLimit();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_SERVER_DEDICATED_DEDICATEDPLAYERMANAGER_HPP