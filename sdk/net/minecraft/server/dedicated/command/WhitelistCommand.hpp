// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SERVER_DEDICATED_COMMAND_WHITELISTCOMMAND_HPP
#define NET_MINECRAFT_SERVER_DEDICATED_COMMAND_WHITELISTCOMMAND_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.server.dedicated.command.WhitelistCommand
 * Remapped: apd
 */
namespace WhitelistCommand {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("apd", "net/minecraft/server/commands/WhitelistCommand", "net/minecraft/class_3156", "net/minecraft/server/dedicated/command/WhitelistCommand", "net/minecraft/src/C_5391_"));
        }
        return cachedClass;
    };

    // getter for static private field net.minecraft.server.dedicated.command.WhitelistCommand#ALREADY_ON_EXCEPTION
    [[maybe_unused]] static jobject get_field_ALREADY_ON_EXCEPTION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "ERROR_ALREADY_ENABLED", "field_13767", "ALREADY_ON_EXCEPTION", "f_139191_"), "Lcom/mojang/brigadier/exceptions/SimpleCommandExceptionType;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.dedicated.command.WhitelistCommand#ALREADY_ON_EXCEPTION
    [[maybe_unused]] static void set_field_ALREADY_ON_EXCEPTION(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "ERROR_ALREADY_ENABLED", "field_13767", "ALREADY_ON_EXCEPTION", "f_139191_"), "Lcom/mojang/brigadier/exceptions/SimpleCommandExceptionType;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.dedicated.command.WhitelistCommand#ALREADY_OFF_EXCEPTION
    [[maybe_unused]] static jobject get_field_ALREADY_OFF_EXCEPTION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ERROR_ALREADY_DISABLED", "field_13770", "ALREADY_OFF_EXCEPTION", "f_139192_"), "Lcom/mojang/brigadier/exceptions/SimpleCommandExceptionType;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.dedicated.command.WhitelistCommand#ALREADY_OFF_EXCEPTION
    [[maybe_unused]] static void set_field_ALREADY_OFF_EXCEPTION(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "ERROR_ALREADY_DISABLED", "field_13770", "ALREADY_OFF_EXCEPTION", "f_139192_"), "Lcom/mojang/brigadier/exceptions/SimpleCommandExceptionType;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.dedicated.command.WhitelistCommand#ADD_FAILED_EXCEPTION
    [[maybe_unused]] static jobject get_field_ADD_FAILED_EXCEPTION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "ERROR_ALREADY_WHITELISTED", "field_13768", "ADD_FAILED_EXCEPTION", "f_139193_"), "Lcom/mojang/brigadier/exceptions/SimpleCommandExceptionType;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.dedicated.command.WhitelistCommand#ADD_FAILED_EXCEPTION
    [[maybe_unused]] static void set_field_ADD_FAILED_EXCEPTION(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "ERROR_ALREADY_WHITELISTED", "field_13768", "ADD_FAILED_EXCEPTION", "f_139193_"), "Lcom/mojang/brigadier/exceptions/SimpleCommandExceptionType;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.dedicated.command.WhitelistCommand#REMOVE_FAILED_EXCEPTION
    [[maybe_unused]] static jobject get_field_REMOVE_FAILED_EXCEPTION() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "ERROR_NOT_WHITELISTED", "field_13769", "REMOVE_FAILED_EXCEPTION", "f_139194_"), "Lcom/mojang/brigadier/exceptions/SimpleCommandExceptionType;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.dedicated.command.WhitelistCommand#REMOVE_FAILED_EXCEPTION
    [[maybe_unused]] static void set_field_REMOVE_FAILED_EXCEPTION(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "ERROR_NOT_WHITELISTED", "field_13769", "REMOVE_FAILED_EXCEPTION", "f_139194_"), "Lcom/mojang/brigadier/exceptions/SimpleCommandExceptionType;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_register() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "register", "method_13836", "register", "m_139201_"), "(Lcom/mojang/brigadier/CommandDispatcher;)V");
    }

    static void register(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_register();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_executeReload() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "reload", "method_13850", "executeReload", "m_139208_"), "(Let;)I");
    }

    static jint executeReload(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_executeReload();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_executeAdd() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("a", "addPlayers", "method_13838", "executeAdd", "m_139210_"), "(Let;Ljava/util/Collection;)I");
    }

    static jint executeAdd(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_executeAdd();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_executeRemove() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "removePlayers", "method_13845", "executeRemove", "m_139220_"), "(Let;Ljava/util/Collection;)I");
    }

    static jint executeRemove(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_executeRemove();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_executeOn() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "enableWhitelist", "method_13839", "executeOn", "m_139218_"), "(Let;)I");
    }

    static jint executeOn(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_executeOn();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_executeOff() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "disableWhitelist", "method_13837", "executeOff", "m_139225_"), "(Let;)I");
    }

    static jint executeOff(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_executeOff();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_executeList() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("d", "showList", "method_13840", "executeList", "m_139229_"), "(Let;)I");
    }

    static jint executeList(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_executeList();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
};

#endif // NET_MINECRAFT_SERVER_DEDICATED_COMMAND_WHITELISTCOMMAND_HPP