// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SERVER_PLAYERMANAGER_HPP
#define NET_MINECRAFT_SERVER_PLAYERMANAGER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.server.PlayerManager
 * Remapped: aur
 */
namespace PlayerManager {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("aur", "net/minecraft/server/players/PlayerList", "net/minecraft/class_3324", "net/minecraft/server/PlayerManager", "net/minecraft/src/C_102_"));
        }
        return cachedClass;
    };

    // getter for static public field net.minecraft.server.PlayerManager#BANNED_PLAYERS_FILE
    [[maybe_unused]] static jobject get_field_BANNED_PLAYERS_FILE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "USERBANLIST_FILE", "field_14355", "BANNED_PLAYERS_FILE", "f_11189_"), "Ljava/io/File;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.server.PlayerManager#BANNED_PLAYERS_FILE
    [[maybe_unused]] static void set_field_BANNED_PLAYERS_FILE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("a", "USERBANLIST_FILE", "field_14355", "BANNED_PLAYERS_FILE", "f_11189_"), "Ljava/io/File;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.server.PlayerManager#BANNED_IPS_FILE
    [[maybe_unused]] static jobject get_field_BANNED_IPS_FILE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "IPBANLIST_FILE", "field_14364", "BANNED_IPS_FILE", "f_11190_"), "Ljava/io/File;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.server.PlayerManager#BANNED_IPS_FILE
    [[maybe_unused]] static void set_field_BANNED_IPS_FILE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("b", "IPBANLIST_FILE", "field_14364", "BANNED_IPS_FILE", "f_11190_"), "Ljava/io/File;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.server.PlayerManager#OPERATORS_FILE
    [[maybe_unused]] static jobject get_field_OPERATORS_FILE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "OPLIST_FILE", "field_14348", "OPERATORS_FILE", "f_11191_"), "Ljava/io/File;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.server.PlayerManager#OPERATORS_FILE
    [[maybe_unused]] static void set_field_OPERATORS_FILE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("c", "OPLIST_FILE", "field_14348", "OPERATORS_FILE", "f_11191_"), "Ljava/io/File;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.server.PlayerManager#WHITELIST_FILE
    [[maybe_unused]] static jobject get_field_WHITELIST_FILE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "WHITELIST_FILE", "field_14343", "WHITELIST_FILE", "f_11192_"), "Ljava/io/File;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.server.PlayerManager#WHITELIST_FILE
    [[maybe_unused]] static void set_field_WHITELIST_FILE(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("d", "WHITELIST_FILE", "field_14343", "WHITELIST_FILE", "f_11192_"), "Ljava/io/File;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.server.PlayerManager#FILTERED_FULL_TEXT
    [[maybe_unused]] static jobject get_field_FILTERED_FULL_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "CHAT_FILTERED_FULL", "field_39921", "FILTERED_FULL_TEXT", "f_243017_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.server.PlayerManager#FILTERED_FULL_TEXT
    [[maybe_unused]] static void set_field_FILTERED_FULL_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("e", "CHAT_FILTERED_FULL", "field_39921", "FILTERED_FULL_TEXT", "f_243017_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field net.minecraft.server.PlayerManager#DUPLICATE_LOGIN_TEXT
    [[maybe_unused]] static jobject get_field_DUPLICATE_LOGIN_TEXT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "DUPLICATE_LOGIN_DISCONNECT_MESSAGE", "field_45061", "DUPLICATE_LOGIN_TEXT", "f_291251_"), "Lwz;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static public field net.minecraft.server.PlayerManager#DUPLICATE_LOGIN_TEXT
    [[maybe_unused]] static void set_field_DUPLICATE_LOGIN_TEXT(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("f", "DUPLICATE_LOGIN_DISCONNECT_MESSAGE", "field_45061", "DUPLICATE_LOGIN_TEXT", "f_291251_"), "Lwz;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.PlayerManager#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "LOGGER", "field_14349", "LOGGER", "f_11188_"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.PlayerManager#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("h", "LOGGER", "field_14349", "LOGGER", "f_11188_"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.PlayerManager#LATENCY_UPDATE_INTERVAL
    [[maybe_unused]] static jint get_field_LATENCY_UPDATE_INTERVAL() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "SEND_PLAYER_INFO_INTERVAL", "field_29790", "LATENCY_UPDATE_INTERVAL", "f_143987_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.PlayerManager#LATENCY_UPDATE_INTERVAL
    [[maybe_unused]] static void set_field_LATENCY_UPDATE_INTERVAL(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("i", "SEND_PLAYER_INFO_INTERVAL", "field_29790", "LATENCY_UPDATE_INTERVAL", "f_143987_"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field net.minecraft.server.PlayerManager#DATE_FORMATTER
    [[maybe_unused]] static jobject get_field_DATE_FORMATTER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "BAN_DATE_FORMAT", "field_14356", "DATE_FORMATTER", "f_11194_"), "Ljava/text/SimpleDateFormat;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.PlayerManager#DATE_FORMATTER
    [[maybe_unused]] static void set_field_DATE_FORMATTER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("j", "BAN_DATE_FORMAT", "field_14356", "DATE_FORMATTER", "f_11194_"), "Ljava/text/SimpleDateFormat;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.server.PlayerManager#server
    static jobject get_field_server(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "server", "field_14360", "server", "f_11195_"), "Lnet/minecraft/server/MinecraftServer;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.PlayerManager#server
    static void set_field_server(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("k", "server", "field_14360", "server", "f_11195_"), "Lnet/minecraft/server/MinecraftServer;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.PlayerManager#players
    static jobject get_field_players(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "players", "field_14351", "players", "f_11196_"), "Ljava/util/List;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.PlayerManager#players
    static void set_field_players(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("l", "players", "field_14351", "players", "f_11196_"), "Ljava/util/List;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.PlayerManager#playerMap
    static jobject get_field_playerMap(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "playersByUUID", "field_14354", "playerMap", "f_11197_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.PlayerManager#playerMap
    static void set_field_playerMap(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("m", "playersByUUID", "field_14354", "playerMap", "f_11197_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.PlayerManager#bannedProfiles
    static jobject get_field_bannedProfiles(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "bans", "field_14344", "bannedProfiles", "f_11198_"), "Lauy;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.PlayerManager#bannedProfiles
    static void set_field_bannedProfiles(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("n", "bans", "field_14344", "bannedProfiles", "f_11198_"), "Lauy;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.PlayerManager#bannedIps
    static jobject get_field_bannedIps(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "ipBans", "field_14345", "bannedIps", "f_11199_"), "Lauo;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.PlayerManager#bannedIps
    static void set_field_bannedIps(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("o", "ipBans", "field_14345", "bannedIps", "f_11199_"), "Lauo;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.PlayerManager#ops
    static jobject get_field_ops(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "ops", "field_14353", "ops", "f_11200_"), "Laus;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.PlayerManager#ops
    static void set_field_ops(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("p", "ops", "field_14353", "ops", "f_11200_"), "Laus;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.PlayerManager#whitelist
    static jobject get_field_whitelist(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "whitelist", "field_14361", "whitelist", "f_11201_"), "Lava;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.PlayerManager#whitelist
    static void set_field_whitelist(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("q", "whitelist", "field_14361", "whitelist", "f_11201_"), "Lava;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.PlayerManager#statisticsMap
    static jobject get_field_statisticsMap(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "stats", "field_14362", "statisticsMap", "f_11202_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.PlayerManager#statisticsMap
    static void set_field_statisticsMap(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("r", "stats", "field_14362", "statisticsMap", "f_11202_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.PlayerManager#advancementTrackers
    static jobject get_field_advancementTrackers(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "advancements", "field_14346", "advancementTrackers", "f_11203_"), "Ljava/util/Map;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.PlayerManager#advancementTrackers
    static void set_field_advancementTrackers(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("s", "advancements", "field_14346", "advancementTrackers", "f_11203_"), "Ljava/util/Map;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.PlayerManager#saveHandler
    static jobject get_field_saveHandler(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "playerIo", "field_14358", "saveHandler", "f_11204_"), "Leri;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.PlayerManager#saveHandler
    static void set_field_saveHandler(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("t", "playerIo", "field_14358", "saveHandler", "f_11204_"), "Leri;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.PlayerManager#whitelistEnabled
    static jboolean get_field_whitelistEnabled(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "doWhiteList", "field_14352", "whitelistEnabled", "f_11205_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.PlayerManager#whitelistEnabled
    static void set_field_whitelistEnabled(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("u", "doWhiteList", "field_14352", "whitelistEnabled", "f_11205_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.PlayerManager#registryManager
    static jobject get_field_registryManager(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "registries", "field_24626", "registryManager", "f_243858_"), "Ljt;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.PlayerManager#registryManager
    static void set_field_registryManager(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("v", "registries", "field_24626", "registryManager", "f_243858_"), "Ljt;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for protected field net.minecraft.server.PlayerManager#maxPlayers
    static jint get_field_maxPlayers(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "maxPlayers", "field_14347", "maxPlayers", "f_11193_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static protected field net.minecraft.server.PlayerManager#maxPlayers
    static void set_field_maxPlayers(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "maxPlayers", "field_14347", "maxPlayers", "f_11193_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.PlayerManager#viewDistance
    static jint get_field_viewDistance(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("w", "viewDistance", "field_14359", "viewDistance", "f_11207_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.PlayerManager#viewDistance
    static void set_field_viewDistance(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("w", "viewDistance", "field_14359", "viewDistance", "f_11207_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.PlayerManager#simulationDistance
    static jint get_field_simulationDistance(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("x", "simulationDistance", "field_34895", "simulationDistance", "f_184208_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.PlayerManager#simulationDistance
    static void set_field_simulationDistance(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("x", "simulationDistance", "field_34895", "simulationDistance", "f_184208_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.PlayerManager#cheatsAllowed
    static jboolean get_field_cheatsAllowed(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("y", "allowCommandsForAllPlayers", "field_14350", "cheatsAllowed", "f_314172_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.PlayerManager#cheatsAllowed
    static void set_field_cheatsAllowed(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("y", "allowCommandsForAllPlayers", "field_14350", "cheatsAllowed", "f_314172_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    // getter for static private field net.minecraft.server.PlayerManager#field_29791
    [[maybe_unused]] static jboolean get_field_field_29791() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("z", "ALLOW_LOGOUTIVATOR", "field_29791", "field_29791", "f_143988_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticBooleanField(clazz, fieldID);
    };

    // setter for static private field net.minecraft.server.PlayerManager#field_29791
    [[maybe_unused]] static void set_field_field_29791(const jboolean &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("z", "ALLOW_LOGOUTIVATOR", "field_29791", "field_29791", "f_143988_"), "Z");
        return MinecraftSDK::env->SetStaticBooleanField(clazz, fieldID, value);
    };

    // getter for private field net.minecraft.server.PlayerManager#latencyUpdateTimer
    static jint get_field_latencyUpdateTimer(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("A", "sendAllPlayerInfoIn", "field_14357", "latencyUpdateTimer", "f_11210_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.PlayerManager#latencyUpdateTimer
    static void set_field_latencyUpdateTimer(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("A", "sendAllPlayerInfoIn", "field_14357", "latencyUpdateTimer", "f_11210_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    static jmethodID methodID_onPlayerConnect() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "placeNewPlayer", "method_14570", "onPlayerConnect", "m_11261_"), "(Lvt;Laqv;Larj;)V");
    }

    static void onPlayerConnect(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_onPlayerConnect();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_sendScoreboard() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateEntireScoreboard", "method_14588", "sendScoreboard", "m_11273_"), "(Lalk;Laqv;)V");
    }

    static void sendScoreboard(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_sendScoreboard();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_setMainWorld() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "addWorldborderListener", "method_14591", "setMainWorld", "m_184209_"), "(Laqu;)V");
    }

    static void setMainWorld(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_setMainWorld();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_loadPlayerData() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "load", "method_14600", "loadPlayerData", "m_11224_"), "(Laqv;)Ljava/util/Optional;");
    }

    static jobject loadPlayerData(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_loadPlayerData();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_savePlayerData() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "save", "method_14577", "savePlayerData", "m_6765_"), "(Laqv;)V");
    }

    static void savePlayerData(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_savePlayerData();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_remove() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "remove", "method_14611", "remove", "m_11286_"), "(Laqv;)V");
    }

    static void remove(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_remove();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_checkCanJoin() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "canPlayerLogin", "method_14586", "checkCanJoin", "m_6418_"), "(Ljava/net/SocketAddress;Lcom/mojang/authlib/GameProfile;)Lwz;");
    }

    static jobject checkCanJoin(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_checkCanJoin();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_createPlayer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getPlayerForLogin", "method_14613", "createPlayer", "m_215624_"), "(Lcom/mojang/authlib/GameProfile;Laqh;)Laqv;");
    }

    static jobject createPlayer(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_createPlayer();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_disconnectDuplicateLogins() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "disconnectAllPlayersWithProfile", "method_52449", "disconnectDuplicateLogins", "m_292966_"), "(Lcom/mojang/authlib/GameProfile;)Z");
    }

    static jboolean disconnectDuplicateLogins(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_disconnectDuplicateLogins();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_respawnPlayer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "respawn", "method_14556", "respawnPlayer", "m_11236_"), "(Laqv;ZLbsr$c;)Laqv;");
    }

    static jobject respawnPlayer(const jobject& obj, const jobject& arg0, const jboolean& arg1, const jobject& arg2) {
                
       const auto methodID = methodID_respawnPlayer();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_sendStatusEffects() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "sendActivePlayerEffects", "method_60598", "sendStatusEffects", "m_338766_"), "(Laqv;)V");
    }

    static void sendStatusEffects(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_sendStatusEffects();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__sendStatusEffects() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "sendActiveEffects", "method_60597", "sendStatusEffects", "m_340224_"), "(Lbtn;Laru;)V");
    }

    static void _sendStatusEffects(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID__sendStatusEffects();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_sendCommandTree() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "sendPlayerPermissionLevel", "method_14576", "sendCommandTree", "m_11289_"), "(Laqv;)V");
    }

    static void sendCommandTree(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_sendCommandTree();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_updatePlayerLatency() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "tick", "method_14601", "updatePlayerLatency", "m_11288_"), "()V");
    }

    static void updatePlayerLatency(const jobject& obj) {
                
       const auto methodID = methodID_updatePlayerLatency();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_sendToAll() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "broadcastAll", "method_14581", "sendToAll", "m_11268_"), "(Lzg;)V");
    }

    static void sendToAll(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_sendToAll();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_sendToDimension() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "broadcastAll", "method_14589", "sendToDimension", "m_11270_"), "(Lzg;Lakq;)V");
    }

    static void sendToDimension(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_sendToDimension();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_sendToTeam() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "broadcastSystemToTeam", "method_14564", "sendToTeam", "m_215621_"), "(Lcmx;Lwz;)V");
    }

    static void sendToTeam(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_sendToTeam();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_sendToOtherTeams() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "broadcastSystemToAllExceptTeam", "method_14565", "sendToOtherTeams", "m_215649_"), "(Lcmx;Lwz;)V");
    }

    static void sendToOtherTeams(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_sendToOtherTeams();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getPlayerNames() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "getPlayerNamesArray", "method_14580", "getPlayerNames", "m_11291_"), "()[Ljava/lang/String;");
    }

    static jobject getPlayerNames(const jobject& obj) {
                
       const auto methodID = methodID_getPlayerNames();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getUserBanList() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "getBans", "method_14563", "getUserBanList", "m_11295_"), "()Lauy;");
    }

    static jobject getUserBanList(const jobject& obj) {
                
       const auto methodID = methodID_getUserBanList();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getIpBanList() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "getIpBans", "method_14585", "getIpBanList", "m_11299_"), "()Lauo;");
    }

    static jobject getIpBanList(const jobject& obj) {
                
       const auto methodID = methodID_getIpBanList();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_addToOperators() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "op", "method_14582", "addToOperators", "m_5749_"), "(Lcom/mojang/authlib/GameProfile;)V");
    }

    static void addToOperators(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_addToOperators();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_removeFromOperators() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "deop", "method_14604", "removeFromOperators", "m_5750_"), "(Lcom/mojang/authlib/GameProfile;)V");
    }

    static void removeFromOperators(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_removeFromOperators();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID__sendCommandTree() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "sendPlayerPermissionLevel", "method_14596", "sendCommandTree", "m_11226_"), "(Laqv;I)V");
    }

    static void _sendCommandTree(const jobject& obj, const jobject& arg0, const jint& arg1) {
                
       const auto methodID = methodID__sendCommandTree();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_isWhitelisted() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "isWhiteListed", "method_14587", "isWhitelisted", "m_5764_"), "(Lcom/mojang/authlib/GameProfile;)Z");
    }

    static jboolean isWhitelisted(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isWhitelisted();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_isOperator() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "isOp", "method_14569", "isOperator", "m_11303_"), "(Lcom/mojang/authlib/GameProfile;)Z");
    }

    static jboolean isOperator(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_isOperator();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getPlayer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getPlayerByName", "method_14566", "getPlayer", "m_11255_"), "(Ljava/lang/String;)Laqv;");
    }

    static jobject getPlayer(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getPlayer();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_sendToAround() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "broadcast", "method_14605", "sendToAround", "m_11241_"), "(Lcmx;DDDDLakq;Lzg;)V");
    }

    static void sendToAround(const jobject& obj, const jobject& arg0, const jdouble& arg1, const jdouble& arg2, const jdouble& arg3, const jdouble& arg4, const jobject& arg5, const jobject& arg6) {
                
       const auto methodID = methodID_sendToAround();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    };
    
    static jmethodID methodID_saveAllPlayerData() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("h", "saveAll", "method_14617", "saveAllPlayerData", "m_11302_"), "()V");
    }

    static void saveAllPlayerData(const jobject& obj) {
                
       const auto methodID = methodID_saveAllPlayerData();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getWhitelist() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("i", "getWhiteList", "method_14590", "getWhitelist", "m_11305_"), "()Lava;");
    }

    static jobject getWhitelist(const jobject& obj) {
                
       const auto methodID = methodID_getWhitelist();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getWhitelistedNames() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("j", "getWhiteListNames", "method_14560", "getWhitelistedNames", "m_11306_"), "()[Ljava/lang/String;");
    }

    static jobject getWhitelistedNames(const jobject& obj) {
                
       const auto methodID = methodID_getWhitelistedNames();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getOpList() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("k", "getOps", "method_14603", "getOpList", "m_11307_"), "()Laus;");
    }

    static jobject getOpList(const jobject& obj) {
                
       const auto methodID = methodID_getOpList();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getOpNames() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("l", "getOpNames", "method_14584", "getOpNames", "m_11308_"), "()[Ljava/lang/String;");
    }

    static jobject getOpNames(const jobject& obj) {
                
       const auto methodID = methodID_getOpNames();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_reloadWhitelist() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "reloadWhiteList", "method_14599", "reloadWhitelist", "m_7542_"), "()V");
    }

    static void reloadWhitelist(const jobject& obj) {
                
       const auto methodID = methodID_reloadWhitelist();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_sendWorldInfo() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "sendLevelInfo", "method_14606", "sendWorldInfo", "m_11229_"), "(Laqv;Laqu;)V");
    }

    static void sendWorldInfo(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_sendWorldInfo();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_sendPlayerStatus() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "sendAllPlayerInfo", "method_14594", "sendPlayerStatus", "m_11292_"), "(Laqv;)V");
    }

    static void sendPlayerStatus(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_sendPlayerStatus();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getCurrentPlayerCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("m", "getPlayerCount", "method_14574", "getCurrentPlayerCount", "m_11309_"), "()I");
    }

    static jint getCurrentPlayerCount(const jobject& obj) {
                
       const auto methodID = methodID_getCurrentPlayerCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getMaxPlayerCount() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("n", "getMaxPlayers", "method_14592", "getMaxPlayerCount", "m_11310_"), "()I");
    }

    static jint getMaxPlayerCount(const jobject& obj) {
                
       const auto methodID = methodID_getMaxPlayerCount();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_isWhitelistEnabled() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("o", "isUsingWhitelist", "method_14614", "isWhitelistEnabled", "m_11311_"), "()Z");
    }

    static jboolean isWhitelistEnabled(const jobject& obj) {
                
       const auto methodID = methodID_isWhitelistEnabled();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
    static jmethodID methodID_setWhitelistEnabled() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setUsingWhiteList", "method_14557", "setWhitelistEnabled", "m_6628_"), "(Z)V");
    }

    static void setWhitelistEnabled(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setWhitelistEnabled();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getPlayersByIp() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "getPlayersWithAddress", "method_14559", "getPlayersByIp", "m_11282_"), "(Ljava/lang/String;)Ljava/util/List;");
    }

    static jobject getPlayersByIp(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getPlayersByIp();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getViewDistance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("p", "getViewDistance", "method_14568", "getViewDistance", "m_11312_"), "()I");
    }

    static jint getViewDistance(const jobject& obj) {
                
       const auto methodID = methodID_getViewDistance();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getSimulationDistance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("q", "getSimulationDistance", "method_38651", "getSimulationDistance", "m_184213_"), "()I");
    }

    static jint getSimulationDistance(const jobject& obj) {
                
       const auto methodID = methodID_getSimulationDistance();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getServer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("c", "getServer", "method_14561", "getServer", "m_7873_"), "()Lnet/minecraft/server/MinecraftServer;");
    }

    static jobject getServer(const jobject& obj) {
                
       const auto methodID = methodID_getServer();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_getUserData() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("r", "getSingleplayerData", "method_14567", "getUserData", "m_6960_"), "()Lub;");
    }

    static jobject getUserData(const jobject& obj) {
                
       const auto methodID = methodID_getUserData();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID_setCheatsAllowed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setAllowCommandsForAllPlayers", "method_14607", "setCheatsAllowed", "m_318715_"), "(Z)V");
    }

    static void setCheatsAllowed(const jobject& obj, const jboolean& arg0) {
                
       const auto methodID = methodID_setCheatsAllowed();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_disconnectAllPlayers() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("s", "removeAll", "method_14597", "disconnectAllPlayers", "m_11313_"), "()V");
    }

    static void disconnectAllPlayers(const jobject& obj) {
                
       const auto methodID = methodID_disconnectAllPlayers();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_broadcast() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "broadcastSystemMessage", "method_43514", "broadcast", "m_240416_"), "(Lwz;Z)V");
    }

    static void broadcast(const jobject& obj, const jobject& arg0, const jboolean& arg1) {
                
       const auto methodID = methodID_broadcast();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__broadcast() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "broadcastSystemMessage", "method_43512", "broadcast", "m_240502_"), "(Lwz;Ljava/util/function/Function;Z)V");
    }

    static void _broadcast(const jobject& obj, const jobject& arg0, const jobject& arg1, const jboolean& arg2) {
                
       const auto methodID = methodID__broadcast();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID___broadcast() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "broadcastChatMessage", "method_44166", "broadcast", "m_243063_"), "(Lxp;Let;Lwv$a;)V");
    }

    static void __broadcast(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID___broadcast();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID____broadcast() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "broadcastChatMessage", "method_43673", "broadcast", "m_243049_"), "(Lxp;Laqv;Lwv$a;)V");
    }

    static void ___broadcast(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2) {
                
       const auto methodID = methodID____broadcast();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_____broadcast() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "broadcastChatMessage", "method_44791", "broadcast", "m_245148_"), "(Lxp;Ljava/util/function/Predicate;Laqv;Lwv$a;)V");
    }

    static void ____broadcast(const jobject& obj, const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
                
       const auto methodID = methodID_____broadcast();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_verify() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "verifyChatTrusted", "method_44793", "verify", "m_247528_"), "(Lxp;)Z");
    }

    static jboolean verify(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_verify();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_createStatHandler() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getPlayerStats", "method_14583", "createStatHandler", "m_11239_"), "(Lcmx;)Lavv;");
    }

    static jobject createStatHandler(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_createStatHandler();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getAdvancementTracker() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("g", "getPlayerAdvancements", "method_14578", "getAdvancementTracker", "m_11296_"), "(Laqv;)Lakz;");
    }

    static jobject getAdvancementTracker(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_getAdvancementTracker();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setViewDistance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "setViewDistance", "method_14608", "setViewDistance", "m_11217_"), "(I)V");
    }

    static void setViewDistance(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_setViewDistance();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setSimulationDistance() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "setSimulationDistance", "method_38650", "setSimulationDistance", "m_184211_"), "(I)V");
    }

    static void setSimulationDistance(const jobject& obj, const jint& arg0) {
                
       const auto methodID = methodID_setSimulationDistance();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_getPlayerList() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("t", "getPlayers", "method_14571", "getPlayerList", "m_11314_"), "()Ljava/util/List;");
    }

    static jobject getPlayerList(const jobject& obj) {
                
       const auto methodID = methodID_getPlayerList();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID);
    };
    
    static jmethodID methodID__getPlayer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getPlayer", "method_14602", "getPlayer", "m_11259_"), "(Ljava/util/UUID;)Laqv;");
    }

    static jobject _getPlayer(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID__getPlayer();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_canBypassPlayerLimit() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "canBypassPlayerLimit", "method_14609", "canBypassPlayerLimit", "m_5765_"), "(Lcom/mojang/authlib/GameProfile;)Z");
    }

    static jboolean canBypassPlayerLimit(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_canBypassPlayerLimit();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_onDataPacksReloaded() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("u", "reloadResources", "method_14572", "onDataPacksReloaded", "m_11315_"), "()V");
    }

    static void onDataPacksReloaded(const jobject& obj) {
                
       const auto methodID = methodID_onDataPacksReloaded();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_areCheatsAllowed() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("v", "isAllowCommandsForAllPlayers", "method_14579", "areCheatsAllowed", "m_323070_"), "()Z");
    }

    static jboolean areCheatsAllowed(const jobject& obj) {
                
       const auto methodID = methodID_areCheatsAllowed();
       return MinecraftSDK::env->CallBooleanMethod(obj, methodID);
    };
    
};

#endif // NET_MINECRAFT_SERVER_PLAYERMANAGER_HPP