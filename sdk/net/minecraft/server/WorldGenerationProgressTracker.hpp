// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef NET_MINECRAFT_SERVER_WORLDGENERATIONPROGRESSTRACKER_HPP
#define NET_MINECRAFT_SERVER_WORLDGENERATIONPROGRESSTRACKER_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: net.minecraft.server.WorldGenerationProgressTracker
 * Remapped: arh
 */
namespace WorldGenerationProgressTracker {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("arh", "net/minecraft/server/level/progress/StoringChunkProgressListener", "net/minecraft/class_3953", "net/minecraft/server/WorldGenerationProgressTracker", "net/minecraft/src/C_25_"));
        }
        return cachedClass;
    };

    // getter for private field net.minecraft.server.WorldGenerationProgressTracker#progressLogger
    static jobject get_field_progressLogger(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "delegate", "field_17474", "progressLogger", "f_9653_"), "Larf;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.WorldGenerationProgressTracker#progressLogger
    static void set_field_progressLogger(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("a", "delegate", "field_17474", "progressLogger", "f_9653_"), "Larf;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.WorldGenerationProgressTracker#chunkStatuses
    static jobject get_field_chunkStatuses(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "statuses", "field_17475", "chunkStatuses", "f_9654_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectOpenHashMap;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.WorldGenerationProgressTracker#chunkStatuses
    static void set_field_chunkStatuses(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("b", "statuses", "field_17475", "chunkStatuses", "f_9654_"), "Lit/unimi/dsi/fastutil/longs/Long2ObjectOpenHashMap;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.WorldGenerationProgressTracker#spawnPos
    static jobject get_field_spawnPos(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "spawnPos", "field_17476", "spawnPos", "f_9655_"), "Ldcd;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetObjectField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.WorldGenerationProgressTracker#spawnPos
    static void set_field_spawnPos(const jobject &obj, const jobject &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("c", "spawnPos", "field_17476", "spawnPos", "f_9655_"), "Ldcd;");
        return MinecraftSDK::env->SetObjectField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.WorldGenerationProgressTracker#centerSize
    static jint get_field_centerSize(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "fullDiameter", "field_17477", "centerSize", "f_9656_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.WorldGenerationProgressTracker#centerSize
    static void set_field_centerSize(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("d", "fullDiameter", "field_17477", "centerSize", "f_9656_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.WorldGenerationProgressTracker#radius
    static jint get_field_radius(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "radius", "field_17478", "radius", "f_9657_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.WorldGenerationProgressTracker#radius
    static void set_field_radius(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("e", "radius", "field_17478", "radius", "f_9657_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.WorldGenerationProgressTracker#size
    static jint get_field_size(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "diameter", "field_17479", "size", "f_9658_"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetIntField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.WorldGenerationProgressTracker#size
    static void set_field_size(const jobject &obj, const jint &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("f", "diameter", "field_17479", "size", "f_9658_"), "I");
        return MinecraftSDK::env->SetIntField(obj, fieldID, value);
    };

    // getter for private field net.minecraft.server.WorldGenerationProgressTracker#running
    static jboolean get_field_running(const jobject &obj) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "started", "field_17480", "running", "f_9659_"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetBooleanField(obj, fieldID);
    };

    // setter for static private field net.minecraft.server.WorldGenerationProgressTracker#running
    static void set_field_running(const jobject &obj, const jboolean &value) {
        const auto fieldID = MinecraftSDK::env->GetFieldID(self(), MinecraftSDK::getRemapped("g", "started", "field_17480", "running", "f_9659_"), "Z");
        return MinecraftSDK::env->SetBooleanField(obj, fieldID, value);
    };

    static jmethodID methodID_create() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("b", "createFromGameruleRadius", "method_56045", "create", "m_319107_"), "(I)Larh;");
    }

    static jobject create(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_create();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_forSpawnChunks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "create", "method_56047", "forSpawnChunks", "m_324160_"), "(I)Larh;");
    }

    static jobject forSpawnChunks(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_forSpawnChunks();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_noSpawnChunks() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("c", "createCompleted", "method_56046", "noSpawnChunks", "m_319204_"), "()Larh;");
    }

    static jobject noSpawnChunks() {
       const auto clazz = self();
       const auto methodID = methodID_noSpawnChunks();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_start() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "updateSpawnPos", "method_17669", "start", "m_7647_"), "(Ldcd;)V");
    }

    static void start(const jobject& obj, const jobject& arg0) {
                
       const auto methodID = methodID_start();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0);
    };
    
    static jmethodID methodID_setChunkStatus() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "onStatusChange", "method_17670", "setChunkStatus", "m_5511_"), "(Ldcd;Ldvz;)V");
    }

    static void setChunkStatus(const jobject& obj, const jobject& arg0, const jobject& arg1) {
                
       const auto methodID = methodID_setChunkStatus();
       MinecraftSDK::env->CallVoidMethod(obj, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__start() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "start", "method_17675", "start", "m_9662_"), "()V");
    }

    static void _start(const jobject& obj) {
                
       const auto methodID = methodID__start();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_stop() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("b", "stop", "method_17671", "stop", "m_7646_"), "()V");
    }

    static void stop(const jobject& obj) {
                
       const auto methodID = methodID_stop();
       MinecraftSDK::env->CallVoidMethod(obj, methodID);
    };
    
    static jmethodID methodID_getCenterSize() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("d", "getFullDiameter", "method_17677", "getCenterSize", "m_9672_"), "()I");
    }

    static jint getCenterSize(const jobject& obj) {
                
       const auto methodID = methodID_getCenterSize();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getSize() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("e", "getDiameter", "method_17678", "getSize", "m_9673_"), "()I");
    }

    static jint getSize(const jobject& obj) {
                
       const auto methodID = methodID_getSize();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getProgressPercentage() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("f", "getProgress", "method_17679", "getProgressPercentage", "m_9674_"), "()I");
    }

    static jint getProgressPercentage(const jobject& obj) {
                
       const auto methodID = methodID_getProgressPercentage();
       return MinecraftSDK::env->CallIntMethod(obj, methodID);
    };
    
    static jmethodID methodID_getChunkStatus() {
       const auto clazz = self();
       return MinecraftSDK::env->GetMethodID(clazz, MinecraftSDK::getRemapped("a", "getStatus", "method_17676", "getChunkStatus", "m_9663_"), "(II)Ldvz;");
    }

    static jobject getChunkStatus(const jobject& obj, const jint& arg0, const jint& arg1) {
                
       const auto methodID = methodID_getChunkStatus();
       return MinecraftSDK::env->CallObjectMethod(obj, methodID, arg0, arg1);
    };
    
};

#endif // NET_MINECRAFT_SERVER_WORLDGENERATIONPROGRESSTRACKER_HPP