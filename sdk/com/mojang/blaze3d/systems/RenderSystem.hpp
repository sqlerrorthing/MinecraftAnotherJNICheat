// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef COM_MOJANG_BLAZE3D_SYSTEMS_RENDERSYSTEM_HPP
#define COM_MOJANG_BLAZE3D_SYSTEMS_RENDERSYSTEM_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: com.mojang.blaze3d.systems.RenderSystem
 * Remapped: com/mojang/blaze3d/systems/RenderSystem
 */
namespace RenderSystem {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("com/mojang/blaze3d/systems/RenderSystem", "com/mojang/blaze3d/systems/RenderSystem", "com/mojang/blaze3d/systems/RenderSystem", "com/mojang/blaze3d/systems/RenderSystem", "com/mojang/blaze3d/systems/RenderSystem"));
        }
        return cachedClass;
    };

    // getter for static default field com.mojang.blaze3d.systems.RenderSystem#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("LOGGER", "LOGGER", "", "", "LOGGER"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static default field com.mojang.blaze3d.systems.RenderSystem#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("LOGGER", "LOGGER", "", "", "LOGGER"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field com.mojang.blaze3d.systems.RenderSystem#recordingQueue
    [[maybe_unused]] static jobject get_field_recordingQueue() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("recordingQueue", "recordingQueue", "", "", "recordingQueue"), "Ljava/util/concurrent/ConcurrentLinkedQueue;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field com.mojang.blaze3d.systems.RenderSystem#recordingQueue
    [[maybe_unused]] static void set_field_recordingQueue(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("recordingQueue", "recordingQueue", "", "", "recordingQueue"), "Ljava/util/concurrent/ConcurrentLinkedQueue;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field com.mojang.blaze3d.systems.RenderSystem#RENDER_THREAD_TESSELATOR
    [[maybe_unused]] static jobject get_field_RENDER_THREAD_TESSELATOR() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("RENDER_THREAD_TESSELATOR", "RENDER_THREAD_TESSELATOR", "", "", "RENDER_THREAD_TESSELATOR"), "Lfbk;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field com.mojang.blaze3d.systems.RenderSystem#RENDER_THREAD_TESSELATOR
    [[maybe_unused]] static void set_field_RENDER_THREAD_TESSELATOR(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("RENDER_THREAD_TESSELATOR", "RENDER_THREAD_TESSELATOR", "", "", "RENDER_THREAD_TESSELATOR"), "Lfbk;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field com.mojang.blaze3d.systems.RenderSystem#MINIMUM_ATLAS_TEXTURE_SIZE
    [[maybe_unused]] static jint get_field_MINIMUM_ATLAS_TEXTURE_SIZE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("MINIMUM_ATLAS_TEXTURE_SIZE", "MINIMUM_ATLAS_TEXTURE_SIZE", "", "", "MINIMUM_ATLAS_TEXTURE_SIZE"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field com.mojang.blaze3d.systems.RenderSystem#MINIMUM_ATLAS_TEXTURE_SIZE
    [[maybe_unused]] static void set_field_MINIMUM_ATLAS_TEXTURE_SIZE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("MINIMUM_ATLAS_TEXTURE_SIZE", "MINIMUM_ATLAS_TEXTURE_SIZE", "", "", "MINIMUM_ATLAS_TEXTURE_SIZE"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field com.mojang.blaze3d.systems.RenderSystem#renderThread
    [[maybe_unused]] static jobject get_field_renderThread() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("renderThread", "renderThread", "", "", "renderThread"), "Ljava/lang/Thread;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field com.mojang.blaze3d.systems.RenderSystem#renderThread
    [[maybe_unused]] static void set_field_renderThread(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("renderThread", "renderThread", "", "", "renderThread"), "Ljava/lang/Thread;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field com.mojang.blaze3d.systems.RenderSystem#MAX_SUPPORTED_TEXTURE_SIZE
    [[maybe_unused]] static jint get_field_MAX_SUPPORTED_TEXTURE_SIZE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("MAX_SUPPORTED_TEXTURE_SIZE", "MAX_SUPPORTED_TEXTURE_SIZE", "", "", "MAX_SUPPORTED_TEXTURE_SIZE"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field com.mojang.blaze3d.systems.RenderSystem#MAX_SUPPORTED_TEXTURE_SIZE
    [[maybe_unused]] static void set_field_MAX_SUPPORTED_TEXTURE_SIZE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("MAX_SUPPORTED_TEXTURE_SIZE", "MAX_SUPPORTED_TEXTURE_SIZE", "", "", "MAX_SUPPORTED_TEXTURE_SIZE"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field com.mojang.blaze3d.systems.RenderSystem#isInInit
    [[maybe_unused]] static jboolean get_field_isInInit() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("isInInit", "isInInit", "", "", "isInInit"), "Z");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticBooleanField(clazz, fieldID);
    };

    // setter for static private field com.mojang.blaze3d.systems.RenderSystem#isInInit
    [[maybe_unused]] static void set_field_isInInit(const jboolean &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("isInInit", "isInInit", "", "", "isInInit"), "Z");
        return MinecraftSDK::env->SetStaticBooleanField(clazz, fieldID, value);
    };

    // getter for static private field com.mojang.blaze3d.systems.RenderSystem#lastDrawTime
    [[maybe_unused]] static jdouble get_field_lastDrawTime() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("lastDrawTime", "lastDrawTime", "", "", "lastDrawTime"), "D");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticDoubleField(clazz, fieldID);
    };

    // setter for static private field com.mojang.blaze3d.systems.RenderSystem#lastDrawTime
    [[maybe_unused]] static void set_field_lastDrawTime(const jdouble &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("lastDrawTime", "lastDrawTime", "", "", "lastDrawTime"), "D");
        return MinecraftSDK::env->SetStaticDoubleField(clazz, fieldID, value);
    };

    // getter for static private field com.mojang.blaze3d.systems.RenderSystem#sharedSequential
    [[maybe_unused]] static jobject get_field_sharedSequential() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("sharedSequential", "sharedSequential", "", "", "sharedSequential"), "Lcom/mojang/blaze3d/systems/RenderSystem$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field com.mojang.blaze3d.systems.RenderSystem#sharedSequential
    [[maybe_unused]] static void set_field_sharedSequential(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("sharedSequential", "sharedSequential", "", "", "sharedSequential"), "Lcom/mojang/blaze3d/systems/RenderSystem$a;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field com.mojang.blaze3d.systems.RenderSystem#sharedSequentialQuad
    [[maybe_unused]] static jobject get_field_sharedSequentialQuad() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("sharedSequentialQuad", "sharedSequentialQuad", "", "", "sharedSequentialQuad"), "Lcom/mojang/blaze3d/systems/RenderSystem$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field com.mojang.blaze3d.systems.RenderSystem#sharedSequentialQuad
    [[maybe_unused]] static void set_field_sharedSequentialQuad(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("sharedSequentialQuad", "sharedSequentialQuad", "", "", "sharedSequentialQuad"), "Lcom/mojang/blaze3d/systems/RenderSystem$a;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field com.mojang.blaze3d.systems.RenderSystem#sharedSequentialLines
    [[maybe_unused]] static jobject get_field_sharedSequentialLines() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("sharedSequentialLines", "sharedSequentialLines", "", "", "sharedSequentialLines"), "Lcom/mojang/blaze3d/systems/RenderSystem$a;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field com.mojang.blaze3d.systems.RenderSystem#sharedSequentialLines
    [[maybe_unused]] static void set_field_sharedSequentialLines(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("sharedSequentialLines", "sharedSequentialLines", "", "", "sharedSequentialLines"), "Lcom/mojang/blaze3d/systems/RenderSystem$a;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field com.mojang.blaze3d.systems.RenderSystem#projectionMatrix
    [[maybe_unused]] static jobject get_field_projectionMatrix() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("projectionMatrix", "projectionMatrix", "", "", "projectionMatrix"), "Lorg/joml/Matrix4f;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field com.mojang.blaze3d.systems.RenderSystem#projectionMatrix
    [[maybe_unused]] static void set_field_projectionMatrix(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("projectionMatrix", "projectionMatrix", "", "", "projectionMatrix"), "Lorg/joml/Matrix4f;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field com.mojang.blaze3d.systems.RenderSystem#savedProjectionMatrix
    [[maybe_unused]] static jobject get_field_savedProjectionMatrix() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("savedProjectionMatrix", "savedProjectionMatrix", "", "", "savedProjectionMatrix"), "Lorg/joml/Matrix4f;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field com.mojang.blaze3d.systems.RenderSystem#savedProjectionMatrix
    [[maybe_unused]] static void set_field_savedProjectionMatrix(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("savedProjectionMatrix", "savedProjectionMatrix", "", "", "savedProjectionMatrix"), "Lorg/joml/Matrix4f;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field com.mojang.blaze3d.systems.RenderSystem#vertexSorting
    [[maybe_unused]] static jobject get_field_vertexSorting() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("vertexSorting", "vertexSorting", "", "", "vertexSorting"), "Lfbq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field com.mojang.blaze3d.systems.RenderSystem#vertexSorting
    [[maybe_unused]] static void set_field_vertexSorting(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("vertexSorting", "vertexSorting", "", "", "vertexSorting"), "Lfbq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field com.mojang.blaze3d.systems.RenderSystem#savedVertexSorting
    [[maybe_unused]] static jobject get_field_savedVertexSorting() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("savedVertexSorting", "savedVertexSorting", "", "", "savedVertexSorting"), "Lfbq;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field com.mojang.blaze3d.systems.RenderSystem#savedVertexSorting
    [[maybe_unused]] static void set_field_savedVertexSorting(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("savedVertexSorting", "savedVertexSorting", "", "", "savedVertexSorting"), "Lfbq;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field com.mojang.blaze3d.systems.RenderSystem#modelViewStack
    [[maybe_unused]] static jobject get_field_modelViewStack() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("modelViewStack", "modelViewStack", "", "", "modelViewStack"), "Lorg/joml/Matrix4fStack;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field com.mojang.blaze3d.systems.RenderSystem#modelViewStack
    [[maybe_unused]] static void set_field_modelViewStack(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("modelViewStack", "modelViewStack", "", "", "modelViewStack"), "Lorg/joml/Matrix4fStack;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field com.mojang.blaze3d.systems.RenderSystem#modelViewMatrix
    [[maybe_unused]] static jobject get_field_modelViewMatrix() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("modelViewMatrix", "modelViewMatrix", "", "", "modelViewMatrix"), "Lorg/joml/Matrix4f;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field com.mojang.blaze3d.systems.RenderSystem#modelViewMatrix
    [[maybe_unused]] static void set_field_modelViewMatrix(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("modelViewMatrix", "modelViewMatrix", "", "", "modelViewMatrix"), "Lorg/joml/Matrix4f;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field com.mojang.blaze3d.systems.RenderSystem#textureMatrix
    [[maybe_unused]] static jobject get_field_textureMatrix() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("textureMatrix", "textureMatrix", "", "", "textureMatrix"), "Lorg/joml/Matrix4f;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field com.mojang.blaze3d.systems.RenderSystem#textureMatrix
    [[maybe_unused]] static void set_field_textureMatrix(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("textureMatrix", "textureMatrix", "", "", "textureMatrix"), "Lorg/joml/Matrix4f;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field com.mojang.blaze3d.systems.RenderSystem#shaderTextures
    [[maybe_unused]] static jint get_field_shaderTextures() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("shaderTextures", "shaderTextures", "", "", "shaderTextures"), "[I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field com.mojang.blaze3d.systems.RenderSystem#shaderTextures
    [[maybe_unused]] static void set_field_shaderTextures(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("shaderTextures", "shaderTextures", "", "", "shaderTextures"), "[I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field com.mojang.blaze3d.systems.RenderSystem#shaderColor
    [[maybe_unused]] static jfloat get_field_shaderColor() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("shaderColor", "shaderColor", "", "", "shaderColor"), "[F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field com.mojang.blaze3d.systems.RenderSystem#shaderColor
    [[maybe_unused]] static void set_field_shaderColor(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("shaderColor", "shaderColor", "", "", "shaderColor"), "[F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field com.mojang.blaze3d.systems.RenderSystem#shaderGlintAlpha
    [[maybe_unused]] static jfloat get_field_shaderGlintAlpha() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("shaderGlintAlpha", "shaderGlintAlpha", "", "", "shaderGlintAlpha"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field com.mojang.blaze3d.systems.RenderSystem#shaderGlintAlpha
    [[maybe_unused]] static void set_field_shaderGlintAlpha(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("shaderGlintAlpha", "shaderGlintAlpha", "", "", "shaderGlintAlpha"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field com.mojang.blaze3d.systems.RenderSystem#shaderFogStart
    [[maybe_unused]] static jfloat get_field_shaderFogStart() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("shaderFogStart", "shaderFogStart", "", "", "shaderFogStart"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field com.mojang.blaze3d.systems.RenderSystem#shaderFogStart
    [[maybe_unused]] static void set_field_shaderFogStart(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("shaderFogStart", "shaderFogStart", "", "", "shaderFogStart"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field com.mojang.blaze3d.systems.RenderSystem#shaderFogEnd
    [[maybe_unused]] static jfloat get_field_shaderFogEnd() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("shaderFogEnd", "shaderFogEnd", "", "", "shaderFogEnd"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field com.mojang.blaze3d.systems.RenderSystem#shaderFogEnd
    [[maybe_unused]] static void set_field_shaderFogEnd(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("shaderFogEnd", "shaderFogEnd", "", "", "shaderFogEnd"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field com.mojang.blaze3d.systems.RenderSystem#shaderFogColor
    [[maybe_unused]] static jfloat get_field_shaderFogColor() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("shaderFogColor", "shaderFogColor", "", "", "shaderFogColor"), "[F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field com.mojang.blaze3d.systems.RenderSystem#shaderFogColor
    [[maybe_unused]] static void set_field_shaderFogColor(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("shaderFogColor", "shaderFogColor", "", "", "shaderFogColor"), "[F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field com.mojang.blaze3d.systems.RenderSystem#shaderFogShape
    [[maybe_unused]] static jobject get_field_shaderFogShape() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("shaderFogShape", "shaderFogShape", "", "", "shaderFogShape"), "Lfav;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field com.mojang.blaze3d.systems.RenderSystem#shaderFogShape
    [[maybe_unused]] static void set_field_shaderFogShape(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("shaderFogShape", "shaderFogShape", "", "", "shaderFogShape"), "Lfav;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field com.mojang.blaze3d.systems.RenderSystem#shaderLightDirections
    [[maybe_unused]] static jobject get_field_shaderLightDirections() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("shaderLightDirections", "shaderLightDirections", "", "", "shaderLightDirections"), "[Lorg/joml/Vector3f;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field com.mojang.blaze3d.systems.RenderSystem#shaderLightDirections
    [[maybe_unused]] static void set_field_shaderLightDirections(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("shaderLightDirections", "shaderLightDirections", "", "", "shaderLightDirections"), "[Lorg/joml/Vector3f;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field com.mojang.blaze3d.systems.RenderSystem#shaderGameTime
    [[maybe_unused]] static jfloat get_field_shaderGameTime() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("shaderGameTime", "shaderGameTime", "", "", "shaderGameTime"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field com.mojang.blaze3d.systems.RenderSystem#shaderGameTime
    [[maybe_unused]] static void set_field_shaderGameTime(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("shaderGameTime", "shaderGameTime", "", "", "shaderGameTime"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field com.mojang.blaze3d.systems.RenderSystem#shaderLineWidth
    [[maybe_unused]] static jfloat get_field_shaderLineWidth() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("shaderLineWidth", "shaderLineWidth", "", "", "shaderLineWidth"), "F");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticFloatField(clazz, fieldID);
    };

    // setter for static private field com.mojang.blaze3d.systems.RenderSystem#shaderLineWidth
    [[maybe_unused]] static void set_field_shaderLineWidth(const jfloat &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("shaderLineWidth", "shaderLineWidth", "", "", "shaderLineWidth"), "F");
        return MinecraftSDK::env->SetStaticFloatField(clazz, fieldID, value);
    };

    // getter for static private field com.mojang.blaze3d.systems.RenderSystem#apiDescription
    [[maybe_unused]] static jobject get_field_apiDescription() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("apiDescription", "apiDescription", "", "", "apiDescription"), "Ljava/lang/String;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field com.mojang.blaze3d.systems.RenderSystem#apiDescription
    [[maybe_unused]] static void set_field_apiDescription(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("apiDescription", "apiDescription", "", "", "apiDescription"), "Ljava/lang/String;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field com.mojang.blaze3d.systems.RenderSystem#shader
    [[maybe_unused]] static jobject get_field_shader() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("shader", "shader", "", "", "shader"), "Lgfn;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field com.mojang.blaze3d.systems.RenderSystem#shader
    [[maybe_unused]] static void set_field_shader(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("shader", "shader", "", "", "shader"), "Lgfn;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field com.mojang.blaze3d.systems.RenderSystem#pollEventsWaitStart
    [[maybe_unused]] static jobject get_field_pollEventsWaitStart() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("pollEventsWaitStart", "pollEventsWaitStart", "", "", "pollEventsWaitStart"), "Ljava/util/concurrent/atomic/AtomicLong;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field com.mojang.blaze3d.systems.RenderSystem#pollEventsWaitStart
    [[maybe_unused]] static void set_field_pollEventsWaitStart(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("pollEventsWaitStart", "pollEventsWaitStart", "", "", "pollEventsWaitStart"), "Ljava/util/concurrent/atomic/AtomicLong;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static private field com.mojang.blaze3d.systems.RenderSystem#pollingEvents
    [[maybe_unused]] static jobject get_field_pollingEvents() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("pollingEvents", "pollingEvents", "", "", "pollingEvents"), "Ljava/util/concurrent/atomic/AtomicBoolean;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field com.mojang.blaze3d.systems.RenderSystem#pollingEvents
    [[maybe_unused]] static void set_field_pollingEvents(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("pollingEvents", "pollingEvents", "", "", "pollingEvents"), "Ljava/util/concurrent/atomic/AtomicBoolean;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    static jmethodID methodID_initRenderThread() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("initRenderThread", "initRenderThread", "", "", "initRenderThread"), "()V");
    }

    static void initRenderThread() {
       const auto clazz = self();
       const auto methodID = methodID_initRenderThread();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID);
    };
    
    static jmethodID methodID_isOnRenderThread() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("isOnRenderThread", "isOnRenderThread", "", "", "isOnRenderThread"), "()Z");
    }

    static jboolean isOnRenderThread() {
       const auto clazz = self();
       const auto methodID = methodID_isOnRenderThread();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID);
    };
    
    static jmethodID methodID_isOnRenderThreadOrInit() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("isOnRenderThreadOrInit", "isOnRenderThreadOrInit", "", "", "isOnRenderThreadOrInit"), "()Z");
    }

    static jboolean isOnRenderThreadOrInit() {
       const auto clazz = self();
       const auto methodID = methodID_isOnRenderThreadOrInit();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID);
    };
    
    static jmethodID methodID_assertOnRenderThreadOrInit() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("assertOnRenderThreadOrInit", "assertOnRenderThreadOrInit", "", "", "assertOnRenderThreadOrInit"), "()V");
    }

    static void assertOnRenderThreadOrInit() {
       const auto clazz = self();
       const auto methodID = methodID_assertOnRenderThreadOrInit();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID);
    };
    
    static jmethodID methodID_assertOnRenderThread() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("assertOnRenderThread", "assertOnRenderThread", "", "", "assertOnRenderThread"), "()V");
    }

    static void assertOnRenderThread() {
       const auto clazz = self();
       const auto methodID = methodID_assertOnRenderThread();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID);
    };
    
    static jmethodID methodID_constructThreadException() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("constructThreadException", "constructThreadException", "", "", "constructThreadException"), "()Ljava/lang/IllegalStateException;");
    }

    static jobject constructThreadException() {
       const auto clazz = self();
       const auto methodID = methodID_constructThreadException();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_recordRenderCall() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("recordRenderCall", "recordRenderCall", "recordRenderCall", "recordRenderCall", "recordRenderCall"), "(Lezt;)V");
    }

    static void recordRenderCall(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_recordRenderCall();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_pollEvents() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("pollEvents", "pollEvents", "", "", "pollEvents"), "()V");
    }

    static void pollEvents() {
       const auto clazz = self();
       const auto methodID = methodID_pollEvents();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID);
    };
    
    static jmethodID methodID_isFrozenAtPollEvents() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("isFrozenAtPollEvents", "isFrozenAtPollEvents", "", "", "isFrozenAtPollEvents"), "()Z");
    }

    static jboolean isFrozenAtPollEvents() {
       const auto clazz = self();
       const auto methodID = methodID_isFrozenAtPollEvents();
       return MinecraftSDK::env->CallStaticBooleanMethod(clazz, methodID);
    };
    
    static jmethodID methodID_flipFrame() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("flipFrame", "flipFrame", "flipFrame", "flipFrame", "flipFrame"), "(J)V");
    }

    static void flipFrame(const jlong& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_flipFrame();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_replayQueue() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("replayQueue", "replayQueue", "", "", "replayQueue"), "()V");
    }

    static void replayQueue() {
       const auto clazz = self();
       const auto methodID = methodID_replayQueue();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID);
    };
    
    static jmethodID methodID_limitDisplayFPS() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("limitDisplayFPS", "limitDisplayFPS", "limitDisplayFPS", "limitDisplayFPS", "limitDisplayFPS"), "(I)V");
    }

    static void limitDisplayFPS(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_limitDisplayFPS();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_disableDepthTest() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("disableDepthTest", "disableDepthTest", "", "", "disableDepthTest"), "()V");
    }

    static void disableDepthTest() {
       const auto clazz = self();
       const auto methodID = methodID_disableDepthTest();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID);
    };
    
    static jmethodID methodID_enableDepthTest() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("enableDepthTest", "enableDepthTest", "", "", "enableDepthTest"), "()V");
    }

    static void enableDepthTest() {
       const auto clazz = self();
       const auto methodID = methodID_enableDepthTest();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID);
    };
    
    static jmethodID methodID_enableScissor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("enableScissor", "enableScissor", "enableScissor", "enableScissor", "enableScissor"), "(IIII)V");
    }

    static void enableScissor(const jint& arg0, const jint& arg1, const jint& arg2, const jint& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_enableScissor();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_disableScissor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("disableScissor", "disableScissor", "", "", "disableScissor"), "()V");
    }

    static void disableScissor() {
       const auto clazz = self();
       const auto methodID = methodID_disableScissor();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID);
    };
    
    static jmethodID methodID_depthFunc() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("depthFunc", "depthFunc", "depthFunc", "depthFunc", "depthFunc"), "(I)V");
    }

    static void depthFunc(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_depthFunc();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_depthMask() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("depthMask", "depthMask", "depthMask", "depthMask", "depthMask"), "(Z)V");
    }

    static void depthMask(const jboolean& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_depthMask();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_enableBlend() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("enableBlend", "enableBlend", "", "", "enableBlend"), "()V");
    }

    static void enableBlend() {
       const auto clazz = self();
       const auto methodID = methodID_enableBlend();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID);
    };
    
    static jmethodID methodID_disableBlend() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("disableBlend", "disableBlend", "", "", "disableBlend"), "()V");
    }

    static void disableBlend() {
       const auto clazz = self();
       const auto methodID = methodID_disableBlend();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID);
    };
    
    static jmethodID methodID_blendFunc() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("blendFunc", "blendFunc", "blendFunc", "blendFunc", "blendFunc"), "(Lcom/mojang/blaze3d/platform/GlStateManager$SourceFactor;Lcom/mojang/blaze3d/platform/GlStateManager$DestFactor;)V");
    }

    static void blendFunc(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_blendFunc();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__blendFunc() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("blendFunc", "blendFunc", "blendFunc", "blendFunc", "blendFunc"), "(II)V");
    }

    static void _blendFunc(const jint& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID__blendFunc();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_blendFuncSeparate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("blendFuncSeparate", "blendFuncSeparate", "blendFuncSeparate", "blendFuncSeparate", "blendFuncSeparate"), "(Lcom/mojang/blaze3d/platform/GlStateManager$SourceFactor;Lcom/mojang/blaze3d/platform/GlStateManager$DestFactor;Lcom/mojang/blaze3d/platform/GlStateManager$SourceFactor;Lcom/mojang/blaze3d/platform/GlStateManager$DestFactor;)V");
    }

    static void blendFuncSeparate(const jobject& arg0, const jobject& arg1, const jobject& arg2, const jobject& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_blendFuncSeparate();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID__blendFuncSeparate() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("blendFuncSeparate", "blendFuncSeparate", "blendFuncSeparate", "blendFuncSeparate", "blendFuncSeparate"), "(IIII)V");
    }

    static void _blendFuncSeparate(const jint& arg0, const jint& arg1, const jint& arg2, const jint& arg3) {
       const auto clazz = self();
       const auto methodID = methodID__blendFuncSeparate();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_blendEquation() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("blendEquation", "blendEquation", "blendEquation", "blendEquation", "blendEquation"), "(I)V");
    }

    static void blendEquation(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_blendEquation();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_enableCull() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("enableCull", "enableCull", "", "", "enableCull"), "()V");
    }

    static void enableCull() {
       const auto clazz = self();
       const auto methodID = methodID_enableCull();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID);
    };
    
    static jmethodID methodID_disableCull() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("disableCull", "disableCull", "", "", "disableCull"), "()V");
    }

    static void disableCull() {
       const auto clazz = self();
       const auto methodID = methodID_disableCull();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID);
    };
    
    static jmethodID methodID_polygonMode() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("polygonMode", "polygonMode", "polygonMode", "polygonMode", "polygonMode"), "(II)V");
    }

    static void polygonMode(const jint& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_polygonMode();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_enablePolygonOffset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("enablePolygonOffset", "enablePolygonOffset", "", "", "enablePolygonOffset"), "()V");
    }

    static void enablePolygonOffset() {
       const auto clazz = self();
       const auto methodID = methodID_enablePolygonOffset();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID);
    };
    
    static jmethodID methodID_disablePolygonOffset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("disablePolygonOffset", "disablePolygonOffset", "", "", "disablePolygonOffset"), "()V");
    }

    static void disablePolygonOffset() {
       const auto clazz = self();
       const auto methodID = methodID_disablePolygonOffset();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID);
    };
    
    static jmethodID methodID_polygonOffset() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("polygonOffset", "polygonOffset", "polygonOffset", "polygonOffset", "polygonOffset"), "(FF)V");
    }

    static void polygonOffset(const jfloat& arg0, const jfloat& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_polygonOffset();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_enableColorLogicOp() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("enableColorLogicOp", "enableColorLogicOp", "", "", "enableColorLogicOp"), "()V");
    }

    static void enableColorLogicOp() {
       const auto clazz = self();
       const auto methodID = methodID_enableColorLogicOp();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID);
    };
    
    static jmethodID methodID_disableColorLogicOp() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("disableColorLogicOp", "disableColorLogicOp", "", "", "disableColorLogicOp"), "()V");
    }

    static void disableColorLogicOp() {
       const auto clazz = self();
       const auto methodID = methodID_disableColorLogicOp();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID);
    };
    
    static jmethodID methodID_logicOp() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("logicOp", "logicOp", "logicOp", "logicOp", "logicOp"), "(Lcom/mojang/blaze3d/platform/GlStateManager$g;)V");
    }

    static void logicOp(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_logicOp();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_activeTexture() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("activeTexture", "activeTexture", "activeTexture", "activeTexture", "activeTexture"), "(I)V");
    }

    static void activeTexture(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_activeTexture();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_texParameter() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("texParameter", "texParameter", "texParameter", "texParameter", "texParameter"), "(III)V");
    }

    static void texParameter(const jint& arg0, const jint& arg1, const jint& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_texParameter();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_deleteTexture() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("deleteTexture", "deleteTexture", "deleteTexture", "deleteTexture", "deleteTexture"), "(I)V");
    }

    static void deleteTexture(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_deleteTexture();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_bindTextureForSetup() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("bindTextureForSetup", "bindTextureForSetup", "bindTextureForSetup", "bindTextureForSetup", "bindTextureForSetup"), "(I)V");
    }

    static void bindTextureForSetup(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_bindTextureForSetup();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_bindTexture() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("bindTexture", "bindTexture", "bindTexture", "bindTexture", "bindTexture"), "(I)V");
    }

    static void bindTexture(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_bindTexture();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_viewport() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("viewport", "viewport", "viewport", "viewport", "viewport"), "(IIII)V");
    }

    static void viewport(const jint& arg0, const jint& arg1, const jint& arg2, const jint& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_viewport();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_colorMask() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("colorMask", "colorMask", "colorMask", "colorMask", "colorMask"), "(ZZZZ)V");
    }

    static void colorMask(const jboolean& arg0, const jboolean& arg1, const jboolean& arg2, const jboolean& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_colorMask();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_stencilFunc() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("stencilFunc", "stencilFunc", "stencilFunc", "stencilFunc", "stencilFunc"), "(III)V");
    }

    static void stencilFunc(const jint& arg0, const jint& arg1, const jint& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_stencilFunc();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_stencilMask() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("stencilMask", "stencilMask", "stencilMask", "stencilMask", "stencilMask"), "(I)V");
    }

    static void stencilMask(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_stencilMask();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_stencilOp() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("stencilOp", "stencilOp", "stencilOp", "stencilOp", "stencilOp"), "(III)V");
    }

    static void stencilOp(const jint& arg0, const jint& arg1, const jint& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_stencilOp();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_clearDepth() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("clearDepth", "clearDepth", "clearDepth", "clearDepth", "clearDepth"), "(D)V");
    }

    static void clearDepth(const jdouble& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_clearDepth();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_clearColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("clearColor", "clearColor", "clearColor", "clearColor", "clearColor"), "(FFFF)V");
    }

    static void clearColor(const jfloat& arg0, const jfloat& arg1, const jfloat& arg2, const jfloat& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_clearColor();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_clearStencil() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("clearStencil", "clearStencil", "clearStencil", "clearStencil", "clearStencil"), "(I)V");
    }

    static void clearStencil(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_clearStencil();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_clear() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("clear", "clear", "clear", "clear", "clear"), "(IZ)V");
    }

    static void clear(const jint& arg0, const jboolean& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_clear();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_setShaderFogStart() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("setShaderFogStart", "setShaderFogStart", "setShaderFogStart", "setShaderFogStart", "setShaderFogStart"), "(F)V");
    }

    static void setShaderFogStart(const jfloat& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_setShaderFogStart();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getShaderFogStart() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("getShaderFogStart", "getShaderFogStart", "", "", "getShaderFogStart"), "()F");
    }

    static jfloat getShaderFogStart() {
       const auto clazz = self();
       const auto methodID = methodID_getShaderFogStart();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID);
    };
    
    static jmethodID methodID_setShaderGlintAlpha() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("setShaderGlintAlpha", "setShaderGlintAlpha", "", "", "setShaderGlintAlpha"), "(D)V");
    }

    static void setShaderGlintAlpha(const jdouble& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_setShaderGlintAlpha();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID__setShaderGlintAlpha() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("setShaderGlintAlpha", "setShaderGlintAlpha", "", "", "setShaderGlintAlpha"), "(F)V");
    }

    static void _setShaderGlintAlpha(const jfloat& arg0) {
       const auto clazz = self();
       const auto methodID = methodID__setShaderGlintAlpha();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getShaderGlintAlpha() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("getShaderGlintAlpha", "getShaderGlintAlpha", "", "", "getShaderGlintAlpha"), "()F");
    }

    static jfloat getShaderGlintAlpha() {
       const auto clazz = self();
       const auto methodID = methodID_getShaderGlintAlpha();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID);
    };
    
    static jmethodID methodID_setShaderFogEnd() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("setShaderFogEnd", "setShaderFogEnd", "setShaderFogEnd", "setShaderFogEnd", "setShaderFogEnd"), "(F)V");
    }

    static void setShaderFogEnd(const jfloat& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_setShaderFogEnd();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getShaderFogEnd() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("getShaderFogEnd", "getShaderFogEnd", "", "", "getShaderFogEnd"), "()F");
    }

    static jfloat getShaderFogEnd() {
       const auto clazz = self();
       const auto methodID = methodID_getShaderFogEnd();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID);
    };
    
    static jmethodID methodID_setShaderFogColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("setShaderFogColor", "setShaderFogColor", "setShaderFogColor", "setShaderFogColor", "setShaderFogColor"), "(FFFF)V");
    }

    static void setShaderFogColor(const jfloat& arg0, const jfloat& arg1, const jfloat& arg2, const jfloat& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_setShaderFogColor();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID__setShaderFogColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("setShaderFogColor", "setShaderFogColor", "setShaderFogColor", "setShaderFogColor", "setShaderFogColor"), "(FFF)V");
    }

    static void _setShaderFogColor(const jfloat& arg0, const jfloat& arg1, const jfloat& arg2) {
       const auto clazz = self();
       const auto methodID = methodID__setShaderFogColor();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_getShaderFogColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("getShaderFogColor", "getShaderFogColor", "", "", "getShaderFogColor"), "()[F");
    }

    static jfloat getShaderFogColor() {
       const auto clazz = self();
       const auto methodID = methodID_getShaderFogColor();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID);
    };
    
    static jmethodID methodID_setShaderFogShape() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("setShaderFogShape", "setShaderFogShape", "setShaderFogShape", "setShaderFogShape", "setShaderFogShape"), "(Lfav;)V");
    }

    static void setShaderFogShape(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_setShaderFogShape();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getShaderFogShape() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("getShaderFogShape", "getShaderFogShape", "", "", "getShaderFogShape"), "()Lfav;");
    }

    static jobject getShaderFogShape() {
       const auto clazz = self();
       const auto methodID = methodID_getShaderFogShape();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_setShaderLights() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("setShaderLights", "setShaderLights", "", "", "setShaderLights"), "(Lorg/joml/Vector3f;Lorg/joml/Vector3f;)V");
    }

    static void setShaderLights(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_setShaderLights();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_setupShaderLights() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("setupShaderLights", "setupShaderLights", "setupShaderLights", "setupShaderLights", "setupShaderLights"), "(Lgfn;)V");
    }

    static void setupShaderLights(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_setupShaderLights();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_setShaderColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("setShaderColor", "setShaderColor", "setShaderColor", "setShaderColor", "setShaderColor"), "(FFFF)V");
    }

    static void setShaderColor(const jfloat& arg0, const jfloat& arg1, const jfloat& arg2, const jfloat& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_setShaderColor();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID__setShaderColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("_setShaderColor", "_setShaderColor", "_setShaderColor", "_setShaderColor", "_setShaderColor"), "(FFFF)V");
    }

    static void _setShaderColor(const jfloat& arg0, const jfloat& arg1, const jfloat& arg2, const jfloat& arg3) {
       const auto clazz = self();
       const auto methodID = methodID__setShaderColor();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_getShaderColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("getShaderColor", "getShaderColor", "", "", "getShaderColor"), "()[F");
    }

    static jfloat getShaderColor() {
       const auto clazz = self();
       const auto methodID = methodID_getShaderColor();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID);
    };
    
    static jmethodID methodID_drawElements() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("drawElements", "drawElements", "drawElements", "drawElements", "drawElements"), "(III)V");
    }

    static void drawElements(const jint& arg0, const jint& arg1, const jint& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_drawElements();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_lineWidth() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("lineWidth", "lineWidth", "lineWidth", "lineWidth", "lineWidth"), "(F)V");
    }

    static void lineWidth(const jfloat& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_lineWidth();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getShaderLineWidth() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("getShaderLineWidth", "getShaderLineWidth", "", "", "getShaderLineWidth"), "()F");
    }

    static jfloat getShaderLineWidth() {
       const auto clazz = self();
       const auto methodID = methodID_getShaderLineWidth();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID);
    };
    
    static jmethodID methodID_pixelStore() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("pixelStore", "pixelStore", "pixelStore", "pixelStore", "pixelStore"), "(II)V");
    }

    static void pixelStore(const jint& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_pixelStore();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_readPixels() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("readPixels", "readPixels", "readPixels", "readPixels", "readPixels"), "(IIIIIILjava/nio/ByteBuffer;)V");
    }

    static void readPixels(const jint& arg0, const jint& arg1, const jint& arg2, const jint& arg3, const jint& arg4, const jint& arg5, const jobject& arg6) {
       const auto clazz = self();
       const auto methodID = methodID_readPixels();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    };
    
    static jmethodID methodID_getString() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("getString", "getString", "getString", "getString", "getString"), "(ILjava/util/function/Consumer;)V");
    }

    static void getString(const jint& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_getString();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getBackendDescription() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("getBackendDescription", "getBackendDescription", "", "", "getBackendDescription"), "()Ljava/lang/String;");
    }

    static jobject getBackendDescription() {
       const auto clazz = self();
       const auto methodID = methodID_getBackendDescription();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_getApiDescription() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("getApiDescription", "getApiDescription", "", "", "getApiDescription"), "()Ljava/lang/String;");
    }

    static jobject getApiDescription() {
       const auto clazz = self();
       const auto methodID = methodID_getApiDescription();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_initBackendSystem() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("initBackendSystem", "initBackendSystem", "", "", "initBackendSystem"), "()Lazo$a;");
    }

    static jobject initBackendSystem() {
       const auto clazz = self();
       const auto methodID = methodID_initBackendSystem();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_initRenderer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("initRenderer", "initRenderer", "initRenderer", "initRenderer", "initRenderer"), "(IZ)V");
    }

    static void initRenderer(const jint& arg0, const jboolean& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_initRenderer();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_setErrorCallback() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("setErrorCallback", "setErrorCallback", "setErrorCallback", "setErrorCallback", "setErrorCallback"), "(Lorg/lwjgl/glfw/GLFWErrorCallbackI;)V");
    }

    static void setErrorCallback(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_setErrorCallback();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_renderCrosshair() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("renderCrosshair", "renderCrosshair", "renderCrosshair", "renderCrosshair", "renderCrosshair"), "(I)V");
    }

    static void renderCrosshair(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_renderCrosshair();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getCapsString() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("getCapsString", "getCapsString", "", "", "getCapsString"), "()Ljava/lang/String;");
    }

    static jobject getCapsString() {
       const auto clazz = self();
       const auto methodID = methodID_getCapsString();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_setupDefaultState() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("setupDefaultState", "setupDefaultState", "setupDefaultState", "setupDefaultState", "setupDefaultState"), "(IIII)V");
    }

    static void setupDefaultState(const jint& arg0, const jint& arg1, const jint& arg2, const jint& arg3) {
       const auto clazz = self();
       const auto methodID = methodID_setupDefaultState();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID_maxSupportedTextureSize() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("maxSupportedTextureSize", "maxSupportedTextureSize", "", "", "maxSupportedTextureSize"), "()I");
    }

    static jint maxSupportedTextureSize() {
       const auto clazz = self();
       const auto methodID = methodID_maxSupportedTextureSize();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID);
    };
    
    static jmethodID methodID_glBindBuffer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("glBindBuffer", "glBindBuffer", "glBindBuffer", "glBindBuffer", "glBindBuffer"), "(II)V");
    }

    static void glBindBuffer(const jint& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_glBindBuffer();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_glBindVertexArray() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("glBindVertexArray", "glBindVertexArray", "glBindVertexArray", "glBindVertexArray", "glBindVertexArray"), "(I)V");
    }

    static void glBindVertexArray(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_glBindVertexArray();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_glBufferData() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("glBufferData", "glBufferData", "glBufferData", "glBufferData", "glBufferData"), "(ILjava/nio/ByteBuffer;I)V");
    }

    static void glBufferData(const jint& arg0, const jobject& arg1, const jint& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_glBufferData();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_glDeleteBuffers() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("glDeleteBuffers", "glDeleteBuffers", "glDeleteBuffers", "glDeleteBuffers", "glDeleteBuffers"), "(I)V");
    }

    static void glDeleteBuffers(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_glDeleteBuffers();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_glDeleteVertexArrays() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("glDeleteVertexArrays", "glDeleteVertexArrays", "glDeleteVertexArrays", "glDeleteVertexArrays", "glDeleteVertexArrays"), "(I)V");
    }

    static void glDeleteVertexArrays(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_glDeleteVertexArrays();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_glUniform1i() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("glUniform1i", "glUniform1i", "glUniform1i", "glUniform1i", "glUniform1i"), "(II)V");
    }

    static void glUniform1i(const jint& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_glUniform1i();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_glUniform1() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("glUniform1", "glUniform1", "glUniform1", "glUniform1", "glUniform1"), "(ILjava/nio/IntBuffer;)V");
    }

    static void glUniform1(const jint& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_glUniform1();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_glUniform2() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("glUniform2", "glUniform2", "glUniform2", "glUniform2", "glUniform2"), "(ILjava/nio/IntBuffer;)V");
    }

    static void glUniform2(const jint& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_glUniform2();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_glUniform3() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("glUniform3", "glUniform3", "glUniform3", "glUniform3", "glUniform3"), "(ILjava/nio/IntBuffer;)V");
    }

    static void glUniform3(const jint& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_glUniform3();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_glUniform4() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("glUniform4", "glUniform4", "glUniform4", "glUniform4", "glUniform4"), "(ILjava/nio/IntBuffer;)V");
    }

    static void glUniform4(const jint& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_glUniform4();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__glUniform1() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("glUniform1", "glUniform1", "glUniform1", "glUniform1", "glUniform1"), "(ILjava/nio/FloatBuffer;)V");
    }

    static void _glUniform1(const jint& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID__glUniform1();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__glUniform2() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("glUniform2", "glUniform2", "glUniform2", "glUniform2", "glUniform2"), "(ILjava/nio/FloatBuffer;)V");
    }

    static void _glUniform2(const jint& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID__glUniform2();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__glUniform3() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("glUniform3", "glUniform3", "glUniform3", "glUniform3", "glUniform3"), "(ILjava/nio/FloatBuffer;)V");
    }

    static void _glUniform3(const jint& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID__glUniform3();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__glUniform4() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("glUniform4", "glUniform4", "glUniform4", "glUniform4", "glUniform4"), "(ILjava/nio/FloatBuffer;)V");
    }

    static void _glUniform4(const jint& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID__glUniform4();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_glUniformMatrix2() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("glUniformMatrix2", "glUniformMatrix2", "glUniformMatrix2", "glUniformMatrix2", "glUniformMatrix2"), "(IZLjava/nio/FloatBuffer;)V");
    }

    static void glUniformMatrix2(const jint& arg0, const jboolean& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_glUniformMatrix2();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_glUniformMatrix3() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("glUniformMatrix3", "glUniformMatrix3", "glUniformMatrix3", "glUniformMatrix3", "glUniformMatrix3"), "(IZLjava/nio/FloatBuffer;)V");
    }

    static void glUniformMatrix3(const jint& arg0, const jboolean& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_glUniformMatrix3();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_glUniformMatrix4() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("glUniformMatrix4", "glUniformMatrix4", "glUniformMatrix4", "glUniformMatrix4", "glUniformMatrix4"), "(IZLjava/nio/FloatBuffer;)V");
    }

    static void glUniformMatrix4(const jint& arg0, const jboolean& arg1, const jobject& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_glUniformMatrix4();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID_setupOverlayColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("setupOverlayColor", "setupOverlayColor", "setupOverlayColor", "setupOverlayColor", "setupOverlayColor"), "(II)V");
    }

    static void setupOverlayColor(const jint& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_setupOverlayColor();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_teardownOverlayColor() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("teardownOverlayColor", "teardownOverlayColor", "", "", "teardownOverlayColor"), "()V");
    }

    static void teardownOverlayColor() {
       const auto clazz = self();
       const auto methodID = methodID_teardownOverlayColor();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID);
    };
    
    static jmethodID methodID_setupLevelDiffuseLighting() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("setupLevelDiffuseLighting", "setupLevelDiffuseLighting", "", "", "setupLevelDiffuseLighting"), "(Lorg/joml/Vector3f;Lorg/joml/Vector3f;)V");
    }

    static void setupLevelDiffuseLighting(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_setupLevelDiffuseLighting();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_setupGuiFlatDiffuseLighting() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("setupGuiFlatDiffuseLighting", "setupGuiFlatDiffuseLighting", "", "", "setupGuiFlatDiffuseLighting"), "(Lorg/joml/Vector3f;Lorg/joml/Vector3f;)V");
    }

    static void setupGuiFlatDiffuseLighting(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_setupGuiFlatDiffuseLighting();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_setupGui3DDiffuseLighting() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("setupGui3DDiffuseLighting", "setupGui3DDiffuseLighting", "", "", "setupGui3DDiffuseLighting"), "(Lorg/joml/Vector3f;Lorg/joml/Vector3f;)V");
    }

    static void setupGui3DDiffuseLighting(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_setupGui3DDiffuseLighting();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_beginInitialization() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("beginInitialization", "beginInitialization", "", "", "beginInitialization"), "()V");
    }

    static void beginInitialization() {
       const auto clazz = self();
       const auto methodID = methodID_beginInitialization();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID);
    };
    
    static jmethodID methodID_finishInitialization() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("finishInitialization", "finishInitialization", "", "", "finishInitialization"), "()V");
    }

    static void finishInitialization() {
       const auto clazz = self();
       const auto methodID = methodID_finishInitialization();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID);
    };
    
    static jmethodID methodID_glGenBuffers() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("glGenBuffers", "glGenBuffers", "glGenBuffers", "glGenBuffers", "glGenBuffers"), "(Ljava/util/function/Consumer;)V");
    }

    static void glGenBuffers(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_glGenBuffers();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_glGenVertexArrays() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("glGenVertexArrays", "glGenVertexArrays", "glGenVertexArrays", "glGenVertexArrays", "glGenVertexArrays"), "(Ljava/util/function/Consumer;)V");
    }

    static void glGenVertexArrays(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_glGenVertexArrays();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_renderThreadTesselator() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("renderThreadTesselator", "renderThreadTesselator", "", "", "renderThreadTesselator"), "()Lfbk;");
    }

    static jobject renderThreadTesselator() {
       const auto clazz = self();
       const auto methodID = methodID_renderThreadTesselator();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_defaultBlendFunc() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("defaultBlendFunc", "defaultBlendFunc", "", "", "defaultBlendFunc"), "()V");
    }

    static void defaultBlendFunc() {
       const auto clazz = self();
       const auto methodID = methodID_defaultBlendFunc();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID);
    };
    
    static jmethodID methodID_runAsFancy() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("runAsFancy", "runAsFancy", "runAsFancy", "runAsFancy", "runAsFancy"), "(Ljava/lang/Runnable;)V");
    }

    static void runAsFancy(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_runAsFancy();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_setShader() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("setShader", "setShader", "setShader", "setShader", "setShader"), "(Ljava/util/function/Supplier;)V");
    }

    static void setShader(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_setShader();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_getShader() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("getShader", "getShader", "", "", "getShader"), "()Lgfn;");
    }

    static jobject getShader() {
       const auto clazz = self();
       const auto methodID = methodID_getShader();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_setShaderTexture() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("setShaderTexture", "setShaderTexture", "setShaderTexture", "setShaderTexture", "setShaderTexture"), "(ILakr;)V");
    }

    static void setShaderTexture(const jint& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_setShaderTexture();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID__setShaderTexture() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("_setShaderTexture", "_setShaderTexture", "_setShaderTexture", "_setShaderTexture", "_setShaderTexture"), "(ILakr;)V");
    }

    static void _setShaderTexture(const jint& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID__setShaderTexture();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID___setShaderTexture() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("setShaderTexture", "setShaderTexture", "setShaderTexture", "setShaderTexture", "setShaderTexture"), "(II)V");
    }

    static void __setShaderTexture(const jint& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID___setShaderTexture();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID____setShaderTexture() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("_setShaderTexture", "_setShaderTexture", "_setShaderTexture", "_setShaderTexture", "_setShaderTexture"), "(II)V");
    }

    static void ___setShaderTexture(const jint& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID____setShaderTexture();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getShaderTexture() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("getShaderTexture", "getShaderTexture", "getShaderTexture", "getShaderTexture", "getShaderTexture"), "(I)I");
    }

    static jint getShaderTexture(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getShaderTexture();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_setProjectionMatrix() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("setProjectionMatrix", "setProjectionMatrix", "setProjectionMatrix", "setProjectionMatrix", "setProjectionMatrix"), "(Lorg/joml/Matrix4f;Lfbq;)V");
    }

    static void setProjectionMatrix(const jobject& arg0, const jobject& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_setProjectionMatrix();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_setTextureMatrix() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("setTextureMatrix", "setTextureMatrix", "setTextureMatrix", "setTextureMatrix", "setTextureMatrix"), "(Lorg/joml/Matrix4f;)V");
    }

    static void setTextureMatrix(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_setTextureMatrix();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_resetTextureMatrix() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("resetTextureMatrix", "resetTextureMatrix", "", "", "resetTextureMatrix"), "()V");
    }

    static void resetTextureMatrix() {
       const auto clazz = self();
       const auto methodID = methodID_resetTextureMatrix();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID);
    };
    
    static jmethodID methodID_applyModelViewMatrix() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("applyModelViewMatrix", "applyModelViewMatrix", "", "", "applyModelViewMatrix"), "()V");
    }

    static void applyModelViewMatrix() {
       const auto clazz = self();
       const auto methodID = methodID_applyModelViewMatrix();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID);
    };
    
    static jmethodID methodID_backupProjectionMatrix() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("backupProjectionMatrix", "backupProjectionMatrix", "", "", "backupProjectionMatrix"), "()V");
    }

    static void backupProjectionMatrix() {
       const auto clazz = self();
       const auto methodID = methodID_backupProjectionMatrix();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID);
    };
    
    static jmethodID methodID__backupProjectionMatrix() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("_backupProjectionMatrix", "_backupProjectionMatrix", "", "", "_backupProjectionMatrix"), "()V");
    }

    static void _backupProjectionMatrix() {
       const auto clazz = self();
       const auto methodID = methodID__backupProjectionMatrix();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID);
    };
    
    static jmethodID methodID_restoreProjectionMatrix() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("restoreProjectionMatrix", "restoreProjectionMatrix", "", "", "restoreProjectionMatrix"), "()V");
    }

    static void restoreProjectionMatrix() {
       const auto clazz = self();
       const auto methodID = methodID_restoreProjectionMatrix();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID);
    };
    
    static jmethodID methodID__restoreProjectionMatrix() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("_restoreProjectionMatrix", "_restoreProjectionMatrix", "", "", "_restoreProjectionMatrix"), "()V");
    }

    static void _restoreProjectionMatrix() {
       const auto clazz = self();
       const auto methodID = methodID__restoreProjectionMatrix();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID);
    };
    
    static jmethodID methodID_getProjectionMatrix() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("getProjectionMatrix", "getProjectionMatrix", "", "", "getProjectionMatrix"), "()Lorg/joml/Matrix4f;");
    }

    static jobject getProjectionMatrix() {
       const auto clazz = self();
       const auto methodID = methodID_getProjectionMatrix();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_getModelViewMatrix() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("getModelViewMatrix", "getModelViewMatrix", "", "", "getModelViewMatrix"), "()Lorg/joml/Matrix4f;");
    }

    static jobject getModelViewMatrix() {
       const auto clazz = self();
       const auto methodID = methodID_getModelViewMatrix();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_getModelViewStack() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("getModelViewStack", "getModelViewStack", "", "", "getModelViewStack"), "()Lorg/joml/Matrix4fStack;");
    }

    static jobject getModelViewStack() {
       const auto clazz = self();
       const auto methodID = methodID_getModelViewStack();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_getTextureMatrix() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("getTextureMatrix", "getTextureMatrix", "", "", "getTextureMatrix"), "()Lorg/joml/Matrix4f;");
    }

    static jobject getTextureMatrix() {
       const auto clazz = self();
       const auto methodID = methodID_getTextureMatrix();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
    static jmethodID methodID_getSequentialBuffer() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("getSequentialBuffer", "getSequentialBuffer", "getSequentialBuffer", "getSequentialBuffer", "getSequentialBuffer"), "(Lfbn$c;)Lcom/mojang/blaze3d/systems/RenderSystem$a;");
    }

    static jobject getSequentialBuffer(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getSequentialBuffer();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_setShaderGameTime() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("setShaderGameTime", "setShaderGameTime", "setShaderGameTime", "setShaderGameTime", "setShaderGameTime"), "(JF)V");
    }

    static void setShaderGameTime(const jlong& arg0, const jfloat& arg1) {
       const auto clazz = self();
       const auto methodID = methodID_setShaderGameTime();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_getShaderGameTime() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("getShaderGameTime", "getShaderGameTime", "", "", "getShaderGameTime"), "()F");
    }

    static jfloat getShaderGameTime() {
       const auto clazz = self();
       const auto methodID = methodID_getShaderGameTime();
       return MinecraftSDK::env->CallStaticFloatMethod(clazz, methodID);
    };
    
    static jmethodID methodID_getVertexSorting() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("getVertexSorting", "getVertexSorting", "", "", "getVertexSorting"), "()Lfbq;");
    }

    static jobject getVertexSorting() {
       const auto clazz = self();
       const auto methodID = methodID_getVertexSorting();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
};

#endif // COM_MOJANG_BLAZE3D_SYSTEMS_RENDERSYSTEM_HPP