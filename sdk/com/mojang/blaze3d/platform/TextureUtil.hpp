// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef COM_MOJANG_BLAZE3D_PLATFORM_TEXTUREUTIL_HPP
#define COM_MOJANG_BLAZE3D_PLATFORM_TEXTUREUTIL_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: com.mojang.blaze3d.platform.TextureUtil
 * Remapped: com/mojang/blaze3d/platform/TextureUtil
 */
namespace TextureUtil {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("com/mojang/blaze3d/platform/TextureUtil", "com/mojang/blaze3d/platform/TextureUtil", "com/mojang/blaze3d/platform/TextureUtil", "com/mojang/blaze3d/platform/TextureUtil", "com/mojang/blaze3d/platform/TextureUtil"));
        }
        return cachedClass;
    };

    // getter for static private field com.mojang.blaze3d.platform.TextureUtil#LOGGER
    [[maybe_unused]] static jobject get_field_LOGGER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("LOGGER", "LOGGER", "", "", "LOGGER"), "Lorg/slf4j/Logger;");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticObjectField(clazz, fieldID);
    };

    // setter for static private field com.mojang.blaze3d.platform.TextureUtil#LOGGER
    [[maybe_unused]] static void set_field_LOGGER(const jobject &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("LOGGER", "LOGGER", "", "", "LOGGER"), "Lorg/slf4j/Logger;");
        return MinecraftSDK::env->SetStaticObjectField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.TextureUtil#MIN_MIPMAP_LEVEL
    [[maybe_unused]] static jint get_field_MIN_MIPMAP_LEVEL() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("MIN_MIPMAP_LEVEL", "MIN_MIPMAP_LEVEL", "", "", "MIN_MIPMAP_LEVEL"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.TextureUtil#MIN_MIPMAP_LEVEL
    [[maybe_unused]] static void set_field_MIN_MIPMAP_LEVEL(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("MIN_MIPMAP_LEVEL", "MIN_MIPMAP_LEVEL", "", "", "MIN_MIPMAP_LEVEL"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static private field com.mojang.blaze3d.platform.TextureUtil#DEFAULT_IMAGE_BUFFER_SIZE
    [[maybe_unused]] static jint get_field_DEFAULT_IMAGE_BUFFER_SIZE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("DEFAULT_IMAGE_BUFFER_SIZE", "DEFAULT_IMAGE_BUFFER_SIZE", "", "", "DEFAULT_IMAGE_BUFFER_SIZE"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static private field com.mojang.blaze3d.platform.TextureUtil#DEFAULT_IMAGE_BUFFER_SIZE
    [[maybe_unused]] static void set_field_DEFAULT_IMAGE_BUFFER_SIZE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("DEFAULT_IMAGE_BUFFER_SIZE", "DEFAULT_IMAGE_BUFFER_SIZE", "", "", "DEFAULT_IMAGE_BUFFER_SIZE"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    static jmethodID methodID_generateTextureId() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("generateTextureId", "generateTextureId", "", "", "generateTextureId"), "()I");
    }

    static jint generateTextureId() {
       const auto clazz = self();
       const auto methodID = methodID_generateTextureId();
       return MinecraftSDK::env->CallStaticIntMethod(clazz, methodID);
    };
    
    static jmethodID methodID_releaseTextureId() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("releaseTextureId", "releaseTextureId", "releaseTextureId", "releaseTextureId", "releaseTextureId"), "(I)V");
    }

    static void releaseTextureId(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_releaseTextureId();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_prepareImage() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("prepareImage", "prepareImage", "prepareImage", "prepareImage", "prepareImage"), "(III)V");
    }

    static void prepareImage(const jint& arg0, const jint& arg1, const jint& arg2) {
       const auto clazz = self();
       const auto methodID = methodID_prepareImage();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2);
    };
    
    static jmethodID methodID__prepareImage() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("prepareImage", "prepareImage", "prepareImage", "prepareImage", "prepareImage"), "(Lfaj$b;III)V");
    }

    static void _prepareImage(const jobject& arg0, const jint& arg1, const jint& arg2, const jint& arg3) {
       const auto clazz = self();
       const auto methodID = methodID__prepareImage();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID___prepareImage() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("prepareImage", "prepareImage", "prepareImage", "prepareImage", "prepareImage"), "(IIII)V");
    }

    static void __prepareImage(const jint& arg0, const jint& arg1, const jint& arg2, const jint& arg3) {
       const auto clazz = self();
       const auto methodID = methodID___prepareImage();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3);
    };
    
    static jmethodID methodID____prepareImage() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("prepareImage", "prepareImage", "prepareImage", "prepareImage", "prepareImage"), "(Lfaj$b;IIII)V");
    }

    static void ___prepareImage(const jobject& arg0, const jint& arg1, const jint& arg2, const jint& arg3, const jint& arg4) {
       const auto clazz = self();
       const auto methodID = methodID____prepareImage();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4);
    };
    
    static jmethodID methodID_bind() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("bind", "bind", "bind", "bind", "bind"), "(I)V");
    }

    static void bind(const jint& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_bind();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID_readResource() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("readResource", "readResource", "readResource", "readResource", "readResource"), "(Ljava/io/InputStream;)Ljava/nio/ByteBuffer;");
    }

    static jobject readResource(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_readResource();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID__readResource() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("readResource", "readResource", "readResource", "readResource", "readResource"), "(Ljava/nio/channels/ReadableByteChannel;I)Ljava/nio/ByteBuffer;");
    }

    static jobject _readResource(const jobject& arg0, const jint& arg1) {
       const auto clazz = self();
       const auto methodID = methodID__readResource();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0, arg1);
    };
    
    static jmethodID methodID_writeAsPNG() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("writeAsPNG", "writeAsPNG", "writeAsPNG", "writeAsPNG", "writeAsPNG"), "(Ljava/nio/file/Path;Ljava/lang/String;IIII)V");
    }

    static void writeAsPNG(const jobject& arg0, const jobject& arg1, const jint& arg2, const jint& arg3, const jint& arg4, const jint& arg5) {
       const auto clazz = self();
       const auto methodID = methodID_writeAsPNG();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4, arg5);
    };
    
    static jmethodID methodID__writeAsPNG() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("writeAsPNG", "writeAsPNG", "writeAsPNG", "writeAsPNG", "writeAsPNG"), "(Ljava/nio/file/Path;Ljava/lang/String;IIIILjava/util/function/IntUnaryOperator;)V");
    }

    static void _writeAsPNG(const jobject& arg0, const jobject& arg1, const jint& arg2, const jint& arg3, const jint& arg4, const jint& arg5, const jobject& arg6) {
       const auto clazz = self();
       const auto methodID = methodID__writeAsPNG();
       MinecraftSDK::env->CallStaticVoidMethod(clazz, methodID, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    };
    
    static jmethodID methodID_getDebugTexturePath() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("getDebugTexturePath", "getDebugTexturePath", "getDebugTexturePath", "getDebugTexturePath", "getDebugTexturePath"), "(Ljava/nio/file/Path;)Ljava/nio/file/Path;");
    }

    static jobject getDebugTexturePath(const jobject& arg0) {
       const auto clazz = self();
       const auto methodID = methodID_getDebugTexturePath();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID, arg0);
    };
    
    static jmethodID methodID__getDebugTexturePath() {
       const auto clazz = self();
       return MinecraftSDK::env->GetStaticMethodID(clazz, MinecraftSDK::getRemapped("getDebugTexturePath", "getDebugTexturePath", "", "", "getDebugTexturePath"), "()Ljava/nio/file/Path;");
    }

    static jobject _getDebugTexturePath() {
       const auto clazz = self();
       const auto methodID = methodID__getDebugTexturePath();
       return MinecraftSDK::env->CallStaticObjectMethod(clazz, methodID);
    };
    
};

#endif // COM_MOJANG_BLAZE3D_PLATFORM_TEXTUREUTIL_HPP