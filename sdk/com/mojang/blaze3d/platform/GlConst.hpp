// WARNING: This code was automatically generated by MinecraftCppSDK.
// It is highly recommended to not modify this file directly.
// Any changes made to this file will be overwritten by the next generation. 

#ifndef COM_MOJANG_BLAZE3D_PLATFORM_GLCONST_HPP
#define COM_MOJANG_BLAZE3D_PLATFORM_GLCONST_HPP
#include <sdk.hpp>


/*
 * Minecraft class
 * Original: com.mojang.blaze3d.platform.GlConst
 * Remapped: com/mojang/blaze3d/platform/GlConst
 */
namespace GlConst {
    static jclass self() {
        static jclass cachedClass = nullptr;
        if (cachedClass == nullptr) {
            cachedClass = MinecraftSDK::env->FindClass(MinecraftSDK::getRemapped("com/mojang/blaze3d/platform/GlConst", "com/mojang/blaze3d/platform/GlConst", "", "", "com/mojang/blaze3d/platform/GlConst"));
        }
        return cachedClass;
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_READ_FRAMEBUFFER
    [[maybe_unused]] static jint get_field_GL_READ_FRAMEBUFFER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_READ_FRAMEBUFFER", "GL_READ_FRAMEBUFFER", "", "", "GL_READ_FRAMEBUFFER"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_READ_FRAMEBUFFER
    [[maybe_unused]] static void set_field_GL_READ_FRAMEBUFFER(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_READ_FRAMEBUFFER", "GL_READ_FRAMEBUFFER", "", "", "GL_READ_FRAMEBUFFER"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_DRAW_FRAMEBUFFER
    [[maybe_unused]] static jint get_field_GL_DRAW_FRAMEBUFFER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_DRAW_FRAMEBUFFER", "GL_DRAW_FRAMEBUFFER", "", "", "GL_DRAW_FRAMEBUFFER"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_DRAW_FRAMEBUFFER
    [[maybe_unused]] static void set_field_GL_DRAW_FRAMEBUFFER(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_DRAW_FRAMEBUFFER", "GL_DRAW_FRAMEBUFFER", "", "", "GL_DRAW_FRAMEBUFFER"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_TRUE
    [[maybe_unused]] static jint get_field_GL_TRUE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_TRUE", "GL_TRUE", "", "", "GL_TRUE"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_TRUE
    [[maybe_unused]] static void set_field_GL_TRUE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_TRUE", "GL_TRUE", "", "", "GL_TRUE"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_FALSE
    [[maybe_unused]] static jint get_field_GL_FALSE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_FALSE", "GL_FALSE", "", "", "GL_FALSE"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_FALSE
    [[maybe_unused]] static void set_field_GL_FALSE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_FALSE", "GL_FALSE", "", "", "GL_FALSE"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_NONE
    [[maybe_unused]] static jint get_field_GL_NONE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_NONE", "GL_NONE", "", "", "GL_NONE"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_NONE
    [[maybe_unused]] static void set_field_GL_NONE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_NONE", "GL_NONE", "", "", "GL_NONE"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_LINES
    [[maybe_unused]] static jint get_field_GL_LINES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_LINES", "GL_LINES", "", "", "GL_LINES"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_LINES
    [[maybe_unused]] static void set_field_GL_LINES(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_LINES", "GL_LINES", "", "", "GL_LINES"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_LINE_STRIP
    [[maybe_unused]] static jint get_field_GL_LINE_STRIP() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_LINE_STRIP", "GL_LINE_STRIP", "", "", "GL_LINE_STRIP"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_LINE_STRIP
    [[maybe_unused]] static void set_field_GL_LINE_STRIP(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_LINE_STRIP", "GL_LINE_STRIP", "", "", "GL_LINE_STRIP"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_TRIANGLE_STRIP
    [[maybe_unused]] static jint get_field_GL_TRIANGLE_STRIP() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_TRIANGLE_STRIP", "GL_TRIANGLE_STRIP", "", "", "GL_TRIANGLE_STRIP"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_TRIANGLE_STRIP
    [[maybe_unused]] static void set_field_GL_TRIANGLE_STRIP(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_TRIANGLE_STRIP", "GL_TRIANGLE_STRIP", "", "", "GL_TRIANGLE_STRIP"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_TRIANGLE_FAN
    [[maybe_unused]] static jint get_field_GL_TRIANGLE_FAN() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_TRIANGLE_FAN", "GL_TRIANGLE_FAN", "", "", "GL_TRIANGLE_FAN"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_TRIANGLE_FAN
    [[maybe_unused]] static void set_field_GL_TRIANGLE_FAN(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_TRIANGLE_FAN", "GL_TRIANGLE_FAN", "", "", "GL_TRIANGLE_FAN"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_TRIANGLES
    [[maybe_unused]] static jint get_field_GL_TRIANGLES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_TRIANGLES", "GL_TRIANGLES", "", "", "GL_TRIANGLES"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_TRIANGLES
    [[maybe_unused]] static void set_field_GL_TRIANGLES(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_TRIANGLES", "GL_TRIANGLES", "", "", "GL_TRIANGLES"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_WRITE_ONLY
    [[maybe_unused]] static jint get_field_GL_WRITE_ONLY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_WRITE_ONLY", "GL_WRITE_ONLY", "", "", "GL_WRITE_ONLY"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_WRITE_ONLY
    [[maybe_unused]] static void set_field_GL_WRITE_ONLY(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_WRITE_ONLY", "GL_WRITE_ONLY", "", "", "GL_WRITE_ONLY"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_EQUAL
    [[maybe_unused]] static jint get_field_GL_EQUAL() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_EQUAL", "GL_EQUAL", "", "", "GL_EQUAL"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_EQUAL
    [[maybe_unused]] static void set_field_GL_EQUAL(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_EQUAL", "GL_EQUAL", "", "", "GL_EQUAL"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_LEQUAL
    [[maybe_unused]] static jint get_field_GL_LEQUAL() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_LEQUAL", "GL_LEQUAL", "", "", "GL_LEQUAL"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_LEQUAL
    [[maybe_unused]] static void set_field_GL_LEQUAL(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_LEQUAL", "GL_LEQUAL", "", "", "GL_LEQUAL"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_GREATER
    [[maybe_unused]] static jint get_field_GL_GREATER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_GREATER", "GL_GREATER", "", "", "GL_GREATER"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_GREATER
    [[maybe_unused]] static void set_field_GL_GREATER(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_GREATER", "GL_GREATER", "", "", "GL_GREATER"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_GEQUAL
    [[maybe_unused]] static jint get_field_GL_GEQUAL() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_GEQUAL", "GL_GEQUAL", "", "", "GL_GEQUAL"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_GEQUAL
    [[maybe_unused]] static void set_field_GL_GEQUAL(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_GEQUAL", "GL_GEQUAL", "", "", "GL_GEQUAL"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_ALWAYS
    [[maybe_unused]] static jint get_field_GL_ALWAYS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_ALWAYS", "GL_ALWAYS", "", "", "GL_ALWAYS"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_ALWAYS
    [[maybe_unused]] static void set_field_GL_ALWAYS(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_ALWAYS", "GL_ALWAYS", "", "", "GL_ALWAYS"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_TEXTURE_MAG_FILTER
    [[maybe_unused]] static jint get_field_GL_TEXTURE_MAG_FILTER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_TEXTURE_MAG_FILTER", "GL_TEXTURE_MAG_FILTER", "", "", "GL_TEXTURE_MAG_FILTER"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_TEXTURE_MAG_FILTER
    [[maybe_unused]] static void set_field_GL_TEXTURE_MAG_FILTER(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_TEXTURE_MAG_FILTER", "GL_TEXTURE_MAG_FILTER", "", "", "GL_TEXTURE_MAG_FILTER"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_TEXTURE_MIN_FILTER
    [[maybe_unused]] static jint get_field_GL_TEXTURE_MIN_FILTER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_TEXTURE_MIN_FILTER", "GL_TEXTURE_MIN_FILTER", "", "", "GL_TEXTURE_MIN_FILTER"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_TEXTURE_MIN_FILTER
    [[maybe_unused]] static void set_field_GL_TEXTURE_MIN_FILTER(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_TEXTURE_MIN_FILTER", "GL_TEXTURE_MIN_FILTER", "", "", "GL_TEXTURE_MIN_FILTER"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_TEXTURE_WRAP_S
    [[maybe_unused]] static jint get_field_GL_TEXTURE_WRAP_S() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_TEXTURE_WRAP_S", "GL_TEXTURE_WRAP_S", "", "", "GL_TEXTURE_WRAP_S"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_TEXTURE_WRAP_S
    [[maybe_unused]] static void set_field_GL_TEXTURE_WRAP_S(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_TEXTURE_WRAP_S", "GL_TEXTURE_WRAP_S", "", "", "GL_TEXTURE_WRAP_S"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_TEXTURE_WRAP_T
    [[maybe_unused]] static jint get_field_GL_TEXTURE_WRAP_T() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_TEXTURE_WRAP_T", "GL_TEXTURE_WRAP_T", "", "", "GL_TEXTURE_WRAP_T"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_TEXTURE_WRAP_T
    [[maybe_unused]] static void set_field_GL_TEXTURE_WRAP_T(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_TEXTURE_WRAP_T", "GL_TEXTURE_WRAP_T", "", "", "GL_TEXTURE_WRAP_T"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_NEAREST
    [[maybe_unused]] static jint get_field_GL_NEAREST() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_NEAREST", "GL_NEAREST", "", "", "GL_NEAREST"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_NEAREST
    [[maybe_unused]] static void set_field_GL_NEAREST(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_NEAREST", "GL_NEAREST", "", "", "GL_NEAREST"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_LINEAR
    [[maybe_unused]] static jint get_field_GL_LINEAR() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_LINEAR", "GL_LINEAR", "", "", "GL_LINEAR"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_LINEAR
    [[maybe_unused]] static void set_field_GL_LINEAR(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_LINEAR", "GL_LINEAR", "", "", "GL_LINEAR"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_NEAREST_MIPMAP_LINEAR
    [[maybe_unused]] static jint get_field_GL_NEAREST_MIPMAP_LINEAR() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_NEAREST_MIPMAP_LINEAR", "GL_NEAREST_MIPMAP_LINEAR", "", "", "GL_NEAREST_MIPMAP_LINEAR"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_NEAREST_MIPMAP_LINEAR
    [[maybe_unused]] static void set_field_GL_NEAREST_MIPMAP_LINEAR(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_NEAREST_MIPMAP_LINEAR", "GL_NEAREST_MIPMAP_LINEAR", "", "", "GL_NEAREST_MIPMAP_LINEAR"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_LINEAR_MIPMAP_LINEAR
    [[maybe_unused]] static jint get_field_GL_LINEAR_MIPMAP_LINEAR() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_LINEAR_MIPMAP_LINEAR", "GL_LINEAR_MIPMAP_LINEAR", "", "", "GL_LINEAR_MIPMAP_LINEAR"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_LINEAR_MIPMAP_LINEAR
    [[maybe_unused]] static void set_field_GL_LINEAR_MIPMAP_LINEAR(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_LINEAR_MIPMAP_LINEAR", "GL_LINEAR_MIPMAP_LINEAR", "", "", "GL_LINEAR_MIPMAP_LINEAR"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_CLAMP_TO_EDGE
    [[maybe_unused]] static jint get_field_GL_CLAMP_TO_EDGE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_CLAMP_TO_EDGE", "GL_CLAMP_TO_EDGE", "", "", "GL_CLAMP_TO_EDGE"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_CLAMP_TO_EDGE
    [[maybe_unused]] static void set_field_GL_CLAMP_TO_EDGE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_CLAMP_TO_EDGE", "GL_CLAMP_TO_EDGE", "", "", "GL_CLAMP_TO_EDGE"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_FRONT
    [[maybe_unused]] static jint get_field_GL_FRONT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_FRONT", "GL_FRONT", "", "", "GL_FRONT"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_FRONT
    [[maybe_unused]] static void set_field_GL_FRONT(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_FRONT", "GL_FRONT", "", "", "GL_FRONT"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_FRONT_AND_BACK
    [[maybe_unused]] static jint get_field_GL_FRONT_AND_BACK() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_FRONT_AND_BACK", "GL_FRONT_AND_BACK", "", "", "GL_FRONT_AND_BACK"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_FRONT_AND_BACK
    [[maybe_unused]] static void set_field_GL_FRONT_AND_BACK(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_FRONT_AND_BACK", "GL_FRONT_AND_BACK", "", "", "GL_FRONT_AND_BACK"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_LINE
    [[maybe_unused]] static jint get_field_GL_LINE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_LINE", "GL_LINE", "", "", "GL_LINE"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_LINE
    [[maybe_unused]] static void set_field_GL_LINE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_LINE", "GL_LINE", "", "", "GL_LINE"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_FILL
    [[maybe_unused]] static jint get_field_GL_FILL() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_FILL", "GL_FILL", "", "", "GL_FILL"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_FILL
    [[maybe_unused]] static void set_field_GL_FILL(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_FILL", "GL_FILL", "", "", "GL_FILL"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_BYTE
    [[maybe_unused]] static jint get_field_GL_BYTE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_BYTE", "GL_BYTE", "", "", "GL_BYTE"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_BYTE
    [[maybe_unused]] static void set_field_GL_BYTE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_BYTE", "GL_BYTE", "", "", "GL_BYTE"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_UNSIGNED_BYTE
    [[maybe_unused]] static jint get_field_GL_UNSIGNED_BYTE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_UNSIGNED_BYTE", "GL_UNSIGNED_BYTE", "", "", "GL_UNSIGNED_BYTE"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_UNSIGNED_BYTE
    [[maybe_unused]] static void set_field_GL_UNSIGNED_BYTE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_UNSIGNED_BYTE", "GL_UNSIGNED_BYTE", "", "", "GL_UNSIGNED_BYTE"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_SHORT
    [[maybe_unused]] static jint get_field_GL_SHORT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_SHORT", "GL_SHORT", "", "", "GL_SHORT"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_SHORT
    [[maybe_unused]] static void set_field_GL_SHORT(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_SHORT", "GL_SHORT", "", "", "GL_SHORT"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_UNSIGNED_SHORT
    [[maybe_unused]] static jint get_field_GL_UNSIGNED_SHORT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_UNSIGNED_SHORT", "GL_UNSIGNED_SHORT", "", "", "GL_UNSIGNED_SHORT"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_UNSIGNED_SHORT
    [[maybe_unused]] static void set_field_GL_UNSIGNED_SHORT(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_UNSIGNED_SHORT", "GL_UNSIGNED_SHORT", "", "", "GL_UNSIGNED_SHORT"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_INT
    [[maybe_unused]] static jint get_field_GL_INT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_INT", "GL_INT", "", "", "GL_INT"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_INT
    [[maybe_unused]] static void set_field_GL_INT(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_INT", "GL_INT", "", "", "GL_INT"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_UNSIGNED_INT
    [[maybe_unused]] static jint get_field_GL_UNSIGNED_INT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_UNSIGNED_INT", "GL_UNSIGNED_INT", "", "", "GL_UNSIGNED_INT"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_UNSIGNED_INT
    [[maybe_unused]] static void set_field_GL_UNSIGNED_INT(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_UNSIGNED_INT", "GL_UNSIGNED_INT", "", "", "GL_UNSIGNED_INT"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_FLOAT
    [[maybe_unused]] static jint get_field_GL_FLOAT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_FLOAT", "GL_FLOAT", "", "", "GL_FLOAT"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_FLOAT
    [[maybe_unused]] static void set_field_GL_FLOAT(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_FLOAT", "GL_FLOAT", "", "", "GL_FLOAT"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_ZERO
    [[maybe_unused]] static jint get_field_GL_ZERO() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_ZERO", "GL_ZERO", "", "", "GL_ZERO"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_ZERO
    [[maybe_unused]] static void set_field_GL_ZERO(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_ZERO", "GL_ZERO", "", "", "GL_ZERO"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_ONE
    [[maybe_unused]] static jint get_field_GL_ONE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_ONE", "GL_ONE", "", "", "GL_ONE"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_ONE
    [[maybe_unused]] static void set_field_GL_ONE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_ONE", "GL_ONE", "", "", "GL_ONE"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_SRC_COLOR
    [[maybe_unused]] static jint get_field_GL_SRC_COLOR() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_SRC_COLOR", "GL_SRC_COLOR", "", "", "GL_SRC_COLOR"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_SRC_COLOR
    [[maybe_unused]] static void set_field_GL_SRC_COLOR(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_SRC_COLOR", "GL_SRC_COLOR", "", "", "GL_SRC_COLOR"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_ONE_MINUS_SRC_COLOR
    [[maybe_unused]] static jint get_field_GL_ONE_MINUS_SRC_COLOR() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_ONE_MINUS_SRC_COLOR", "GL_ONE_MINUS_SRC_COLOR", "", "", "GL_ONE_MINUS_SRC_COLOR"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_ONE_MINUS_SRC_COLOR
    [[maybe_unused]] static void set_field_GL_ONE_MINUS_SRC_COLOR(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_ONE_MINUS_SRC_COLOR", "GL_ONE_MINUS_SRC_COLOR", "", "", "GL_ONE_MINUS_SRC_COLOR"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_SRC_ALPHA
    [[maybe_unused]] static jint get_field_GL_SRC_ALPHA() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_SRC_ALPHA", "GL_SRC_ALPHA", "", "", "GL_SRC_ALPHA"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_SRC_ALPHA
    [[maybe_unused]] static void set_field_GL_SRC_ALPHA(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_SRC_ALPHA", "GL_SRC_ALPHA", "", "", "GL_SRC_ALPHA"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_ONE_MINUS_SRC_ALPHA
    [[maybe_unused]] static jint get_field_GL_ONE_MINUS_SRC_ALPHA() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_ONE_MINUS_SRC_ALPHA", "GL_ONE_MINUS_SRC_ALPHA", "", "", "GL_ONE_MINUS_SRC_ALPHA"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_ONE_MINUS_SRC_ALPHA
    [[maybe_unused]] static void set_field_GL_ONE_MINUS_SRC_ALPHA(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_ONE_MINUS_SRC_ALPHA", "GL_ONE_MINUS_SRC_ALPHA", "", "", "GL_ONE_MINUS_SRC_ALPHA"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_DST_ALPHA
    [[maybe_unused]] static jint get_field_GL_DST_ALPHA() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_DST_ALPHA", "GL_DST_ALPHA", "", "", "GL_DST_ALPHA"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_DST_ALPHA
    [[maybe_unused]] static void set_field_GL_DST_ALPHA(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_DST_ALPHA", "GL_DST_ALPHA", "", "", "GL_DST_ALPHA"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_ONE_MINUS_DST_ALPHA
    [[maybe_unused]] static jint get_field_GL_ONE_MINUS_DST_ALPHA() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_ONE_MINUS_DST_ALPHA", "GL_ONE_MINUS_DST_ALPHA", "", "", "GL_ONE_MINUS_DST_ALPHA"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_ONE_MINUS_DST_ALPHA
    [[maybe_unused]] static void set_field_GL_ONE_MINUS_DST_ALPHA(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_ONE_MINUS_DST_ALPHA", "GL_ONE_MINUS_DST_ALPHA", "", "", "GL_ONE_MINUS_DST_ALPHA"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_DST_COLOR
    [[maybe_unused]] static jint get_field_GL_DST_COLOR() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_DST_COLOR", "GL_DST_COLOR", "", "", "GL_DST_COLOR"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_DST_COLOR
    [[maybe_unused]] static void set_field_GL_DST_COLOR(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_DST_COLOR", "GL_DST_COLOR", "", "", "GL_DST_COLOR"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_ONE_MINUS_DST_COLOR
    [[maybe_unused]] static jint get_field_GL_ONE_MINUS_DST_COLOR() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_ONE_MINUS_DST_COLOR", "GL_ONE_MINUS_DST_COLOR", "", "", "GL_ONE_MINUS_DST_COLOR"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_ONE_MINUS_DST_COLOR
    [[maybe_unused]] static void set_field_GL_ONE_MINUS_DST_COLOR(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_ONE_MINUS_DST_COLOR", "GL_ONE_MINUS_DST_COLOR", "", "", "GL_ONE_MINUS_DST_COLOR"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_REPLACE
    [[maybe_unused]] static jint get_field_GL_REPLACE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_REPLACE", "GL_REPLACE", "", "", "GL_REPLACE"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_REPLACE
    [[maybe_unused]] static void set_field_GL_REPLACE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_REPLACE", "GL_REPLACE", "", "", "GL_REPLACE"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_DEPTH_BUFFER_BIT
    [[maybe_unused]] static jint get_field_GL_DEPTH_BUFFER_BIT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_DEPTH_BUFFER_BIT", "GL_DEPTH_BUFFER_BIT", "", "", "GL_DEPTH_BUFFER_BIT"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_DEPTH_BUFFER_BIT
    [[maybe_unused]] static void set_field_GL_DEPTH_BUFFER_BIT(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_DEPTH_BUFFER_BIT", "GL_DEPTH_BUFFER_BIT", "", "", "GL_DEPTH_BUFFER_BIT"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_COLOR_BUFFER_BIT
    [[maybe_unused]] static jint get_field_GL_COLOR_BUFFER_BIT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_COLOR_BUFFER_BIT", "GL_COLOR_BUFFER_BIT", "", "", "GL_COLOR_BUFFER_BIT"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_COLOR_BUFFER_BIT
    [[maybe_unused]] static void set_field_GL_COLOR_BUFFER_BIT(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_COLOR_BUFFER_BIT", "GL_COLOR_BUFFER_BIT", "", "", "GL_COLOR_BUFFER_BIT"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_RGBA8
    [[maybe_unused]] static jint get_field_GL_RGBA8() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_RGBA8", "GL_RGBA8", "", "", "GL_RGBA8"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_RGBA8
    [[maybe_unused]] static void set_field_GL_RGBA8(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_RGBA8", "GL_RGBA8", "", "", "GL_RGBA8"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_PROXY_TEXTURE_2D
    [[maybe_unused]] static jint get_field_GL_PROXY_TEXTURE_2D() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_PROXY_TEXTURE_2D", "GL_PROXY_TEXTURE_2D", "", "", "GL_PROXY_TEXTURE_2D"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_PROXY_TEXTURE_2D
    [[maybe_unused]] static void set_field_GL_PROXY_TEXTURE_2D(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_PROXY_TEXTURE_2D", "GL_PROXY_TEXTURE_2D", "", "", "GL_PROXY_TEXTURE_2D"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_RGBA
    [[maybe_unused]] static jint get_field_GL_RGBA() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_RGBA", "GL_RGBA", "", "", "GL_RGBA"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_RGBA
    [[maybe_unused]] static void set_field_GL_RGBA(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_RGBA", "GL_RGBA", "", "", "GL_RGBA"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_TEXTURE_WIDTH
    [[maybe_unused]] static jint get_field_GL_TEXTURE_WIDTH() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_TEXTURE_WIDTH", "GL_TEXTURE_WIDTH", "", "", "GL_TEXTURE_WIDTH"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_TEXTURE_WIDTH
    [[maybe_unused]] static void set_field_GL_TEXTURE_WIDTH(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_TEXTURE_WIDTH", "GL_TEXTURE_WIDTH", "", "", "GL_TEXTURE_WIDTH"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_BGR
    [[maybe_unused]] static jint get_field_GL_BGR() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_BGR", "GL_BGR", "", "", "GL_BGR"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_BGR
    [[maybe_unused]] static void set_field_GL_BGR(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_BGR", "GL_BGR", "", "", "GL_BGR"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_FUNC_ADD
    [[maybe_unused]] static jint get_field_GL_FUNC_ADD() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_FUNC_ADD", "GL_FUNC_ADD", "", "", "GL_FUNC_ADD"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_FUNC_ADD
    [[maybe_unused]] static void set_field_GL_FUNC_ADD(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_FUNC_ADD", "GL_FUNC_ADD", "", "", "GL_FUNC_ADD"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_MIN
    [[maybe_unused]] static jint get_field_GL_MIN() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_MIN", "GL_MIN", "", "", "GL_MIN"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_MIN
    [[maybe_unused]] static void set_field_GL_MIN(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_MIN", "GL_MIN", "", "", "GL_MIN"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_MAX
    [[maybe_unused]] static jint get_field_GL_MAX() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_MAX", "GL_MAX", "", "", "GL_MAX"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_MAX
    [[maybe_unused]] static void set_field_GL_MAX(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_MAX", "GL_MAX", "", "", "GL_MAX"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_FUNC_SUBTRACT
    [[maybe_unused]] static jint get_field_GL_FUNC_SUBTRACT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_FUNC_SUBTRACT", "GL_FUNC_SUBTRACT", "", "", "GL_FUNC_SUBTRACT"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_FUNC_SUBTRACT
    [[maybe_unused]] static void set_field_GL_FUNC_SUBTRACT(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_FUNC_SUBTRACT", "GL_FUNC_SUBTRACT", "", "", "GL_FUNC_SUBTRACT"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_FUNC_REVERSE_SUBTRACT
    [[maybe_unused]] static jint get_field_GL_FUNC_REVERSE_SUBTRACT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_FUNC_REVERSE_SUBTRACT", "GL_FUNC_REVERSE_SUBTRACT", "", "", "GL_FUNC_REVERSE_SUBTRACT"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_FUNC_REVERSE_SUBTRACT
    [[maybe_unused]] static void set_field_GL_FUNC_REVERSE_SUBTRACT(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_FUNC_REVERSE_SUBTRACT", "GL_FUNC_REVERSE_SUBTRACT", "", "", "GL_FUNC_REVERSE_SUBTRACT"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_DEPTH_COMPONENT24
    [[maybe_unused]] static jint get_field_GL_DEPTH_COMPONENT24() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_DEPTH_COMPONENT24", "GL_DEPTH_COMPONENT24", "", "", "GL_DEPTH_COMPONENT24"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_DEPTH_COMPONENT24
    [[maybe_unused]] static void set_field_GL_DEPTH_COMPONENT24(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_DEPTH_COMPONENT24", "GL_DEPTH_COMPONENT24", "", "", "GL_DEPTH_COMPONENT24"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_STATIC_DRAW
    [[maybe_unused]] static jint get_field_GL_STATIC_DRAW() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_STATIC_DRAW", "GL_STATIC_DRAW", "", "", "GL_STATIC_DRAW"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_STATIC_DRAW
    [[maybe_unused]] static void set_field_GL_STATIC_DRAW(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_STATIC_DRAW", "GL_STATIC_DRAW", "", "", "GL_STATIC_DRAW"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_DYNAMIC_DRAW
    [[maybe_unused]] static jint get_field_GL_DYNAMIC_DRAW() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_DYNAMIC_DRAW", "GL_DYNAMIC_DRAW", "", "", "GL_DYNAMIC_DRAW"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_DYNAMIC_DRAW
    [[maybe_unused]] static void set_field_GL_DYNAMIC_DRAW(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_DYNAMIC_DRAW", "GL_DYNAMIC_DRAW", "", "", "GL_DYNAMIC_DRAW"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_UNPACK_SWAP_BYTES
    [[maybe_unused]] static jint get_field_GL_UNPACK_SWAP_BYTES() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_UNPACK_SWAP_BYTES", "GL_UNPACK_SWAP_BYTES", "", "", "GL_UNPACK_SWAP_BYTES"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_UNPACK_SWAP_BYTES
    [[maybe_unused]] static void set_field_GL_UNPACK_SWAP_BYTES(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_UNPACK_SWAP_BYTES", "GL_UNPACK_SWAP_BYTES", "", "", "GL_UNPACK_SWAP_BYTES"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_UNPACK_LSB_FIRST
    [[maybe_unused]] static jint get_field_GL_UNPACK_LSB_FIRST() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_UNPACK_LSB_FIRST", "GL_UNPACK_LSB_FIRST", "", "", "GL_UNPACK_LSB_FIRST"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_UNPACK_LSB_FIRST
    [[maybe_unused]] static void set_field_GL_UNPACK_LSB_FIRST(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_UNPACK_LSB_FIRST", "GL_UNPACK_LSB_FIRST", "", "", "GL_UNPACK_LSB_FIRST"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_UNPACK_ROW_LENGTH
    [[maybe_unused]] static jint get_field_GL_UNPACK_ROW_LENGTH() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_UNPACK_ROW_LENGTH", "GL_UNPACK_ROW_LENGTH", "", "", "GL_UNPACK_ROW_LENGTH"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_UNPACK_ROW_LENGTH
    [[maybe_unused]] static void set_field_GL_UNPACK_ROW_LENGTH(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_UNPACK_ROW_LENGTH", "GL_UNPACK_ROW_LENGTH", "", "", "GL_UNPACK_ROW_LENGTH"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_UNPACK_SKIP_ROWS
    [[maybe_unused]] static jint get_field_GL_UNPACK_SKIP_ROWS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_UNPACK_SKIP_ROWS", "GL_UNPACK_SKIP_ROWS", "", "", "GL_UNPACK_SKIP_ROWS"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_UNPACK_SKIP_ROWS
    [[maybe_unused]] static void set_field_GL_UNPACK_SKIP_ROWS(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_UNPACK_SKIP_ROWS", "GL_UNPACK_SKIP_ROWS", "", "", "GL_UNPACK_SKIP_ROWS"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_UNPACK_SKIP_PIXELS
    [[maybe_unused]] static jint get_field_GL_UNPACK_SKIP_PIXELS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_UNPACK_SKIP_PIXELS", "GL_UNPACK_SKIP_PIXELS", "", "", "GL_UNPACK_SKIP_PIXELS"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_UNPACK_SKIP_PIXELS
    [[maybe_unused]] static void set_field_GL_UNPACK_SKIP_PIXELS(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_UNPACK_SKIP_PIXELS", "GL_UNPACK_SKIP_PIXELS", "", "", "GL_UNPACK_SKIP_PIXELS"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_UNPACK_ALIGNMENT
    [[maybe_unused]] static jint get_field_GL_UNPACK_ALIGNMENT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_UNPACK_ALIGNMENT", "GL_UNPACK_ALIGNMENT", "", "", "GL_UNPACK_ALIGNMENT"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_UNPACK_ALIGNMENT
    [[maybe_unused]] static void set_field_GL_UNPACK_ALIGNMENT(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_UNPACK_ALIGNMENT", "GL_UNPACK_ALIGNMENT", "", "", "GL_UNPACK_ALIGNMENT"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_PACK_ALIGNMENT
    [[maybe_unused]] static jint get_field_GL_PACK_ALIGNMENT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_PACK_ALIGNMENT", "GL_PACK_ALIGNMENT", "", "", "GL_PACK_ALIGNMENT"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_PACK_ALIGNMENT
    [[maybe_unused]] static void set_field_GL_PACK_ALIGNMENT(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_PACK_ALIGNMENT", "GL_PACK_ALIGNMENT", "", "", "GL_PACK_ALIGNMENT"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_MAX_TEXTURE_SIZE
    [[maybe_unused]] static jint get_field_GL_MAX_TEXTURE_SIZE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_MAX_TEXTURE_SIZE", "GL_MAX_TEXTURE_SIZE", "", "", "GL_MAX_TEXTURE_SIZE"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_MAX_TEXTURE_SIZE
    [[maybe_unused]] static void set_field_GL_MAX_TEXTURE_SIZE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_MAX_TEXTURE_SIZE", "GL_MAX_TEXTURE_SIZE", "", "", "GL_MAX_TEXTURE_SIZE"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_TEXTURE_2D
    [[maybe_unused]] static jint get_field_GL_TEXTURE_2D() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_TEXTURE_2D", "GL_TEXTURE_2D", "", "", "GL_TEXTURE_2D"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_TEXTURE_2D
    [[maybe_unused]] static void set_field_GL_TEXTURE_2D(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_TEXTURE_2D", "GL_TEXTURE_2D", "", "", "GL_TEXTURE_2D"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_DEPTH_COMPONENT
    [[maybe_unused]] static jint get_field_GL_DEPTH_COMPONENT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_DEPTH_COMPONENT", "GL_DEPTH_COMPONENT", "", "", "GL_DEPTH_COMPONENT"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_DEPTH_COMPONENT
    [[maybe_unused]] static void set_field_GL_DEPTH_COMPONENT(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_DEPTH_COMPONENT", "GL_DEPTH_COMPONENT", "", "", "GL_DEPTH_COMPONENT"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_DEPTH_COMPONENT32
    [[maybe_unused]] static jint get_field_GL_DEPTH_COMPONENT32() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_DEPTH_COMPONENT32", "GL_DEPTH_COMPONENT32", "", "", "GL_DEPTH_COMPONENT32"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_DEPTH_COMPONENT32
    [[maybe_unused]] static void set_field_GL_DEPTH_COMPONENT32(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_DEPTH_COMPONENT32", "GL_DEPTH_COMPONENT32", "", "", "GL_DEPTH_COMPONENT32"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_FRAMEBUFFER
    [[maybe_unused]] static jint get_field_GL_FRAMEBUFFER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_FRAMEBUFFER", "GL_FRAMEBUFFER", "", "", "GL_FRAMEBUFFER"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_FRAMEBUFFER
    [[maybe_unused]] static void set_field_GL_FRAMEBUFFER(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_FRAMEBUFFER", "GL_FRAMEBUFFER", "", "", "GL_FRAMEBUFFER"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_RENDERBUFFER
    [[maybe_unused]] static jint get_field_GL_RENDERBUFFER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_RENDERBUFFER", "GL_RENDERBUFFER", "", "", "GL_RENDERBUFFER"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_RENDERBUFFER
    [[maybe_unused]] static void set_field_GL_RENDERBUFFER(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_RENDERBUFFER", "GL_RENDERBUFFER", "", "", "GL_RENDERBUFFER"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_COLOR_ATTACHMENT0
    [[maybe_unused]] static jint get_field_GL_COLOR_ATTACHMENT0() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_COLOR_ATTACHMENT0", "GL_COLOR_ATTACHMENT0", "", "", "GL_COLOR_ATTACHMENT0"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_COLOR_ATTACHMENT0
    [[maybe_unused]] static void set_field_GL_COLOR_ATTACHMENT0(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_COLOR_ATTACHMENT0", "GL_COLOR_ATTACHMENT0", "", "", "GL_COLOR_ATTACHMENT0"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_DEPTH_ATTACHMENT
    [[maybe_unused]] static jint get_field_GL_DEPTH_ATTACHMENT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_DEPTH_ATTACHMENT", "GL_DEPTH_ATTACHMENT", "", "", "GL_DEPTH_ATTACHMENT"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_DEPTH_ATTACHMENT
    [[maybe_unused]] static void set_field_GL_DEPTH_ATTACHMENT(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_DEPTH_ATTACHMENT", "GL_DEPTH_ATTACHMENT", "", "", "GL_DEPTH_ATTACHMENT"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_FRAMEBUFFER_COMPLETE
    [[maybe_unused]] static jint get_field_GL_FRAMEBUFFER_COMPLETE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_FRAMEBUFFER_COMPLETE", "GL_FRAMEBUFFER_COMPLETE", "", "", "GL_FRAMEBUFFER_COMPLETE"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_FRAMEBUFFER_COMPLETE
    [[maybe_unused]] static void set_field_GL_FRAMEBUFFER_COMPLETE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_FRAMEBUFFER_COMPLETE", "GL_FRAMEBUFFER_COMPLETE", "", "", "GL_FRAMEBUFFER_COMPLETE"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
    [[maybe_unused]] static jint get_field_GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT", "GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT", "", "", "GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
    [[maybe_unused]] static void set_field_GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT", "GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT", "", "", "GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
    [[maybe_unused]] static jint get_field_GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT", "GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT", "", "", "GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
    [[maybe_unused]] static void set_field_GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT", "GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT", "", "", "GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
    [[maybe_unused]] static jint get_field_GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER", "GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER", "", "", "GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
    [[maybe_unused]] static void set_field_GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER", "GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER", "", "", "GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
    [[maybe_unused]] static jint get_field_GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER", "GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER", "", "", "GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
    [[maybe_unused]] static void set_field_GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER", "GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER", "", "", "GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_FRAMEBUFFER_UNSUPPORTED
    [[maybe_unused]] static jint get_field_GL_FRAMEBUFFER_UNSUPPORTED() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_FRAMEBUFFER_UNSUPPORTED", "GL_FRAMEBUFFER_UNSUPPORTED", "", "", "GL_FRAMEBUFFER_UNSUPPORTED"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_FRAMEBUFFER_UNSUPPORTED
    [[maybe_unused]] static void set_field_GL_FRAMEBUFFER_UNSUPPORTED(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_FRAMEBUFFER_UNSUPPORTED", "GL_FRAMEBUFFER_UNSUPPORTED", "", "", "GL_FRAMEBUFFER_UNSUPPORTED"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_LINK_STATUS
    [[maybe_unused]] static jint get_field_GL_LINK_STATUS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_LINK_STATUS", "GL_LINK_STATUS", "", "", "GL_LINK_STATUS"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_LINK_STATUS
    [[maybe_unused]] static void set_field_GL_LINK_STATUS(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_LINK_STATUS", "GL_LINK_STATUS", "", "", "GL_LINK_STATUS"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_COMPILE_STATUS
    [[maybe_unused]] static jint get_field_GL_COMPILE_STATUS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_COMPILE_STATUS", "GL_COMPILE_STATUS", "", "", "GL_COMPILE_STATUS"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_COMPILE_STATUS
    [[maybe_unused]] static void set_field_GL_COMPILE_STATUS(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_COMPILE_STATUS", "GL_COMPILE_STATUS", "", "", "GL_COMPILE_STATUS"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_VERTEX_SHADER
    [[maybe_unused]] static jint get_field_GL_VERTEX_SHADER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_VERTEX_SHADER", "GL_VERTEX_SHADER", "", "", "GL_VERTEX_SHADER"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_VERTEX_SHADER
    [[maybe_unused]] static void set_field_GL_VERTEX_SHADER(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_VERTEX_SHADER", "GL_VERTEX_SHADER", "", "", "GL_VERTEX_SHADER"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_FRAGMENT_SHADER
    [[maybe_unused]] static jint get_field_GL_FRAGMENT_SHADER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_FRAGMENT_SHADER", "GL_FRAGMENT_SHADER", "", "", "GL_FRAGMENT_SHADER"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_FRAGMENT_SHADER
    [[maybe_unused]] static void set_field_GL_FRAGMENT_SHADER(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_FRAGMENT_SHADER", "GL_FRAGMENT_SHADER", "", "", "GL_FRAGMENT_SHADER"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_TEXTURE0
    [[maybe_unused]] static jint get_field_GL_TEXTURE0() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_TEXTURE0", "GL_TEXTURE0", "", "", "GL_TEXTURE0"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_TEXTURE0
    [[maybe_unused]] static void set_field_GL_TEXTURE0(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_TEXTURE0", "GL_TEXTURE0", "", "", "GL_TEXTURE0"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_TEXTURE1
    [[maybe_unused]] static jint get_field_GL_TEXTURE1() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_TEXTURE1", "GL_TEXTURE1", "", "", "GL_TEXTURE1"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_TEXTURE1
    [[maybe_unused]] static void set_field_GL_TEXTURE1(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_TEXTURE1", "GL_TEXTURE1", "", "", "GL_TEXTURE1"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_TEXTURE2
    [[maybe_unused]] static jint get_field_GL_TEXTURE2() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_TEXTURE2", "GL_TEXTURE2", "", "", "GL_TEXTURE2"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_TEXTURE2
    [[maybe_unused]] static void set_field_GL_TEXTURE2(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_TEXTURE2", "GL_TEXTURE2", "", "", "GL_TEXTURE2"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_DEPTH_TEXTURE_MODE
    [[maybe_unused]] static jint get_field_GL_DEPTH_TEXTURE_MODE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_DEPTH_TEXTURE_MODE", "GL_DEPTH_TEXTURE_MODE", "", "", "GL_DEPTH_TEXTURE_MODE"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_DEPTH_TEXTURE_MODE
    [[maybe_unused]] static void set_field_GL_DEPTH_TEXTURE_MODE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_DEPTH_TEXTURE_MODE", "GL_DEPTH_TEXTURE_MODE", "", "", "GL_DEPTH_TEXTURE_MODE"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_TEXTURE_COMPARE_MODE
    [[maybe_unused]] static jint get_field_GL_TEXTURE_COMPARE_MODE() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_TEXTURE_COMPARE_MODE", "GL_TEXTURE_COMPARE_MODE", "", "", "GL_TEXTURE_COMPARE_MODE"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_TEXTURE_COMPARE_MODE
    [[maybe_unused]] static void set_field_GL_TEXTURE_COMPARE_MODE(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_TEXTURE_COMPARE_MODE", "GL_TEXTURE_COMPARE_MODE", "", "", "GL_TEXTURE_COMPARE_MODE"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_ARRAY_BUFFER
    [[maybe_unused]] static jint get_field_GL_ARRAY_BUFFER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_ARRAY_BUFFER", "GL_ARRAY_BUFFER", "", "", "GL_ARRAY_BUFFER"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_ARRAY_BUFFER
    [[maybe_unused]] static void set_field_GL_ARRAY_BUFFER(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_ARRAY_BUFFER", "GL_ARRAY_BUFFER", "", "", "GL_ARRAY_BUFFER"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_ELEMENT_ARRAY_BUFFER
    [[maybe_unused]] static jint get_field_GL_ELEMENT_ARRAY_BUFFER() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_ELEMENT_ARRAY_BUFFER", "GL_ELEMENT_ARRAY_BUFFER", "", "", "GL_ELEMENT_ARRAY_BUFFER"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_ELEMENT_ARRAY_BUFFER
    [[maybe_unused]] static void set_field_GL_ELEMENT_ARRAY_BUFFER(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_ELEMENT_ARRAY_BUFFER", "GL_ELEMENT_ARRAY_BUFFER", "", "", "GL_ELEMENT_ARRAY_BUFFER"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_ALPHA_BIAS
    [[maybe_unused]] static jint get_field_GL_ALPHA_BIAS() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_ALPHA_BIAS", "GL_ALPHA_BIAS", "", "", "GL_ALPHA_BIAS"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_ALPHA_BIAS
    [[maybe_unused]] static void set_field_GL_ALPHA_BIAS(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_ALPHA_BIAS", "GL_ALPHA_BIAS", "", "", "GL_ALPHA_BIAS"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_RGB
    [[maybe_unused]] static jint get_field_GL_RGB() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_RGB", "GL_RGB", "", "", "GL_RGB"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_RGB
    [[maybe_unused]] static void set_field_GL_RGB(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_RGB", "GL_RGB", "", "", "GL_RGB"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_RG
    [[maybe_unused]] static jint get_field_GL_RG() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_RG", "GL_RG", "", "", "GL_RG"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_RG
    [[maybe_unused]] static void set_field_GL_RG(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_RG", "GL_RG", "", "", "GL_RG"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_RED
    [[maybe_unused]] static jint get_field_GL_RED() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_RED", "GL_RED", "", "", "GL_RED"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_RED
    [[maybe_unused]] static void set_field_GL_RED(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_RED", "GL_RED", "", "", "GL_RED"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

    // getter for static public field com.mojang.blaze3d.platform.GlConst#GL_OUT_OF_MEMORY
    [[maybe_unused]] static jint get_field_GL_OUT_OF_MEMORY() {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_OUT_OF_MEMORY", "GL_OUT_OF_MEMORY", "", "", "GL_OUT_OF_MEMORY"), "I");
        if(fieldID == nullptr) { return 0; }
        
        return MinecraftSDK::env->GetStaticIntField(clazz, fieldID);
    };

    // setter for static public field com.mojang.blaze3d.platform.GlConst#GL_OUT_OF_MEMORY
    [[maybe_unused]] static void set_field_GL_OUT_OF_MEMORY(const jint &value) {
        const auto clazz = self();
        const auto fieldID = MinecraftSDK::env->GetStaticFieldID(clazz, MinecraftSDK::getRemapped("GL_OUT_OF_MEMORY", "GL_OUT_OF_MEMORY", "", "", "GL_OUT_OF_MEMORY"), "I");
        return MinecraftSDK::env->SetStaticIntField(clazz, fieldID, value);
    };

};

#endif // COM_MOJANG_BLAZE3D_PLATFORM_GLCONST_HPP